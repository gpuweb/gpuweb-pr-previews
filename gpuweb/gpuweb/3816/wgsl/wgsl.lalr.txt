=Grammar:

_blankspace:/[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_comment:/\/\/.*/
access_mode:
   'read'
 | 'read_write'
 | 'write'
additive_expression:
   additive_expression additive_operator multiplicative_expression
 | multiplicative_expression
additive_operator:
   '+'
 | '-'
address_space:
   'function'
 | 'private'
 | 'storage'
 | 'uniform'
 | 'workgroup'
argument_expression_list:
   '(' expression_comma_list ? ')'
array_type_specifier:
   'array' '<' type_specifier ( ',' element_count_expression )? '>'
assignment_statement:
   '_' '=' expression
 | lhs_expression ( '=' | compound_assignment_operator ) expression
assignment_statement/0.1:
   '='
 | compound_assignment_operator
attrib_end:
   ',' ? ')'
attribute:
   '@' 'align' '(' expression attrib_end
 | '@' 'binding' '(' expression attrib_end
 | '@' 'builtin' '(' builtin_value_name attrib_end
 | '@' 'compute'
 | '@' 'const'
 | '@' 'diagnostic' diagnostic_control
 | '@' 'fragment'
 | '@' 'group' '(' expression attrib_end
 | '@' 'id' '(' expression attrib_end
 | '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end
 | '@' 'interpolate' '(' interpolation_type_name attrib_end
 | '@' 'invariant'
 | '@' 'location' '(' expression attrib_end
 | '@' 'size' '(' expression attrib_end
 | '@' 'vertex'
 | '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression attrib_end
binary_and_expression:
   binary_and_expression '&' unary_expression
 | unary_expression
binary_or_expression:
   binary_or_expression '|' unary_expression
 | unary_expression
binary_xor_expression:
   binary_xor_expression '^' unary_expression
 | unary_expression
bitwise_expression:
   binary_and_expression '&' unary_expression
 | binary_or_expression '|' unary_expression
 | binary_xor_expression '^' unary_expression
bool_literal:
   'false'
 | 'true'
break_if_statement:
   'break' 'if' expression ';'
break_statement:'break'
builtin_value_name:
   'frag_depth'
 | 'front_facing'
 | 'global_invocation_id'
 | 'instance_index'
 | 'local_invocation_id'
 | 'local_invocation_index'
 | 'num_workgroups'
 | 'position'
 | 'sample_index'
 | 'sample_mask'
 | 'vertex_index'
 | 'workgroup_id'
call_expression:call_phrase
call_phrase:
   callable argument_expression_list
callable:
   'array'
 | ident
 | mat_prefix
 | type_specifier_without_ident
 | vec_prefix
case_clause:
   'case' case_selectors ':' ? compound_statement
case_selector:
   'default'
 | expression
case_selectors:
   case_selector ( ',' case_selector ) * ? ',' ?
case_selectors/0.1/0/0.0:
   ',' case_selector
component_or_swizzle_specifier:
   '.' member_ident component_or_swizzle_specifier ?
 | '.' swizzle_name component_or_swizzle_specifier ?
 | '[' expression ']' component_or_swizzle_specifier ?
compound_assignment_operator:
   '%='
 | '&='
 | '*='
 | '+='
 | '-='
 | '/='
 | '<<='
 | '>>='
 | '^='
 | '|='
compound_statement:
   attribute * ? '{' statement * ? '}'
const_assert_statement:
   'const_assert' expression
continue_statement:'continue'
continuing_compound_statement:
   attribute * ? '{' statement * ? break_if_statement ? '}'
continuing_statement:
   'continuing' continuing_compound_statement
core_lhs_expression:
   '(' lhs_expression ')'
 | ident
decimal_float_literal:
   /0[fh]/
 | /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/
 | /[0-9]+[eE][+-]?[0-9]+[fh]?/
 | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/
 | /[1-9][0-9]*[fh]/
decimal_int_literal:
   /0[iu]?/
 | /[1-9][0-9]*[iu]?/
decrement_statement:
   lhs_expression '--'
default_alone_clause:
   'default' ':' ? compound_statement
depth_texture_type:
   'texture_depth_2d'
 | 'texture_depth_2d_array'
 | 'texture_depth_cube'
 | 'texture_depth_cube_array'
 | 'texture_depth_multisampled_2d'
diagnostic_control:
   '(' severity_control_name ',' diagnostic_rule_name attrib_end
diagnostic_directive:
   'diagnostic' diagnostic_control ';'
diagnostic_rule_name:ident_pattern_token
element_count_expression:
   additive_expression
 | bitwise_expression
else_clause:
   'else' compound_statement
else_if_clause:
   'else' 'if' expression compound_statement
enable_directive:
   'enable' extension_name ';'
expression:
   bitwise_expression
 | relational_expression
 | short_circuit_and_expression '&&' relational_expression
 | short_circuit_or_expression '||' relational_expression
expression_comma_list:
   expression ( ',' expression ) * ? ',' ?
expression_comma_list/0.1/0/0.0:
   ',' expression
extension_name:'f16'
float_literal:
   decimal_float_literal
 | hex_float_literal
for_header:
   for_init ? ';' expression ? ';' for_update ?
for_init:
   func_call_statement
 | variable_statement
 | variable_updating_statement
for_statement:
   attribute * ? 'for' '(' for_header ')' compound_statement
for_update:
   func_call_statement
 | variable_updating_statement
func_call_statement:call_phrase
function_decl:
   attribute * ? function_header compound_statement
function_header:
   'fn' ident '(' param_list ? ')' ( '->' attribute * ? type_specifier )?
global_constant_decl:
   'const' optionally_typed_ident '=' expression
 | attribute * ? 'override' optionally_typed_ident ( '=' expression )?
global_decl:
   ';'
 | const_assert_statement ';'
 | function_decl
 | global_constant_decl ';'
 | global_variable_decl ';'
 | struct_decl
 | type_alias_decl ';'
global_directive:
   diagnostic_directive
 | enable_directive
global_variable_decl:
   attribute * ? variable_decl ( '=' expression )?
hex_float_literal:
   /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/
 | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
 | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/
hex_int_literal:/0[xX][0-9a-fA-F]+[iu]?/
ident:ident_pattern_token
ident_pattern_token:/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if_clause:
   'if' expression compound_statement
if_statement:
   attribute * ? if_clause else_if_clause * ? else_clause ?
increment_statement:
   lhs_expression '++'
int_literal:
   decimal_int_literal
 | hex_int_literal
interpolation_sample_name:
   'center'
 | 'centroid'
 | 'sample'
interpolation_type_name:
   'flat'
 | 'linear'
 | 'perspective'
lhs_expression:
   '&' lhs_expression
 | '*' lhs_expression
 | core_lhs_expression component_or_swizzle_specifier ?
literal:
   bool_literal
 | float_literal
 | int_literal
loop_statement:
   attribute * ? 'loop' attribute * ? '{' statement * ? continuing_statement ? '}'
mat_prefix:
   'mat2x2'
 | 'mat2x3'
 | 'mat2x4'
 | 'mat3x2'
 | 'mat3x3'
 | 'mat3x4'
 | 'mat4x2'
 | 'mat4x3'
 | 'mat4x4'
member_ident:ident_pattern_token
multiplicative_expression:
   multiplicative_expression multiplicative_operator unary_expression
 | unary_expression
multiplicative_operator:
   '%'
 | '*'
 | '/'
multisampled_texture_type:'texture_multisampled_2d'
optionally_typed_ident:
   ident ( ':' type_specifier )?
param:
   attribute * ? ident ':' type_specifier
param_list:
   param ( ',' param ) * ? ',' ?
param_list/0.1/0/0.0:
   ',' param
paren_expression:
   '(' expression ')'
primary_expression:
   'bitcast' '<' type_specifier '>' paren_expression
 | call_expression
 | ident
 | literal
 | paren_expression
relational_expression:
   shift_expression
 | shift_expression '!=' shift_expression
 | shift_expression '<' shift_expression
 | shift_expression '<=' shift_expression
 | shift_expression '==' shift_expression
 | shift_expression '>' shift_expression
 | shift_expression '>=' shift_expression
return_statement:
   'return' expression ?
sampled_texture_type:
   'texture_1d'
 | 'texture_2d'
 | 'texture_2d_array'
 | 'texture_3d'
 | 'texture_cube'
 | 'texture_cube_array'
sampler_type:
   'sampler'
 | 'sampler_comparison'
severity_control_name:
   'error'
 | 'info'
 | 'off'
 | 'warning'
shift_expression:
   additive_expression
 | unary_expression '<<' unary_expression
 | unary_expression '>>' unary_expression
short_circuit_and_expression:
   relational_expression
 | short_circuit_and_expression '&&' relational_expression
short_circuit_or_expression:
   relational_expression
 | short_circuit_or_expression '||' relational_expression
singular_expression:
   primary_expression component_or_swizzle_specifier ?
statement:
   ';'
 | 'discard' ';'
 | break_statement ';'
 | compound_statement
 | const_assert_statement ';'
 | continue_statement ';'
 | for_statement
 | func_call_statement ';'
 | if_statement
 | loop_statement
 | return_statement ';'
 | switch_statement
 | variable_statement ';'
 | variable_updating_statement ';'
 | while_statement
storage_texture_type:
   'texture_storage_1d'
 | 'texture_storage_2d'
 | 'texture_storage_2d_array'
 | 'texture_storage_3d'
struct_body_decl:
   '{' struct_member ( ',' struct_member ) * ? ',' ? '}'
struct_body_decl/0.2/0/0.0:
   ',' struct_member
struct_decl:
   'struct' ident struct_body_decl
struct_member:
   attribute * ? member_ident ':' type_specifier
switch_body:
   attribute * ? '{' ( switch_clause * ) '}'
switch_body/0.2:
   switch_clause *
switch_clause:
   case_clause
 | default_alone_clause
switch_statement:
   attribute * ? 'switch' expression switch_body
swizzle_name:
   '/[rgba]/'
 | '/[rgba][rgba]/'
 | '/[rgba][rgba][rgba]/'
 | '/[rgba][rgba][rgba][rgba]/'
 | '/[xyzw]/'
 | '/[xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw][xyzw]/'
texel_format:
   'bgra8unorm'
 | 'r32float'
 | 'r32sint'
 | 'r32uint'
 | 'rg32float'
 | 'rg32sint'
 | 'rg32uint'
 | 'rgba16float'
 | 'rgba16sint'
 | 'rgba16uint'
 | 'rgba32float'
 | 'rgba32sint'
 | 'rgba32uint'
 | 'rgba8sint'
 | 'rgba8snorm'
 | 'rgba8uint'
 | 'rgba8unorm'
texture_and_sampler_types:
   depth_texture_type
 | multisampled_texture_type '<' type_specifier '>'
 | sampled_texture_type '<' type_specifier '>'
 | sampler_type
 | storage_texture_type '<' texel_format ',' access_mode '>'
translation_unit:
   global_directive * ? global_decl * ?
type_alias_decl:
   'alias' ident '=' type_specifier
type_specifier:
   ident
 | type_specifier_without_ident
type_specifier_without_ident:
   'atomic' '<' type_specifier '>'
 | 'bool'
 | 'f16'
 | 'f32'
 | 'i32'
 | 'ptr' '<' address_space ',' type_specifier ( ',' access_mode )? '>'
 | 'u32'
 | array_type_specifier
 | mat_prefix '<' type_specifier '>'
 | texture_and_sampler_types
 | vec_prefix '<' type_specifier '>'
unary_expression:
   '!' unary_expression
 | '&' unary_expression
 | '*' unary_expression
 | '-' unary_expression
 | '~' unary_expression
 | singular_expression
variable_decl:
   'var' variable_qualifier ? optionally_typed_ident
variable_qualifier:
   '<' address_space ( ',' access_mode )? '>'
variable_statement:
   'const' optionally_typed_ident '=' expression
 | 'let' optionally_typed_ident '=' expression
 | variable_decl
 | variable_decl '=' expression
variable_updating_statement:
   assignment_statement
 | decrement_statement
 | increment_statement
vec_prefix:
   'vec2'
 | 'vec3'
 | 'vec4'
while_statement:
   attribute * ? 'while' expression compound_statement

=Raw rules:
translation_unit  -> ( Choice ( Seq translation_unit/0.0 translation_unit/0.1 ) )
translation_unit .reg_info.index: 578
translation_unit .first: {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' ε}
translation_unit .derives_empty: True
translation_unit .follow: {EndOfText}
global_directive  -> ( Choice diagnostic_directive enable_directive )
global_directive .reg_info.index: 203
global_directive .first: {'diagnostic' 'enable'}
global_directive .derives_empty: False
global_directive .follow: {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl  -> ( Choice ';' ( Seq global_variable_decl ';' ) ( Seq global_constant_decl ';' ) ( Seq type_alias_decl ';' ) struct_decl function_decl ( Seq const_assert_statement ';' ) )
global_decl .reg_info.index: 214
global_decl .first: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var'}
global_decl .derives_empty: False
global_decl .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
bool_literal  -> ( Choice 'true' 'false' )
bool_literal .reg_info.index: 215
bool_literal .first: {'false' 'true'}
bool_literal .derives_empty: False
bool_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
int_literal  -> ( Choice decimal_int_literal hex_int_literal )
int_literal .reg_info.index: 218
int_literal .first: {/0[iu]?/ /0[xX][0-9a-fA-F]+[iu]?/ /[1-9][0-9]*[iu]?/}
int_literal .derives_empty: False
int_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_int_literal  -> ( Choice /0[iu]?/ /[1-9][0-9]*[iu]?/ )
decimal_int_literal .reg_info.index: 219
decimal_int_literal .first: {/0[iu]?/ /[1-9][0-9]*[iu]?/}
decimal_int_literal .derives_empty: False
decimal_int_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_int_literal  -> /0[xX][0-9a-fA-F]+[iu]?/
hex_int_literal .reg_info.index: 7
hex_int_literal .first: {/0[xX][0-9a-fA-F]+[iu]?/}
hex_int_literal .derives_empty: False
hex_int_literal .follow: {}
float_literal  -> ( Choice decimal_float_literal hex_float_literal )
float_literal .reg_info.index: 222
float_literal .first: {/0[fh]/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/}
float_literal .derives_empty: False
float_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal  -> ( Choice /0[fh]/ /[1-9][0-9]*[fh]/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ )
decimal_float_literal .reg_info.index: 223
decimal_float_literal .first: {/0[fh]/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/}
decimal_float_literal .derives_empty: False
decimal_float_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_float_literal  -> ( Choice /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ )
hex_float_literal .reg_info.index: 224
hex_float_literal .first: {/0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/}
hex_float_literal .derives_empty: False
hex_float_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
diagnostic_directive  -> ( Choice ( Seq 'diagnostic' diagnostic_control ';' ) )
diagnostic_directive .reg_info.index: 528
diagnostic_directive .first: {'diagnostic'}
diagnostic_directive .derives_empty: False
diagnostic_directive .follow: {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
literal  -> ( Choice int_literal float_literal bool_literal )
literal .reg_info.index: 230
literal .first: {'false' 'true' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
literal .derives_empty: False
literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
member_ident  -> ident_pattern_token
member_ident .reg_info.index: 231
member_ident .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
member_ident .derives_empty: False
member_ident .follow: {'!=' '%' '%=' '&&' '&' '&=' '(' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' '}'}
diagnostic_rule_name  -> ident_pattern_token
diagnostic_rule_name .reg_info.index: 231
diagnostic_rule_name .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
diagnostic_rule_name .derives_empty: False
diagnostic_rule_name .follow: {'!=' '%' '%=' '&&' '&' '&=' '(' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' '}'}
attribute  -> ( Choice ( Seq '@' 'align' '(' expression attrib_end ) ( Seq '@' 'binding' '(' expression attrib_end ) ( Seq '@' 'builtin' '(' builtin_value_name attrib_end ) ( Seq '@' 'const' ) ( Seq '@' 'diagnostic' diagnostic_control ) ( Seq '@' 'group' '(' expression attrib_end ) ( Seq '@' 'id' '(' expression attrib_end ) ( Seq '@' 'interpolate' '(' interpolation_type_name attrib_end ) ( Seq '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end ) ( Seq '@' 'invariant' ) ( Seq '@' 'location' '(' expression attrib_end ) ( Seq '@' 'size' '(' expression attrib_end ) ( Seq '@' 'workgroup_size' '(' expression attrib_end ) ( Seq '@' 'workgroup_size' '(' expression ',' expression attrib_end ) ( Seq '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end ) ( Seq '@' 'vertex' ) ( Seq '@' 'fragment' ) ( Seq '@' 'compute' ) )
attribute .reg_info.index: 255
attribute .first: {'@'}
attribute .derives_empty: False
attribute .follow: {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end  -> ( Choice ( Seq attrib_end/0.0 ')' ) )
attrib_end .reg_info.index: 723
attrib_end .first: {')' ','}
attrib_end .derives_empty: False
attrib_end .follow: {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
diagnostic_control  -> ( Choice ( Seq '(' severity_control_name ',' diagnostic_rule_name attrib_end ) )
diagnostic_control .reg_info.index: 530
diagnostic_control .first: {'('}
diagnostic_control .derives_empty: False
diagnostic_control .follow: {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_specifier  -> ( Choice ( Seq 'array' '<' type_specifier array_type_specifier/0.3 '>' ) )
array_type_specifier .reg_info.index: 738
array_type_specifier .first: {'array'}
array_type_specifier .derives_empty: False
array_type_specifier .follow: {'(' ')' ',' ';' '=' '>' '@' '{' '}'}
element_count_expression  -> ( Choice additive_expression bitwise_expression )
element_count_expression .reg_info.index: 268
element_count_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
element_count_expression .derives_empty: False
element_count_expression .follow: {'>'}
struct_decl  -> ( Choice ( Seq 'struct' ident struct_body_decl ) )
struct_decl .reg_info.index: 532
struct_decl .first: {'struct'}
struct_decl .derives_empty: False
struct_decl .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl  -> ( Choice ( Seq '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' ) )
struct_body_decl .reg_info.index: 753
struct_body_decl .first: {'{'}
struct_body_decl .derives_empty: False
struct_body_decl .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_member  -> ( Choice ( Seq struct_member/0.0 member_ident ':' type_specifier ) )
struct_member .reg_info.index: 761
struct_member .first: {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member .derives_empty: False
struct_member .follow: {',' '}'}
texture_and_sampler_types  -> ( Choice sampler_type depth_texture_type ( Seq sampled_texture_type '<' type_specifier '>' ) ( Seq multisampled_texture_type '<' type_specifier '>' ) ( Seq storage_texture_type '<' texel_format ',' access_mode '>' ) )
texture_and_sampler_types .reg_info.index: 292
texture_and_sampler_types .first: {'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d'}
texture_and_sampler_types .derives_empty: False
texture_and_sampler_types .follow: {'(' ')' ',' ';' '=' '>' '@' '{' '}'}
sampler_type  -> ( Choice 'sampler' 'sampler_comparison' )
sampler_type .reg_info.index: 293
sampler_type .first: {'sampler' 'sampler_comparison'}
sampler_type .derives_empty: False
sampler_type .follow: {'(' ')' ',' ';' '=' '>' '@' '{' '}'}
sampled_texture_type  -> ( Choice 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' )
sampled_texture_type .reg_info.index: 294
sampled_texture_type .first: {'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array'}
sampled_texture_type .derives_empty: False
sampled_texture_type .follow: {'<'}
multisampled_texture_type  -> 'texture_multisampled_2d'
multisampled_texture_type .reg_info.index: 50
multisampled_texture_type .first: {'texture_multisampled_2d'}
multisampled_texture_type .derives_empty: False
multisampled_texture_type .follow: {}
storage_texture_type  -> ( Choice 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' )
storage_texture_type .reg_info.index: 295
storage_texture_type .first: {'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d'}
storage_texture_type .derives_empty: False
storage_texture_type .follow: {'<'}
depth_texture_type  -> ( Choice 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' )
depth_texture_type .reg_info.index: 296
depth_texture_type .first: {'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d'}
depth_texture_type .derives_empty: False
depth_texture_type .follow: {'(' ')' ',' ';' '=' '>' '@' '{' '}'}
type_alias_decl  -> ( Choice ( Seq 'alias' ident '=' type_specifier ) )
type_alias_decl .reg_info.index: 535
type_alias_decl .first: {'alias'}
type_alias_decl .derives_empty: False
type_alias_decl .follow: {';'}
type_specifier  -> ( Choice ident type_specifier_without_ident )
type_specifier .reg_info.index: 299
type_specifier .first: {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_specifier .derives_empty: False
type_specifier .follow: {')' ',' ';' '=' '>' '@' '{' '}'}
type_specifier_without_ident  -> ( Choice 'bool' 'f32' 'f16' 'i32' 'u32' ( Seq vec_prefix '<' type_specifier '>' ) ( Seq mat_prefix '<' type_specifier '>' ) ( Seq 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' ) array_type_specifier ( Seq 'atomic' '<' type_specifier '>' ) texture_and_sampler_types )
type_specifier_without_ident .reg_info.index: 837
type_specifier_without_ident .first: {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
type_specifier_without_ident .derives_empty: False
type_specifier_without_ident .follow: {'(' ')' ',' ';' '=' '>' '@' '{' '}'}
vec_prefix  -> ( Choice 'vec2' 'vec3' 'vec4' )
vec_prefix .reg_info.index: 312
vec_prefix .first: {'vec2' 'vec3' 'vec4'}
vec_prefix .derives_empty: False
vec_prefix .follow: {'(' '<'}
mat_prefix  -> ( Choice 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' )
mat_prefix .reg_info.index: 313
mat_prefix .first: {'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4'}
mat_prefix .derives_empty: False
mat_prefix .follow: {'(' '<'}
variable_statement  -> ( Choice variable_decl ( Seq variable_decl '=' expression ) ( Seq 'let' optionally_typed_ident '=' expression ) ( Seq 'const' optionally_typed_ident '=' expression ) )
variable_statement .reg_info.index: 319
variable_statement .first: {'const' 'let' 'var'}
variable_statement .derives_empty: False
variable_statement .follow: {';'}
variable_decl  -> ( Choice ( Seq 'var' variable_decl/0.1 optionally_typed_ident ) )
variable_decl .reg_info.index: 871
variable_decl .first: {'var'}
variable_decl .derives_empty: False
variable_decl .follow: {';' '='}
optionally_typed_ident  -> ( Choice ( Seq ident optionally_typed_ident/0.1 ) )
optionally_typed_ident .reg_info.index: 877
optionally_typed_ident .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
optionally_typed_ident .derives_empty: False
optionally_typed_ident .follow: {';' '='}
variable_qualifier  -> ( Choice ( Seq '<' address_space variable_qualifier/0.2 '>' ) )
variable_qualifier .reg_info.index: 884
variable_qualifier .first: {'<'}
variable_qualifier .derives_empty: False
variable_qualifier .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
global_variable_decl  -> ( Choice ( Seq global_variable_decl/0.0 variable_decl global_variable_decl/0.2 ) )
global_variable_decl .reg_info.index: 891
global_variable_decl .first: {'@' 'var'}
global_variable_decl .derives_empty: False
global_variable_decl .follow: {';'}
global_constant_decl  -> ( Choice ( Seq 'const' optionally_typed_ident '=' expression ) ( Seq global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 ) )
global_constant_decl .reg_info.index: 903
global_constant_decl .first: {'@' 'const' 'override'}
global_constant_decl .derives_empty: False
global_constant_decl .follow: {';'}
primary_expression  -> ( Choice ident call_expression literal paren_expression ( Seq 'bitcast' '<' type_specifier '>' paren_expression ) )
primary_expression .reg_info.index: 336
primary_expression .first: {'(' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
primary_expression .derives_empty: False
primary_expression .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
call_expression  -> call_phrase
call_expression .reg_info.index: 337
call_expression .first: {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
call_expression .derives_empty: False
call_expression .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
call_phrase  -> ( Choice ( Seq callable argument_expression_list ) )
call_phrase .reg_info.index: 540
call_phrase .first: {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
call_phrase .derives_empty: False
call_phrase .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
callable  -> ( Choice ident type_specifier_without_ident vec_prefix mat_prefix 'array' )
callable .reg_info.index: 341
callable .first: {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
callable .derives_empty: False
callable .follow: {'('}
paren_expression  -> ( Choice ( Seq '(' expression ')' ) )
paren_expression .reg_info.index: 541
paren_expression .first: {'('}
paren_expression .derives_empty: False
paren_expression .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
argument_expression_list  -> ( Choice ( Seq '(' argument_expression_list/0.1 ')' ) )
argument_expression_list .reg_info.index: 932
argument_expression_list .first: {'('}
argument_expression_list .derives_empty: False
argument_expression_list .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
expression_comma_list  -> ( Choice ( Seq expression expression_comma_list/0.1 expression_comma_list/0.2 ) )
expression_comma_list .reg_info.index: 939
expression_comma_list .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
expression_comma_list .derives_empty: False
expression_comma_list .follow: {')'}
component_or_swizzle_specifier  -> ( Choice ( Seq '[' expression ']' component_or_swizzle_specifier/0.3 ) ( Seq '.' member_ident component_or_swizzle_specifier/1.2 ) ( Seq '.' swizzle_name component_or_swizzle_specifier/2.2 ) )
component_or_swizzle_specifier .reg_info.index: 957
component_or_swizzle_specifier .first: {'.' '['}
component_or_swizzle_specifier .derives_empty: False
component_or_swizzle_specifier .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
unary_expression  -> ( Choice singular_expression ( Seq '-' unary_expression ) ( Seq '!' unary_expression ) ( Seq '~' unary_expression ) ( Seq '*' unary_expression ) ( Seq '&' unary_expression ) )
unary_expression .reg_info.index: 364
unary_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
unary_expression .derives_empty: False
unary_expression .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
singular_expression  -> ( Choice ( Seq primary_expression singular_expression/0.1 ) )
singular_expression .reg_info.index: 978
singular_expression .first: {'(' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
singular_expression .derives_empty: False
singular_expression .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
lhs_expression  -> ( Choice ( Seq core_lhs_expression lhs_expression/0.1 ) ( Seq '*' lhs_expression ) ( Seq '&' lhs_expression ) )
lhs_expression .reg_info.index: 989
lhs_expression .first: {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression .derives_empty: False
lhs_expression .follow: {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
core_lhs_expression  -> ( Choice ident ( Seq '(' lhs_expression ')' ) )
core_lhs_expression .reg_info.index: 374
core_lhs_expression .first: {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
core_lhs_expression .derives_empty: False
core_lhs_expression .follow: {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
multiplicative_expression  -> ( Choice unary_expression ( Seq multiplicative_expression multiplicative_operator unary_expression ) )
multiplicative_expression .reg_info.index: 378
multiplicative_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_expression .derives_empty: False
multiplicative_expression .follow: {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
multiplicative_operator  -> ( Choice '*' '/' '%' )
multiplicative_operator .reg_info.index: 379
multiplicative_operator .first: {'%' '*' '/'}
multiplicative_operator .derives_empty: False
multiplicative_operator .follow: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_expression  -> ( Choice multiplicative_expression ( Seq additive_expression additive_operator multiplicative_expression ) )
additive_expression .reg_info.index: 382
additive_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_expression .derives_empty: False
additive_expression .follow: {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
additive_operator  -> ( Choice '+' '-' )
additive_operator .reg_info.index: 383
additive_operator .first: {'+' '-'}
additive_operator .derives_empty: False
additive_operator .follow: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
shift_expression  -> ( Choice additive_expression ( Seq unary_expression '<<' unary_expression ) ( Seq unary_expression '>>' unary_expression ) )
shift_expression .reg_info.index: 386
shift_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
shift_expression .derives_empty: False
shift_expression .follow: {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
relational_expression  -> ( Choice shift_expression ( Seq shift_expression '<' shift_expression ) ( Seq shift_expression '>' shift_expression ) ( Seq shift_expression '<=' shift_expression ) ( Seq shift_expression '>=' shift_expression ) ( Seq shift_expression '==' shift_expression ) ( Seq shift_expression '!=' shift_expression ) )
relational_expression .reg_info.index: 394
relational_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
relational_expression .derives_empty: False
relational_expression .follow: {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
short_circuit_and_expression  -> ( Choice relational_expression ( Seq short_circuit_and_expression '&&' relational_expression ) )
short_circuit_and_expression .reg_info.index: 398
short_circuit_and_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
short_circuit_and_expression .derives_empty: False
short_circuit_and_expression .follow: {'&&'}
short_circuit_or_expression  -> ( Choice relational_expression ( Seq short_circuit_or_expression '||' relational_expression ) )
short_circuit_or_expression .reg_info.index: 401
short_circuit_or_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
short_circuit_or_expression .derives_empty: False
short_circuit_or_expression .follow: {'||'}
binary_or_expression  -> ( Choice unary_expression ( Seq binary_or_expression '|' unary_expression ) )
binary_or_expression .reg_info.index: 404
binary_or_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
binary_or_expression .derives_empty: False
binary_or_expression .follow: {'|'}
binary_and_expression  -> ( Choice unary_expression ( Seq binary_and_expression '&' unary_expression ) )
binary_and_expression .reg_info.index: 407
binary_and_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
binary_and_expression .derives_empty: False
binary_and_expression .follow: {'&'}
binary_xor_expression  -> ( Choice unary_expression ( Seq binary_xor_expression '^' unary_expression ) )
binary_xor_expression .reg_info.index: 410
binary_xor_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
binary_xor_expression .derives_empty: False
binary_xor_expression .follow: {'^'}
bitwise_expression  -> ( Choice ( Seq binary_and_expression '&' unary_expression ) ( Seq binary_or_expression '|' unary_expression ) ( Seq binary_xor_expression '^' unary_expression ) )
bitwise_expression .reg_info.index: 411
bitwise_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
bitwise_expression .derives_empty: False
bitwise_expression .follow: {')' ',' ':' ';' '>' '@' ']' '{'}
expression  -> ( Choice relational_expression ( Seq short_circuit_or_expression '||' relational_expression ) ( Seq short_circuit_and_expression '&&' relational_expression ) bitwise_expression )
expression .reg_info.index: 412
expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
expression .derives_empty: False
expression .follow: {')' ',' ':' ';' '@' ']' '{'}
compound_statement  -> ( Choice ( Seq compound_statement/0.0 '{' compound_statement/0.2 '}' ) )
compound_statement .reg_info.index: 1098
compound_statement .first: {'@' '{'}
compound_statement .derives_empty: False
compound_statement .follow: {'&' '(' '*' ';' '@' '_' 'alias' 'array' 'atomic' 'bool' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
assignment_statement  -> ( Choice ( Seq lhs_expression assignment_statement/0.1 expression ) ( Seq '_' '=' expression ) )
assignment_statement .reg_info.index: 1109
assignment_statement .first: {'&' '(' '*' '_' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement .derives_empty: False
assignment_statement .follow: {')' ';'}
compound_assignment_operator  -> ( Choice '+=' '-=' '*=' '/=' '%=' '&=' '|=' '^=' '>>=' '<<=' )
compound_assignment_operator .reg_info.index: 422
compound_assignment_operator .first: {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '>>=' '^=' '|='}
compound_assignment_operator .derives_empty: False
compound_assignment_operator .follow: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
increment_statement  -> ( Choice ( Seq lhs_expression '++' ) )
increment_statement .reg_info.index: 546
increment_statement .first: {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement .derives_empty: False
increment_statement .follow: {')' ';'}
decrement_statement  -> ( Choice ( Seq lhs_expression '--' ) )
decrement_statement .reg_info.index: 547
decrement_statement .first: {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
decrement_statement .derives_empty: False
decrement_statement .follow: {')' ';'}
if_statement  -> ( Choice ( Seq if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 ) )
if_statement .reg_info.index: 1134
if_statement .first: {'@' 'if'}
if_statement .derives_empty: False
if_statement .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_clause  -> ( Choice ( Seq 'if' expression compound_statement ) )
if_clause .reg_info.index: 549
if_clause .first: {'if'}
if_clause .derives_empty: False
if_clause .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause  -> ( Choice ( Seq 'else' 'if' expression compound_statement ) )
else_if_clause .reg_info.index: 550
else_if_clause .first: {'else'}
else_if_clause .derives_empty: False
else_if_clause .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_clause  -> ( Choice ( Seq 'else' compound_statement ) )
else_clause .reg_info.index: 551
else_clause .first: {'else'}
else_clause .derives_empty: False
else_clause .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement  -> ( Choice ( Seq switch_statement/0.0 'switch' expression switch_body ) )
switch_statement .reg_info.index: 1153
switch_statement .first: {'@' 'switch'}
switch_statement .derives_empty: False
switch_statement .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_body  -> ( Choice ( Seq switch_body/0.0 '{' switch_body/0.2 '}' ) )
switch_body .reg_info.index: 1161
switch_body .first: {'@' '{'}
switch_body .derives_empty: False
switch_body .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_clause  -> ( Choice case_clause default_alone_clause )
switch_clause .reg_info.index: 443
switch_clause .first: {'case' 'default'}
switch_clause .derives_empty: False
switch_clause .follow: {'case' 'default' '}'}
case_clause  -> ( Choice ( Seq 'case' case_selectors case_clause/0.2 compound_statement ) )
case_clause .reg_info.index: 1171
case_clause .first: {'case'}
case_clause .derives_empty: False
case_clause .follow: {'case' 'default' '}'}
default_alone_clause  -> ( Choice ( Seq 'default' default_alone_clause/0.1 compound_statement ) )
default_alone_clause .reg_info.index: 1177
default_alone_clause .first: {'default'}
default_alone_clause .derives_empty: False
default_alone_clause .follow: {'case' 'default' '}'}
case_selectors  -> ( Choice ( Seq case_selector case_selectors/0.1 case_selectors/0.2 ) )
case_selectors .reg_info.index: 1184
case_selectors .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'default' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
case_selectors .derives_empty: False
case_selectors .follow: {':' '@' '{'}
case_selector  -> ( Choice 'default' expression )
case_selector .reg_info.index: 453
case_selector .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'default' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
case_selector .derives_empty: False
case_selector .follow: {',' ':' '@' '{'}
loop_statement  -> ( Choice ( Seq loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' ) )
loop_statement .reg_info.index: 1197
loop_statement .first: {'@' 'loop'}
loop_statement .derives_empty: False
loop_statement .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement  -> ( Choice ( Seq for_statement/0.0 'for' '(' for_header ')' compound_statement ) )
for_statement .reg_info.index: 1206
for_statement .first: {'@' 'for'}
for_statement .derives_empty: False
for_statement .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_header  -> ( Choice ( Seq for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 ) )
for_header .reg_info.index: 1217
for_header .first: {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'const' 'f16' 'f32' 'i32' 'let' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_header .derives_empty: False
for_header .follow: {')'}
for_init  -> ( Choice variable_statement variable_updating_statement func_call_statement )
for_init .reg_info.index: 468
for_init .first: {'&' '(' '*' '_' 'array' 'atomic' 'bool' 'const' 'f16' 'f32' 'i32' 'let' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_init .derives_empty: False
for_init .follow: {';'}
for_update  -> ( Choice variable_updating_statement func_call_statement )
for_update .reg_info.index: 469
for_update .first: {'&' '(' '*' '_' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_update .derives_empty: False
for_update .follow: {')'}
while_statement  -> ( Choice ( Seq while_statement/0.0 'while' expression compound_statement ) )
while_statement .reg_info.index: 1229
while_statement .first: {'@' 'while'}
while_statement .derives_empty: False
while_statement .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement  -> 'break'
break_statement .reg_info.index: 127
break_statement .first: {'break'}
break_statement .derives_empty: False
break_statement .follow: {}
break_if_statement  -> ( Choice ( Seq 'break' 'if' expression ';' ) )
break_if_statement .reg_info.index: 561
break_if_statement .first: {'break'}
break_if_statement .derives_empty: False
break_if_statement .follow: {'}'}
continue_statement  -> 'continue'
continue_statement .reg_info.index: 128
continue_statement .first: {'continue'}
continue_statement .derives_empty: False
continue_statement .follow: {}
continuing_statement  -> ( Choice ( Seq 'continuing' continuing_compound_statement ) )
continuing_statement .reg_info.index: 562
continuing_statement .first: {'continuing'}
continuing_statement .derives_empty: False
continuing_statement .follow: {'}'}
continuing_compound_statement  -> ( Choice ( Seq continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' ) )
continuing_compound_statement .reg_info.index: 1246
continuing_compound_statement .first: {'@' '{'}
continuing_compound_statement .derives_empty: False
continuing_compound_statement .follow: {'}'}
return_statement  -> ( Choice ( Seq 'return' return_statement/0.1 ) )
return_statement .reg_info.index: 1251
return_statement .first: {'return'}
return_statement .derives_empty: False
return_statement .follow: {';'}
func_call_statement  -> call_phrase
func_call_statement .reg_info.index: 337
func_call_statement .first: {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement .derives_empty: False
func_call_statement .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
const_assert_statement  -> ( Choice ( Seq 'const_assert' expression ) )
const_assert_statement .reg_info.index: 565
const_assert_statement .first: {'const_assert'}
const_assert_statement .derives_empty: False
const_assert_statement .follow: {';'}
statement  -> ( Choice ';' ( Seq return_statement ';' ) if_statement switch_statement loop_statement for_statement while_statement ( Seq func_call_statement ';' ) ( Seq variable_statement ';' ) ( Seq break_statement ';' ) ( Seq continue_statement ';' ) ( Seq 'discard' ';' ) ( Seq variable_updating_statement ';' ) compound_statement ( Seq const_assert_statement ';' ) )
statement .reg_info.index: 494
statement .first: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement .derives_empty: False
statement .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_updating_statement  -> ( Choice assignment_statement increment_statement decrement_statement )
variable_updating_statement .reg_info.index: 498
variable_updating_statement .first: {'&' '(' '*' '_' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_updating_statement .derives_empty: False
variable_updating_statement .follow: {')' ';'}
function_decl  -> ( Choice ( Seq function_decl/0.0 function_header compound_statement ) )
function_decl .reg_info.index: 1294
function_decl .first: {'@' 'fn'}
function_decl .derives_empty: False
function_decl .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_header  -> ( Choice ( Seq 'fn' ident '(' function_header/0.3 ')' function_header/0.5 ) )
function_header .reg_info.index: 1305
function_header .first: {'fn'}
function_header .derives_empty: False
function_header .follow: {'@' '{'}
param_list  -> ( Choice ( Seq param param_list/0.1 param_list/0.2 ) )
param_list .reg_info.index: 1312
param_list .first: {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list .derives_empty: False
param_list .follow: {')'}
param  -> ( Choice ( Seq param/0.0 ident ':' type_specifier ) )
param .reg_info.index: 1319
param .first: {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param .derives_empty: False
param .follow: {')' ','}
enable_directive  -> ( Choice ( Seq 'enable' extension_name ';' ) )
enable_directive .reg_info.index: 570
enable_directive .first: {'enable'}
enable_directive .derives_empty: False
enable_directive .follow: {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
ident_pattern_token  -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
ident_pattern_token .reg_info.index: 136
ident_pattern_token .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
ident_pattern_token .derives_empty: False
ident_pattern_token .follow: {}
interpolation_type_name  -> ( Choice 'perspective' 'linear' 'flat' )
interpolation_type_name .reg_info.index: 514
interpolation_type_name .first: {'flat' 'linear' 'perspective'}
interpolation_type_name .derives_empty: False
interpolation_type_name .follow: {')' ','}
interpolation_sample_name  -> ( Choice 'center' 'centroid' 'sample' )
interpolation_sample_name .reg_info.index: 515
interpolation_sample_name .first: {'center' 'centroid' 'sample'}
interpolation_sample_name .derives_empty: False
interpolation_sample_name .follow: {')' ','}
severity_control_name  -> ( Choice 'error' 'warning' 'info' 'off' )
severity_control_name .reg_info.index: 516
severity_control_name .first: {'error' 'info' 'off' 'warning'}
severity_control_name .derives_empty: False
severity_control_name .follow: {','}
builtin_value_name  -> ( Choice 'vertex_index' 'instance_index' 'position' 'front_facing' 'frag_depth' 'local_invocation_id' 'local_invocation_index' 'global_invocation_id' 'workgroup_id' 'num_workgroups' 'sample_index' 'sample_mask' )
builtin_value_name .reg_info.index: 517
builtin_value_name .first: {'frag_depth' 'front_facing' 'global_invocation_id' 'instance_index' 'local_invocation_id' 'local_invocation_index' 'num_workgroups' 'position' 'sample_index' 'sample_mask' 'vertex_index' 'workgroup_id'}
builtin_value_name .derives_empty: False
builtin_value_name .follow: {')' ','}
access_mode  -> ( Choice 'read' 'write' 'read_write' )
access_mode .reg_info.index: 518
access_mode .first: {'read' 'read_write' 'write'}
access_mode .derives_empty: False
access_mode .follow: {'>'}
address_space  -> ( Choice 'function' 'private' 'workgroup' 'uniform' 'storage' )
address_space .reg_info.index: 519
address_space .first: {'function' 'private' 'storage' 'uniform' 'workgroup'}
address_space .derives_empty: False
address_space .follow: {',' '>'}
texel_format  -> ( Choice 'rgba8unorm' 'rgba8snorm' 'rgba8uint' 'rgba8sint' 'rgba16uint' 'rgba16sint' 'rgba16float' 'r32uint' 'r32sint' 'r32float' 'rg32uint' 'rg32sint' 'rg32float' 'rgba32uint' 'rgba32sint' 'rgba32float' 'bgra8unorm' )
texel_format .reg_info.index: 520
texel_format .first: {'bgra8unorm' 'r32float' 'r32sint' 'r32uint' 'rg32float' 'rg32sint' 'rg32uint' 'rgba16float' 'rgba16sint' 'rgba16uint' 'rgba32float' 'rgba32sint' 'rgba32uint' 'rgba8sint' 'rgba8snorm' 'rgba8uint' 'rgba8unorm'}
texel_format .derives_empty: False
texel_format .follow: {','}
extension_name  -> 'f16'
extension_name .reg_info.index: 64
extension_name .first: {'f16'}
extension_name .derives_empty: False
extension_name .follow: {}
swizzle_name  -> ( Choice '/[rgba]/' '/[rgba][rgba]/' '/[rgba][rgba][rgba]/' '/[rgba][rgba][rgba][rgba]/' '/[xyzw]/' '/[xyzw][xyzw]/' '/[xyzw][xyzw][xyzw]/' '/[xyzw][xyzw][xyzw][xyzw]/' )
swizzle_name .reg_info.index: 521
swizzle_name .first: {'/[rgba]/' '/[rgba][rgba]/' '/[rgba][rgba][rgba]/' '/[rgba][rgba][rgba][rgba]/' '/[xyzw]/' '/[xyzw][xyzw]/' '/[xyzw][xyzw][xyzw]/' '/[xyzw][xyzw][xyzw][xyzw]/'}
swizzle_name .derives_empty: False
swizzle_name .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}
ident  -> ident_pattern_token
ident .reg_info.index: 231
ident .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
ident .derives_empty: False
ident .follow: {'!=' '%' '%=' '&&' '&' '&=' '(' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' '}'}
_comment  -> /\/\/.*/
_comment .reg_info.index: 192
_comment .first: {/\/\/.*/}
_comment .derives_empty: False
_comment .follow: {}
_blankspace  -> /[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_blankspace .reg_info.index: 193
_blankspace .first: {/[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/}
_blankspace .derives_empty: False
_blankspace .follow: {}
language  -> ( Choice ( Seq translation_unit EndOfText ) )
language .reg_info.index: 571
language .first: {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
language .derives_empty: False
language .follow: {}
translation_unit/0.0  -> ( Choice translation_unit/0.0/0 ε )
translation_unit/0.0 .reg_info.index: 1443
translation_unit/0.0 .first: {'diagnostic' 'enable' ε}
translation_unit/0.0 .derives_empty: True
translation_unit/0.0 .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.1  -> ( Choice translation_unit/0.1/0 ε )
translation_unit/0.1 .reg_info.index: 1447
translation_unit/0.1 .first: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' ε}
translation_unit/0.1 .derives_empty: True
translation_unit/0.1 .follow: {EndOfText}
attrib_end/0.0  -> ( Choice ',' ε )
attrib_end/0.0 .reg_info.index: 256
attrib_end/0.0 .first: {',' ε}
attrib_end/0.0 .derives_empty: True
attrib_end/0.0 .follow: {')' ':' '@' '{' '}'}
array_type_specifier/0.3  -> ( Choice ( Seq ',' element_count_expression ) ε )
array_type_specifier/0.3 .reg_info.index: 264
array_type_specifier/0.3 .first: {',' ε}
array_type_specifier/0.3 .derives_empty: True
array_type_specifier/0.3 .follow: {'>'}
struct_body_decl/0.2  -> ( Choice struct_body_decl/0.2/0 ε )
struct_body_decl/0.2 .reg_info.index: 1455
struct_body_decl/0.2 .first: {',' ε}
struct_body_decl/0.2 .derives_empty: True
struct_body_decl/0.2 .follow: {',' '}'}
struct_body_decl/0.3  -> ( Choice ',' ε )
struct_body_decl/0.3 .reg_info.index: 256
struct_body_decl/0.3 .first: {',' ε}
struct_body_decl/0.3 .derives_empty: True
struct_body_decl/0.3 .follow: {')' ':' '@' '{' '}'}
struct_member/0.0  -> ( Choice struct_member/0.0/0 ε )
struct_member/0.0 .reg_info.index: 1460
struct_member/0.0 .first: {'@' ε}
struct_member/0.0 .derives_empty: True
struct_member/0.0 .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_specifier_without_ident/7.5  -> ( Choice ( Seq ',' access_mode ) ε )
type_specifier_without_ident/7.5 .reg_info.index: 306
type_specifier_without_ident/7.5 .first: {',' ε}
type_specifier_without_ident/7.5 .derives_empty: True
type_specifier_without_ident/7.5 .follow: {'>'}
variable_decl/0.1  -> ( Choice variable_qualifier ε )
variable_decl/0.1 .reg_info.index: 321
variable_decl/0.1 .first: {'<' ε}
variable_decl/0.1 .derives_empty: True
variable_decl/0.1 .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
optionally_typed_ident/0.1  -> ( Choice ( Seq ':' type_specifier ) ε )
optionally_typed_ident/0.1 .reg_info.index: 324
optionally_typed_ident/0.1 .first: {':' ε}
optionally_typed_ident/0.1 .derives_empty: True
optionally_typed_ident/0.1 .follow: {';' '='}
variable_qualifier/0.2  -> ( Choice ( Seq ',' access_mode ) ε )
variable_qualifier/0.2 .reg_info.index: 306
variable_qualifier/0.2 .first: {',' ε}
variable_qualifier/0.2 .derives_empty: True
variable_qualifier/0.2 .follow: {'>'}
global_variable_decl/0.0  -> ( Choice global_variable_decl/0.0/0 ε )
global_variable_decl/0.0 .reg_info.index: 1474
global_variable_decl/0.0 .first: {'@' ε}
global_variable_decl/0.0 .derives_empty: True
global_variable_decl/0.0 .follow: {'var'}
global_variable_decl/0.2  -> ( Choice ( Seq '=' expression ) ε )
global_variable_decl/0.2 .reg_info.index: 328
global_variable_decl/0.2 .first: {'=' ε}
global_variable_decl/0.2 .derives_empty: True
global_variable_decl/0.2 .follow: {';'}
global_constant_decl/1.0  -> ( Choice global_constant_decl/1.0/0 ε )
global_constant_decl/1.0 .reg_info.index: 1481
global_constant_decl/1.0 .first: {'@' ε}
global_constant_decl/1.0 .derives_empty: True
global_constant_decl/1.0 .follow: {'override'}
global_constant_decl/1.3  -> ( Choice ( Seq '=' expression ) ε )
global_constant_decl/1.3 .reg_info.index: 328
global_constant_decl/1.3 .first: {'=' ε}
global_constant_decl/1.3 .derives_empty: True
global_constant_decl/1.3 .follow: {';'}
argument_expression_list/0.1  -> ( Choice expression_comma_list ε )
argument_expression_list/0.1 .reg_info.index: 344
argument_expression_list/0.1 .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/ ε}
argument_expression_list/0.1 .derives_empty: True
argument_expression_list/0.1 .follow: {')'}
expression_comma_list/0.1  -> ( Choice expression_comma_list/0.1/0 ε )
expression_comma_list/0.1 .reg_info.index: 1489
expression_comma_list/0.1 .first: {',' ε}
expression_comma_list/0.1 .derives_empty: True
expression_comma_list/0.1 .follow: {')' ','}
expression_comma_list/0.2  -> ( Choice ',' ε )
expression_comma_list/0.2 .reg_info.index: 256
expression_comma_list/0.2 .first: {',' ε}
expression_comma_list/0.2 .derives_empty: True
expression_comma_list/0.2 .follow: {')' ':' '@' '{' '}'}
component_or_swizzle_specifier/0.3  -> ( Choice component_or_swizzle_specifier ε )
component_or_swizzle_specifier/0.3 .reg_info.index: 351
component_or_swizzle_specifier/0.3 .first: {'.' '[' ε}
component_or_swizzle_specifier/0.3 .derives_empty: True
component_or_swizzle_specifier/0.3 .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier/1.2  -> ( Choice component_or_swizzle_specifier ε )
component_or_swizzle_specifier/1.2 .reg_info.index: 351
component_or_swizzle_specifier/1.2 .first: {'.' '[' ε}
component_or_swizzle_specifier/1.2 .derives_empty: True
component_or_swizzle_specifier/1.2 .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier/2.2  -> ( Choice component_or_swizzle_specifier ε )
component_or_swizzle_specifier/2.2 .reg_info.index: 351
component_or_swizzle_specifier/2.2 .first: {'.' '[' ε}
component_or_swizzle_specifier/2.2 .derives_empty: True
component_or_swizzle_specifier/2.2 .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
singular_expression/0.1  -> ( Choice component_or_swizzle_specifier ε )
singular_expression/0.1 .reg_info.index: 351
singular_expression/0.1 .first: {'.' '[' ε}
singular_expression/0.1 .derives_empty: True
singular_expression/0.1 .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
lhs_expression/0.1  -> ( Choice component_or_swizzle_specifier ε )
lhs_expression/0.1 .reg_info.index: 351
lhs_expression/0.1 .first: {'.' '[' ε}
lhs_expression/0.1 .derives_empty: True
lhs_expression/0.1 .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
compound_statement/0.0  -> ( Choice compound_statement/0.0/0 ε )
compound_statement/0.0 .reg_info.index: 1499
compound_statement/0.0 .first: {'@' ε}
compound_statement/0.0 .derives_empty: True
compound_statement/0.0 .follow: {'{'}
compound_statement/0.2  -> ( Choice compound_statement/0.2/0 ε )
compound_statement/0.2 .reg_info.index: 1503
compound_statement/0.2 .first: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
compound_statement/0.2 .derives_empty: True
compound_statement/0.2 .follow: {'}'}
assignment_statement/0.1  -> ( Choice '=' compound_assignment_operator )
assignment_statement/0.1 .reg_info.index: 418
assignment_statement/0.1 .first: {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
assignment_statement/0.1 .derives_empty: False
assignment_statement/0.1 .follow: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
if_statement/0.0  -> ( Choice if_statement/0.0/0 ε )
if_statement/0.0 .reg_info.index: 1508
if_statement/0.0 .first: {'@' ε}
if_statement/0.0 .derives_empty: True
if_statement/0.0 .follow: {'if'}
if_statement/0.2  -> ( Choice if_statement/0.2/0 ε )
if_statement/0.2 .reg_info.index: 1512
if_statement/0.2 .first: {'else' ε}
if_statement/0.2 .derives_empty: True
if_statement/0.2 .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.3  -> ( Choice else_clause ε )
if_statement/0.3 .reg_info.index: 430
if_statement/0.3 .first: {'else' ε}
if_statement/0.3 .derives_empty: True
if_statement/0.3 .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0  -> ( Choice switch_statement/0.0/0 ε )
switch_statement/0.0 .reg_info.index: 1517
switch_statement/0.0 .first: {'@' ε}
switch_statement/0.0 .derives_empty: True
switch_statement/0.0 .follow: {'switch'}
switch_body/0.0  -> ( Choice switch_body/0.0/0 ε )
switch_body/0.0 .reg_info.index: 1521
switch_body/0.0 .first: {'@' ε}
switch_body/0.0 .derives_empty: True
switch_body/0.0 .follow: {'{'}
switch_body/0.2  -> ( Choice switch_body/0.2/0 )
switch_body/0.2 .reg_info.index: 1416
switch_body/0.2 .first: {'case' 'default' ε}
switch_body/0.2 .derives_empty: True
switch_body/0.2 .follow: {'}'}
case_clause/0.2  -> ( Choice ':' ε )
case_clause/0.2 .reg_info.index: 445
case_clause/0.2 .first: {':' ε}
case_clause/0.2 .derives_empty: True
case_clause/0.2 .follow: {'@' '{'}
default_alone_clause/0.1  -> ( Choice ':' ε )
default_alone_clause/0.1 .reg_info.index: 445
default_alone_clause/0.1 .first: {':' ε}
default_alone_clause/0.1 .derives_empty: True
default_alone_clause/0.1 .follow: {'@' '{'}
case_selectors/0.1  -> ( Choice case_selectors/0.1/0 ε )
case_selectors/0.1 .reg_info.index: 1527
case_selectors/0.1 .first: {',' ε}
case_selectors/0.1 .derives_empty: True
case_selectors/0.1 .follow: {',' ':' '@' '{'}
case_selectors/0.2  -> ( Choice ',' ε )
case_selectors/0.2 .reg_info.index: 256
case_selectors/0.2 .first: {',' ε}
case_selectors/0.2 .derives_empty: True
case_selectors/0.2 .follow: {')' ':' '@' '{' '}'}
loop_statement/0.0  -> ( Choice loop_statement/0.0/0 ε )
loop_statement/0.0 .reg_info.index: 1532
loop_statement/0.0 .first: {'@' ε}
loop_statement/0.0 .derives_empty: True
loop_statement/0.0 .follow: {'loop'}
loop_statement/0.2  -> ( Choice loop_statement/0.2/0 ε )
loop_statement/0.2 .reg_info.index: 1536
loop_statement/0.2 .first: {'@' ε}
loop_statement/0.2 .derives_empty: True
loop_statement/0.2 .follow: {'{'}
loop_statement/0.4  -> ( Choice loop_statement/0.4/0 ε )
loop_statement/0.4 .reg_info.index: 1540
loop_statement/0.4 .first: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
loop_statement/0.4 .derives_empty: True
loop_statement/0.4 .follow: {'continuing' '}'}
loop_statement/0.5  -> ( Choice continuing_statement ε )
loop_statement/0.5 .reg_info.index: 455
loop_statement/0.5 .first: {'continuing' ε}
loop_statement/0.5 .derives_empty: True
loop_statement/0.5 .follow: {'}'}
for_statement/0.0  -> ( Choice for_statement/0.0/0 ε )
for_statement/0.0 .reg_info.index: 1545
for_statement/0.0 .first: {'@' ε}
for_statement/0.0 .derives_empty: True
for_statement/0.0 .follow: {'for'}
for_header/0.0  -> ( Choice for_init ε )
for_header/0.0 .reg_info.index: 460
for_header/0.0 .first: {'&' '(' '*' '_' 'array' 'atomic' 'bool' 'const' 'f16' 'f32' 'i32' 'let' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
for_header/0.0 .derives_empty: True
for_header/0.0 .follow: {';'}
for_header/0.2  -> ( Choice expression ε )
for_header/0.2 .reg_info.index: 461
for_header/0.2 .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/ ε}
for_header/0.2 .derives_empty: True
for_header/0.2 .follow: {';'}
for_header/0.4  -> ( Choice for_update ε )
for_header/0.4 .reg_info.index: 463
for_header/0.4 .first: {'&' '(' '*' '_' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
for_header/0.4 .derives_empty: True
for_header/0.4 .follow: {')'}
while_statement/0.0  -> ( Choice while_statement/0.0/0 ε )
while_statement/0.0 .reg_info.index: 1552
while_statement/0.0 .first: {'@' ε}
while_statement/0.0 .derives_empty: True
while_statement/0.0 .follow: {'while'}
continuing_compound_statement/0.0  -> ( Choice continuing_compound_statement/0.0/0 ε )
continuing_compound_statement/0.0 .reg_info.index: 1556
continuing_compound_statement/0.0 .first: {'@' ε}
continuing_compound_statement/0.0 .derives_empty: True
continuing_compound_statement/0.0 .follow: {'{'}
continuing_compound_statement/0.2  -> ( Choice continuing_compound_statement/0.2/0 ε )
continuing_compound_statement/0.2 .reg_info.index: 1560
continuing_compound_statement/0.2 .first: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
continuing_compound_statement/0.2 .derives_empty: True
continuing_compound_statement/0.2 .follow: {'break' '}'}
continuing_compound_statement/0.3  -> ( Choice break_if_statement ε )
continuing_compound_statement/0.3 .reg_info.index: 475
continuing_compound_statement/0.3 .first: {'break' ε}
continuing_compound_statement/0.3 .derives_empty: True
continuing_compound_statement/0.3 .follow: {'}'}
return_statement/0.1  -> ( Choice expression ε )
return_statement/0.1 .reg_info.index: 461
return_statement/0.1 .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/ ε}
return_statement/0.1 .derives_empty: True
return_statement/0.1 .follow: {';'}
function_decl/0.0  -> ( Choice function_decl/0.0/0 ε )
function_decl/0.0 .reg_info.index: 1566
function_decl/0.0 .first: {'@' ε}
function_decl/0.0 .derives_empty: True
function_decl/0.0 .follow: {'fn'}
function_header/0.3  -> ( Choice param_list ε )
function_header/0.3 .reg_info.index: 502
function_header/0.3 .first: {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
function_header/0.3 .derives_empty: True
function_header/0.3 .follow: {')'}
function_header/0.5  -> ( Choice ( Seq '->' function_header/0.5/0.1 type_specifier ) ε )
function_header/0.5 .reg_info.index: 1573
function_header/0.5 .first: {'->' ε}
function_header/0.5 .derives_empty: True
function_header/0.5 .follow: {'@' '{'}
param_list/0.1  -> ( Choice param_list/0.1/0 ε )
param_list/0.1 .reg_info.index: 1577
param_list/0.1 .first: {',' ε}
param_list/0.1 .derives_empty: True
param_list/0.1 .follow: {')' ','}
param_list/0.2  -> ( Choice ',' ε )
param_list/0.2 .reg_info.index: 256
param_list/0.2 .first: {',' ε}
param_list/0.2 .derives_empty: True
param_list/0.2 .follow: {')' ':' '@' '{' '}'}
param/0.0  -> ( Choice param/0.0/0 ε )
param/0.0 .reg_info.index: 1582
param/0.0 .first: {'@' ε}
param/0.0 .derives_empty: True
param/0.0 .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_body/0.2/0  -> ( Choice ( Seq switch_clause switch_body/0.2/0 ) ε )
switch_body/0.2/0 .reg_info.index: 1415
switch_body/0.2/0 .first: {'case' 'default' ε}
switch_body/0.2/0 .derives_empty: True
switch_body/0.2/0 .follow: {'}'}
translation_unit/0.0/0  -> ( Choice ( Seq global_directive translation_unit/0.0/0 ) ε )
translation_unit/0.0/0 .reg_info.index: 1441
translation_unit/0.0/0 .first: {'diagnostic' 'enable' ε}
translation_unit/0.0/0 .derives_empty: True
translation_unit/0.0/0 .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.1/0  -> ( Choice ( Seq global_decl translation_unit/0.1/0 ) ε )
translation_unit/0.1/0 .reg_info.index: 1445
translation_unit/0.1/0 .first: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' ε}
translation_unit/0.1/0 .derives_empty: True
translation_unit/0.1/0 .follow: {EndOfText}
struct_body_decl/0.2/0  -> ( Choice ( Seq struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 ) ε )
struct_body_decl/0.2/0 .reg_info.index: 1601
struct_body_decl/0.2/0 .first: {',' ε}
struct_body_decl/0.2/0 .derives_empty: True
struct_body_decl/0.2/0 .follow: {',' '}'}
struct_member/0.0/0  -> ( Choice ( Seq attribute struct_member/0.0/0 ) ε )
struct_member/0.0/0 .reg_info.index: 1458
struct_member/0.0/0 .first: {'@' ε}
struct_member/0.0/0 .derives_empty: True
struct_member/0.0/0 .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
global_variable_decl/0.0/0  -> ( Choice ( Seq attribute global_variable_decl/0.0/0 ) ε )
global_variable_decl/0.0/0 .reg_info.index: 1472
global_variable_decl/0.0/0 .first: {'@' ε}
global_variable_decl/0.0/0 .derives_empty: True
global_variable_decl/0.0/0 .follow: {'var'}
global_constant_decl/1.0/0  -> ( Choice ( Seq attribute global_constant_decl/1.0/0 ) ε )
global_constant_decl/1.0/0 .reg_info.index: 1479
global_constant_decl/1.0/0 .first: {'@' ε}
global_constant_decl/1.0/0 .derives_empty: True
global_constant_decl/1.0/0 .follow: {'override'}
expression_comma_list/0.1/0  -> ( Choice ( Seq expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 ) ε )
expression_comma_list/0.1/0 .reg_info.index: 1620
expression_comma_list/0.1/0 .first: {',' ε}
expression_comma_list/0.1/0 .derives_empty: True
expression_comma_list/0.1/0 .follow: {')' ','}
compound_statement/0.0/0  -> ( Choice ( Seq attribute compound_statement/0.0/0 ) ε )
compound_statement/0.0/0 .reg_info.index: 1497
compound_statement/0.0/0 .first: {'@' ε}
compound_statement/0.0/0 .derives_empty: True
compound_statement/0.0/0 .follow: {'{'}
compound_statement/0.2/0  -> ( Choice ( Seq statement compound_statement/0.2/0 ) ε )
compound_statement/0.2/0 .reg_info.index: 1501
compound_statement/0.2/0 .first: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
compound_statement/0.2/0 .derives_empty: True
compound_statement/0.2/0 .follow: {'}'}
if_statement/0.0/0  -> ( Choice ( Seq attribute if_statement/0.0/0 ) ε )
if_statement/0.0/0 .reg_info.index: 1506
if_statement/0.0/0 .first: {'@' ε}
if_statement/0.0/0 .derives_empty: True
if_statement/0.0/0 .follow: {'if'}
if_statement/0.2/0  -> ( Choice ( Seq else_if_clause if_statement/0.2/0 ) ε )
if_statement/0.2/0 .reg_info.index: 1510
if_statement/0.2/0 .first: {'else' ε}
if_statement/0.2/0 .derives_empty: True
if_statement/0.2/0 .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0/0  -> ( Choice ( Seq attribute switch_statement/0.0/0 ) ε )
switch_statement/0.0/0 .reg_info.index: 1515
switch_statement/0.0/0 .first: {'@' ε}
switch_statement/0.0/0 .derives_empty: True
switch_statement/0.0/0 .follow: {'switch'}
switch_body/0.0/0  -> ( Choice ( Seq attribute switch_body/0.0/0 ) ε )
switch_body/0.0/0 .reg_info.index: 1519
switch_body/0.0/0 .first: {'@' ε}
switch_body/0.0/0 .derives_empty: True
switch_body/0.0/0 .follow: {'{'}
case_selectors/0.1/0  -> ( Choice ( Seq case_selectors/0.1/0/0.0 case_selectors/0.1/0 ) ε )
case_selectors/0.1/0 .reg_info.index: 1651
case_selectors/0.1/0 .first: {',' ε}
case_selectors/0.1/0 .derives_empty: True
case_selectors/0.1/0 .follow: {',' ':' '@' '{'}
loop_statement/0.0/0  -> ( Choice ( Seq attribute loop_statement/0.0/0 ) ε )
loop_statement/0.0/0 .reg_info.index: 1530
loop_statement/0.0/0 .first: {'@' ε}
loop_statement/0.0/0 .derives_empty: True
loop_statement/0.0/0 .follow: {'loop'}
loop_statement/0.2/0  -> ( Choice ( Seq attribute loop_statement/0.2/0 ) ε )
loop_statement/0.2/0 .reg_info.index: 1534
loop_statement/0.2/0 .first: {'@' ε}
loop_statement/0.2/0 .derives_empty: True
loop_statement/0.2/0 .follow: {'{'}
loop_statement/0.4/0  -> ( Choice ( Seq statement loop_statement/0.4/0 ) ε )
loop_statement/0.4/0 .reg_info.index: 1538
loop_statement/0.4/0 .first: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
loop_statement/0.4/0 .derives_empty: True
loop_statement/0.4/0 .follow: {'continuing' '}'}
for_statement/0.0/0  -> ( Choice ( Seq attribute for_statement/0.0/0 ) ε )
for_statement/0.0/0 .reg_info.index: 1543
for_statement/0.0/0 .first: {'@' ε}
for_statement/0.0/0 .derives_empty: True
for_statement/0.0/0 .follow: {'for'}
while_statement/0.0/0  -> ( Choice ( Seq attribute while_statement/0.0/0 ) ε )
while_statement/0.0/0 .reg_info.index: 1550
while_statement/0.0/0 .first: {'@' ε}
while_statement/0.0/0 .derives_empty: True
while_statement/0.0/0 .follow: {'while'}
continuing_compound_statement/0.0/0  -> ( Choice ( Seq attribute continuing_compound_statement/0.0/0 ) ε )
continuing_compound_statement/0.0/0 .reg_info.index: 1554
continuing_compound_statement/0.0/0 .first: {'@' ε}
continuing_compound_statement/0.0/0 .derives_empty: True
continuing_compound_statement/0.0/0 .follow: {'{'}
continuing_compound_statement/0.2/0  -> ( Choice ( Seq statement continuing_compound_statement/0.2/0 ) ε )
continuing_compound_statement/0.2/0 .reg_info.index: 1558
continuing_compound_statement/0.2/0 .first: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
continuing_compound_statement/0.2/0 .derives_empty: True
continuing_compound_statement/0.2/0 .follow: {'break' '}'}
function_decl/0.0/0  -> ( Choice ( Seq attribute function_decl/0.0/0 ) ε )
function_decl/0.0/0 .reg_info.index: 1564
function_decl/0.0/0 .first: {'@' ε}
function_decl/0.0/0 .derives_empty: True
function_decl/0.0/0 .follow: {'fn'}
function_header/0.5/0.1  -> ( Choice function_header/0.5/0.1/0 ε )
function_header/0.5/0.1 .reg_info.index: 1699
function_header/0.5/0.1 .first: {'@' ε}
function_header/0.5/0.1 .derives_empty: True
function_header/0.5/0.1 .follow: {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.1/0  -> ( Choice ( Seq param_list/0.1/0/0.0 param_list/0.1/0 ) ε )
param_list/0.1/0 .reg_info.index: 1691
param_list/0.1/0 .first: {',' ε}
param_list/0.1/0 .derives_empty: True
param_list/0.1/0 .follow: {')' ','}
param/0.0/0  -> ( Choice ( Seq attribute param/0.0/0 ) ε )
param/0.0/0 .reg_info.index: 1580
param/0.0/0 .first: {'@' ε}
param/0.0/0 .derives_empty: True
param/0.0/0 .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.2/0/0.0  -> ( Choice ( Seq ',' struct_member ) )
struct_body_decl/0.2/0/0.0 .reg_info.index: 1597
struct_body_decl/0.2/0/0.0 .first: {','}
struct_body_decl/0.2/0/0.0 .derives_empty: False
struct_body_decl/0.2/0/0.0 .follow: {',' '}'}
expression_comma_list/0.1/0/0.0  -> ( Choice ( Seq ',' expression ) )
expression_comma_list/0.1/0/0.0 .reg_info.index: 1616
expression_comma_list/0.1/0/0.0 .first: {','}
expression_comma_list/0.1/0/0.0 .derives_empty: False
expression_comma_list/0.1/0/0.0 .follow: {')' ','}
case_selectors/0.1/0/0.0  -> ( Choice ( Seq ',' case_selector ) )
case_selectors/0.1/0/0.0 .reg_info.index: 1647
case_selectors/0.1/0/0.0 .first: {','}
case_selectors/0.1/0/0.0 .derives_empty: False
case_selectors/0.1/0/0.0 .follow: {',' ':' '@' '{'}
param_list/0.1/0/0.0  -> ( Choice ( Seq ',' param ) )
param_list/0.1/0/0.0 .reg_info.index: 1687
param_list/0.1/0/0.0 .first: {','}
param_list/0.1/0/0.0 .derives_empty: False
param_list/0.1/0/0.0 .follow: {')' ','}
function_header/0.5/0.1/0  -> ( Choice ( Seq attribute function_header/0.5/0.1/0 ) ε )
function_header/0.5/0.1/0 .reg_info.index: 1697
function_header/0.5/0.1/0 .first: {'@' ε}
function_header/0.5/0.1/0 .derives_empty: True
function_header/0.5/0.1/0 .follow: {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

=LALR1 item sets:
#0
language -> · translation_unit EndOfText : {EndOfText}
diagnostic_directive -> · 'diagnostic' diagnostic_control ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
enable_directive -> · 'enable' extension_name ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
global_directive -> · diagnostic_directive : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
global_directive -> · enable_directive : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit -> · translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> · translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#1
language -> translation_unit · EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 · translation_unit/0.1 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
const_assert_statement -> · 'const_assert' expression : {';'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · const_assert_statement ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · function_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · global_constant_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · global_variable_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · type_alias_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.1 -> · translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'alias' ident '=' type_specifier : {';'}

#3
translation_unit/0.0 -> translation_unit/0.0/0 · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#4
translation_unit/0.0/0 -> global_directive · translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
diagnostic_directive -> · 'diagnostic' diagnostic_control ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
enable_directive -> · 'enable' extension_name ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
global_directive -> · diagnostic_directive : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
global_directive -> · enable_directive : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#5
global_directive -> diagnostic_directive · : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}

#6
global_directive -> enable_directive · : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}

#7
diagnostic_directive -> 'diagnostic' · diagnostic_control ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
diagnostic_control -> · '(' severity_control_name ',' diagnostic_rule_name attrib_end : {';'}

#8
enable_directive -> 'enable' · extension_name ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
extension_name -> · 'f16' : {';'}

#9
enable_directive -> 'enable' extension_name · ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}

#10
extension_name -> 'f16' · : {';'}

#11
diagnostic_directive -> 'diagnostic' diagnostic_control · ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}

#12
diagnostic_control -> '(' · severity_control_name ',' diagnostic_rule_name attrib_end : {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
severity_control_name -> · 'error' : {','}
severity_control_name -> · 'info' : {','}
severity_control_name -> · 'off' : {','}
severity_control_name -> · 'warning' : {','}

#13
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#14
translation_unit -> translation_unit/0.0 translation_unit/0.1 · : {EndOfText}

#15
translation_unit/0.1 -> translation_unit/0.1/0 · : {EndOfText}

#16
translation_unit/0.1/0 -> global_decl · translation_unit/0.1/0 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
const_assert_statement -> · 'const_assert' expression : {';'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · const_assert_statement ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · function_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · global_constant_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · global_variable_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · type_alias_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'alias' ident '=' type_specifier : {';'}

#17
global_decl -> ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#18
global_decl -> global_variable_decl · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#19
global_decl -> global_constant_decl · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#20
global_decl -> type_alias_decl · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#21
global_decl -> struct_decl · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#22
global_decl -> function_decl · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#23
global_decl -> const_assert_statement · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#24
global_variable_decl -> global_variable_decl/0.0 · variable_decl global_variable_decl/0.2 : {';'}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}

#25
global_constant_decl -> 'const' · optionally_typed_ident '=' expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#26
global_constant_decl -> global_constant_decl/1.0 · 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}

#27
type_alias_decl -> 'alias' · ident '=' type_specifier : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'='}

#28
struct_decl -> 'struct' · ident struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}

#29
function_decl -> function_decl/0.0 · function_header compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_header -> · 'fn' ident '(' function_header/0.3 ')' function_header/0.5 : {'@' '{'}

#30
const_assert_statement -> 'const_assert' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#31
global_variable_decl/0.0 -> global_variable_decl/0.0/0 · : {'var'}

#32
global_constant_decl/1.0 -> global_constant_decl/1.0/0 · : {'override'}

#33
function_decl/0.0 -> function_decl/0.0/0 · : {'fn'}

#34
function_decl/0.0/0 -> attribute · function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> attribute · global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> attribute · global_variable_decl/0.0/0 : {'var'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}

#35
attribute -> '@' · 'align' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'binding' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'builtin' '(' builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'diagnostic' diagnostic_control : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'group' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'id' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'location' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'workgroup_size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#36
attribute -> '@' 'align' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#37
attribute -> '@' 'binding' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#38
attribute -> '@' 'builtin' · '(' builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#39
attribute -> '@' 'const' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#40
attribute -> '@' 'diagnostic' · diagnostic_control : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
diagnostic_control -> · '(' severity_control_name ',' diagnostic_rule_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#41
attribute -> '@' 'group' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#42
attribute -> '@' 'id' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#43
attribute -> '@' 'interpolate' · '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'interpolate' · '(' interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#44
attribute -> '@' 'invariant' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#45
attribute -> '@' 'location' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#46
attribute -> '@' 'size' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#47
attribute -> '@' 'workgroup_size' · '(' expression ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'workgroup_size' · '(' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'workgroup_size' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#48
attribute -> '@' 'vertex' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#49
attribute -> '@' 'fragment' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#50
attribute -> '@' 'compute' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#51
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 · : {'var'}

#52
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 · : {'override'}

#53
function_decl/0.0/0 -> attribute function_decl/0.0/0 · : {'fn'}

#54
const_assert_statement -> 'const_assert' expression · : {';'}

#55
expression -> relational_expression · : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_and_expression -> relational_expression · : {'&&'}
short_circuit_or_expression -> relational_expression · : {'||'}

#56
expression -> short_circuit_or_expression · '||' relational_expression : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression · '||' relational_expression : {'||'}

#57
expression -> short_circuit_and_expression · '&&' relational_expression : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression · '&&' relational_expression : {'&&'}

#58
expression -> bitwise_expression · : {')' ',' ':' ';' '@' ']' '{'}

#59
relational_expression -> shift_expression · '!=' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> shift_expression · '<' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> shift_expression · '<=' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> shift_expression · '==' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> shift_expression · '>' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> shift_expression · '>=' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> shift_expression · : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}

#60
binary_and_expression -> binary_and_expression · '&' unary_expression : {'&'}
bitwise_expression -> binary_and_expression · '&' unary_expression : {')' ',' ':' ';' '>' '@' ']' '{'}

#61
binary_or_expression -> binary_or_expression · '|' unary_expression : {'|'}
bitwise_expression -> binary_or_expression · '|' unary_expression : {')' ',' ':' ';' '>' '@' ']' '{'}

#62
binary_xor_expression -> binary_xor_expression · '^' unary_expression : {'^'}
bitwise_expression -> binary_xor_expression · '^' unary_expression : {')' ',' ':' ';' '>' '@' ']' '{'}

#63
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
shift_expression -> additive_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
additive_operator -> · '+' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_operator -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#64
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
shift_expression -> unary_expression · '<<' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
shift_expression -> unary_expression · '>>' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}

#65
additive_expression -> multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
multiplicative_operator -> · '%' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '/' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#66
unary_expression -> singular_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}

#67
unary_expression -> '-' · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#68
unary_expression -> '!' · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#69
unary_expression -> '~' · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#70
unary_expression -> '*' · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#71
unary_expression -> '&' · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#72
singular_expression -> primary_expression · singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}
singular_expression/0.1 -> · component_or_swizzle_specifier : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}

#73
callable -> ident · : {'('}
primary_expression -> ident · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#74
primary_expression -> call_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#75
primary_expression -> literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#76
primary_expression -> paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#77
primary_expression -> 'bitcast' · '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#78
ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' '(' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' '}'}

#79
call_expression -> callable · argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#80
literal -> int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#81
literal -> float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#82
literal -> bool_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#83
paren_expression -> '(' · expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')'}
expression -> · relational_expression : {')'}
expression -> · short_circuit_and_expression '&&' relational_expression : {')'}
expression -> · short_circuit_or_expression '||' relational_expression : {')'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression : {'&&' ')' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#84
callable -> type_specifier_without_ident · : {'('}

#85
callable -> vec_prefix · : {'('}
type_specifier_without_ident -> vec_prefix · '<' type_specifier '>' : {'('}

#86
callable -> mat_prefix · : {'('}
type_specifier_without_ident -> mat_prefix · '<' type_specifier '>' : {'('}

#87
array_type_specifier -> 'array' · '<' type_specifier array_type_specifier/0.3 '>' : {'('}
callable -> 'array' · : {'('}

#88
int_literal -> decimal_int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#89
int_literal -> hex_int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#90
float_literal -> decimal_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#91
float_literal -> hex_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#92
bool_literal -> 'true' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#93
bool_literal -> 'false' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#94
type_specifier_without_ident -> 'bool' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#95
type_specifier_without_ident -> 'f32' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#96
type_specifier_without_ident -> 'f16' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#97
type_specifier_without_ident -> 'i32' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#98
type_specifier_without_ident -> 'u32' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#99
type_specifier_without_ident -> 'ptr' · '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#100
type_specifier_without_ident -> array_type_specifier · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#101
type_specifier_without_ident -> 'atomic' · '<' type_specifier '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#102
type_specifier_without_ident -> texture_and_sampler_types · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#103
vec_prefix -> 'vec2' · : {'(' '<'}

#104
vec_prefix -> 'vec3' · : {'(' '<'}

#105
vec_prefix -> 'vec4' · : {'(' '<'}

#106
mat_prefix -> 'mat2x2' · : {'(' '<'}

#107
mat_prefix -> 'mat2x3' · : {'(' '<'}

#108
mat_prefix -> 'mat2x4' · : {'(' '<'}

#109
mat_prefix -> 'mat3x2' · : {'(' '<'}

#110
mat_prefix -> 'mat3x3' · : {'(' '<'}

#111
mat_prefix -> 'mat3x4' · : {'(' '<'}

#112
mat_prefix -> 'mat4x2' · : {'(' '<'}

#113
mat_prefix -> 'mat4x3' · : {'(' '<'}

#114
mat_prefix -> 'mat4x4' · : {'(' '<'}

#115
decimal_int_literal -> /0[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#116
decimal_int_literal -> /[1-9][0-9]*[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#117
hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#118
decimal_float_literal -> /0[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#119
decimal_float_literal -> /[1-9][0-9]*[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#120
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#121
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#122
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#123
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#124
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#125
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#126
texture_and_sampler_types -> sampler_type · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#127
texture_and_sampler_types -> depth_texture_type · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#128
texture_and_sampler_types -> sampled_texture_type · '<' type_specifier '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#129
texture_and_sampler_types -> multisampled_texture_type · '<' type_specifier '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#130
texture_and_sampler_types -> storage_texture_type · '<' texel_format ',' access_mode '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#131
sampler_type -> 'sampler' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#132
sampler_type -> 'sampler_comparison' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#133
depth_texture_type -> 'texture_depth_2d' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#134
depth_texture_type -> 'texture_depth_2d_array' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#135
depth_texture_type -> 'texture_depth_cube' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#136
depth_texture_type -> 'texture_depth_cube_array' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#137
depth_texture_type -> 'texture_depth_multisampled_2d' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#138
sampled_texture_type -> 'texture_1d' · : {'<'}

#139
sampled_texture_type -> 'texture_2d' · : {'<'}

#140
sampled_texture_type -> 'texture_2d_array' · : {'<'}

#141
sampled_texture_type -> 'texture_3d' · : {'<'}

#142
sampled_texture_type -> 'texture_cube' · : {'<'}

#143
sampled_texture_type -> 'texture_cube_array' · : {'<'}

#144
multisampled_texture_type -> 'texture_multisampled_2d' · : {'<'}

#145
storage_texture_type -> 'texture_storage_1d' · : {'<'}

#146
storage_texture_type -> 'texture_storage_2d' · : {'<'}

#147
storage_texture_type -> 'texture_storage_2d_array' · : {'<'}

#148
storage_texture_type -> 'texture_storage_3d' · : {'<'}

#149
function_decl -> function_decl/0.0 function_header · compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#150
function_header -> 'fn' · ident '(' function_header/0.3 ')' function_header/0.5 : {'@' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}

#151
struct_decl -> 'struct' ident · struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl -> · '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#152
type_alias_decl -> 'alias' ident · '=' type_specifier : {';'}

#153
global_constant_decl -> global_constant_decl/1.0 'override' · optionally_typed_ident global_constant_decl/1.3 : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {';' '='}

#154
global_constant_decl -> 'const' optionally_typed_ident · '=' expression : {';'}

#155
optionally_typed_ident -> ident · optionally_typed_ident/0.1 : {';' '='}
optionally_typed_ident/0.1 -> · ':' type_specifier : {';' '='}

#156
global_variable_decl -> global_variable_decl/0.0 variable_decl · global_variable_decl/0.2 : {';'}
global_variable_decl/0.2 -> · '=' expression : {';'}

#157
variable_decl -> 'var' · variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_decl/0.1 -> · variable_qualifier : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier -> · '<' address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#158
global_decl -> const_assert_statement ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#159
global_decl -> type_alias_decl ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#160
global_decl -> global_constant_decl ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#161
global_decl -> global_variable_decl ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#162
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 · : {EndOfText}

#163
diagnostic_control -> '(' severity_control_name · ',' diagnostic_rule_name attrib_end : {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#164
severity_control_name -> 'error' · : {','}

#165
severity_control_name -> 'warning' · : {','}

#166
severity_control_name -> 'info' · : {','}

#167
severity_control_name -> 'off' · : {','}

#168
diagnostic_directive -> 'diagnostic' diagnostic_control ';' · : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}

#169
enable_directive -> 'enable' extension_name ';' · : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}

#170
diagnostic_control -> '(' severity_control_name ',' · diagnostic_rule_name attrib_end : {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
diagnostic_rule_name -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' ','}

#171
variable_decl -> 'var' variable_decl/0.1 · optionally_typed_ident : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {';' '='}

#172
variable_decl/0.1 -> variable_qualifier · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#173
variable_qualifier -> '<' · address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
address_space -> · 'function' : {',' '>'}
address_space -> · 'private' : {',' '>'}
address_space -> · 'storage' : {',' '>'}
address_space -> · 'uniform' : {',' '>'}
address_space -> · 'workgroup' : {',' '>'}

#174
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 · : {';'}

#175
global_variable_decl/0.2 -> '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#176
optionally_typed_ident -> ident optionally_typed_ident/0.1 · : {';' '='}

#177
optionally_typed_ident/0.1 -> ':' · type_specifier : {';' '='}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {';' '='}
depth_texture_type -> · 'texture_depth_2d' : {';' '='}
depth_texture_type -> · 'texture_depth_2d_array' : {';' '='}
depth_texture_type -> · 'texture_depth_cube' : {';' '='}
depth_texture_type -> · 'texture_depth_cube_array' : {';' '='}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';' '='}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {';' '='}
sampler_type -> · 'sampler_comparison' : {';' '='}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {';' '='}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {';' '='}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {';' '='}
texture_and_sampler_types -> · sampler_type : {';' '='}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {';' '='}
type_specifier -> · ident : {';' '='}
type_specifier -> · type_specifier_without_ident : {';' '='}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {';' '='}
type_specifier_without_ident -> · 'bool' : {';' '='}
type_specifier_without_ident -> · 'f16' : {';' '='}
type_specifier_without_ident -> · 'f32' : {';' '='}
type_specifier_without_ident -> · 'i32' : {';' '='}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {';' '='}
type_specifier_without_ident -> · 'u32' : {';' '='}
type_specifier_without_ident -> · array_type_specifier : {';' '='}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {';' '='}
type_specifier_without_ident -> · texture_and_sampler_types : {';' '='}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {';' '='}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#178
global_constant_decl -> 'const' optionally_typed_ident '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#179
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident · global_constant_decl/1.3 : {';'}
global_constant_decl/1.3 -> · '=' expression : {';'}

#180
type_alias_decl -> 'alias' ident '=' · type_specifier : {';'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {';'}
depth_texture_type -> · 'texture_depth_2d_array' : {';'}
depth_texture_type -> · 'texture_depth_cube' : {';'}
depth_texture_type -> · 'texture_depth_cube_array' : {';'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {';'}
sampler_type -> · 'sampler_comparison' : {';'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {';'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {';'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {';'}
texture_and_sampler_types -> · sampler_type : {';'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {';'}
type_specifier -> · ident : {';'}
type_specifier -> · type_specifier_without_ident : {';'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {';'}
type_specifier_without_ident -> · 'bool' : {';'}
type_specifier_without_ident -> · 'f16' : {';'}
type_specifier_without_ident -> · 'f32' : {';'}
type_specifier_without_ident -> · 'i32' : {';'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {';'}
type_specifier_without_ident -> · 'u32' : {';'}
type_specifier_without_ident -> · array_type_specifier : {';'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {';'}
type_specifier_without_ident -> · texture_and_sampler_types : {';'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {';'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#181
struct_decl -> 'struct' ident struct_body_decl · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#182
struct_body_decl -> '{' · struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {',' '}'}
struct_member/0.0 -> · struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#183
function_header -> 'fn' ident · '(' function_header/0.3 ')' function_header/0.5 : {'@' '{'}

#184
function_decl -> function_decl/0.0 function_header compound_statement · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#185
compound_statement -> compound_statement/0.0 · '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'alias' 'array' 'atomic' 'bool' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#186
compound_statement/0.0 -> compound_statement/0.0/0 · : {'{'}

#187
compound_statement/0.0/0 -> attribute · compound_statement/0.0/0 : {'{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#188
texture_and_sampler_types -> storage_texture_type '<' · texel_format ',' access_mode '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}
texel_format -> · 'bgra8unorm' : {','}
texel_format -> · 'r32float' : {','}
texel_format -> · 'r32sint' : {','}
texel_format -> · 'r32uint' : {','}
texel_format -> · 'rg32float' : {','}
texel_format -> · 'rg32sint' : {','}
texel_format -> · 'rg32uint' : {','}
texel_format -> · 'rgba16float' : {','}
texel_format -> · 'rgba16sint' : {','}
texel_format -> · 'rgba16uint' : {','}
texel_format -> · 'rgba32float' : {','}
texel_format -> · 'rgba32sint' : {','}
texel_format -> · 'rgba32uint' : {','}
texel_format -> · 'rgba8sint' : {','}
texel_format -> · 'rgba8snorm' : {','}
texel_format -> · 'rgba8uint' : {','}
texel_format -> · 'rgba8unorm' : {','}

#189
texture_and_sampler_types -> multisampled_texture_type '<' · type_specifier '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · 'f16' : {'>'}
type_specifier_without_ident -> · 'f32' : {'>'}
type_specifier_without_ident -> · 'i32' : {'>'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'>'}
type_specifier_without_ident -> · 'u32' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#190
texture_and_sampler_types -> sampled_texture_type '<' · type_specifier '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · 'f16' : {'>'}
type_specifier_without_ident -> · 'f32' : {'>'}
type_specifier_without_ident -> · 'i32' : {'>'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'>'}
type_specifier_without_ident -> · 'u32' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#191
type_specifier_without_ident -> 'atomic' '<' · type_specifier '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · 'f16' : {'>'}
type_specifier_without_ident -> · 'f32' : {'>'}
type_specifier_without_ident -> · 'i32' : {'>'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'>'}
type_specifier_without_ident -> · 'u32' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#192
type_specifier_without_ident -> 'ptr' '<' · address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}
address_space -> · 'function' : {','}
address_space -> · 'private' : {','}
address_space -> · 'storage' : {','}
address_space -> · 'uniform' : {','}
address_space -> · 'workgroup' : {','}

#193
array_type_specifier -> 'array' '<' · type_specifier array_type_specifier/0.3 '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '>'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {',' '>'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {',' '>'}
texture_and_sampler_types -> · sampler_type : {',' '>'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {',' '>'}
type_specifier -> · ident : {',' '>'}
type_specifier -> · type_specifier_without_ident : {',' '>'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {',' '>'}
type_specifier_without_ident -> · 'bool' : {',' '>'}
type_specifier_without_ident -> · 'f16' : {',' '>'}
type_specifier_without_ident -> · 'f32' : {',' '>'}
type_specifier_without_ident -> · 'i32' : {',' '>'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {',' '>'}
type_specifier_without_ident -> · 'u32' : {',' '>'}
type_specifier_without_ident -> · array_type_specifier : {',' '>'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {',' '>'}
type_specifier_without_ident -> · texture_and_sampler_types : {',' '>'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {',' '>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#194
type_specifier_without_ident -> mat_prefix '<' · type_specifier '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · 'f16' : {'>'}
type_specifier_without_ident -> · 'f32' : {'>'}
type_specifier_without_ident -> · 'i32' : {'>'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'>'}
type_specifier_without_ident -> · 'u32' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#195
type_specifier_without_ident -> vec_prefix '<' · type_specifier '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · 'f16' : {'>'}
type_specifier_without_ident -> · 'f32' : {'>'}
type_specifier_without_ident -> · 'i32' : {'>'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'>'}
type_specifier_without_ident -> · 'u32' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#196
paren_expression -> '(' expression · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#197
call_expression -> callable argument_expression_list · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#198
argument_expression_list -> '(' · argument_expression_list/0.1 ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
argument_expression_list/0.1 -> · expression_comma_list : {')'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
expression_comma_list -> · expression expression_comma_list/0.1 expression_comma_list/0.2 : {')'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#199
primary_expression -> 'bitcast' '<' · type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · 'f16' : {'>'}
type_specifier_without_ident -> · 'f32' : {'>'}
type_specifier_without_ident -> · 'i32' : {'>'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'>'}
type_specifier_without_ident -> · 'u32' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#200
singular_expression -> primary_expression singular_expression/0.1 · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}

#201
singular_expression/0.1 -> component_or_swizzle_specifier · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}

#202
component_or_swizzle_specifier -> '[' · expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {']'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {']'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {']'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {']'}
expression -> · relational_expression : {']'}
expression -> · short_circuit_and_expression '&&' relational_expression : {']'}
expression -> · short_circuit_or_expression '||' relational_expression : {']'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression : {'&&' ']' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#203
component_or_swizzle_specifier -> '.' · member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> '.' · swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#204
unary_expression -> '&' unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}

#205
unary_expression -> '*' unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}

#206
unary_expression -> '~' unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}

#207
unary_expression -> '!' unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}

#208
unary_expression -> '-' unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '^' '{' '|' '||'}

#209
multiplicative_expression -> multiplicative_expression multiplicative_operator · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#210
multiplicative_operator -> '*' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#211
multiplicative_operator -> '/' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#212
multiplicative_operator -> '%' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#213
shift_expression -> unary_expression '<<' · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#214
shift_expression -> unary_expression '>>' · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#215
additive_expression -> additive_expression additive_operator · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#216
additive_operator -> '+' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#217
additive_operator -> '-' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#218
binary_xor_expression -> binary_xor_expression '^' · unary_expression : {'^'}
bitwise_expression -> binary_xor_expression '^' · unary_expression : {')' ',' ':' ';' '>' '@' ']' '{'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
call_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
literal -> · float_literal : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
literal -> · int_literal : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
primary_expression -> · call_expression : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
primary_expression -> · literal : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '@' '[' ']' '^' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' '@' ']' '^' '{'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {')' ',' ':' ';' '>' '@' ']' '^' '{'}
unary_expression -> · '&' unary_expression : {')' ',' ':' ';' '>' '@' ']' '^' '{'}
unary_expression -> · '*' unary_expression : {')' ',' ':' ';' '>' '@' ']' '^' '{'}
unary_expression -> · '-' unary_expression : {')' ',' ':' ';' '>' '@' ']' '^' '{'}
unary_expression -> · '~' unary_expression : {')' ',' ':' ';' '>' '@' ']' '^' '{'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' '@' ']' '^' '{'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#219
binary_or_expression -> binary_or_expression '|' · unary_expression : {'|'}
bitwise_expression -> binary_or_expression '|' · unary_expression : {')' ',' ':' ';' '>' '@' ']' '{'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
call_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
literal -> · float_literal : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
literal -> · int_literal : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
primary_expression -> · call_expression : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
primary_expression -> · literal : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '@' '[' ']' '{' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' '@' ']' '{' '|'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {')' ',' ':' ';' '>' '@' ']' '{' '|'}
unary_expression -> · '&' unary_expression : {')' ',' ':' ';' '>' '@' ']' '{' '|'}
unary_expression -> · '*' unary_expression : {')' ',' ':' ';' '>' '@' ']' '{' '|'}
unary_expression -> · '-' unary_expression : {')' ',' ':' ';' '>' '@' ']' '{' '|'}
unary_expression -> · '~' unary_expression : {')' ',' ':' ';' '>' '@' ']' '{' '|'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' '@' ']' '{' '|'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#220
binary_and_expression -> binary_and_expression '&' · unary_expression : {'&'}
bitwise_expression -> binary_and_expression '&' · unary_expression : {')' ',' ':' ';' '>' '@' ']' '{'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
bool_literal -> · 'true' : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
call_expression -> · callable argument_expression_list : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
decimal_int_literal -> · /0[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
float_literal -> · hex_float_literal : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'&' '(' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
int_literal -> · decimal_int_literal : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
int_literal -> · hex_int_literal : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
literal -> · bool_literal : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
literal -> · float_literal : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
literal -> · int_literal : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
primary_expression -> · call_expression : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
primary_expression -> · ident : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
primary_expression -> · literal : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
primary_expression -> · paren_expression : {'&' ')' ',' '.' ':' ';' '>' '@' '[' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'&' ')' ',' ':' ';' '>' '@' ']' '{'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'&' ')' ',' ':' ';' '>' '@' ']' '{'}
unary_expression -> · '&' unary_expression : {'&' ')' ',' ':' ';' '>' '@' ']' '{'}
unary_expression -> · '*' unary_expression : {'&' ')' ',' ':' ';' '>' '@' ']' '{'}
unary_expression -> · '-' unary_expression : {'&' ')' ',' ':' ';' '>' '@' ']' '{'}
unary_expression -> · '~' unary_expression : {'&' ')' ',' ':' ';' '>' '@' ']' '{'}
unary_expression -> · singular_expression : {'&' ')' ',' ':' ';' '>' '@' ']' '{'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#221
relational_expression -> shift_expression '<' · shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#222
relational_expression -> shift_expression '>' · shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#223
relational_expression -> shift_expression '<=' · shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#224
relational_expression -> shift_expression '>=' · shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#225
relational_expression -> shift_expression '==' · shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#226
relational_expression -> shift_expression '!=' · shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '@' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' '@' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#227
expression -> short_circuit_and_expression '&&' · relational_expression : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression '&&' · relational_expression : {'&&'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
primary_expression -> · call_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
primary_expression -> · literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> · shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '{'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '{'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '{'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '{'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '{'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '{'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '{'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#228
expression -> short_circuit_or_expression '||' · relational_expression : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression '||' · relational_expression : {'||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '{' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> · shift_expression '<' shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> · shift_expression '>' shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> · shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#229
attribute -> '@' 'workgroup_size' '(' · expression ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'workgroup_size' '(' · expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'workgroup_size' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#230
attribute -> '@' 'size' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#231
attribute -> '@' 'location' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#232
attribute -> '@' 'interpolate' '(' · interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'interpolate' '(' · interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
interpolation_type_name -> · 'flat' : {')' ','}
interpolation_type_name -> · 'linear' : {')' ','}
interpolation_type_name -> · 'perspective' : {')' ','}

#233
attribute -> '@' 'id' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#234
attribute -> '@' 'group' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#235
attribute -> '@' 'diagnostic' diagnostic_control · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#236
attribute -> '@' 'builtin' '(' · builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
builtin_value_name -> · 'frag_depth' : {')' ','}
builtin_value_name -> · 'front_facing' : {')' ','}
builtin_value_name -> · 'global_invocation_id' : {')' ','}
builtin_value_name -> · 'instance_index' : {')' ','}
builtin_value_name -> · 'local_invocation_id' : {')' ','}
builtin_value_name -> · 'local_invocation_index' : {')' ','}
builtin_value_name -> · 'num_workgroups' : {')' ','}
builtin_value_name -> · 'position' : {')' ','}
builtin_value_name -> · 'sample_index' : {')' ','}
builtin_value_name -> · 'sample_mask' : {')' ','}
builtin_value_name -> · 'vertex_index' : {')' ','}
builtin_value_name -> · 'workgroup_id' : {')' ','}

#237
attribute -> '@' 'binding' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#238
attribute -> '@' 'align' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#239
attribute -> '@' 'align' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#240
attribute -> '@' 'binding' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#241
attribute -> '@' 'builtin' '(' builtin_value_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#242
builtin_value_name -> 'vertex_index' · : {')' ','}

#243
builtin_value_name -> 'instance_index' · : {')' ','}

#244
builtin_value_name -> 'position' · : {')' ','}

#245
builtin_value_name -> 'front_facing' · : {')' ','}

#246
builtin_value_name -> 'frag_depth' · : {')' ','}

#247
builtin_value_name -> 'local_invocation_id' · : {')' ','}

#248
builtin_value_name -> 'local_invocation_index' · : {')' ','}

#249
builtin_value_name -> 'global_invocation_id' · : {')' ','}

#250
builtin_value_name -> 'workgroup_id' · : {')' ','}

#251
builtin_value_name -> 'num_workgroups' · : {')' ','}

#252
builtin_value_name -> 'sample_index' · : {')' ','}

#253
builtin_value_name -> 'sample_mask' · : {')' ','}

#254
attribute -> '@' 'group' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#255
attribute -> '@' 'id' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#256
attribute -> '@' 'interpolate' '(' interpolation_type_name · ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'interpolate' '(' interpolation_type_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#257
interpolation_type_name -> 'perspective' · : {')' ','}

#258
interpolation_type_name -> 'linear' · : {')' ','}

#259
interpolation_type_name -> 'flat' · : {')' ','}

#260
attribute -> '@' 'location' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#261
attribute -> '@' 'size' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#262
attribute -> '@' 'workgroup_size' '(' expression · ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'workgroup_size' '(' expression · ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'workgroup_size' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#263
expression -> short_circuit_or_expression '||' relational_expression · : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression '||' relational_expression · : {'||'}

#264
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
shift_expression -> unary_expression · '<<' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
shift_expression -> unary_expression · '>>' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}

#265
expression -> short_circuit_and_expression '&&' relational_expression · : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression '&&' relational_expression · : {'&&'}

#266
relational_expression -> shift_expression '!=' shift_expression · : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}

#267
relational_expression -> shift_expression '==' shift_expression · : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}

#268
relational_expression -> shift_expression '>=' shift_expression · : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}

#269
relational_expression -> shift_expression '<=' shift_expression · : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}

#270
relational_expression -> shift_expression '>' shift_expression · : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}

#271
relational_expression -> shift_expression '<' shift_expression · : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}

#272
binary_and_expression -> binary_and_expression '&' unary_expression · : {'&'}
bitwise_expression -> binary_and_expression '&' unary_expression · : {')' ',' ':' ';' '>' '@' ']' '{'}

#273
binary_or_expression -> binary_or_expression '|' unary_expression · : {'|'}
bitwise_expression -> binary_or_expression '|' unary_expression · : {')' ',' ':' ';' '>' '@' ']' '{'}

#274
binary_xor_expression -> binary_xor_expression '^' unary_expression · : {'^'}
bitwise_expression -> binary_xor_expression '^' unary_expression · : {')' ',' ':' ';' '>' '@' ']' '{'}

#275
additive_expression -> additive_expression additive_operator multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}
multiplicative_operator -> · '%' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '/' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#276
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}

#277
shift_expression -> unary_expression '>>' unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}

#278
shift_expression -> unary_expression '<<' unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}

#279
multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' '@' ']' '{' '||'}

#280
component_or_swizzle_specifier -> '.' member_ident · component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier/1.2 -> · component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}

#281
component_or_swizzle_specifier -> '.' swizzle_name · component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier/2.2 -> · component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}

#282
member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#283
swizzle_name -> '/[rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#284
swizzle_name -> '/[rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#285
swizzle_name -> '/[rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#286
swizzle_name -> '/[rgba][rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#287
swizzle_name -> '/[xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#288
swizzle_name -> '/[xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#289
swizzle_name -> '/[xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#290
swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#291
component_or_swizzle_specifier -> '[' expression · ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}

#292
primary_expression -> 'bitcast' '<' type_specifier · '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#293
type_specifier -> ident · : {')' ',' ';' '=' '>' '@' '{' '}'}

#294
type_specifier -> type_specifier_without_ident · : {')' ',' ';' '=' '>' '@' '{' '}'}

#295
type_specifier_without_ident -> vec_prefix · '<' type_specifier '>' : {')' ',' ';' '=' '>' '@' '{' '}'}

#296
type_specifier_without_ident -> mat_prefix · '<' type_specifier '>' : {')' ',' ';' '=' '>' '@' '{' '}'}

#297
array_type_specifier -> 'array' · '<' type_specifier array_type_specifier/0.3 '>' : {')' ',' ';' '=' '>' '@' '{' '}'}

#298
argument_expression_list -> '(' argument_expression_list/0.1 · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#299
argument_expression_list/0.1 -> expression_comma_list · : {')'}

#300
expression_comma_list -> expression · expression_comma_list/0.1 expression_comma_list/0.2 : {')'}
expression_comma_list/0.1 -> · expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {')' ','}

#301
paren_expression -> '(' expression ')' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#302
type_specifier_without_ident -> vec_prefix '<' type_specifier · '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#303
type_specifier_without_ident -> mat_prefix '<' type_specifier · '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#304
array_type_specifier -> 'array' '<' type_specifier · array_type_specifier/0.3 '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}
array_type_specifier/0.3 -> · ',' element_count_expression : {'>'}

#305
type_specifier_without_ident -> 'ptr' '<' address_space · ',' type_specifier type_specifier_without_ident/7.5 '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#306
address_space -> 'function' · : {',' '>'}

#307
address_space -> 'private' · : {',' '>'}

#308
address_space -> 'workgroup' · : {',' '>'}

#309
address_space -> 'uniform' · : {',' '>'}

#310
address_space -> 'storage' · : {',' '>'}

#311
type_specifier_without_ident -> 'atomic' '<' type_specifier · '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#312
texture_and_sampler_types -> sampled_texture_type '<' type_specifier · '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#313
texture_and_sampler_types -> multisampled_texture_type '<' type_specifier · '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#314
texture_and_sampler_types -> storage_texture_type '<' texel_format · ',' access_mode '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#315
texel_format -> 'rgba8unorm' · : {','}

#316
texel_format -> 'rgba8snorm' · : {','}

#317
texel_format -> 'rgba8uint' · : {','}

#318
texel_format -> 'rgba8sint' · : {','}

#319
texel_format -> 'rgba16uint' · : {','}

#320
texel_format -> 'rgba16sint' · : {','}

#321
texel_format -> 'rgba16float' · : {','}

#322
texel_format -> 'r32uint' · : {','}

#323
texel_format -> 'r32sint' · : {','}

#324
texel_format -> 'r32float' · : {','}

#325
texel_format -> 'rg32uint' · : {','}

#326
texel_format -> 'rg32sint' · : {','}

#327
texel_format -> 'rg32float' · : {','}

#328
texel_format -> 'rgba32uint' · : {','}

#329
texel_format -> 'rgba32sint' · : {','}

#330
texel_format -> 'rgba32float' · : {','}

#331
texel_format -> 'bgra8unorm' · : {','}

#332
compound_statement/0.0/0 -> attribute compound_statement/0.0/0 · : {'{'}

#333
compound_statement -> compound_statement/0.0 '{' · compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'alias' 'array' 'atomic' 'bool' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'compute' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'const' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'fragment' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'invariant' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'vertex' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> · 'break' : {';'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}
compound_statement/0.2 -> · compound_statement/0.2/0 : {'}'}
compound_statement/0.2/0 -> · statement compound_statement/0.2/0 : {'}'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> · for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {'for'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> · if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {'if'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> · loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {'loop'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> · switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {'switch'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> · while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {'while'}

#334
function_header -> 'fn' ident '(' · function_header/0.3 ')' function_header/0.5 : {'@' '{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.3 -> · param_list : {')'}
param -> · param/0.0 ident ':' type_specifier : {')' ','}
param/0.0 -> · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list -> · param param_list/0.1 param_list/0.2 : {')'}

#335
struct_body_decl -> '{' struct_member · struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl/0.2 -> · struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {',' '}'}

#336
struct_member -> struct_member/0.0 · member_ident ':' type_specifier : {',' '}'}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}

#337
struct_member/0.0 -> struct_member/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#338
struct_member/0.0/0 -> attribute · struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#339
type_alias_decl -> 'alias' ident '=' type_specifier · : {';'}

#340
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 · : {';'}

#341
global_constant_decl/1.3 -> '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#342
global_constant_decl -> 'const' optionally_typed_ident '=' expression · : {';'}

#343
optionally_typed_ident/0.1 -> ':' type_specifier · : {';' '='}

#344
global_variable_decl/0.2 -> '=' expression · : {';'}

#345
variable_qualifier -> '<' address_space · variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier/0.2 -> · ',' access_mode : {'>'}

#346
variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident · : {';' '='}

#347
diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name · attrib_end : {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#348
diagnostic_rule_name -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {')' ','}

#349
diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name attrib_end · : {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#350
attrib_end -> attrib_end/0.0 · ')' : {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#351
attrib_end/0.0 -> ',' · : {')'}

#352
variable_qualifier -> '<' address_space variable_qualifier/0.2 · '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#353
variable_qualifier/0.2 -> ',' · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#354
global_constant_decl/1.3 -> '=' expression · : {';'}

#355
struct_member/0.0/0 -> attribute struct_member/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#356
struct_member -> struct_member/0.0 member_ident · ':' type_specifier : {',' '}'}

#357
struct_body_decl -> '{' struct_member struct_body_decl/0.2 · struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl/0.3 -> · ',' : {'}'}

#358
struct_body_decl/0.2 -> struct_body_decl/0.2/0 · : {',' '}'}

#359
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 · struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {',' '}'}

#360
struct_body_decl/0.2/0/0.0 -> ',' · struct_member : {',' '}'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {',' '}'}
struct_member/0.0 -> · struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#361
function_header -> 'fn' ident '(' function_header/0.3 · ')' function_header/0.5 : {'@' '{'}

#362
function_header/0.3 -> param_list · : {')'}

#363
param_list -> param · param_list/0.1 param_list/0.2 : {')'}
param_list/0.1 -> · param_list/0.1/0 : {')' ','}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {')' ','}
param_list/0.1/0/0.0 -> · ',' param : {')' ','}

#364
param -> param/0.0 · ident ':' type_specifier : {')' ','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}

#365
param/0.0 -> param/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#366
param/0.0/0 -> attribute · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#367
compound_statement -> compound_statement/0.0 '{' compound_statement/0.2 · '}' : {'&' '(' '*' ';' '@' '_' 'alias' 'array' 'atomic' 'bool' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#368
compound_statement/0.2 -> compound_statement/0.2/0 · : {'}'}

#369
compound_statement/0.2/0 -> statement · compound_statement/0.2/0 : {'}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'compute' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'const' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'fragment' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'invariant' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'vertex' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> · 'break' : {';'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}
compound_statement/0.2/0 -> · statement compound_statement/0.2/0 : {'}'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> · for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {'for'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> · if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {'if'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> · loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {'loop'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> · switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {'switch'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> · while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {'while'}

#370
statement -> ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#371
statement -> return_statement · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#372
statement -> if_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#373
statement -> switch_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#374
statement -> loop_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#375
statement -> for_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#376
statement -> while_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#377
statement -> func_call_statement · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#378
statement -> variable_statement · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#379
statement -> break_statement · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#380
statement -> continue_statement · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#381
statement -> 'discard' · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#382
statement -> variable_updating_statement · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#383
statement -> compound_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#384
statement -> const_assert_statement · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#385
return_statement -> 'return' · return_statement/0.1 : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
return_statement/0.1 -> · expression : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#386
if_statement -> if_statement/0.0 · if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#387
switch_statement -> switch_statement/0.0 · 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#388
loop_statement -> loop_statement/0.0 · 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#389
for_statement -> for_statement/0.0 · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#390
while_statement -> while_statement/0.0 · 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#391
func_call_statement -> callable · argument_expression_list : {')' ';'}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {')' ';'}

#392
variable_statement -> variable_decl · '=' expression : {';'}
variable_statement -> variable_decl · : {';'}

#393
variable_statement -> 'let' · optionally_typed_ident '=' expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#394
variable_statement -> 'const' · optionally_typed_ident '=' expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#395
break_statement -> 'break' · : {';'}

#396
continue_statement -> 'continue' · : {';'}

#397
variable_updating_statement -> assignment_statement · : {')' ';'}

#398
variable_updating_statement -> increment_statement · : {')' ';'}

#399
variable_updating_statement -> decrement_statement · : {')' ';'}

#400
if_statement/0.0 -> if_statement/0.0/0 · : {'if'}

#401
switch_statement/0.0 -> switch_statement/0.0/0 · : {'switch'}

#402
loop_statement/0.0 -> loop_statement/0.0/0 · : {'loop'}

#403
for_statement/0.0 -> for_statement/0.0/0 · : {'for'}

#404
while_statement/0.0 -> while_statement/0.0/0 · : {'while'}

#405
callable -> ident · : {'('}
core_lhs_expression -> ident · : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#406
assignment_statement -> lhs_expression · assignment_statement/0.1 expression : {')' ';'}
decrement_statement -> lhs_expression · '--' : {')' ';'}
increment_statement -> lhs_expression · '++' : {')' ';'}
assignment_statement/0.1 -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
assignment_statement/0.1 -> · compound_assignment_operator : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '%=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '&=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '*=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '+=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '-=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '/=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '<<=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '>>=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '^=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '|=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#407
assignment_statement -> '_' · '=' expression : {')' ';'}

#408
compound_statement/0.0/0 -> attribute · compound_statement/0.0/0 : {'{'}
for_statement/0.0/0 -> attribute · for_statement/0.0/0 : {'for'}
if_statement/0.0/0 -> attribute · if_statement/0.0/0 : {'if'}
loop_statement/0.0/0 -> attribute · loop_statement/0.0/0 : {'loop'}
switch_statement/0.0/0 -> attribute · switch_statement/0.0/0 : {'switch'}
while_statement/0.0/0 -> attribute · while_statement/0.0/0 : {'while'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'compute' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'const' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'fragment' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'invariant' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'vertex' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {'for'}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {'if'}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {'loop'}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {'switch'}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {'while'}

#409
lhs_expression -> core_lhs_expression · lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.1 -> · component_or_swizzle_specifier : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#410
lhs_expression -> '*' · lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#411
lhs_expression -> '&' · lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#412
core_lhs_expression -> '(' · lhs_expression ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · '(' lhs_expression ')' : {')' '.' '['}
core_lhs_expression -> · ident : {')' '.' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' '.' '['}
lhs_expression -> · '&' lhs_expression : {')'}
lhs_expression -> · '*' lhs_expression : {')'}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {')'}

#413
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' · access_mode '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#414
texture_and_sampler_types -> multisampled_texture_type '<' type_specifier '>' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#415
texture_and_sampler_types -> sampled_texture_type '<' type_specifier '>' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#416
type_specifier_without_ident -> 'atomic' '<' type_specifier '>' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#417
type_specifier_without_ident -> 'ptr' '<' address_space ',' · type_specifier type_specifier_without_ident/7.5 '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '>'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {',' '>'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {',' '>'}
texture_and_sampler_types -> · sampler_type : {',' '>'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {',' '>'}
type_specifier -> · ident : {',' '>'}
type_specifier -> · type_specifier_without_ident : {',' '>'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {',' '>'}
type_specifier_without_ident -> · 'bool' : {',' '>'}
type_specifier_without_ident -> · 'f16' : {',' '>'}
type_specifier_without_ident -> · 'f32' : {',' '>'}
type_specifier_without_ident -> · 'i32' : {',' '>'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {',' '>'}
type_specifier_without_ident -> · 'u32' : {',' '>'}
type_specifier_without_ident -> · array_type_specifier : {',' '>'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {',' '>'}
type_specifier_without_ident -> · texture_and_sampler_types : {',' '>'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {',' '>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#418
array_type_specifier -> 'array' '<' type_specifier array_type_specifier/0.3 · '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#419
array_type_specifier/0.3 -> ',' · element_count_expression : {'>'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-' '>'}
additive_expression -> · multiplicative_expression : {'+' '-' '>'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'>'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'>'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'>'}
bool_literal -> · 'false' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
bool_literal -> · 'true' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
call_expression -> · callable argument_expression_list : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
element_count_expression -> · additive_expression : {'>'}
element_count_expression -> · bitwise_expression : {'>'}
float_literal -> · decimal_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
float_literal -> · hex_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&' '(' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int_literal -> · decimal_int_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int_literal -> · hex_int_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
literal -> · bool_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
literal -> · float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
literal -> · int_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/' '>'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/' '>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · call_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · ident : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · '&' unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · '*' unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · '-' unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · '~' unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · singular_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#420
type_specifier_without_ident -> mat_prefix '<' type_specifier '>' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#421
type_specifier_without_ident -> vec_prefix '<' type_specifier '>' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#422
expression_comma_list -> expression expression_comma_list/0.1 · expression_comma_list/0.2 : {')'}
expression_comma_list/0.2 -> · ',' : {')'}

#423
expression_comma_list/0.1 -> expression_comma_list/0.1/0 · : {')' ','}

#424
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 · expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {')' ','}

#425
expression_comma_list/0.1/0/0.0 -> ',' · expression : {')' ','}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#426
argument_expression_list -> '(' argument_expression_list/0.1 ')' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#427
primary_expression -> 'bitcast' '<' type_specifier '>' · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#428
component_or_swizzle_specifier -> '[' expression ']' · component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier/0.3 -> · component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}

#429
component_or_swizzle_specifier -> '.' swizzle_name component_or_swizzle_specifier/2.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}

#430
component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}

#431
component_or_swizzle_specifier -> '.' member_ident component_or_swizzle_specifier/1.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}

#432
component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}

#433
attribute -> '@' 'workgroup_size' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#434
attrib_end/0.0 -> ',' · : {')'}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#435
attribute -> '@' 'size' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#436
attribute -> '@' 'location' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#437
attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#438
attrib_end/0.0 -> ',' · : {')'}
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' · interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
interpolation_sample_name -> · 'center' : {')' ','}
interpolation_sample_name -> · 'centroid' : {')' ','}
interpolation_sample_name -> · 'sample' : {')' ','}

#439
attribute -> '@' 'id' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#440
attribute -> '@' 'group' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#441
attribute -> '@' 'builtin' '(' builtin_value_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#442
attribute -> '@' 'binding' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#443
attribute -> '@' 'align' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#444
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#445
interpolation_sample_name -> 'center' · : {')' ','}

#446
interpolation_sample_name -> 'centroid' · : {')' ','}

#447
interpolation_sample_name -> 'sample' · : {')' ','}

#448
attribute -> '@' 'workgroup_size' '(' expression ',' expression · ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'workgroup_size' '(' expression ',' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#449
component_or_swizzle_specifier -> '[' expression ']' component_or_swizzle_specifier/0.3 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}

#450
component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' ']' '^' '^=' '{' '|' '|=' '||'}

#451
primary_expression -> 'bitcast' '<' type_specifier '>' paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' ']' '^' '{' '|' '||'}

#452
expression_comma_list/0.1/0/0.0 -> ',' expression · : {')' ','}

#453
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 · : {')' ','}

#454
expression_comma_list -> expression expression_comma_list/0.1 expression_comma_list/0.2 · : {')'}

#455
expression_comma_list/0.2 -> ',' · : {')'}

#456
array_type_specifier/0.3 -> ',' element_count_expression · : {'>'}

#457
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'+' '-' '>'}
element_count_expression -> additive_expression · : {'>'}
additive_operator -> · '+' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_operator -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#458
element_count_expression -> bitwise_expression · : {'>'}

#459
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'%' '*' '+' '-' '/' '>'}

#460
array_type_specifier -> 'array' '<' type_specifier array_type_specifier/0.3 '>' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#461
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier · type_specifier_without_ident/7.5 '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}
type_specifier_without_ident/7.5 -> · ',' access_mode : {'>'}

#462
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' access_mode · '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#463
access_mode -> 'read' · : {'>'}

#464
access_mode -> 'write' · : {'>'}

#465
access_mode -> 'read_write' · : {'>'}

#466
core_lhs_expression -> '(' lhs_expression · ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#467
core_lhs_expression -> ident · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#468
lhs_expression -> '&' lhs_expression · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#469
lhs_expression -> '*' lhs_expression · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#470
lhs_expression -> core_lhs_expression lhs_expression/0.1 · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#471
lhs_expression/0.1 -> component_or_swizzle_specifier · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#472
if_statement/0.0/0 -> attribute if_statement/0.0/0 · : {'if'}

#473
switch_statement/0.0/0 -> attribute switch_statement/0.0/0 · : {'switch'}

#474
loop_statement/0.0/0 -> attribute loop_statement/0.0/0 · : {'loop'}

#475
for_statement/0.0/0 -> attribute for_statement/0.0/0 · : {'for'}

#476
while_statement/0.0/0 -> attribute while_statement/0.0/0 · : {'while'}

#477
assignment_statement -> '_' '=' · expression : {')' ';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ';'}
expression -> · relational_expression : {')' ';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ';'}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression : {'&&' ')' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#478
assignment_statement -> lhs_expression assignment_statement/0.1 · expression : {')' ';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ';'}
expression -> · relational_expression : {')' ';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ';'}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression : {'&&' ')' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#479
increment_statement -> lhs_expression '++' · : {')' ';'}

#480
decrement_statement -> lhs_expression '--' · : {')' ';'}

#481
assignment_statement/0.1 -> '=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#482
assignment_statement/0.1 -> compound_assignment_operator · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#483
compound_assignment_operator -> '+=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#484
compound_assignment_operator -> '-=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#485
compound_assignment_operator -> '*=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#486
compound_assignment_operator -> '/=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#487
compound_assignment_operator -> '%=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#488
compound_assignment_operator -> '&=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#489
compound_assignment_operator -> '|=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#490
compound_assignment_operator -> '^=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#491
compound_assignment_operator -> '>>=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#492
compound_assignment_operator -> '<<=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#493
variable_statement -> 'const' optionally_typed_ident · '=' expression : {';'}

#494
variable_statement -> 'let' optionally_typed_ident · '=' expression : {';'}

#495
variable_statement -> variable_decl '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#496
func_call_statement -> callable argument_expression_list · : {')' ';'}

#497
while_statement -> while_statement/0.0 'while' · expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '@' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '@' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'@' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'@' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'@' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'@' '{'}
expression -> · relational_expression : {'@' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'@' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'@' '{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '@' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '@' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression : {'&&' '@' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '@' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '@' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '@' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#498
for_statement -> for_statement/0.0 'for' · '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#499
loop_statement -> loop_statement/0.0 'loop' · loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
loop_statement/0.2 -> · loop_statement/0.2/0 : {'{'}
loop_statement/0.2/0 -> · attribute loop_statement/0.2/0 : {'{'}

#500
switch_statement -> switch_statement/0.0 'switch' · expression switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '@' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '@' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'@' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'@' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'@' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'@' '{'}
expression -> · relational_expression : {'@' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'@' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'@' '{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '@' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '@' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression : {'&&' '@' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '@' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '@' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '@' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#501
if_statement -> if_statement/0.0 if_clause · if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.2 -> · if_statement/0.2/0 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.2/0 -> · else_if_clause if_statement/0.2/0 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#502
if_clause -> 'if' · expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '@' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '@' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'@' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'@' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'@' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'@' '{'}
expression -> · relational_expression : {'@' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'@' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'@' '{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '@' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '@' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression : {'&&' '@' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '@' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '@' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '@' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#503
return_statement -> 'return' return_statement/0.1 · : {';'}

#504
return_statement/0.1 -> expression · : {';'}

#505
statement -> const_assert_statement ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#506
statement -> variable_updating_statement ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#507
statement -> 'discard' ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#508
statement -> continue_statement ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#509
statement -> break_statement ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#510
statement -> variable_statement ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#511
statement -> func_call_statement ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#512
statement -> return_statement ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#513
compound_statement/0.2/0 -> statement compound_statement/0.2/0 · : {'}'}

#514
compound_statement -> compound_statement/0.0 '{' compound_statement/0.2 '}' · : {'&' '(' '*' ';' '@' '_' 'alias' 'array' 'atomic' 'bool' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#515
param/0.0/0 -> attribute param/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#516
param -> param/0.0 ident · ':' type_specifier : {')' ','}

#517
param_list -> param param_list/0.1 · param_list/0.2 : {')'}
param_list/0.2 -> · ',' : {')'}

#518
param_list/0.1 -> param_list/0.1/0 · : {')' ','}

#519
param_list/0.1/0 -> param_list/0.1/0/0.0 · param_list/0.1/0 : {')' ','}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {')' ','}
param_list/0.1/0/0.0 -> · ',' param : {')' ','}

#520
param_list/0.1/0/0.0 -> ',' · param : {')' ','}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param -> · param/0.0 ident ':' type_specifier : {')' ','}
param/0.0 -> · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#521
function_header -> 'fn' ident '(' function_header/0.3 ')' · function_header/0.5 : {'@' '{'}
function_header/0.5 -> · '->' function_header/0.5/0.1 type_specifier : {'@' '{'}

#522
struct_body_decl/0.2/0/0.0 -> ',' struct_member · : {',' '}'}

#523
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 · : {',' '}'}

#524
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 · '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#525
struct_body_decl/0.3 -> ',' · : {'}'}

#526
struct_member -> struct_member/0.0 member_ident ':' · type_specifier : {',' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {',' '}'}
depth_texture_type -> · 'texture_depth_2d' : {',' '}'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '}'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '}'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '}'}
sampler_type -> · 'sampler_comparison' : {',' '}'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '}'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {',' '}'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {',' '}'}
texture_and_sampler_types -> · sampler_type : {',' '}'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {',' '}'}
type_specifier -> · ident : {',' '}'}
type_specifier -> · type_specifier_without_ident : {',' '}'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {',' '}'}
type_specifier_without_ident -> · 'bool' : {',' '}'}
type_specifier_without_ident -> · 'f16' : {',' '}'}
type_specifier_without_ident -> · 'f32' : {',' '}'}
type_specifier_without_ident -> · 'i32' : {',' '}'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {',' '}'}
type_specifier_without_ident -> · 'u32' : {',' '}'}
type_specifier_without_ident -> · array_type_specifier : {',' '}'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {',' '}'}
type_specifier_without_ident -> · texture_and_sampler_types : {',' '}'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {',' '}'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#527
variable_qualifier/0.2 -> ',' access_mode · : {'>'}

#528
variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#529
attrib_end -> attrib_end/0.0 ')' · : {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#530
struct_member -> struct_member/0.0 member_ident ':' type_specifier · : {',' '}'}

#531
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#532
function_header -> 'fn' ident '(' function_header/0.3 ')' function_header/0.5 · : {'@' '{'}

#533
function_header/0.5 -> '->' · function_header/0.5/0.1 type_specifier : {'@' '{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.5/0.1 -> · function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#534
param_list/0.1/0/0.0 -> ',' param · : {')' ','}

#535
param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 · : {')' ','}

#536
param_list -> param param_list/0.1 param_list/0.2 · : {')'}

#537
param_list/0.2 -> ',' · : {')'}

#538
param -> param/0.0 ident ':' · type_specifier : {')' ','}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {')' ','}
depth_texture_type -> · 'texture_depth_2d' : {')' ','}
depth_texture_type -> · 'texture_depth_2d_array' : {')' ','}
depth_texture_type -> · 'texture_depth_cube' : {')' ','}
depth_texture_type -> · 'texture_depth_cube_array' : {')' ','}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {')' ','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' ','}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {')' ','}
sampler_type -> · 'sampler_comparison' : {')' ','}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {')' ','}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {')' ','}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {')' ','}
texture_and_sampler_types -> · sampler_type : {')' ','}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {')' ','}
type_specifier -> · ident : {')' ','}
type_specifier -> · type_specifier_without_ident : {')' ','}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {')' ','}
type_specifier_without_ident -> · 'bool' : {')' ','}
type_specifier_without_ident -> · 'f16' : {')' ','}
type_specifier_without_ident -> · 'f32' : {')' ','}
type_specifier_without_ident -> · 'i32' : {')' ','}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {')' ','}
type_specifier_without_ident -> · 'u32' : {')' ','}
type_specifier_without_ident -> · array_type_specifier : {')' ','}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {')' ','}
type_specifier_without_ident -> · texture_and_sampler_types : {')' ','}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {')' ','}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#539
if_clause -> 'if' expression · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#540
if_statement -> if_statement/0.0 if_clause if_statement/0.2 · if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_clause -> · 'else' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.3 -> · else_clause : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#541
if_statement/0.2 -> if_statement/0.2/0 · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#542
if_statement/0.2/0 -> else_if_clause · if_statement/0.2/0 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.2/0 -> · else_if_clause if_statement/0.2/0 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#543
else_if_clause -> 'else' · 'if' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#544
switch_statement -> switch_statement/0.0 'switch' expression · switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
switch_body -> · switch_body/0.0 '{' switch_body/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_body/0.0 -> · switch_body/0.0/0 : {'{'}
switch_body/0.0/0 -> · attribute switch_body/0.0/0 : {'{'}

#545
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 · '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#546
loop_statement/0.2 -> loop_statement/0.2/0 · : {'{'}

#547
loop_statement/0.2/0 -> attribute · loop_statement/0.2/0 : {'{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
loop_statement/0.2/0 -> · attribute loop_statement/0.2/0 : {'{'}

#548
for_statement -> for_statement/0.0 'for' '(' · for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_header -> · for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 : {')'}
for_header/0.0 -> · for_init : {';'}
for_init -> · func_call_statement : {';'}
for_init -> · variable_statement : {';'}
for_init -> · variable_updating_statement : {';'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#549
while_statement -> while_statement/0.0 'while' expression · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#550
variable_statement -> variable_decl '=' expression · : {';'}

#551
variable_statement -> 'let' optionally_typed_ident '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#552
variable_statement -> 'const' optionally_typed_ident '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#553
assignment_statement -> lhs_expression assignment_statement/0.1 expression · : {')' ';'}

#554
assignment_statement -> '_' '=' expression · : {')' ';'}

#555
core_lhs_expression -> '(' lhs_expression ')' · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#556
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' access_mode '>' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#557
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 · '>' : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#558
type_specifier_without_ident/7.5 -> ',' · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#559
attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#560
attrib_end/0.0 -> ',' · : {')'}
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#561
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#562
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#563
type_specifier_without_ident/7.5 -> ',' access_mode · : {'>'}

#564
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' · : {'(' ')' ',' ';' '=' '>' '@' '{' '}'}

#565
variable_statement -> 'const' optionally_typed_ident '=' expression · : {';'}

#566
variable_statement -> 'let' optionally_typed_ident '=' expression · : {';'}

#567
while_statement -> while_statement/0.0 'while' expression compound_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#568
for_statement -> for_statement/0.0 'for' '(' for_header · ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#569
for_header -> for_header/0.0 · ';' for_header/0.2 ';' for_header/0.4 : {')'}

#570
for_header/0.0 -> for_init · : {';'}

#571
for_init -> variable_statement · : {';'}

#572
for_init -> variable_updating_statement · : {';'}

#573
for_init -> func_call_statement · : {';'}

#574
loop_statement/0.2/0 -> attribute loop_statement/0.2/0 · : {'{'}

#575
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' · loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'compute' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'const' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'fragment' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'invariant' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'vertex' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> · 'break' : {';'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> · for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {'for'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> · if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {'if'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> · loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {'loop'}
loop_statement/0.4 -> · loop_statement/0.4/0 : {'continuing' '}'}
loop_statement/0.4/0 -> · statement loop_statement/0.4/0 : {'continuing' '}'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> · switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {'switch'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> · while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {'while'}

#576
switch_statement -> switch_statement/0.0 'switch' expression switch_body · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#577
switch_body -> switch_body/0.0 · '{' switch_body/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#578
switch_body/0.0 -> switch_body/0.0/0 · : {'{'}

#579
switch_body/0.0/0 -> attribute · switch_body/0.0/0 : {'{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
switch_body/0.0/0 -> · attribute switch_body/0.0/0 : {'{'}

#580
else_if_clause -> 'else' 'if' · expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '@' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '@' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'@' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'@' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'@' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'@' '{'}
expression -> · relational_expression : {'@' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'@' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'@' '{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '@' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '@' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression : {'&&' '@' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '@' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '@' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '@' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#581
if_statement/0.2/0 -> else_if_clause if_statement/0.2/0 · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#582
if_statement -> if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#583
if_statement/0.3 -> else_clause · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#584
else_clause -> 'else' · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#585
if_clause -> 'if' expression compound_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#586
param -> param/0.0 ident ':' type_specifier · : {')' ','}

#587
function_header/0.5 -> '->' function_header/0.5/0.1 · type_specifier : {'@' '{'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'@' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'@' '{'}
depth_texture_type -> · 'texture_depth_2d_array' : {'@' '{'}
depth_texture_type -> · 'texture_depth_cube' : {'@' '{'}
depth_texture_type -> · 'texture_depth_cube_array' : {'@' '{'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'@' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'@' '{'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'@' '{'}
sampler_type -> · 'sampler_comparison' : {'@' '{'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'@' '{'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'@' '{'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'@' '{'}
texture_and_sampler_types -> · sampler_type : {'@' '{'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'@' '{'}
type_specifier -> · ident : {'@' '{'}
type_specifier -> · type_specifier_without_ident : {'@' '{'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'@' '{'}
type_specifier_without_ident -> · 'bool' : {'@' '{'}
type_specifier_without_ident -> · 'f16' : {'@' '{'}
type_specifier_without_ident -> · 'f32' : {'@' '{'}
type_specifier_without_ident -> · 'i32' : {'@' '{'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'@' '{'}
type_specifier_without_ident -> · 'u32' : {'@' '{'}
type_specifier_without_ident -> · array_type_specifier : {'@' '{'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'@' '{'}
type_specifier_without_ident -> · texture_and_sampler_types : {'@' '{'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'@' '{'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#588
function_header/0.5/0.1 -> function_header/0.5/0.1/0 · : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#589
function_header/0.5/0.1/0 -> attribute · function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#590
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 · : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#591
function_header/0.5 -> '->' function_header/0.5/0.1 type_specifier · : {'@' '{'}

#592
else_clause -> 'else' compound_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#593
else_if_clause -> 'else' 'if' expression · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#594
switch_body/0.0/0 -> attribute switch_body/0.0/0 · : {'{'}

#595
switch_body -> switch_body/0.0 '{' · switch_body/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
switch_body/0.2 -> · switch_body/0.2/0 : {'}'}
switch_body/0.2/0 -> · switch_clause switch_body/0.2/0 : {'}'}
switch_clause -> · case_clause : {'case' 'default' '}'}
switch_clause -> · default_alone_clause : {'case' 'default' '}'}

#596
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 · loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_statement -> · 'continuing' continuing_compound_statement : {'}'}
loop_statement/0.5 -> · continuing_statement : {'}'}

#597
loop_statement/0.4 -> loop_statement/0.4/0 · : {'continuing' '}'}

#598
loop_statement/0.4/0 -> statement · loop_statement/0.4/0 : {'continuing' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'compute' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'const' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'fragment' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'invariant' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'vertex' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> · 'break' : {';'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> · for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {'for'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> · if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {'if'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> · loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {'loop'}
loop_statement/0.4/0 -> · statement loop_statement/0.4/0 : {'continuing' '}'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> · switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {'switch'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> · while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {'while'}

#599
for_header -> for_header/0.0 ';' · for_header/0.2 ';' for_header/0.4 : {')'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
for_header/0.2 -> · expression : {';'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#600
for_statement -> for_statement/0.0 'for' '(' for_header ')' · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#601
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#602
for_statement -> for_statement/0.0 'for' '(' for_header ')' compound_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#603
for_header -> for_header/0.0 ';' for_header/0.2 · ';' for_header/0.4 : {')'}

#604
for_header/0.2 -> expression · : {';'}

#605
loop_statement/0.4/0 -> statement loop_statement/0.4/0 · : {'continuing' '}'}

#606
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 · '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#607
loop_statement/0.5 -> continuing_statement · : {'}'}

#608
continuing_statement -> 'continuing' · continuing_compound_statement : {'}'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
continuing_compound_statement -> · continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' : {'}'}
continuing_compound_statement/0.0 -> · continuing_compound_statement/0.0/0 : {'{'}
continuing_compound_statement/0.0/0 -> · attribute continuing_compound_statement/0.0/0 : {'{'}

#609
switch_body -> switch_body/0.0 '{' switch_body/0.2 · '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#610
switch_body/0.2 -> switch_body/0.2/0 · : {'}'}

#611
switch_body/0.2/0 -> switch_clause · switch_body/0.2/0 : {'}'}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
switch_body/0.2/0 -> · switch_clause switch_body/0.2/0 : {'}'}
switch_clause -> · case_clause : {'case' 'default' '}'}
switch_clause -> · default_alone_clause : {'case' 'default' '}'}

#612
switch_clause -> case_clause · : {'case' 'default' '}'}

#613
switch_clause -> default_alone_clause · : {'case' 'default' '}'}

#614
case_clause -> 'case' · case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '@' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '@' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {',' ':' '@' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {',' ':' '@' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {',' ':' '@' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
case_selector -> · 'default' : {',' ':' '@' '{'}
case_selector -> · expression : {',' ':' '@' '{'}
case_selectors -> · case_selector case_selectors/0.1 case_selectors/0.2 : {':' '@' '{'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '@' '{'}
expression -> · relational_expression : {',' ':' '@' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {',' ':' '@' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {',' ':' '@' '{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '@' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '@' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '@' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '@' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '@' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '@' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#615
default_alone_clause -> 'default' · default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
default_alone_clause/0.1 -> · ':' : {'@' '{'}

#616
else_if_clause -> 'else' 'if' expression compound_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#617
default_alone_clause -> 'default' default_alone_clause/0.1 · compound_statement : {'case' 'default' '}'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'case' 'default' '}'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#618
default_alone_clause/0.1 -> ':' · : {'@' '{'}

#619
case_clause -> 'case' case_selectors · case_clause/0.2 compound_statement : {'case' 'default' '}'}
case_clause/0.2 -> · ':' : {'@' '{'}

#620
case_selectors -> case_selector · case_selectors/0.1 case_selectors/0.2 : {':' '@' '{'}
case_selectors/0.1 -> · case_selectors/0.1/0 : {',' ':' '@' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '@' '{'}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {',' ':' '@' '{'}

#621
case_selector -> 'default' · : {',' ':' '@' '{'}

#622
case_selector -> expression · : {',' ':' '@' '{'}

#623
switch_body/0.2/0 -> switch_clause switch_body/0.2/0 · : {'}'}

#624
switch_body -> switch_body/0.0 '{' switch_body/0.2 '}' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#625
continuing_statement -> 'continuing' continuing_compound_statement · : {'}'}

#626
continuing_compound_statement -> continuing_compound_statement/0.0 · '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' : {'}'}

#627
continuing_compound_statement/0.0 -> continuing_compound_statement/0.0/0 · : {'{'}

#628
continuing_compound_statement/0.0/0 -> attribute · continuing_compound_statement/0.0/0 : {'{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
continuing_compound_statement/0.0/0 -> · attribute continuing_compound_statement/0.0/0 : {'{'}

#629
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#630
for_header -> for_header/0.0 ';' for_header/0.2 ';' · for_header/0.4 : {')'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
assignment_statement -> · '_' '=' expression : {')'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {')'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {')'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_header/0.4 -> · for_update : {')'}
for_update -> · func_call_statement : {')'}
for_update -> · variable_updating_statement : {')'}
func_call_statement -> · callable argument_expression_list : {')'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
increment_statement -> · lhs_expression '++' : {')'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
variable_updating_statement -> · assignment_statement : {')'}
variable_updating_statement -> · decrement_statement : {')'}
variable_updating_statement -> · increment_statement : {')'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#631
for_header -> for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 · : {')'}

#632
for_header/0.4 -> for_update · : {')'}

#633
for_update -> variable_updating_statement · : {')'}

#634
for_update -> func_call_statement · : {')'}

#635
continuing_compound_statement/0.0/0 -> attribute continuing_compound_statement/0.0/0 · : {'{'}

#636
continuing_compound_statement -> continuing_compound_statement/0.0 '{' · continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' : {'}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'compute' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'const' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'fragment' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'invariant' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'vertex' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> · 'break' : {';'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.2 -> · continuing_compound_statement/0.2/0 : {'break' '}'}
continuing_compound_statement/0.2/0 -> · statement continuing_compound_statement/0.2/0 : {'break' '}'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> · for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {'for'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> · if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {'if'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> · loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {'loop'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> · switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {'switch'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> · while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {'while'}

#637
case_selectors -> case_selector case_selectors/0.1 · case_selectors/0.2 : {':' '@' '{'}
case_selectors/0.2 -> · ',' : {':' '@' '{'}

#638
case_selectors/0.1 -> case_selectors/0.1/0 · : {',' ':' '@' '{'}

#639
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 · case_selectors/0.1/0 : {',' ':' '@' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '@' '{'}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {',' ':' '@' '{'}

#640
case_selectors/0.1/0/0.0 -> ',' · case_selector : {',' ':' '@' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '@' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '@' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {',' ':' '@' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {',' ':' '@' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {',' ':' '@' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
case_selector -> · 'default' : {',' ':' '@' '{'}
case_selector -> · expression : {',' ':' '@' '{'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '@' '{'}
expression -> · relational_expression : {',' ':' '@' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {',' ':' '@' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {',' ':' '@' '{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '@' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '@' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '@' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '@' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '@' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '@' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '@' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#641
case_clause -> 'case' case_selectors case_clause/0.2 · compound_statement : {'case' 'default' '}'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'case' 'default' '}'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#642
case_clause/0.2 -> ':' · : {'@' '{'}

#643
default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement · : {'case' 'default' '}'}

#644
case_clause -> 'case' case_selectors case_clause/0.2 compound_statement · : {'case' 'default' '}'}

#645
case_selectors/0.1/0/0.0 -> ',' case_selector · : {',' ':' '@' '{'}

#646
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 · : {',' ':' '@' '{'}

#647
case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 · : {':' '@' '{'}

#648
case_selectors/0.2 -> ',' · : {':' '@' '{'}

#649
continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 · continuing_compound_statement/0.3 '}' : {'}'}
break_if_statement -> · 'break' 'if' expression ';' : {'}'}
continuing_compound_statement/0.3 -> · break_if_statement : {'}'}

#650
continuing_compound_statement/0.2 -> continuing_compound_statement/0.2/0 · : {'break' '}'}

#651
continuing_compound_statement/0.2/0 -> statement · continuing_compound_statement/0.2/0 : {'break' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'compute' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'const' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'fragment' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'invariant' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'vertex' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> · 'break' : {';'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.2/0 -> · statement continuing_compound_statement/0.2/0 : {'break' '}'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> · for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {'for'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> · if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {'if'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> · loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {'loop'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> · switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {'switch'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> · while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {'while'}

#652
continuing_compound_statement/0.2/0 -> statement continuing_compound_statement/0.2/0 · : {'break' '}'}

#653
continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 · '}' : {'}'}

#654
continuing_compound_statement/0.3 -> break_if_statement · : {'}'}

#655
break_if_statement -> 'break' · 'if' expression ';' : {'}'}

#656
break_if_statement -> 'break' 'if' · expression ';' : {'}'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#657
continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' · : {'}'}

#658
break_if_statement -> 'break' 'if' expression · ';' : {'}'}

#659
break_if_statement -> 'break' 'if' expression ';' · : {'}'}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 ·
r#1 global_directive -> diagnostic_directive ·
r#2 global_directive -> enable_directive ·
r#3 extension_name -> 'f16' ·
r#4 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 ·
r#5 translation_unit -> translation_unit/0.0 translation_unit/0.1 ·
r#6 translation_unit/0.1 -> translation_unit/0.1/0 ·
r#7 global_decl -> ';' ·
r#8 global_decl -> struct_decl ·
r#9 global_decl -> function_decl ·
r#10 global_variable_decl/0.0 -> global_variable_decl/0.0/0 ·
r#11 global_constant_decl/1.0 -> global_constant_decl/1.0/0 ·
r#12 function_decl/0.0 -> function_decl/0.0/0 ·
r#13 attribute -> '@' 'const' ·
r#14 attribute -> '@' 'invariant' ·
r#15 attribute -> '@' 'vertex' ·
r#16 attribute -> '@' 'fragment' ·
r#17 attribute -> '@' 'compute' ·
r#18 global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 ·
r#19 global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 ·
r#20 function_decl/0.0/0 -> attribute function_decl/0.0/0 ·
r#21 const_assert_statement -> 'const_assert' expression ·
r#22 expression -> relational_expression ·
r#23 short_circuit_or_expression -> relational_expression ·
r#24 short_circuit_and_expression -> relational_expression ·
r#25 expression -> bitwise_expression ·
r#26 relational_expression -> shift_expression ·
r#27 shift_expression -> additive_expression ·
r#28 binary_and_expression -> unary_expression ·
r#29 binary_or_expression -> unary_expression ·
r#30 binary_xor_expression -> unary_expression ·
r#31 multiplicative_expression -> unary_expression ·
r#32 additive_expression -> multiplicative_expression ·
r#33 unary_expression -> singular_expression ·
r#34 primary_expression -> ident ·
r#35 callable -> ident ·
r#36 primary_expression -> call_expression ·
r#37 primary_expression -> literal ·
r#38 primary_expression -> paren_expression ·
r#39 ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#40 literal -> int_literal ·
r#41 literal -> float_literal ·
r#42 literal -> bool_literal ·
r#43 callable -> type_specifier_without_ident ·
r#44 callable -> vec_prefix ·
r#45 callable -> mat_prefix ·
r#46 callable -> 'array' ·
r#47 int_literal -> decimal_int_literal ·
r#48 int_literal -> hex_int_literal ·
r#49 float_literal -> decimal_float_literal ·
r#50 float_literal -> hex_float_literal ·
r#51 bool_literal -> 'true' ·
r#52 bool_literal -> 'false' ·
r#53 type_specifier_without_ident -> 'bool' ·
r#54 type_specifier_without_ident -> 'f32' ·
r#55 type_specifier_without_ident -> 'f16' ·
r#56 type_specifier_without_ident -> 'i32' ·
r#57 type_specifier_without_ident -> 'u32' ·
r#58 type_specifier_without_ident -> array_type_specifier ·
r#59 type_specifier_without_ident -> texture_and_sampler_types ·
r#60 vec_prefix -> 'vec2' ·
r#61 vec_prefix -> 'vec3' ·
r#62 vec_prefix -> 'vec4' ·
r#63 mat_prefix -> 'mat2x2' ·
r#64 mat_prefix -> 'mat2x3' ·
r#65 mat_prefix -> 'mat2x4' ·
r#66 mat_prefix -> 'mat3x2' ·
r#67 mat_prefix -> 'mat3x3' ·
r#68 mat_prefix -> 'mat3x4' ·
r#69 mat_prefix -> 'mat4x2' ·
r#70 mat_prefix -> 'mat4x3' ·
r#71 mat_prefix -> 'mat4x4' ·
r#72 decimal_int_literal -> /0[iu]?/ ·
r#73 decimal_int_literal -> /[1-9][0-9]*[iu]?/ ·
r#74 hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ ·
r#75 decimal_float_literal -> /0[fh]/ ·
r#76 decimal_float_literal -> /[1-9][0-9]*[fh]/ ·
r#77 decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ ·
r#78 decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ ·
r#79 decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ ·
r#80 hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ ·
r#81 hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ ·
r#82 hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ ·
r#83 texture_and_sampler_types -> sampler_type ·
r#84 texture_and_sampler_types -> depth_texture_type ·
r#85 sampler_type -> 'sampler' ·
r#86 sampler_type -> 'sampler_comparison' ·
r#87 depth_texture_type -> 'texture_depth_2d' ·
r#88 depth_texture_type -> 'texture_depth_2d_array' ·
r#89 depth_texture_type -> 'texture_depth_cube' ·
r#90 depth_texture_type -> 'texture_depth_cube_array' ·
r#91 depth_texture_type -> 'texture_depth_multisampled_2d' ·
r#92 sampled_texture_type -> 'texture_1d' ·
r#93 sampled_texture_type -> 'texture_2d' ·
r#94 sampled_texture_type -> 'texture_2d_array' ·
r#95 sampled_texture_type -> 'texture_3d' ·
r#96 sampled_texture_type -> 'texture_cube' ·
r#97 sampled_texture_type -> 'texture_cube_array' ·
r#98 multisampled_texture_type -> 'texture_multisampled_2d' ·
r#99 storage_texture_type -> 'texture_storage_1d' ·
r#100 storage_texture_type -> 'texture_storage_2d' ·
r#101 storage_texture_type -> 'texture_storage_2d_array' ·
r#102 storage_texture_type -> 'texture_storage_3d' ·
r#103 global_decl -> const_assert_statement ';' ·
r#104 global_decl -> type_alias_decl ';' ·
r#105 global_decl -> global_constant_decl ';' ·
r#106 global_decl -> global_variable_decl ';' ·
r#107 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 ·
r#108 severity_control_name -> 'error' ·
r#109 severity_control_name -> 'warning' ·
r#110 severity_control_name -> 'info' ·
r#111 severity_control_name -> 'off' ·
r#112 diagnostic_directive -> 'diagnostic' diagnostic_control ';' ·
r#113 enable_directive -> 'enable' extension_name ';' ·
r#114 variable_decl/0.1 -> variable_qualifier ·
r#115 global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 ·
r#116 optionally_typed_ident -> ident optionally_typed_ident/0.1 ·
r#117 struct_decl -> 'struct' ident struct_body_decl ·
r#118 function_decl -> function_decl/0.0 function_header compound_statement ·
r#119 compound_statement/0.0 -> compound_statement/0.0/0 ·
r#120 call_expression -> callable argument_expression_list ·
r#121 singular_expression -> primary_expression singular_expression/0.1 ·
r#122 singular_expression/0.1 -> component_or_swizzle_specifier ·
r#123 unary_expression -> '&' unary_expression ·
r#124 unary_expression -> '*' unary_expression ·
r#125 unary_expression -> '~' unary_expression ·
r#126 unary_expression -> '!' unary_expression ·
r#127 unary_expression -> '-' unary_expression ·
r#128 multiplicative_operator -> '*' ·
r#129 multiplicative_operator -> '/' ·
r#130 multiplicative_operator -> '%' ·
r#131 additive_operator -> '+' ·
r#132 additive_operator -> '-' ·
r#133 attribute -> '@' 'diagnostic' diagnostic_control ·
r#134 builtin_value_name -> 'vertex_index' ·
r#135 builtin_value_name -> 'instance_index' ·
r#136 builtin_value_name -> 'position' ·
r#137 builtin_value_name -> 'front_facing' ·
r#138 builtin_value_name -> 'frag_depth' ·
r#139 builtin_value_name -> 'local_invocation_id' ·
r#140 builtin_value_name -> 'local_invocation_index' ·
r#141 builtin_value_name -> 'global_invocation_id' ·
r#142 builtin_value_name -> 'workgroup_id' ·
r#143 builtin_value_name -> 'num_workgroups' ·
r#144 builtin_value_name -> 'sample_index' ·
r#145 builtin_value_name -> 'sample_mask' ·
r#146 interpolation_type_name -> 'perspective' ·
r#147 interpolation_type_name -> 'linear' ·
r#148 interpolation_type_name -> 'flat' ·
r#149 expression -> short_circuit_or_expression '||' relational_expression ·
r#150 short_circuit_or_expression -> short_circuit_or_expression '||' relational_expression ·
r#151 expression -> short_circuit_and_expression '&&' relational_expression ·
r#152 short_circuit_and_expression -> short_circuit_and_expression '&&' relational_expression ·
r#153 relational_expression -> shift_expression '!=' shift_expression ·
r#154 relational_expression -> shift_expression '==' shift_expression ·
r#155 relational_expression -> shift_expression '>=' shift_expression ·
r#156 relational_expression -> shift_expression '<=' shift_expression ·
r#157 relational_expression -> shift_expression '>' shift_expression ·
r#158 relational_expression -> shift_expression '<' shift_expression ·
r#159 bitwise_expression -> binary_and_expression '&' unary_expression ·
r#160 binary_and_expression -> binary_and_expression '&' unary_expression ·
r#161 bitwise_expression -> binary_or_expression '|' unary_expression ·
r#162 binary_or_expression -> binary_or_expression '|' unary_expression ·
r#163 bitwise_expression -> binary_xor_expression '^' unary_expression ·
r#164 binary_xor_expression -> binary_xor_expression '^' unary_expression ·
r#165 additive_expression -> additive_expression additive_operator multiplicative_expression ·
r#166 shift_expression -> unary_expression '>>' unary_expression ·
r#167 shift_expression -> unary_expression '<<' unary_expression ·
r#168 multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression ·
r#169 member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#170 swizzle_name -> '/[rgba]/' ·
r#171 swizzle_name -> '/[rgba][rgba]/' ·
r#172 swizzle_name -> '/[rgba][rgba][rgba]/' ·
r#173 swizzle_name -> '/[rgba][rgba][rgba][rgba]/' ·
r#174 swizzle_name -> '/[xyzw]/' ·
r#175 swizzle_name -> '/[xyzw][xyzw]/' ·
r#176 swizzle_name -> '/[xyzw][xyzw][xyzw]/' ·
r#177 swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' ·
r#178 type_specifier -> ident ·
r#179 type_specifier -> type_specifier_without_ident ·
r#180 argument_expression_list/0.1 -> expression_comma_list ·
r#181 paren_expression -> '(' expression ')' ·
r#182 address_space -> 'function' ·
r#183 address_space -> 'private' ·
r#184 address_space -> 'workgroup' ·
r#185 address_space -> 'uniform' ·
r#186 address_space -> 'storage' ·
r#187 texel_format -> 'rgba8unorm' ·
r#188 texel_format -> 'rgba8snorm' ·
r#189 texel_format -> 'rgba8uint' ·
r#190 texel_format -> 'rgba8sint' ·
r#191 texel_format -> 'rgba16uint' ·
r#192 texel_format -> 'rgba16sint' ·
r#193 texel_format -> 'rgba16float' ·
r#194 texel_format -> 'r32uint' ·
r#195 texel_format -> 'r32sint' ·
r#196 texel_format -> 'r32float' ·
r#197 texel_format -> 'rg32uint' ·
r#198 texel_format -> 'rg32sint' ·
r#199 texel_format -> 'rg32float' ·
r#200 texel_format -> 'rgba32uint' ·
r#201 texel_format -> 'rgba32sint' ·
r#202 texel_format -> 'rgba32float' ·
r#203 texel_format -> 'bgra8unorm' ·
r#204 compound_statement/0.0/0 -> attribute compound_statement/0.0/0 ·
r#205 struct_member/0.0 -> struct_member/0.0/0 ·
r#206 type_alias_decl -> 'alias' ident '=' type_specifier ·
r#207 global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 ·
r#208 global_constant_decl -> 'const' optionally_typed_ident '=' expression ·
r#209 optionally_typed_ident/0.1 -> ':' type_specifier ·
r#210 global_variable_decl/0.2 -> '=' expression ·
r#211 variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident ·
r#212 diagnostic_rule_name -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#213 diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name attrib_end ·
r#214 attrib_end/0.0 -> ',' ·
r#215 global_constant_decl/1.3 -> '=' expression ·
r#216 struct_member/0.0/0 -> attribute struct_member/0.0/0 ·
r#217 struct_body_decl/0.2 -> struct_body_decl/0.2/0 ·
r#218 function_header/0.3 -> param_list ·
r#219 param/0.0 -> param/0.0/0 ·
r#220 compound_statement/0.2 -> compound_statement/0.2/0 ·
r#221 statement -> ';' ·
r#222 statement -> if_statement ·
r#223 statement -> switch_statement ·
r#224 statement -> loop_statement ·
r#225 statement -> for_statement ·
r#226 statement -> while_statement ·
r#227 statement -> compound_statement ·
r#228 variable_statement -> variable_decl ·
r#229 break_statement -> 'break' ·
r#230 continue_statement -> 'continue' ·
r#231 variable_updating_statement -> assignment_statement ·
r#232 variable_updating_statement -> increment_statement ·
r#233 variable_updating_statement -> decrement_statement ·
r#234 if_statement/0.0 -> if_statement/0.0/0 ·
r#235 switch_statement/0.0 -> switch_statement/0.0/0 ·
r#236 loop_statement/0.0 -> loop_statement/0.0/0 ·
r#237 for_statement/0.0 -> for_statement/0.0/0 ·
r#238 while_statement/0.0 -> while_statement/0.0/0 ·
r#239 core_lhs_expression -> ident ·
r#240 texture_and_sampler_types -> multisampled_texture_type '<' type_specifier '>' ·
r#241 texture_and_sampler_types -> sampled_texture_type '<' type_specifier '>' ·
r#242 type_specifier_without_ident -> 'atomic' '<' type_specifier '>' ·
r#243 type_specifier_without_ident -> mat_prefix '<' type_specifier '>' ·
r#244 type_specifier_without_ident -> vec_prefix '<' type_specifier '>' ·
r#245 expression_comma_list/0.1 -> expression_comma_list/0.1/0 ·
r#246 argument_expression_list -> '(' argument_expression_list/0.1 ')' ·
r#247 component_or_swizzle_specifier -> '.' swizzle_name component_or_swizzle_specifier/2.2 ·
r#248 component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier ·
r#249 component_or_swizzle_specifier -> '.' member_ident component_or_swizzle_specifier/1.2 ·
r#250 component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier ·
r#251 attribute -> '@' 'workgroup_size' '(' expression attrib_end ·
r#252 attribute -> '@' 'size' '(' expression attrib_end ·
r#253 attribute -> '@' 'location' '(' expression attrib_end ·
r#254 attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end ·
r#255 attribute -> '@' 'id' '(' expression attrib_end ·
r#256 attribute -> '@' 'group' '(' expression attrib_end ·
r#257 attribute -> '@' 'builtin' '(' builtin_value_name attrib_end ·
r#258 attribute -> '@' 'binding' '(' expression attrib_end ·
r#259 attribute -> '@' 'align' '(' expression attrib_end ·
r#260 interpolation_sample_name -> 'center' ·
r#261 interpolation_sample_name -> 'centroid' ·
r#262 interpolation_sample_name -> 'sample' ·
r#263 component_or_swizzle_specifier -> '[' expression ']' component_or_swizzle_specifier/0.3 ·
r#264 component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier ·
r#265 primary_expression -> 'bitcast' '<' type_specifier '>' paren_expression ·
r#266 expression_comma_list/0.1/0/0.0 -> ',' expression ·
r#267 expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 ·
r#268 expression_comma_list -> expression expression_comma_list/0.1 expression_comma_list/0.2 ·
r#269 expression_comma_list/0.2 -> ',' ·
r#270 array_type_specifier/0.3 -> ',' element_count_expression ·
r#271 element_count_expression -> additive_expression ·
r#272 element_count_expression -> bitwise_expression ·
r#273 array_type_specifier -> 'array' '<' type_specifier array_type_specifier/0.3 '>' ·
r#274 access_mode -> 'read' ·
r#275 access_mode -> 'write' ·
r#276 access_mode -> 'read_write' ·
r#277 lhs_expression -> '&' lhs_expression ·
r#278 lhs_expression -> '*' lhs_expression ·
r#279 lhs_expression -> core_lhs_expression lhs_expression/0.1 ·
r#280 lhs_expression/0.1 -> component_or_swizzle_specifier ·
r#281 if_statement/0.0/0 -> attribute if_statement/0.0/0 ·
r#282 switch_statement/0.0/0 -> attribute switch_statement/0.0/0 ·
r#283 loop_statement/0.0/0 -> attribute loop_statement/0.0/0 ·
r#284 for_statement/0.0/0 -> attribute for_statement/0.0/0 ·
r#285 while_statement/0.0/0 -> attribute while_statement/0.0/0 ·
r#286 increment_statement -> lhs_expression '++' ·
r#287 decrement_statement -> lhs_expression '--' ·
r#288 assignment_statement/0.1 -> '=' ·
r#289 assignment_statement/0.1 -> compound_assignment_operator ·
r#290 compound_assignment_operator -> '+=' ·
r#291 compound_assignment_operator -> '-=' ·
r#292 compound_assignment_operator -> '*=' ·
r#293 compound_assignment_operator -> '/=' ·
r#294 compound_assignment_operator -> '%=' ·
r#295 compound_assignment_operator -> '&=' ·
r#296 compound_assignment_operator -> '|=' ·
r#297 compound_assignment_operator -> '^=' ·
r#298 compound_assignment_operator -> '>>=' ·
r#299 compound_assignment_operator -> '<<=' ·
r#300 func_call_statement -> callable argument_expression_list ·
r#301 return_statement -> 'return' return_statement/0.1 ·
r#302 return_statement/0.1 -> expression ·
r#303 statement -> const_assert_statement ';' ·
r#304 statement -> variable_updating_statement ';' ·
r#305 statement -> 'discard' ';' ·
r#306 statement -> continue_statement ';' ·
r#307 statement -> break_statement ';' ·
r#308 statement -> variable_statement ';' ·
r#309 statement -> func_call_statement ';' ·
r#310 statement -> return_statement ';' ·
r#311 compound_statement/0.2/0 -> statement compound_statement/0.2/0 ·
r#312 compound_statement -> compound_statement/0.0 '{' compound_statement/0.2 '}' ·
r#313 param/0.0/0 -> attribute param/0.0/0 ·
r#314 param_list/0.1 -> param_list/0.1/0 ·
r#315 struct_body_decl/0.2/0/0.0 -> ',' struct_member ·
r#316 struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 ·
r#317 struct_body_decl/0.3 -> ',' ·
r#318 variable_qualifier/0.2 -> ',' access_mode ·
r#319 variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' ·
r#320 attrib_end -> attrib_end/0.0 ')' ·
r#321 struct_member -> struct_member/0.0 member_ident ':' type_specifier ·
r#322 struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' ·
r#323 function_header -> 'fn' ident '(' function_header/0.3 ')' function_header/0.5 ·
r#324 param_list/0.1/0/0.0 -> ',' param ·
r#325 param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 ·
r#326 param_list -> param param_list/0.1 param_list/0.2 ·
r#327 param_list/0.2 -> ',' ·
r#328 if_statement/0.2 -> if_statement/0.2/0 ·
r#329 loop_statement/0.2 -> loop_statement/0.2/0 ·
r#330 variable_statement -> variable_decl '=' expression ·
r#331 assignment_statement -> lhs_expression assignment_statement/0.1 expression ·
r#332 assignment_statement -> '_' '=' expression ·
r#333 core_lhs_expression -> '(' lhs_expression ')' ·
r#334 texture_and_sampler_types -> storage_texture_type '<' texel_format ',' access_mode '>' ·
r#335 attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end ·
r#336 attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end ·
r#337 type_specifier_without_ident/7.5 -> ',' access_mode ·
r#338 type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' ·
r#339 variable_statement -> 'const' optionally_typed_ident '=' expression ·
r#340 variable_statement -> 'let' optionally_typed_ident '=' expression ·
r#341 while_statement -> while_statement/0.0 'while' expression compound_statement ·
r#342 for_header/0.0 -> for_init ·
r#343 for_init -> variable_statement ·
r#344 for_init -> variable_updating_statement ·
r#345 for_init -> func_call_statement ·
r#346 loop_statement/0.2/0 -> attribute loop_statement/0.2/0 ·
r#347 switch_statement -> switch_statement/0.0 'switch' expression switch_body ·
r#348 switch_body/0.0 -> switch_body/0.0/0 ·
r#349 if_statement/0.2/0 -> else_if_clause if_statement/0.2/0 ·
r#350 if_statement -> if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 ·
r#351 if_statement/0.3 -> else_clause ·
r#352 if_clause -> 'if' expression compound_statement ·
r#353 param -> param/0.0 ident ':' type_specifier ·
r#354 function_header/0.5/0.1 -> function_header/0.5/0.1/0 ·
r#355 function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 ·
r#356 function_header/0.5 -> '->' function_header/0.5/0.1 type_specifier ·
r#357 else_clause -> 'else' compound_statement ·
r#358 switch_body/0.0/0 -> attribute switch_body/0.0/0 ·
r#359 loop_statement/0.4 -> loop_statement/0.4/0 ·
r#360 attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end ·
r#361 for_statement -> for_statement/0.0 'for' '(' for_header ')' compound_statement ·
r#362 for_header/0.2 -> expression ·
r#363 loop_statement/0.4/0 -> statement loop_statement/0.4/0 ·
r#364 loop_statement/0.5 -> continuing_statement ·
r#365 switch_body/0.2 -> switch_body/0.2/0 ·
r#366 switch_clause -> case_clause ·
r#367 switch_clause -> default_alone_clause ·
r#368 else_if_clause -> 'else' 'if' expression compound_statement ·
r#369 default_alone_clause/0.1 -> ':' ·
r#370 case_selector -> 'default' ·
r#371 case_selector -> expression ·
r#372 switch_body/0.2/0 -> switch_clause switch_body/0.2/0 ·
r#373 switch_body -> switch_body/0.0 '{' switch_body/0.2 '}' ·
r#374 continuing_statement -> 'continuing' continuing_compound_statement ·
r#375 continuing_compound_statement/0.0 -> continuing_compound_statement/0.0/0 ·
r#376 loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' ·
r#377 for_header -> for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 ·
r#378 for_header/0.4 -> for_update ·
r#379 for_update -> variable_updating_statement ·
r#380 for_update -> func_call_statement ·
r#381 continuing_compound_statement/0.0/0 -> attribute continuing_compound_statement/0.0/0 ·
r#382 case_selectors/0.1 -> case_selectors/0.1/0 ·
r#383 case_clause/0.2 -> ':' ·
r#384 default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement ·
r#385 case_clause -> 'case' case_selectors case_clause/0.2 compound_statement ·
r#386 case_selectors/0.1/0/0.0 -> ',' case_selector ·
r#387 case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 ·
r#388 case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 ·
r#389 case_selectors/0.2 -> ',' ·
r#390 continuing_compound_statement/0.2 -> continuing_compound_statement/0.2/0 ·
r#391 continuing_compound_statement/0.2/0 -> statement continuing_compound_statement/0.2/0 ·
r#392 continuing_compound_statement/0.3 -> break_if_statement ·
r#393 continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' ·
r#394 break_if_statement -> 'break' 'if' expression ';' ·

=Action:
[#0 'diagnostic']: s#7
[#0 'enable']: s#8
[#1 EndOfText]: acc
[#2 ';']: s#17
[#2 '@']: s#35
[#2 'alias']: s#27
[#2 'const']: s#25
[#2 'const_assert']: s#30
[#2 'struct']: s#28
[#3 ';']: r#0
[#3 '@']: r#0
[#3 'alias']: r#0
[#3 'const']: r#0
[#3 'const_assert']: r#0
[#3 'fn']: r#0
[#3 'override']: r#0
[#3 'struct']: r#0
[#3 'var']: r#0
[#3 EndOfText]: r#0
[#4 'diagnostic']: s#7
[#4 'enable']: s#8
[#5 ';']: r#1
[#5 '@']: r#1
[#5 'alias']: r#1
[#5 'const']: r#1
[#5 'const_assert']: r#1
[#5 'diagnostic']: r#1
[#5 'enable']: r#1
[#5 'fn']: r#1
[#5 'override']: r#1
[#5 'struct']: r#1
[#5 'var']: r#1
[#5 EndOfText]: r#1
[#6 ';']: r#2
[#6 '@']: r#2
[#6 'alias']: r#2
[#6 'const']: r#2
[#6 'const_assert']: r#2
[#6 'diagnostic']: r#2
[#6 'enable']: r#2
[#6 'fn']: r#2
[#6 'override']: r#2
[#6 'struct']: r#2
[#6 'var']: r#2
[#6 EndOfText]: r#2
[#7 '(']: s#12
[#8 'f16']: s#10
[#9 ';']: s#169
[#10 ';']: r#3
[#11 ';']: s#168
[#12 'error']: s#164
[#12 'info']: s#166
[#12 'off']: s#167
[#12 'warning']: s#165
[#13 ';']: r#4
[#13 '@']: r#4
[#13 'alias']: r#4
[#13 'const']: r#4
[#13 'const_assert']: r#4
[#13 'fn']: r#4
[#13 'override']: r#4
[#13 'struct']: r#4
[#13 'var']: r#4
[#13 EndOfText]: r#4
[#14 EndOfText]: r#5
[#15 EndOfText]: r#6
[#16 ';']: s#17
[#16 '@']: s#35
[#16 'alias']: s#27
[#16 'const']: s#25
[#16 'const_assert']: s#30
[#16 'struct']: s#28
[#17 ';']: r#7
[#17 '@']: r#7
[#17 'alias']: r#7
[#17 'const']: r#7
[#17 'const_assert']: r#7
[#17 'fn']: r#7
[#17 'override']: r#7
[#17 'struct']: r#7
[#17 'var']: r#7
[#17 EndOfText]: r#7
[#18 ';']: s#161
[#19 ';']: s#160
[#20 ';']: s#159
[#21 ';']: r#8
[#21 '@']: r#8
[#21 'alias']: r#8
[#21 'const']: r#8
[#21 'const_assert']: r#8
[#21 'fn']: r#8
[#21 'override']: r#8
[#21 'struct']: r#8
[#21 'var']: r#8
[#21 EndOfText]: r#8
[#22 ';']: r#9
[#22 '@']: r#9
[#22 'alias']: r#9
[#22 'const']: r#9
[#22 'const_assert']: r#9
[#22 'fn']: r#9
[#22 'override']: r#9
[#22 'struct']: r#9
[#22 'var']: r#9
[#22 EndOfText]: r#9
[#23 ';']: s#158
[#24 'var']: s#157
[#25 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#26 'override']: s#153
[#27 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#28 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#29 'fn']: s#150
[#30 '!']: s#68
[#30 '&']: s#71
[#30 '(']: s#83
[#30 '*']: s#70
[#30 '-']: s#67
[#30 'array']: s#87
[#30 'atomic']: s#101
[#30 'bitcast']: s#77
[#30 'bool']: s#94
[#30 'f16']: s#96
[#30 'f32']: s#95
[#30 'false']: s#93
[#30 'i32']: s#97
[#30 'mat2x2']: s#106
[#30 'mat2x3']: s#107
[#30 'mat2x4']: s#108
[#30 'mat3x2']: s#109
[#30 'mat3x3']: s#110
[#30 'mat3x4']: s#111
[#30 'mat4x2']: s#112
[#30 'mat4x3']: s#113
[#30 'mat4x4']: s#114
[#30 'ptr']: s#99
[#30 'sampler']: s#131
[#30 'sampler_comparison']: s#132
[#30 'texture_1d']: s#138
[#30 'texture_2d']: s#139
[#30 'texture_2d_array']: s#140
[#30 'texture_3d']: s#141
[#30 'texture_cube']: s#142
[#30 'texture_cube_array']: s#143
[#30 'texture_depth_2d']: s#133
[#30 'texture_depth_2d_array']: s#134
[#30 'texture_depth_cube']: s#135
[#30 'texture_depth_cube_array']: s#136
[#30 'texture_depth_multisampled_2d']: s#137
[#30 'texture_multisampled_2d']: s#144
[#30 'texture_storage_1d']: s#145
[#30 'texture_storage_2d']: s#146
[#30 'texture_storage_2d_array']: s#147
[#30 'texture_storage_3d']: s#148
[#30 'true']: s#92
[#30 'u32']: s#98
[#30 'vec2']: s#103
[#30 'vec3']: s#104
[#30 'vec4']: s#105
[#30 '~']: s#69
[#30 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#30 /0[fh]/]: s#118
[#30 /0[iu]?/]: s#115
[#30 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#30 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#30 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#30 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#30 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#30 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#30 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#30 /[1-9][0-9]*[fh]/]: s#119
[#30 /[1-9][0-9]*[iu]?/]: s#116
[#31 'var']: r#10
[#32 'override']: r#11
[#33 'fn']: r#12
[#34 '@']: s#35
[#35 'align']: s#36
[#35 'binding']: s#37
[#35 'builtin']: s#38
[#35 'compute']: s#50
[#35 'const']: s#39
[#35 'diagnostic']: s#40
[#35 'fragment']: s#49
[#35 'group']: s#41
[#35 'id']: s#42
[#35 'interpolate']: s#43
[#35 'invariant']: s#44
[#35 'location']: s#45
[#35 'size']: s#46
[#35 'vertex']: s#48
[#35 'workgroup_size']: s#47
[#36 '(']: s#238
[#37 '(']: s#237
[#38 '(']: s#236
[#39 '@']: r#13
[#39 'array']: r#13
[#39 'atomic']: r#13
[#39 'bool']: r#13
[#39 'f16']: r#13
[#39 'f32']: r#13
[#39 'fn']: r#13
[#39 'for']: r#13
[#39 'i32']: r#13
[#39 'if']: r#13
[#39 'loop']: r#13
[#39 'mat2x2']: r#13
[#39 'mat2x3']: r#13
[#39 'mat2x4']: r#13
[#39 'mat3x2']: r#13
[#39 'mat3x3']: r#13
[#39 'mat3x4']: r#13
[#39 'mat4x2']: r#13
[#39 'mat4x3']: r#13
[#39 'mat4x4']: r#13
[#39 'override']: r#13
[#39 'ptr']: r#13
[#39 'sampler']: r#13
[#39 'sampler_comparison']: r#13
[#39 'switch']: r#13
[#39 'texture_1d']: r#13
[#39 'texture_2d']: r#13
[#39 'texture_2d_array']: r#13
[#39 'texture_3d']: r#13
[#39 'texture_cube']: r#13
[#39 'texture_cube_array']: r#13
[#39 'texture_depth_2d']: r#13
[#39 'texture_depth_2d_array']: r#13
[#39 'texture_depth_cube']: r#13
[#39 'texture_depth_cube_array']: r#13
[#39 'texture_depth_multisampled_2d']: r#13
[#39 'texture_multisampled_2d']: r#13
[#39 'texture_storage_1d']: r#13
[#39 'texture_storage_2d']: r#13
[#39 'texture_storage_2d_array']: r#13
[#39 'texture_storage_3d']: r#13
[#39 'u32']: r#13
[#39 'var']: r#13
[#39 'vec2']: r#13
[#39 'vec3']: r#13
[#39 'vec4']: r#13
[#39 'while']: r#13
[#39 '{']: r#13
[#39 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#13
[#40 '(']: s#12
[#41 '(']: s#234
[#42 '(']: s#233
[#43 '(']: s#232
[#44 '@']: r#14
[#44 'array']: r#14
[#44 'atomic']: r#14
[#44 'bool']: r#14
[#44 'f16']: r#14
[#44 'f32']: r#14
[#44 'fn']: r#14
[#44 'for']: r#14
[#44 'i32']: r#14
[#44 'if']: r#14
[#44 'loop']: r#14
[#44 'mat2x2']: r#14
[#44 'mat2x3']: r#14
[#44 'mat2x4']: r#14
[#44 'mat3x2']: r#14
[#44 'mat3x3']: r#14
[#44 'mat3x4']: r#14
[#44 'mat4x2']: r#14
[#44 'mat4x3']: r#14
[#44 'mat4x4']: r#14
[#44 'override']: r#14
[#44 'ptr']: r#14
[#44 'sampler']: r#14
[#44 'sampler_comparison']: r#14
[#44 'switch']: r#14
[#44 'texture_1d']: r#14
[#44 'texture_2d']: r#14
[#44 'texture_2d_array']: r#14
[#44 'texture_3d']: r#14
[#44 'texture_cube']: r#14
[#44 'texture_cube_array']: r#14
[#44 'texture_depth_2d']: r#14
[#44 'texture_depth_2d_array']: r#14
[#44 'texture_depth_cube']: r#14
[#44 'texture_depth_cube_array']: r#14
[#44 'texture_depth_multisampled_2d']: r#14
[#44 'texture_multisampled_2d']: r#14
[#44 'texture_storage_1d']: r#14
[#44 'texture_storage_2d']: r#14
[#44 'texture_storage_2d_array']: r#14
[#44 'texture_storage_3d']: r#14
[#44 'u32']: r#14
[#44 'var']: r#14
[#44 'vec2']: r#14
[#44 'vec3']: r#14
[#44 'vec4']: r#14
[#44 'while']: r#14
[#44 '{']: r#14
[#44 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#14
[#45 '(']: s#231
[#46 '(']: s#230
[#47 '(']: s#229
[#48 '@']: r#15
[#48 'array']: r#15
[#48 'atomic']: r#15
[#48 'bool']: r#15
[#48 'f16']: r#15
[#48 'f32']: r#15
[#48 'fn']: r#15
[#48 'for']: r#15
[#48 'i32']: r#15
[#48 'if']: r#15
[#48 'loop']: r#15
[#48 'mat2x2']: r#15
[#48 'mat2x3']: r#15
[#48 'mat2x4']: r#15
[#48 'mat3x2']: r#15
[#48 'mat3x3']: r#15
[#48 'mat3x4']: r#15
[#48 'mat4x2']: r#15
[#48 'mat4x3']: r#15
[#48 'mat4x4']: r#15
[#48 'override']: r#15
[#48 'ptr']: r#15
[#48 'sampler']: r#15
[#48 'sampler_comparison']: r#15
[#48 'switch']: r#15
[#48 'texture_1d']: r#15
[#48 'texture_2d']: r#15
[#48 'texture_2d_array']: r#15
[#48 'texture_3d']: r#15
[#48 'texture_cube']: r#15
[#48 'texture_cube_array']: r#15
[#48 'texture_depth_2d']: r#15
[#48 'texture_depth_2d_array']: r#15
[#48 'texture_depth_cube']: r#15
[#48 'texture_depth_cube_array']: r#15
[#48 'texture_depth_multisampled_2d']: r#15
[#48 'texture_multisampled_2d']: r#15
[#48 'texture_storage_1d']: r#15
[#48 'texture_storage_2d']: r#15
[#48 'texture_storage_2d_array']: r#15
[#48 'texture_storage_3d']: r#15
[#48 'u32']: r#15
[#48 'var']: r#15
[#48 'vec2']: r#15
[#48 'vec3']: r#15
[#48 'vec4']: r#15
[#48 'while']: r#15
[#48 '{']: r#15
[#48 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#15
[#49 '@']: r#16
[#49 'array']: r#16
[#49 'atomic']: r#16
[#49 'bool']: r#16
[#49 'f16']: r#16
[#49 'f32']: r#16
[#49 'fn']: r#16
[#49 'for']: r#16
[#49 'i32']: r#16
[#49 'if']: r#16
[#49 'loop']: r#16
[#49 'mat2x2']: r#16
[#49 'mat2x3']: r#16
[#49 'mat2x4']: r#16
[#49 'mat3x2']: r#16
[#49 'mat3x3']: r#16
[#49 'mat3x4']: r#16
[#49 'mat4x2']: r#16
[#49 'mat4x3']: r#16
[#49 'mat4x4']: r#16
[#49 'override']: r#16
[#49 'ptr']: r#16
[#49 'sampler']: r#16
[#49 'sampler_comparison']: r#16
[#49 'switch']: r#16
[#49 'texture_1d']: r#16
[#49 'texture_2d']: r#16
[#49 'texture_2d_array']: r#16
[#49 'texture_3d']: r#16
[#49 'texture_cube']: r#16
[#49 'texture_cube_array']: r#16
[#49 'texture_depth_2d']: r#16
[#49 'texture_depth_2d_array']: r#16
[#49 'texture_depth_cube']: r#16
[#49 'texture_depth_cube_array']: r#16
[#49 'texture_depth_multisampled_2d']: r#16
[#49 'texture_multisampled_2d']: r#16
[#49 'texture_storage_1d']: r#16
[#49 'texture_storage_2d']: r#16
[#49 'texture_storage_2d_array']: r#16
[#49 'texture_storage_3d']: r#16
[#49 'u32']: r#16
[#49 'var']: r#16
[#49 'vec2']: r#16
[#49 'vec3']: r#16
[#49 'vec4']: r#16
[#49 'while']: r#16
[#49 '{']: r#16
[#49 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#16
[#50 '@']: r#17
[#50 'array']: r#17
[#50 'atomic']: r#17
[#50 'bool']: r#17
[#50 'f16']: r#17
[#50 'f32']: r#17
[#50 'fn']: r#17
[#50 'for']: r#17
[#50 'i32']: r#17
[#50 'if']: r#17
[#50 'loop']: r#17
[#50 'mat2x2']: r#17
[#50 'mat2x3']: r#17
[#50 'mat2x4']: r#17
[#50 'mat3x2']: r#17
[#50 'mat3x3']: r#17
[#50 'mat3x4']: r#17
[#50 'mat4x2']: r#17
[#50 'mat4x3']: r#17
[#50 'mat4x4']: r#17
[#50 'override']: r#17
[#50 'ptr']: r#17
[#50 'sampler']: r#17
[#50 'sampler_comparison']: r#17
[#50 'switch']: r#17
[#50 'texture_1d']: r#17
[#50 'texture_2d']: r#17
[#50 'texture_2d_array']: r#17
[#50 'texture_3d']: r#17
[#50 'texture_cube']: r#17
[#50 'texture_cube_array']: r#17
[#50 'texture_depth_2d']: r#17
[#50 'texture_depth_2d_array']: r#17
[#50 'texture_depth_cube']: r#17
[#50 'texture_depth_cube_array']: r#17
[#50 'texture_depth_multisampled_2d']: r#17
[#50 'texture_multisampled_2d']: r#17
[#50 'texture_storage_1d']: r#17
[#50 'texture_storage_2d']: r#17
[#50 'texture_storage_2d_array']: r#17
[#50 'texture_storage_3d']: r#17
[#50 'u32']: r#17
[#50 'var']: r#17
[#50 'vec2']: r#17
[#50 'vec3']: r#17
[#50 'vec4']: r#17
[#50 'while']: r#17
[#50 '{']: r#17
[#50 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#17
[#51 'var']: r#18
[#52 'override']: r#19
[#53 'fn']: r#20
[#54 ';']: r#21
[#55 '&&']: r#24
[#55 ')']: r#22
[#55 ',']: r#22
[#55 ':']: r#22
[#55 ';']: r#22
[#55 '@']: r#22
[#55 ']']: r#22
[#55 '{']: r#22
[#55 '||']: r#23
[#56 '||']: s#228
[#57 '&&']: s#227
[#58 ')']: r#25
[#58 ',']: r#25
[#58 ':']: r#25
[#58 ';']: r#25
[#58 '@']: r#25
[#58 ']']: r#25
[#58 '{']: r#25
[#59 '!=']: s#226
[#59 '&&']: r#26
[#59 ')']: r#26
[#59 ',']: r#26
[#59 ':']: r#26
[#59 ';']: r#26
[#59 '<']: s#221
[#59 '<=']: s#223
[#59 '==']: s#225
[#59 '>']: s#222
[#59 '>=']: s#224
[#59 '@']: r#26
[#59 ']']: r#26
[#59 '{']: r#26
[#59 '||']: r#26
[#60 '&']: s#220
[#61 '|']: s#219
[#62 '^']: s#218
[#63 '!=']: r#27
[#63 '&&']: r#27
[#63 ')']: r#27
[#63 '+']: s#216
[#63 ',']: r#27
[#63 '-']: s#217
[#63 ':']: r#27
[#63 ';']: r#27
[#63 '<']: r#27
[#63 '<=']: r#27
[#63 '==']: r#27
[#63 '>']: r#27
[#63 '>=']: r#27
[#63 '@']: r#27
[#63 ']']: r#27
[#63 '{']: r#27
[#63 '||']: r#27
[#64 '!=']: r#31
[#64 '%']: r#31
[#64 '&&']: r#31
[#64 '&']: r#28
[#64 ')']: r#31
[#64 '*']: r#31
[#64 '+']: r#31
[#64 ',']: r#31
[#64 '-']: r#31
[#64 '/']: r#31
[#64 ':']: r#31
[#64 ';']: r#31
[#64 '<']: r#31
[#64 '<<']: s#213
[#64 '<=']: r#31
[#64 '==']: r#31
[#64 '>']: r#31
[#64 '>=']: r#31
[#64 '>>']: s#214
[#64 '@']: r#31
[#64 ']']: r#31
[#64 '^']: r#30
[#64 '{']: r#31
[#64 '|']: r#29
[#64 '||']: r#31
[#65 '!=']: r#32
[#65 '%']: s#212
[#65 '&&']: r#32
[#65 ')']: r#32
[#65 '*']: s#210
[#65 '+']: r#32
[#65 ',']: r#32
[#65 '-']: r#32
[#65 '/']: s#211
[#65 ':']: r#32
[#65 ';']: r#32
[#65 '<']: r#32
[#65 '<=']: r#32
[#65 '==']: r#32
[#65 '>']: r#32
[#65 '>=']: r#32
[#65 '@']: r#32
[#65 ']']: r#32
[#65 '{']: r#32
[#65 '||']: r#32
[#66 '!=']: r#33
[#66 '%']: r#33
[#66 '&&']: r#33
[#66 '&']: r#33
[#66 ')']: r#33
[#66 '*']: r#33
[#66 '+']: r#33
[#66 ',']: r#33
[#66 '-']: r#33
[#66 '/']: r#33
[#66 ':']: r#33
[#66 ';']: r#33
[#66 '<']: r#33
[#66 '<<']: r#33
[#66 '<=']: r#33
[#66 '==']: r#33
[#66 '>']: r#33
[#66 '>=']: r#33
[#66 '>>']: r#33
[#66 '@']: r#33
[#66 ']']: r#33
[#66 '^']: r#33
[#66 '{']: r#33
[#66 '|']: r#33
[#66 '||']: r#33
[#67 '!']: s#68
[#67 '&']: s#71
[#67 '(']: s#83
[#67 '*']: s#70
[#67 '-']: s#67
[#67 'array']: s#87
[#67 'atomic']: s#101
[#67 'bitcast']: s#77
[#67 'bool']: s#94
[#67 'f16']: s#96
[#67 'f32']: s#95
[#67 'false']: s#93
[#67 'i32']: s#97
[#67 'mat2x2']: s#106
[#67 'mat2x3']: s#107
[#67 'mat2x4']: s#108
[#67 'mat3x2']: s#109
[#67 'mat3x3']: s#110
[#67 'mat3x4']: s#111
[#67 'mat4x2']: s#112
[#67 'mat4x3']: s#113
[#67 'mat4x4']: s#114
[#67 'ptr']: s#99
[#67 'sampler']: s#131
[#67 'sampler_comparison']: s#132
[#67 'texture_1d']: s#138
[#67 'texture_2d']: s#139
[#67 'texture_2d_array']: s#140
[#67 'texture_3d']: s#141
[#67 'texture_cube']: s#142
[#67 'texture_cube_array']: s#143
[#67 'texture_depth_2d']: s#133
[#67 'texture_depth_2d_array']: s#134
[#67 'texture_depth_cube']: s#135
[#67 'texture_depth_cube_array']: s#136
[#67 'texture_depth_multisampled_2d']: s#137
[#67 'texture_multisampled_2d']: s#144
[#67 'texture_storage_1d']: s#145
[#67 'texture_storage_2d']: s#146
[#67 'texture_storage_2d_array']: s#147
[#67 'texture_storage_3d']: s#148
[#67 'true']: s#92
[#67 'u32']: s#98
[#67 'vec2']: s#103
[#67 'vec3']: s#104
[#67 'vec4']: s#105
[#67 '~']: s#69
[#67 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#67 /0[fh]/]: s#118
[#67 /0[iu]?/]: s#115
[#67 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#67 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#67 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#67 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#67 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#67 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#67 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#67 /[1-9][0-9]*[fh]/]: s#119
[#67 /[1-9][0-9]*[iu]?/]: s#116
[#68 '!']: s#68
[#68 '&']: s#71
[#68 '(']: s#83
[#68 '*']: s#70
[#68 '-']: s#67
[#68 'array']: s#87
[#68 'atomic']: s#101
[#68 'bitcast']: s#77
[#68 'bool']: s#94
[#68 'f16']: s#96
[#68 'f32']: s#95
[#68 'false']: s#93
[#68 'i32']: s#97
[#68 'mat2x2']: s#106
[#68 'mat2x3']: s#107
[#68 'mat2x4']: s#108
[#68 'mat3x2']: s#109
[#68 'mat3x3']: s#110
[#68 'mat3x4']: s#111
[#68 'mat4x2']: s#112
[#68 'mat4x3']: s#113
[#68 'mat4x4']: s#114
[#68 'ptr']: s#99
[#68 'sampler']: s#131
[#68 'sampler_comparison']: s#132
[#68 'texture_1d']: s#138
[#68 'texture_2d']: s#139
[#68 'texture_2d_array']: s#140
[#68 'texture_3d']: s#141
[#68 'texture_cube']: s#142
[#68 'texture_cube_array']: s#143
[#68 'texture_depth_2d']: s#133
[#68 'texture_depth_2d_array']: s#134
[#68 'texture_depth_cube']: s#135
[#68 'texture_depth_cube_array']: s#136
[#68 'texture_depth_multisampled_2d']: s#137
[#68 'texture_multisampled_2d']: s#144
[#68 'texture_storage_1d']: s#145
[#68 'texture_storage_2d']: s#146
[#68 'texture_storage_2d_array']: s#147
[#68 'texture_storage_3d']: s#148
[#68 'true']: s#92
[#68 'u32']: s#98
[#68 'vec2']: s#103
[#68 'vec3']: s#104
[#68 'vec4']: s#105
[#68 '~']: s#69
[#68 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#68 /0[fh]/]: s#118
[#68 /0[iu]?/]: s#115
[#68 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#68 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#68 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#68 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#68 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#68 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#68 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#68 /[1-9][0-9]*[fh]/]: s#119
[#68 /[1-9][0-9]*[iu]?/]: s#116
[#69 '!']: s#68
[#69 '&']: s#71
[#69 '(']: s#83
[#69 '*']: s#70
[#69 '-']: s#67
[#69 'array']: s#87
[#69 'atomic']: s#101
[#69 'bitcast']: s#77
[#69 'bool']: s#94
[#69 'f16']: s#96
[#69 'f32']: s#95
[#69 'false']: s#93
[#69 'i32']: s#97
[#69 'mat2x2']: s#106
[#69 'mat2x3']: s#107
[#69 'mat2x4']: s#108
[#69 'mat3x2']: s#109
[#69 'mat3x3']: s#110
[#69 'mat3x4']: s#111
[#69 'mat4x2']: s#112
[#69 'mat4x3']: s#113
[#69 'mat4x4']: s#114
[#69 'ptr']: s#99
[#69 'sampler']: s#131
[#69 'sampler_comparison']: s#132
[#69 'texture_1d']: s#138
[#69 'texture_2d']: s#139
[#69 'texture_2d_array']: s#140
[#69 'texture_3d']: s#141
[#69 'texture_cube']: s#142
[#69 'texture_cube_array']: s#143
[#69 'texture_depth_2d']: s#133
[#69 'texture_depth_2d_array']: s#134
[#69 'texture_depth_cube']: s#135
[#69 'texture_depth_cube_array']: s#136
[#69 'texture_depth_multisampled_2d']: s#137
[#69 'texture_multisampled_2d']: s#144
[#69 'texture_storage_1d']: s#145
[#69 'texture_storage_2d']: s#146
[#69 'texture_storage_2d_array']: s#147
[#69 'texture_storage_3d']: s#148
[#69 'true']: s#92
[#69 'u32']: s#98
[#69 'vec2']: s#103
[#69 'vec3']: s#104
[#69 'vec4']: s#105
[#69 '~']: s#69
[#69 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#69 /0[fh]/]: s#118
[#69 /0[iu]?/]: s#115
[#69 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#69 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#69 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#69 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#69 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#69 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#69 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#69 /[1-9][0-9]*[fh]/]: s#119
[#69 /[1-9][0-9]*[iu]?/]: s#116
[#70 '!']: s#68
[#70 '&']: s#71
[#70 '(']: s#83
[#70 '*']: s#70
[#70 '-']: s#67
[#70 'array']: s#87
[#70 'atomic']: s#101
[#70 'bitcast']: s#77
[#70 'bool']: s#94
[#70 'f16']: s#96
[#70 'f32']: s#95
[#70 'false']: s#93
[#70 'i32']: s#97
[#70 'mat2x2']: s#106
[#70 'mat2x3']: s#107
[#70 'mat2x4']: s#108
[#70 'mat3x2']: s#109
[#70 'mat3x3']: s#110
[#70 'mat3x4']: s#111
[#70 'mat4x2']: s#112
[#70 'mat4x3']: s#113
[#70 'mat4x4']: s#114
[#70 'ptr']: s#99
[#70 'sampler']: s#131
[#70 'sampler_comparison']: s#132
[#70 'texture_1d']: s#138
[#70 'texture_2d']: s#139
[#70 'texture_2d_array']: s#140
[#70 'texture_3d']: s#141
[#70 'texture_cube']: s#142
[#70 'texture_cube_array']: s#143
[#70 'texture_depth_2d']: s#133
[#70 'texture_depth_2d_array']: s#134
[#70 'texture_depth_cube']: s#135
[#70 'texture_depth_cube_array']: s#136
[#70 'texture_depth_multisampled_2d']: s#137
[#70 'texture_multisampled_2d']: s#144
[#70 'texture_storage_1d']: s#145
[#70 'texture_storage_2d']: s#146
[#70 'texture_storage_2d_array']: s#147
[#70 'texture_storage_3d']: s#148
[#70 'true']: s#92
[#70 'u32']: s#98
[#70 'vec2']: s#103
[#70 'vec3']: s#104
[#70 'vec4']: s#105
[#70 '~']: s#69
[#70 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#70 /0[fh]/]: s#118
[#70 /0[iu]?/]: s#115
[#70 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#70 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#70 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#70 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#70 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#70 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#70 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#70 /[1-9][0-9]*[fh]/]: s#119
[#70 /[1-9][0-9]*[iu]?/]: s#116
[#71 '!']: s#68
[#71 '&']: s#71
[#71 '(']: s#83
[#71 '*']: s#70
[#71 '-']: s#67
[#71 'array']: s#87
[#71 'atomic']: s#101
[#71 'bitcast']: s#77
[#71 'bool']: s#94
[#71 'f16']: s#96
[#71 'f32']: s#95
[#71 'false']: s#93
[#71 'i32']: s#97
[#71 'mat2x2']: s#106
[#71 'mat2x3']: s#107
[#71 'mat2x4']: s#108
[#71 'mat3x2']: s#109
[#71 'mat3x3']: s#110
[#71 'mat3x4']: s#111
[#71 'mat4x2']: s#112
[#71 'mat4x3']: s#113
[#71 'mat4x4']: s#114
[#71 'ptr']: s#99
[#71 'sampler']: s#131
[#71 'sampler_comparison']: s#132
[#71 'texture_1d']: s#138
[#71 'texture_2d']: s#139
[#71 'texture_2d_array']: s#140
[#71 'texture_3d']: s#141
[#71 'texture_cube']: s#142
[#71 'texture_cube_array']: s#143
[#71 'texture_depth_2d']: s#133
[#71 'texture_depth_2d_array']: s#134
[#71 'texture_depth_cube']: s#135
[#71 'texture_depth_cube_array']: s#136
[#71 'texture_depth_multisampled_2d']: s#137
[#71 'texture_multisampled_2d']: s#144
[#71 'texture_storage_1d']: s#145
[#71 'texture_storage_2d']: s#146
[#71 'texture_storage_2d_array']: s#147
[#71 'texture_storage_3d']: s#148
[#71 'true']: s#92
[#71 'u32']: s#98
[#71 'vec2']: s#103
[#71 'vec3']: s#104
[#71 'vec4']: s#105
[#71 '~']: s#69
[#71 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#71 /0[fh]/]: s#118
[#71 /0[iu]?/]: s#115
[#71 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#71 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#71 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#71 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#71 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#71 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#71 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#71 /[1-9][0-9]*[fh]/]: s#119
[#71 /[1-9][0-9]*[iu]?/]: s#116
[#72 '.']: s#203
[#72 '[']: s#202
[#73 '!=']: r#34
[#73 '%']: r#34
[#73 '&&']: r#34
[#73 '&']: r#34
[#73 '(']: r#35
[#73 ')']: r#34
[#73 '*']: r#34
[#73 '+']: r#34
[#73 ',']: r#34
[#73 '-']: r#34
[#73 '.']: r#34
[#73 '/']: r#34
[#73 ':']: r#34
[#73 ';']: r#34
[#73 '<']: r#34
[#73 '<<']: r#34
[#73 '<=']: r#34
[#73 '==']: r#34
[#73 '>']: r#34
[#73 '>=']: r#34
[#73 '>>']: r#34
[#73 '@']: r#34
[#73 '[']: r#34
[#73 ']']: r#34
[#73 '^']: r#34
[#73 '{']: r#34
[#73 '|']: r#34
[#73 '||']: r#34
[#74 '!=']: r#36
[#74 '%']: r#36
[#74 '&&']: r#36
[#74 '&']: r#36
[#74 ')']: r#36
[#74 '*']: r#36
[#74 '+']: r#36
[#74 ',']: r#36
[#74 '-']: r#36
[#74 '.']: r#36
[#74 '/']: r#36
[#74 ':']: r#36
[#74 ';']: r#36
[#74 '<']: r#36
[#74 '<<']: r#36
[#74 '<=']: r#36
[#74 '==']: r#36
[#74 '>']: r#36
[#74 '>=']: r#36
[#74 '>>']: r#36
[#74 '@']: r#36
[#74 '[']: r#36
[#74 ']']: r#36
[#74 '^']: r#36
[#74 '{']: r#36
[#74 '|']: r#36
[#74 '||']: r#36
[#75 '!=']: r#37
[#75 '%']: r#37
[#75 '&&']: r#37
[#75 '&']: r#37
[#75 ')']: r#37
[#75 '*']: r#37
[#75 '+']: r#37
[#75 ',']: r#37
[#75 '-']: r#37
[#75 '.']: r#37
[#75 '/']: r#37
[#75 ':']: r#37
[#75 ';']: r#37
[#75 '<']: r#37
[#75 '<<']: r#37
[#75 '<=']: r#37
[#75 '==']: r#37
[#75 '>']: r#37
[#75 '>=']: r#37
[#75 '>>']: r#37
[#75 '@']: r#37
[#75 '[']: r#37
[#75 ']']: r#37
[#75 '^']: r#37
[#75 '{']: r#37
[#75 '|']: r#37
[#75 '||']: r#37
[#76 '!=']: r#38
[#76 '%']: r#38
[#76 '&&']: r#38
[#76 '&']: r#38
[#76 ')']: r#38
[#76 '*']: r#38
[#76 '+']: r#38
[#76 ',']: r#38
[#76 '-']: r#38
[#76 '.']: r#38
[#76 '/']: r#38
[#76 ':']: r#38
[#76 ';']: r#38
[#76 '<']: r#38
[#76 '<<']: r#38
[#76 '<=']: r#38
[#76 '==']: r#38
[#76 '>']: r#38
[#76 '>=']: r#38
[#76 '>>']: r#38
[#76 '@']: r#38
[#76 '[']: r#38
[#76 ']']: r#38
[#76 '^']: r#38
[#76 '{']: r#38
[#76 '|']: r#38
[#76 '||']: r#38
[#77 '<']: s#199
[#78 '!=']: r#39
[#78 '%']: r#39
[#78 '%=']: r#39
[#78 '&&']: r#39
[#78 '&']: r#39
[#78 '&=']: r#39
[#78 '(']: r#39
[#78 ')']: r#39
[#78 '*']: r#39
[#78 '*=']: r#39
[#78 '+']: r#39
[#78 '++']: r#39
[#78 '+=']: r#39
[#78 ',']: r#39
[#78 '-']: r#39
[#78 '--']: r#39
[#78 '-=']: r#39
[#78 '.']: r#39
[#78 '/']: r#39
[#78 '/=']: r#39
[#78 ':']: r#39
[#78 ';']: r#39
[#78 '<']: r#39
[#78 '<<']: r#39
[#78 '<<=']: r#39
[#78 '<=']: r#39
[#78 '=']: r#39
[#78 '==']: r#39
[#78 '>']: r#39
[#78 '>=']: r#39
[#78 '>>']: r#39
[#78 '>>=']: r#39
[#78 '@']: r#39
[#78 '[']: r#39
[#78 ']']: r#39
[#78 '^']: r#39
[#78 '^=']: r#39
[#78 '{']: r#39
[#78 '|']: r#39
[#78 '|=']: r#39
[#78 '||']: r#39
[#78 '}']: r#39
[#79 '(']: s#198
[#80 '!=']: r#40
[#80 '%']: r#40
[#80 '&&']: r#40
[#80 '&']: r#40
[#80 ')']: r#40
[#80 '*']: r#40
[#80 '+']: r#40
[#80 ',']: r#40
[#80 '-']: r#40
[#80 '.']: r#40
[#80 '/']: r#40
[#80 ':']: r#40
[#80 ';']: r#40
[#80 '<']: r#40
[#80 '<<']: r#40
[#80 '<=']: r#40
[#80 '==']: r#40
[#80 '>']: r#40
[#80 '>=']: r#40
[#80 '>>']: r#40
[#80 '@']: r#40
[#80 '[']: r#40
[#80 ']']: r#40
[#80 '^']: r#40
[#80 '{']: r#40
[#80 '|']: r#40
[#80 '||']: r#40
[#81 '!=']: r#41
[#81 '%']: r#41
[#81 '&&']: r#41
[#81 '&']: r#41
[#81 ')']: r#41
[#81 '*']: r#41
[#81 '+']: r#41
[#81 ',']: r#41
[#81 '-']: r#41
[#81 '.']: r#41
[#81 '/']: r#41
[#81 ':']: r#41
[#81 ';']: r#41
[#81 '<']: r#41
[#81 '<<']: r#41
[#81 '<=']: r#41
[#81 '==']: r#41
[#81 '>']: r#41
[#81 '>=']: r#41
[#81 '>>']: r#41
[#81 '@']: r#41
[#81 '[']: r#41
[#81 ']']: r#41
[#81 '^']: r#41
[#81 '{']: r#41
[#81 '|']: r#41
[#81 '||']: r#41
[#82 '!=']: r#42
[#82 '%']: r#42
[#82 '&&']: r#42
[#82 '&']: r#42
[#82 ')']: r#42
[#82 '*']: r#42
[#82 '+']: r#42
[#82 ',']: r#42
[#82 '-']: r#42
[#82 '.']: r#42
[#82 '/']: r#42
[#82 ':']: r#42
[#82 ';']: r#42
[#82 '<']: r#42
[#82 '<<']: r#42
[#82 '<=']: r#42
[#82 '==']: r#42
[#82 '>']: r#42
[#82 '>=']: r#42
[#82 '>>']: r#42
[#82 '@']: r#42
[#82 '[']: r#42
[#82 ']']: r#42
[#82 '^']: r#42
[#82 '{']: r#42
[#82 '|']: r#42
[#82 '||']: r#42
[#83 '!']: s#68
[#83 '&']: s#71
[#83 '(']: s#83
[#83 '*']: s#70
[#83 '-']: s#67
[#83 'array']: s#87
[#83 'atomic']: s#101
[#83 'bitcast']: s#77
[#83 'bool']: s#94
[#83 'f16']: s#96
[#83 'f32']: s#95
[#83 'false']: s#93
[#83 'i32']: s#97
[#83 'mat2x2']: s#106
[#83 'mat2x3']: s#107
[#83 'mat2x4']: s#108
[#83 'mat3x2']: s#109
[#83 'mat3x3']: s#110
[#83 'mat3x4']: s#111
[#83 'mat4x2']: s#112
[#83 'mat4x3']: s#113
[#83 'mat4x4']: s#114
[#83 'ptr']: s#99
[#83 'sampler']: s#131
[#83 'sampler_comparison']: s#132
[#83 'texture_1d']: s#138
[#83 'texture_2d']: s#139
[#83 'texture_2d_array']: s#140
[#83 'texture_3d']: s#141
[#83 'texture_cube']: s#142
[#83 'texture_cube_array']: s#143
[#83 'texture_depth_2d']: s#133
[#83 'texture_depth_2d_array']: s#134
[#83 'texture_depth_cube']: s#135
[#83 'texture_depth_cube_array']: s#136
[#83 'texture_depth_multisampled_2d']: s#137
[#83 'texture_multisampled_2d']: s#144
[#83 'texture_storage_1d']: s#145
[#83 'texture_storage_2d']: s#146
[#83 'texture_storage_2d_array']: s#147
[#83 'texture_storage_3d']: s#148
[#83 'true']: s#92
[#83 'u32']: s#98
[#83 'vec2']: s#103
[#83 'vec3']: s#104
[#83 'vec4']: s#105
[#83 '~']: s#69
[#83 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#83 /0[fh]/]: s#118
[#83 /0[iu]?/]: s#115
[#83 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#83 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#83 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#83 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#83 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#83 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#83 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#83 /[1-9][0-9]*[fh]/]: s#119
[#83 /[1-9][0-9]*[iu]?/]: s#116
[#84 '(']: r#43
[#85 '(']: r#44
[#85 '<']: s#195
[#86 '(']: r#45
[#86 '<']: s#194
[#87 '(']: r#46
[#87 '<']: s#193
[#88 '!=']: r#47
[#88 '%']: r#47
[#88 '&&']: r#47
[#88 '&']: r#47
[#88 ')']: r#47
[#88 '*']: r#47
[#88 '+']: r#47
[#88 ',']: r#47
[#88 '-']: r#47
[#88 '.']: r#47
[#88 '/']: r#47
[#88 ':']: r#47
[#88 ';']: r#47
[#88 '<']: r#47
[#88 '<<']: r#47
[#88 '<=']: r#47
[#88 '==']: r#47
[#88 '>']: r#47
[#88 '>=']: r#47
[#88 '>>']: r#47
[#88 '@']: r#47
[#88 '[']: r#47
[#88 ']']: r#47
[#88 '^']: r#47
[#88 '{']: r#47
[#88 '|']: r#47
[#88 '||']: r#47
[#89 '!=']: r#48
[#89 '%']: r#48
[#89 '&&']: r#48
[#89 '&']: r#48
[#89 ')']: r#48
[#89 '*']: r#48
[#89 '+']: r#48
[#89 ',']: r#48
[#89 '-']: r#48
[#89 '.']: r#48
[#89 '/']: r#48
[#89 ':']: r#48
[#89 ';']: r#48
[#89 '<']: r#48
[#89 '<<']: r#48
[#89 '<=']: r#48
[#89 '==']: r#48
[#89 '>']: r#48
[#89 '>=']: r#48
[#89 '>>']: r#48
[#89 '@']: r#48
[#89 '[']: r#48
[#89 ']']: r#48
[#89 '^']: r#48
[#89 '{']: r#48
[#89 '|']: r#48
[#89 '||']: r#48
[#90 '!=']: r#49
[#90 '%']: r#49
[#90 '&&']: r#49
[#90 '&']: r#49
[#90 ')']: r#49
[#90 '*']: r#49
[#90 '+']: r#49
[#90 ',']: r#49
[#90 '-']: r#49
[#90 '.']: r#49
[#90 '/']: r#49
[#90 ':']: r#49
[#90 ';']: r#49
[#90 '<']: r#49
[#90 '<<']: r#49
[#90 '<=']: r#49
[#90 '==']: r#49
[#90 '>']: r#49
[#90 '>=']: r#49
[#90 '>>']: r#49
[#90 '@']: r#49
[#90 '[']: r#49
[#90 ']']: r#49
[#90 '^']: r#49
[#90 '{']: r#49
[#90 '|']: r#49
[#90 '||']: r#49
[#91 '!=']: r#50
[#91 '%']: r#50
[#91 '&&']: r#50
[#91 '&']: r#50
[#91 ')']: r#50
[#91 '*']: r#50
[#91 '+']: r#50
[#91 ',']: r#50
[#91 '-']: r#50
[#91 '.']: r#50
[#91 '/']: r#50
[#91 ':']: r#50
[#91 ';']: r#50
[#91 '<']: r#50
[#91 '<<']: r#50
[#91 '<=']: r#50
[#91 '==']: r#50
[#91 '>']: r#50
[#91 '>=']: r#50
[#91 '>>']: r#50
[#91 '@']: r#50
[#91 '[']: r#50
[#91 ']']: r#50
[#91 '^']: r#50
[#91 '{']: r#50
[#91 '|']: r#50
[#91 '||']: r#50
[#92 '!=']: r#51
[#92 '%']: r#51
[#92 '&&']: r#51
[#92 '&']: r#51
[#92 ')']: r#51
[#92 '*']: r#51
[#92 '+']: r#51
[#92 ',']: r#51
[#92 '-']: r#51
[#92 '.']: r#51
[#92 '/']: r#51
[#92 ':']: r#51
[#92 ';']: r#51
[#92 '<']: r#51
[#92 '<<']: r#51
[#92 '<=']: r#51
[#92 '==']: r#51
[#92 '>']: r#51
[#92 '>=']: r#51
[#92 '>>']: r#51
[#92 '@']: r#51
[#92 '[']: r#51
[#92 ']']: r#51
[#92 '^']: r#51
[#92 '{']: r#51
[#92 '|']: r#51
[#92 '||']: r#51
[#93 '!=']: r#52
[#93 '%']: r#52
[#93 '&&']: r#52
[#93 '&']: r#52
[#93 ')']: r#52
[#93 '*']: r#52
[#93 '+']: r#52
[#93 ',']: r#52
[#93 '-']: r#52
[#93 '.']: r#52
[#93 '/']: r#52
[#93 ':']: r#52
[#93 ';']: r#52
[#93 '<']: r#52
[#93 '<<']: r#52
[#93 '<=']: r#52
[#93 '==']: r#52
[#93 '>']: r#52
[#93 '>=']: r#52
[#93 '>>']: r#52
[#93 '@']: r#52
[#93 '[']: r#52
[#93 ']']: r#52
[#93 '^']: r#52
[#93 '{']: r#52
[#93 '|']: r#52
[#93 '||']: r#52
[#94 '(']: r#53
[#94 ')']: r#53
[#94 ',']: r#53
[#94 ';']: r#53
[#94 '=']: r#53
[#94 '>']: r#53
[#94 '@']: r#53
[#94 '{']: r#53
[#94 '}']: r#53
[#95 '(']: r#54
[#95 ')']: r#54
[#95 ',']: r#54
[#95 ';']: r#54
[#95 '=']: r#54
[#95 '>']: r#54
[#95 '@']: r#54
[#95 '{']: r#54
[#95 '}']: r#54
[#96 '(']: r#55
[#96 ')']: r#55
[#96 ',']: r#55
[#96 ';']: r#55
[#96 '=']: r#55
[#96 '>']: r#55
[#96 '@']: r#55
[#96 '{']: r#55
[#96 '}']: r#55
[#97 '(']: r#56
[#97 ')']: r#56
[#97 ',']: r#56
[#97 ';']: r#56
[#97 '=']: r#56
[#97 '>']: r#56
[#97 '@']: r#56
[#97 '{']: r#56
[#97 '}']: r#56
[#98 '(']: r#57
[#98 ')']: r#57
[#98 ',']: r#57
[#98 ';']: r#57
[#98 '=']: r#57
[#98 '>']: r#57
[#98 '@']: r#57
[#98 '{']: r#57
[#98 '}']: r#57
[#99 '<']: s#192
[#100 '(']: r#58
[#100 ')']: r#58
[#100 ',']: r#58
[#100 ';']: r#58
[#100 '=']: r#58
[#100 '>']: r#58
[#100 '@']: r#58
[#100 '{']: r#58
[#100 '}']: r#58
[#101 '<']: s#191
[#102 '(']: r#59
[#102 ')']: r#59
[#102 ',']: r#59
[#102 ';']: r#59
[#102 '=']: r#59
[#102 '>']: r#59
[#102 '@']: r#59
[#102 '{']: r#59
[#102 '}']: r#59
[#103 '(']: r#60
[#103 '<']: r#60
[#104 '(']: r#61
[#104 '<']: r#61
[#105 '(']: r#62
[#105 '<']: r#62
[#106 '(']: r#63
[#106 '<']: r#63
[#107 '(']: r#64
[#107 '<']: r#64
[#108 '(']: r#65
[#108 '<']: r#65
[#109 '(']: r#66
[#109 '<']: r#66
[#110 '(']: r#67
[#110 '<']: r#67
[#111 '(']: r#68
[#111 '<']: r#68
[#112 '(']: r#69
[#112 '<']: r#69
[#113 '(']: r#70
[#113 '<']: r#70
[#114 '(']: r#71
[#114 '<']: r#71
[#115 '!=']: r#72
[#115 '%']: r#72
[#115 '&&']: r#72
[#115 '&']: r#72
[#115 ')']: r#72
[#115 '*']: r#72
[#115 '+']: r#72
[#115 ',']: r#72
[#115 '-']: r#72
[#115 '.']: r#72
[#115 '/']: r#72
[#115 ':']: r#72
[#115 ';']: r#72
[#115 '<']: r#72
[#115 '<<']: r#72
[#115 '<=']: r#72
[#115 '==']: r#72
[#115 '>']: r#72
[#115 '>=']: r#72
[#115 '>>']: r#72
[#115 '@']: r#72
[#115 '[']: r#72
[#115 ']']: r#72
[#115 '^']: r#72
[#115 '{']: r#72
[#115 '|']: r#72
[#115 '||']: r#72
[#116 '!=']: r#73
[#116 '%']: r#73
[#116 '&&']: r#73
[#116 '&']: r#73
[#116 ')']: r#73
[#116 '*']: r#73
[#116 '+']: r#73
[#116 ',']: r#73
[#116 '-']: r#73
[#116 '.']: r#73
[#116 '/']: r#73
[#116 ':']: r#73
[#116 ';']: r#73
[#116 '<']: r#73
[#116 '<<']: r#73
[#116 '<=']: r#73
[#116 '==']: r#73
[#116 '>']: r#73
[#116 '>=']: r#73
[#116 '>>']: r#73
[#116 '@']: r#73
[#116 '[']: r#73
[#116 ']']: r#73
[#116 '^']: r#73
[#116 '{']: r#73
[#116 '|']: r#73
[#116 '||']: r#73
[#117 '!=']: r#74
[#117 '%']: r#74
[#117 '&&']: r#74
[#117 '&']: r#74
[#117 ')']: r#74
[#117 '*']: r#74
[#117 '+']: r#74
[#117 ',']: r#74
[#117 '-']: r#74
[#117 '.']: r#74
[#117 '/']: r#74
[#117 ':']: r#74
[#117 ';']: r#74
[#117 '<']: r#74
[#117 '<<']: r#74
[#117 '<=']: r#74
[#117 '==']: r#74
[#117 '>']: r#74
[#117 '>=']: r#74
[#117 '>>']: r#74
[#117 '@']: r#74
[#117 '[']: r#74
[#117 ']']: r#74
[#117 '^']: r#74
[#117 '{']: r#74
[#117 '|']: r#74
[#117 '||']: r#74
[#118 '!=']: r#75
[#118 '%']: r#75
[#118 '&&']: r#75
[#118 '&']: r#75
[#118 ')']: r#75
[#118 '*']: r#75
[#118 '+']: r#75
[#118 ',']: r#75
[#118 '-']: r#75
[#118 '.']: r#75
[#118 '/']: r#75
[#118 ':']: r#75
[#118 ';']: r#75
[#118 '<']: r#75
[#118 '<<']: r#75
[#118 '<=']: r#75
[#118 '==']: r#75
[#118 '>']: r#75
[#118 '>=']: r#75
[#118 '>>']: r#75
[#118 '@']: r#75
[#118 '[']: r#75
[#118 ']']: r#75
[#118 '^']: r#75
[#118 '{']: r#75
[#118 '|']: r#75
[#118 '||']: r#75
[#119 '!=']: r#76
[#119 '%']: r#76
[#119 '&&']: r#76
[#119 '&']: r#76
[#119 ')']: r#76
[#119 '*']: r#76
[#119 '+']: r#76
[#119 ',']: r#76
[#119 '-']: r#76
[#119 '.']: r#76
[#119 '/']: r#76
[#119 ':']: r#76
[#119 ';']: r#76
[#119 '<']: r#76
[#119 '<<']: r#76
[#119 '<=']: r#76
[#119 '==']: r#76
[#119 '>']: r#76
[#119 '>=']: r#76
[#119 '>>']: r#76
[#119 '@']: r#76
[#119 '[']: r#76
[#119 ']']: r#76
[#119 '^']: r#76
[#119 '{']: r#76
[#119 '|']: r#76
[#119 '||']: r#76
[#120 '!=']: r#77
[#120 '%']: r#77
[#120 '&&']: r#77
[#120 '&']: r#77
[#120 ')']: r#77
[#120 '*']: r#77
[#120 '+']: r#77
[#120 ',']: r#77
[#120 '-']: r#77
[#120 '.']: r#77
[#120 '/']: r#77
[#120 ':']: r#77
[#120 ';']: r#77
[#120 '<']: r#77
[#120 '<<']: r#77
[#120 '<=']: r#77
[#120 '==']: r#77
[#120 '>']: r#77
[#120 '>=']: r#77
[#120 '>>']: r#77
[#120 '@']: r#77
[#120 '[']: r#77
[#120 ']']: r#77
[#120 '^']: r#77
[#120 '{']: r#77
[#120 '|']: r#77
[#120 '||']: r#77
[#121 '!=']: r#78
[#121 '%']: r#78
[#121 '&&']: r#78
[#121 '&']: r#78
[#121 ')']: r#78
[#121 '*']: r#78
[#121 '+']: r#78
[#121 ',']: r#78
[#121 '-']: r#78
[#121 '.']: r#78
[#121 '/']: r#78
[#121 ':']: r#78
[#121 ';']: r#78
[#121 '<']: r#78
[#121 '<<']: r#78
[#121 '<=']: r#78
[#121 '==']: r#78
[#121 '>']: r#78
[#121 '>=']: r#78
[#121 '>>']: r#78
[#121 '@']: r#78
[#121 '[']: r#78
[#121 ']']: r#78
[#121 '^']: r#78
[#121 '{']: r#78
[#121 '|']: r#78
[#121 '||']: r#78
[#122 '!=']: r#79
[#122 '%']: r#79
[#122 '&&']: r#79
[#122 '&']: r#79
[#122 ')']: r#79
[#122 '*']: r#79
[#122 '+']: r#79
[#122 ',']: r#79
[#122 '-']: r#79
[#122 '.']: r#79
[#122 '/']: r#79
[#122 ':']: r#79
[#122 ';']: r#79
[#122 '<']: r#79
[#122 '<<']: r#79
[#122 '<=']: r#79
[#122 '==']: r#79
[#122 '>']: r#79
[#122 '>=']: r#79
[#122 '>>']: r#79
[#122 '@']: r#79
[#122 '[']: r#79
[#122 ']']: r#79
[#122 '^']: r#79
[#122 '{']: r#79
[#122 '|']: r#79
[#122 '||']: r#79
[#123 '!=']: r#80
[#123 '%']: r#80
[#123 '&&']: r#80
[#123 '&']: r#80
[#123 ')']: r#80
[#123 '*']: r#80
[#123 '+']: r#80
[#123 ',']: r#80
[#123 '-']: r#80
[#123 '.']: r#80
[#123 '/']: r#80
[#123 ':']: r#80
[#123 ';']: r#80
[#123 '<']: r#80
[#123 '<<']: r#80
[#123 '<=']: r#80
[#123 '==']: r#80
[#123 '>']: r#80
[#123 '>=']: r#80
[#123 '>>']: r#80
[#123 '@']: r#80
[#123 '[']: r#80
[#123 ']']: r#80
[#123 '^']: r#80
[#123 '{']: r#80
[#123 '|']: r#80
[#123 '||']: r#80
[#124 '!=']: r#81
[#124 '%']: r#81
[#124 '&&']: r#81
[#124 '&']: r#81
[#124 ')']: r#81
[#124 '*']: r#81
[#124 '+']: r#81
[#124 ',']: r#81
[#124 '-']: r#81
[#124 '.']: r#81
[#124 '/']: r#81
[#124 ':']: r#81
[#124 ';']: r#81
[#124 '<']: r#81
[#124 '<<']: r#81
[#124 '<=']: r#81
[#124 '==']: r#81
[#124 '>']: r#81
[#124 '>=']: r#81
[#124 '>>']: r#81
[#124 '@']: r#81
[#124 '[']: r#81
[#124 ']']: r#81
[#124 '^']: r#81
[#124 '{']: r#81
[#124 '|']: r#81
[#124 '||']: r#81
[#125 '!=']: r#82
[#125 '%']: r#82
[#125 '&&']: r#82
[#125 '&']: r#82
[#125 ')']: r#82
[#125 '*']: r#82
[#125 '+']: r#82
[#125 ',']: r#82
[#125 '-']: r#82
[#125 '.']: r#82
[#125 '/']: r#82
[#125 ':']: r#82
[#125 ';']: r#82
[#125 '<']: r#82
[#125 '<<']: r#82
[#125 '<=']: r#82
[#125 '==']: r#82
[#125 '>']: r#82
[#125 '>=']: r#82
[#125 '>>']: r#82
[#125 '@']: r#82
[#125 '[']: r#82
[#125 ']']: r#82
[#125 '^']: r#82
[#125 '{']: r#82
[#125 '|']: r#82
[#125 '||']: r#82
[#126 '(']: r#83
[#126 ')']: r#83
[#126 ',']: r#83
[#126 ';']: r#83
[#126 '=']: r#83
[#126 '>']: r#83
[#126 '@']: r#83
[#126 '{']: r#83
[#126 '}']: r#83
[#127 '(']: r#84
[#127 ')']: r#84
[#127 ',']: r#84
[#127 ';']: r#84
[#127 '=']: r#84
[#127 '>']: r#84
[#127 '@']: r#84
[#127 '{']: r#84
[#127 '}']: r#84
[#128 '<']: s#190
[#129 '<']: s#189
[#130 '<']: s#188
[#131 '(']: r#85
[#131 ')']: r#85
[#131 ',']: r#85
[#131 ';']: r#85
[#131 '=']: r#85
[#131 '>']: r#85
[#131 '@']: r#85
[#131 '{']: r#85
[#131 '}']: r#85
[#132 '(']: r#86
[#132 ')']: r#86
[#132 ',']: r#86
[#132 ';']: r#86
[#132 '=']: r#86
[#132 '>']: r#86
[#132 '@']: r#86
[#132 '{']: r#86
[#132 '}']: r#86
[#133 '(']: r#87
[#133 ')']: r#87
[#133 ',']: r#87
[#133 ';']: r#87
[#133 '=']: r#87
[#133 '>']: r#87
[#133 '@']: r#87
[#133 '{']: r#87
[#133 '}']: r#87
[#134 '(']: r#88
[#134 ')']: r#88
[#134 ',']: r#88
[#134 ';']: r#88
[#134 '=']: r#88
[#134 '>']: r#88
[#134 '@']: r#88
[#134 '{']: r#88
[#134 '}']: r#88
[#135 '(']: r#89
[#135 ')']: r#89
[#135 ',']: r#89
[#135 ';']: r#89
[#135 '=']: r#89
[#135 '>']: r#89
[#135 '@']: r#89
[#135 '{']: r#89
[#135 '}']: r#89
[#136 '(']: r#90
[#136 ')']: r#90
[#136 ',']: r#90
[#136 ';']: r#90
[#136 '=']: r#90
[#136 '>']: r#90
[#136 '@']: r#90
[#136 '{']: r#90
[#136 '}']: r#90
[#137 '(']: r#91
[#137 ')']: r#91
[#137 ',']: r#91
[#137 ';']: r#91
[#137 '=']: r#91
[#137 '>']: r#91
[#137 '@']: r#91
[#137 '{']: r#91
[#137 '}']: r#91
[#138 '<']: r#92
[#139 '<']: r#93
[#140 '<']: r#94
[#141 '<']: r#95
[#142 '<']: r#96
[#143 '<']: r#97
[#144 '<']: r#98
[#145 '<']: r#99
[#146 '<']: r#100
[#147 '<']: r#101
[#148 '<']: r#102
[#149 '@']: s#35
[#150 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#151 '{']: s#182
[#152 '=']: s#180
[#153 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#154 '=']: s#178
[#155 ':']: s#177
[#156 '=']: s#175
[#157 '<']: s#173
[#158 ';']: r#103
[#158 '@']: r#103
[#158 'alias']: r#103
[#158 'const']: r#103
[#158 'const_assert']: r#103
[#158 'fn']: r#103
[#158 'override']: r#103
[#158 'struct']: r#103
[#158 'var']: r#103
[#158 EndOfText]: r#103
[#159 ';']: r#104
[#159 '@']: r#104
[#159 'alias']: r#104
[#159 'const']: r#104
[#159 'const_assert']: r#104
[#159 'fn']: r#104
[#159 'override']: r#104
[#159 'struct']: r#104
[#159 'var']: r#104
[#159 EndOfText]: r#104
[#160 ';']: r#105
[#160 '@']: r#105
[#160 'alias']: r#105
[#160 'const']: r#105
[#160 'const_assert']: r#105
[#160 'fn']: r#105
[#160 'override']: r#105
[#160 'struct']: r#105
[#160 'var']: r#105
[#160 EndOfText]: r#105
[#161 ';']: r#106
[#161 '@']: r#106
[#161 'alias']: r#106
[#161 'const']: r#106
[#161 'const_assert']: r#106
[#161 'fn']: r#106
[#161 'override']: r#106
[#161 'struct']: r#106
[#161 'var']: r#106
[#161 EndOfText]: r#106
[#162 EndOfText]: r#107
[#163 ',']: s#170
[#164 ',']: r#108
[#165 ',']: r#109
[#166 ',']: r#110
[#167 ',']: r#111
[#168 ';']: r#112
[#168 '@']: r#112
[#168 'alias']: r#112
[#168 'const']: r#112
[#168 'const_assert']: r#112
[#168 'diagnostic']: r#112
[#168 'enable']: r#112
[#168 'fn']: r#112
[#168 'override']: r#112
[#168 'struct']: r#112
[#168 'var']: r#112
[#168 EndOfText]: r#112
[#169 ';']: r#113
[#169 '@']: r#113
[#169 'alias']: r#113
[#169 'const']: r#113
[#169 'const_assert']: r#113
[#169 'diagnostic']: r#113
[#169 'enable']: r#113
[#169 'fn']: r#113
[#169 'override']: r#113
[#169 'struct']: r#113
[#169 'var']: r#113
[#169 EndOfText]: r#113
[#170 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#348
[#171 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#172 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#114
[#173 'function']: s#306
[#173 'private']: s#307
[#173 'storage']: s#310
[#173 'uniform']: s#309
[#173 'workgroup']: s#308
[#174 ';']: r#115
[#175 '!']: s#68
[#175 '&']: s#71
[#175 '(']: s#83
[#175 '*']: s#70
[#175 '-']: s#67
[#175 'array']: s#87
[#175 'atomic']: s#101
[#175 'bitcast']: s#77
[#175 'bool']: s#94
[#175 'f16']: s#96
[#175 'f32']: s#95
[#175 'false']: s#93
[#175 'i32']: s#97
[#175 'mat2x2']: s#106
[#175 'mat2x3']: s#107
[#175 'mat2x4']: s#108
[#175 'mat3x2']: s#109
[#175 'mat3x3']: s#110
[#175 'mat3x4']: s#111
[#175 'mat4x2']: s#112
[#175 'mat4x3']: s#113
[#175 'mat4x4']: s#114
[#175 'ptr']: s#99
[#175 'sampler']: s#131
[#175 'sampler_comparison']: s#132
[#175 'texture_1d']: s#138
[#175 'texture_2d']: s#139
[#175 'texture_2d_array']: s#140
[#175 'texture_3d']: s#141
[#175 'texture_cube']: s#142
[#175 'texture_cube_array']: s#143
[#175 'texture_depth_2d']: s#133
[#175 'texture_depth_2d_array']: s#134
[#175 'texture_depth_cube']: s#135
[#175 'texture_depth_cube_array']: s#136
[#175 'texture_depth_multisampled_2d']: s#137
[#175 'texture_multisampled_2d']: s#144
[#175 'texture_storage_1d']: s#145
[#175 'texture_storage_2d']: s#146
[#175 'texture_storage_2d_array']: s#147
[#175 'texture_storage_3d']: s#148
[#175 'true']: s#92
[#175 'u32']: s#98
[#175 'vec2']: s#103
[#175 'vec3']: s#104
[#175 'vec4']: s#105
[#175 '~']: s#69
[#175 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#175 /0[fh]/]: s#118
[#175 /0[iu]?/]: s#115
[#175 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#175 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#175 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#175 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#175 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#175 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#175 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#175 /[1-9][0-9]*[fh]/]: s#119
[#175 /[1-9][0-9]*[iu]?/]: s#116
[#176 ';']: r#116
[#176 '=']: r#116
[#177 'array']: s#297
[#177 'atomic']: s#101
[#177 'bool']: s#94
[#177 'f16']: s#96
[#177 'f32']: s#95
[#177 'i32']: s#97
[#177 'mat2x2']: s#106
[#177 'mat2x3']: s#107
[#177 'mat2x4']: s#108
[#177 'mat3x2']: s#109
[#177 'mat3x3']: s#110
[#177 'mat3x4']: s#111
[#177 'mat4x2']: s#112
[#177 'mat4x3']: s#113
[#177 'mat4x4']: s#114
[#177 'ptr']: s#99
[#177 'sampler']: s#131
[#177 'sampler_comparison']: s#132
[#177 'texture_1d']: s#138
[#177 'texture_2d']: s#139
[#177 'texture_2d_array']: s#140
[#177 'texture_3d']: s#141
[#177 'texture_cube']: s#142
[#177 'texture_cube_array']: s#143
[#177 'texture_depth_2d']: s#133
[#177 'texture_depth_2d_array']: s#134
[#177 'texture_depth_cube']: s#135
[#177 'texture_depth_cube_array']: s#136
[#177 'texture_depth_multisampled_2d']: s#137
[#177 'texture_multisampled_2d']: s#144
[#177 'texture_storage_1d']: s#145
[#177 'texture_storage_2d']: s#146
[#177 'texture_storage_2d_array']: s#147
[#177 'texture_storage_3d']: s#148
[#177 'u32']: s#98
[#177 'vec2']: s#103
[#177 'vec3']: s#104
[#177 'vec4']: s#105
[#177 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#178 '!']: s#68
[#178 '&']: s#71
[#178 '(']: s#83
[#178 '*']: s#70
[#178 '-']: s#67
[#178 'array']: s#87
[#178 'atomic']: s#101
[#178 'bitcast']: s#77
[#178 'bool']: s#94
[#178 'f16']: s#96
[#178 'f32']: s#95
[#178 'false']: s#93
[#178 'i32']: s#97
[#178 'mat2x2']: s#106
[#178 'mat2x3']: s#107
[#178 'mat2x4']: s#108
[#178 'mat3x2']: s#109
[#178 'mat3x3']: s#110
[#178 'mat3x4']: s#111
[#178 'mat4x2']: s#112
[#178 'mat4x3']: s#113
[#178 'mat4x4']: s#114
[#178 'ptr']: s#99
[#178 'sampler']: s#131
[#178 'sampler_comparison']: s#132
[#178 'texture_1d']: s#138
[#178 'texture_2d']: s#139
[#178 'texture_2d_array']: s#140
[#178 'texture_3d']: s#141
[#178 'texture_cube']: s#142
[#178 'texture_cube_array']: s#143
[#178 'texture_depth_2d']: s#133
[#178 'texture_depth_2d_array']: s#134
[#178 'texture_depth_cube']: s#135
[#178 'texture_depth_cube_array']: s#136
[#178 'texture_depth_multisampled_2d']: s#137
[#178 'texture_multisampled_2d']: s#144
[#178 'texture_storage_1d']: s#145
[#178 'texture_storage_2d']: s#146
[#178 'texture_storage_2d_array']: s#147
[#178 'texture_storage_3d']: s#148
[#178 'true']: s#92
[#178 'u32']: s#98
[#178 'vec2']: s#103
[#178 'vec3']: s#104
[#178 'vec4']: s#105
[#178 '~']: s#69
[#178 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#178 /0[fh]/]: s#118
[#178 /0[iu]?/]: s#115
[#178 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#178 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#178 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#178 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#178 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#178 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#178 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#178 /[1-9][0-9]*[fh]/]: s#119
[#178 /[1-9][0-9]*[iu]?/]: s#116
[#179 '=']: s#341
[#180 'array']: s#297
[#180 'atomic']: s#101
[#180 'bool']: s#94
[#180 'f16']: s#96
[#180 'f32']: s#95
[#180 'i32']: s#97
[#180 'mat2x2']: s#106
[#180 'mat2x3']: s#107
[#180 'mat2x4']: s#108
[#180 'mat3x2']: s#109
[#180 'mat3x3']: s#110
[#180 'mat3x4']: s#111
[#180 'mat4x2']: s#112
[#180 'mat4x3']: s#113
[#180 'mat4x4']: s#114
[#180 'ptr']: s#99
[#180 'sampler']: s#131
[#180 'sampler_comparison']: s#132
[#180 'texture_1d']: s#138
[#180 'texture_2d']: s#139
[#180 'texture_2d_array']: s#140
[#180 'texture_3d']: s#141
[#180 'texture_cube']: s#142
[#180 'texture_cube_array']: s#143
[#180 'texture_depth_2d']: s#133
[#180 'texture_depth_2d_array']: s#134
[#180 'texture_depth_cube']: s#135
[#180 'texture_depth_cube_array']: s#136
[#180 'texture_depth_multisampled_2d']: s#137
[#180 'texture_multisampled_2d']: s#144
[#180 'texture_storage_1d']: s#145
[#180 'texture_storage_2d']: s#146
[#180 'texture_storage_2d_array']: s#147
[#180 'texture_storage_3d']: s#148
[#180 'u32']: s#98
[#180 'vec2']: s#103
[#180 'vec3']: s#104
[#180 'vec4']: s#105
[#180 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#181 ';']: r#117
[#181 '@']: r#117
[#181 'alias']: r#117
[#181 'const']: r#117
[#181 'const_assert']: r#117
[#181 'fn']: r#117
[#181 'override']: r#117
[#181 'struct']: r#117
[#181 'var']: r#117
[#181 EndOfText]: r#117
[#182 '@']: s#35
[#183 '(']: s#334
[#184 ';']: r#118
[#184 '@']: r#118
[#184 'alias']: r#118
[#184 'const']: r#118
[#184 'const_assert']: r#118
[#184 'fn']: r#118
[#184 'override']: r#118
[#184 'struct']: r#118
[#184 'var']: r#118
[#184 EndOfText]: r#118
[#185 '{']: s#333
[#186 '{']: r#119
[#187 '@']: s#35
[#188 'bgra8unorm']: s#331
[#188 'r32float']: s#324
[#188 'r32sint']: s#323
[#188 'r32uint']: s#322
[#188 'rg32float']: s#327
[#188 'rg32sint']: s#326
[#188 'rg32uint']: s#325
[#188 'rgba16float']: s#321
[#188 'rgba16sint']: s#320
[#188 'rgba16uint']: s#319
[#188 'rgba32float']: s#330
[#188 'rgba32sint']: s#329
[#188 'rgba32uint']: s#328
[#188 'rgba8sint']: s#318
[#188 'rgba8snorm']: s#316
[#188 'rgba8uint']: s#317
[#188 'rgba8unorm']: s#315
[#189 'array']: s#297
[#189 'atomic']: s#101
[#189 'bool']: s#94
[#189 'f16']: s#96
[#189 'f32']: s#95
[#189 'i32']: s#97
[#189 'mat2x2']: s#106
[#189 'mat2x3']: s#107
[#189 'mat2x4']: s#108
[#189 'mat3x2']: s#109
[#189 'mat3x3']: s#110
[#189 'mat3x4']: s#111
[#189 'mat4x2']: s#112
[#189 'mat4x3']: s#113
[#189 'mat4x4']: s#114
[#189 'ptr']: s#99
[#189 'sampler']: s#131
[#189 'sampler_comparison']: s#132
[#189 'texture_1d']: s#138
[#189 'texture_2d']: s#139
[#189 'texture_2d_array']: s#140
[#189 'texture_3d']: s#141
[#189 'texture_cube']: s#142
[#189 'texture_cube_array']: s#143
[#189 'texture_depth_2d']: s#133
[#189 'texture_depth_2d_array']: s#134
[#189 'texture_depth_cube']: s#135
[#189 'texture_depth_cube_array']: s#136
[#189 'texture_depth_multisampled_2d']: s#137
[#189 'texture_multisampled_2d']: s#144
[#189 'texture_storage_1d']: s#145
[#189 'texture_storage_2d']: s#146
[#189 'texture_storage_2d_array']: s#147
[#189 'texture_storage_3d']: s#148
[#189 'u32']: s#98
[#189 'vec2']: s#103
[#189 'vec3']: s#104
[#189 'vec4']: s#105
[#189 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#190 'array']: s#297
[#190 'atomic']: s#101
[#190 'bool']: s#94
[#190 'f16']: s#96
[#190 'f32']: s#95
[#190 'i32']: s#97
[#190 'mat2x2']: s#106
[#190 'mat2x3']: s#107
[#190 'mat2x4']: s#108
[#190 'mat3x2']: s#109
[#190 'mat3x3']: s#110
[#190 'mat3x4']: s#111
[#190 'mat4x2']: s#112
[#190 'mat4x3']: s#113
[#190 'mat4x4']: s#114
[#190 'ptr']: s#99
[#190 'sampler']: s#131
[#190 'sampler_comparison']: s#132
[#190 'texture_1d']: s#138
[#190 'texture_2d']: s#139
[#190 'texture_2d_array']: s#140
[#190 'texture_3d']: s#141
[#190 'texture_cube']: s#142
[#190 'texture_cube_array']: s#143
[#190 'texture_depth_2d']: s#133
[#190 'texture_depth_2d_array']: s#134
[#190 'texture_depth_cube']: s#135
[#190 'texture_depth_cube_array']: s#136
[#190 'texture_depth_multisampled_2d']: s#137
[#190 'texture_multisampled_2d']: s#144
[#190 'texture_storage_1d']: s#145
[#190 'texture_storage_2d']: s#146
[#190 'texture_storage_2d_array']: s#147
[#190 'texture_storage_3d']: s#148
[#190 'u32']: s#98
[#190 'vec2']: s#103
[#190 'vec3']: s#104
[#190 'vec4']: s#105
[#190 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#191 'array']: s#297
[#191 'atomic']: s#101
[#191 'bool']: s#94
[#191 'f16']: s#96
[#191 'f32']: s#95
[#191 'i32']: s#97
[#191 'mat2x2']: s#106
[#191 'mat2x3']: s#107
[#191 'mat2x4']: s#108
[#191 'mat3x2']: s#109
[#191 'mat3x3']: s#110
[#191 'mat3x4']: s#111
[#191 'mat4x2']: s#112
[#191 'mat4x3']: s#113
[#191 'mat4x4']: s#114
[#191 'ptr']: s#99
[#191 'sampler']: s#131
[#191 'sampler_comparison']: s#132
[#191 'texture_1d']: s#138
[#191 'texture_2d']: s#139
[#191 'texture_2d_array']: s#140
[#191 'texture_3d']: s#141
[#191 'texture_cube']: s#142
[#191 'texture_cube_array']: s#143
[#191 'texture_depth_2d']: s#133
[#191 'texture_depth_2d_array']: s#134
[#191 'texture_depth_cube']: s#135
[#191 'texture_depth_cube_array']: s#136
[#191 'texture_depth_multisampled_2d']: s#137
[#191 'texture_multisampled_2d']: s#144
[#191 'texture_storage_1d']: s#145
[#191 'texture_storage_2d']: s#146
[#191 'texture_storage_2d_array']: s#147
[#191 'texture_storage_3d']: s#148
[#191 'u32']: s#98
[#191 'vec2']: s#103
[#191 'vec3']: s#104
[#191 'vec4']: s#105
[#191 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#192 'function']: s#306
[#192 'private']: s#307
[#192 'storage']: s#310
[#192 'uniform']: s#309
[#192 'workgroup']: s#308
[#193 'array']: s#297
[#193 'atomic']: s#101
[#193 'bool']: s#94
[#193 'f16']: s#96
[#193 'f32']: s#95
[#193 'i32']: s#97
[#193 'mat2x2']: s#106
[#193 'mat2x3']: s#107
[#193 'mat2x4']: s#108
[#193 'mat3x2']: s#109
[#193 'mat3x3']: s#110
[#193 'mat3x4']: s#111
[#193 'mat4x2']: s#112
[#193 'mat4x3']: s#113
[#193 'mat4x4']: s#114
[#193 'ptr']: s#99
[#193 'sampler']: s#131
[#193 'sampler_comparison']: s#132
[#193 'texture_1d']: s#138
[#193 'texture_2d']: s#139
[#193 'texture_2d_array']: s#140
[#193 'texture_3d']: s#141
[#193 'texture_cube']: s#142
[#193 'texture_cube_array']: s#143
[#193 'texture_depth_2d']: s#133
[#193 'texture_depth_2d_array']: s#134
[#193 'texture_depth_cube']: s#135
[#193 'texture_depth_cube_array']: s#136
[#193 'texture_depth_multisampled_2d']: s#137
[#193 'texture_multisampled_2d']: s#144
[#193 'texture_storage_1d']: s#145
[#193 'texture_storage_2d']: s#146
[#193 'texture_storage_2d_array']: s#147
[#193 'texture_storage_3d']: s#148
[#193 'u32']: s#98
[#193 'vec2']: s#103
[#193 'vec3']: s#104
[#193 'vec4']: s#105
[#193 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#194 'array']: s#297
[#194 'atomic']: s#101
[#194 'bool']: s#94
[#194 'f16']: s#96
[#194 'f32']: s#95
[#194 'i32']: s#97
[#194 'mat2x2']: s#106
[#194 'mat2x3']: s#107
[#194 'mat2x4']: s#108
[#194 'mat3x2']: s#109
[#194 'mat3x3']: s#110
[#194 'mat3x4']: s#111
[#194 'mat4x2']: s#112
[#194 'mat4x3']: s#113
[#194 'mat4x4']: s#114
[#194 'ptr']: s#99
[#194 'sampler']: s#131
[#194 'sampler_comparison']: s#132
[#194 'texture_1d']: s#138
[#194 'texture_2d']: s#139
[#194 'texture_2d_array']: s#140
[#194 'texture_3d']: s#141
[#194 'texture_cube']: s#142
[#194 'texture_cube_array']: s#143
[#194 'texture_depth_2d']: s#133
[#194 'texture_depth_2d_array']: s#134
[#194 'texture_depth_cube']: s#135
[#194 'texture_depth_cube_array']: s#136
[#194 'texture_depth_multisampled_2d']: s#137
[#194 'texture_multisampled_2d']: s#144
[#194 'texture_storage_1d']: s#145
[#194 'texture_storage_2d']: s#146
[#194 'texture_storage_2d_array']: s#147
[#194 'texture_storage_3d']: s#148
[#194 'u32']: s#98
[#194 'vec2']: s#103
[#194 'vec3']: s#104
[#194 'vec4']: s#105
[#194 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#195 'array']: s#297
[#195 'atomic']: s#101
[#195 'bool']: s#94
[#195 'f16']: s#96
[#195 'f32']: s#95
[#195 'i32']: s#97
[#195 'mat2x2']: s#106
[#195 'mat2x3']: s#107
[#195 'mat2x4']: s#108
[#195 'mat3x2']: s#109
[#195 'mat3x3']: s#110
[#195 'mat3x4']: s#111
[#195 'mat4x2']: s#112
[#195 'mat4x3']: s#113
[#195 'mat4x4']: s#114
[#195 'ptr']: s#99
[#195 'sampler']: s#131
[#195 'sampler_comparison']: s#132
[#195 'texture_1d']: s#138
[#195 'texture_2d']: s#139
[#195 'texture_2d_array']: s#140
[#195 'texture_3d']: s#141
[#195 'texture_cube']: s#142
[#195 'texture_cube_array']: s#143
[#195 'texture_depth_2d']: s#133
[#195 'texture_depth_2d_array']: s#134
[#195 'texture_depth_cube']: s#135
[#195 'texture_depth_cube_array']: s#136
[#195 'texture_depth_multisampled_2d']: s#137
[#195 'texture_multisampled_2d']: s#144
[#195 'texture_storage_1d']: s#145
[#195 'texture_storage_2d']: s#146
[#195 'texture_storage_2d_array']: s#147
[#195 'texture_storage_3d']: s#148
[#195 'u32']: s#98
[#195 'vec2']: s#103
[#195 'vec3']: s#104
[#195 'vec4']: s#105
[#195 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#196 ')']: s#301
[#197 '!=']: r#120
[#197 '%']: r#120
[#197 '&&']: r#120
[#197 '&']: r#120
[#197 ')']: r#120
[#197 '*']: r#120
[#197 '+']: r#120
[#197 ',']: r#120
[#197 '-']: r#120
[#197 '.']: r#120
[#197 '/']: r#120
[#197 ':']: r#120
[#197 ';']: r#120
[#197 '<']: r#120
[#197 '<<']: r#120
[#197 '<=']: r#120
[#197 '==']: r#120
[#197 '>']: r#120
[#197 '>=']: r#120
[#197 '>>']: r#120
[#197 '@']: r#120
[#197 '[']: r#120
[#197 ']']: r#120
[#197 '^']: r#120
[#197 '{']: r#120
[#197 '|']: r#120
[#197 '||']: r#120
[#198 '!']: s#68
[#198 '&']: s#71
[#198 '(']: s#83
[#198 '*']: s#70
[#198 '-']: s#67
[#198 'array']: s#87
[#198 'atomic']: s#101
[#198 'bitcast']: s#77
[#198 'bool']: s#94
[#198 'f16']: s#96
[#198 'f32']: s#95
[#198 'false']: s#93
[#198 'i32']: s#97
[#198 'mat2x2']: s#106
[#198 'mat2x3']: s#107
[#198 'mat2x4']: s#108
[#198 'mat3x2']: s#109
[#198 'mat3x3']: s#110
[#198 'mat3x4']: s#111
[#198 'mat4x2']: s#112
[#198 'mat4x3']: s#113
[#198 'mat4x4']: s#114
[#198 'ptr']: s#99
[#198 'sampler']: s#131
[#198 'sampler_comparison']: s#132
[#198 'texture_1d']: s#138
[#198 'texture_2d']: s#139
[#198 'texture_2d_array']: s#140
[#198 'texture_3d']: s#141
[#198 'texture_cube']: s#142
[#198 'texture_cube_array']: s#143
[#198 'texture_depth_2d']: s#133
[#198 'texture_depth_2d_array']: s#134
[#198 'texture_depth_cube']: s#135
[#198 'texture_depth_cube_array']: s#136
[#198 'texture_depth_multisampled_2d']: s#137
[#198 'texture_multisampled_2d']: s#144
[#198 'texture_storage_1d']: s#145
[#198 'texture_storage_2d']: s#146
[#198 'texture_storage_2d_array']: s#147
[#198 'texture_storage_3d']: s#148
[#198 'true']: s#92
[#198 'u32']: s#98
[#198 'vec2']: s#103
[#198 'vec3']: s#104
[#198 'vec4']: s#105
[#198 '~']: s#69
[#198 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#198 /0[fh]/]: s#118
[#198 /0[iu]?/]: s#115
[#198 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#198 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#198 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#198 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#198 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#198 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#198 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#198 /[1-9][0-9]*[fh]/]: s#119
[#198 /[1-9][0-9]*[iu]?/]: s#116
[#199 'array']: s#297
[#199 'atomic']: s#101
[#199 'bool']: s#94
[#199 'f16']: s#96
[#199 'f32']: s#95
[#199 'i32']: s#97
[#199 'mat2x2']: s#106
[#199 'mat2x3']: s#107
[#199 'mat2x4']: s#108
[#199 'mat3x2']: s#109
[#199 'mat3x3']: s#110
[#199 'mat3x4']: s#111
[#199 'mat4x2']: s#112
[#199 'mat4x3']: s#113
[#199 'mat4x4']: s#114
[#199 'ptr']: s#99
[#199 'sampler']: s#131
[#199 'sampler_comparison']: s#132
[#199 'texture_1d']: s#138
[#199 'texture_2d']: s#139
[#199 'texture_2d_array']: s#140
[#199 'texture_3d']: s#141
[#199 'texture_cube']: s#142
[#199 'texture_cube_array']: s#143
[#199 'texture_depth_2d']: s#133
[#199 'texture_depth_2d_array']: s#134
[#199 'texture_depth_cube']: s#135
[#199 'texture_depth_cube_array']: s#136
[#199 'texture_depth_multisampled_2d']: s#137
[#199 'texture_multisampled_2d']: s#144
[#199 'texture_storage_1d']: s#145
[#199 'texture_storage_2d']: s#146
[#199 'texture_storage_2d_array']: s#147
[#199 'texture_storage_3d']: s#148
[#199 'u32']: s#98
[#199 'vec2']: s#103
[#199 'vec3']: s#104
[#199 'vec4']: s#105
[#199 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#200 '!=']: r#121
[#200 '%']: r#121
[#200 '&&']: r#121
[#200 '&']: r#121
[#200 ')']: r#121
[#200 '*']: r#121
[#200 '+']: r#121
[#200 ',']: r#121
[#200 '-']: r#121
[#200 '/']: r#121
[#200 ':']: r#121
[#200 ';']: r#121
[#200 '<']: r#121
[#200 '<<']: r#121
[#200 '<=']: r#121
[#200 '==']: r#121
[#200 '>']: r#121
[#200 '>=']: r#121
[#200 '>>']: r#121
[#200 '@']: r#121
[#200 ']']: r#121
[#200 '^']: r#121
[#200 '{']: r#121
[#200 '|']: r#121
[#200 '||']: r#121
[#201 '!=']: r#122
[#201 '%']: r#122
[#201 '&&']: r#122
[#201 '&']: r#122
[#201 ')']: r#122
[#201 '*']: r#122
[#201 '+']: r#122
[#201 ',']: r#122
[#201 '-']: r#122
[#201 '/']: r#122
[#201 ':']: r#122
[#201 ';']: r#122
[#201 '<']: r#122
[#201 '<<']: r#122
[#201 '<=']: r#122
[#201 '==']: r#122
[#201 '>']: r#122
[#201 '>=']: r#122
[#201 '>>']: r#122
[#201 '@']: r#122
[#201 ']']: r#122
[#201 '^']: r#122
[#201 '{']: r#122
[#201 '|']: r#122
[#201 '||']: r#122
[#202 '!']: s#68
[#202 '&']: s#71
[#202 '(']: s#83
[#202 '*']: s#70
[#202 '-']: s#67
[#202 'array']: s#87
[#202 'atomic']: s#101
[#202 'bitcast']: s#77
[#202 'bool']: s#94
[#202 'f16']: s#96
[#202 'f32']: s#95
[#202 'false']: s#93
[#202 'i32']: s#97
[#202 'mat2x2']: s#106
[#202 'mat2x3']: s#107
[#202 'mat2x4']: s#108
[#202 'mat3x2']: s#109
[#202 'mat3x3']: s#110
[#202 'mat3x4']: s#111
[#202 'mat4x2']: s#112
[#202 'mat4x3']: s#113
[#202 'mat4x4']: s#114
[#202 'ptr']: s#99
[#202 'sampler']: s#131
[#202 'sampler_comparison']: s#132
[#202 'texture_1d']: s#138
[#202 'texture_2d']: s#139
[#202 'texture_2d_array']: s#140
[#202 'texture_3d']: s#141
[#202 'texture_cube']: s#142
[#202 'texture_cube_array']: s#143
[#202 'texture_depth_2d']: s#133
[#202 'texture_depth_2d_array']: s#134
[#202 'texture_depth_cube']: s#135
[#202 'texture_depth_cube_array']: s#136
[#202 'texture_depth_multisampled_2d']: s#137
[#202 'texture_multisampled_2d']: s#144
[#202 'texture_storage_1d']: s#145
[#202 'texture_storage_2d']: s#146
[#202 'texture_storage_2d_array']: s#147
[#202 'texture_storage_3d']: s#148
[#202 'true']: s#92
[#202 'u32']: s#98
[#202 'vec2']: s#103
[#202 'vec3']: s#104
[#202 'vec4']: s#105
[#202 '~']: s#69
[#202 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#202 /0[fh]/]: s#118
[#202 /0[iu]?/]: s#115
[#202 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#202 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#202 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#202 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#202 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#202 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#202 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#202 /[1-9][0-9]*[fh]/]: s#119
[#202 /[1-9][0-9]*[iu]?/]: s#116
[#203 '/[rgba]/']: s#283
[#203 '/[rgba][rgba]/']: s#284
[#203 '/[rgba][rgba][rgba]/']: s#285
[#203 '/[rgba][rgba][rgba][rgba]/']: s#286
[#203 '/[xyzw]/']: s#287
[#203 '/[xyzw][xyzw]/']: s#288
[#203 '/[xyzw][xyzw][xyzw]/']: s#289
[#203 '/[xyzw][xyzw][xyzw][xyzw]/']: s#290
[#203 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#282
[#204 '!=']: r#123
[#204 '%']: r#123
[#204 '&&']: r#123
[#204 '&']: r#123
[#204 ')']: r#123
[#204 '*']: r#123
[#204 '+']: r#123
[#204 ',']: r#123
[#204 '-']: r#123
[#204 '/']: r#123
[#204 ':']: r#123
[#204 ';']: r#123
[#204 '<']: r#123
[#204 '<<']: r#123
[#204 '<=']: r#123
[#204 '==']: r#123
[#204 '>']: r#123
[#204 '>=']: r#123
[#204 '>>']: r#123
[#204 '@']: r#123
[#204 ']']: r#123
[#204 '^']: r#123
[#204 '{']: r#123
[#204 '|']: r#123
[#204 '||']: r#123
[#205 '!=']: r#124
[#205 '%']: r#124
[#205 '&&']: r#124
[#205 '&']: r#124
[#205 ')']: r#124
[#205 '*']: r#124
[#205 '+']: r#124
[#205 ',']: r#124
[#205 '-']: r#124
[#205 '/']: r#124
[#205 ':']: r#124
[#205 ';']: r#124
[#205 '<']: r#124
[#205 '<<']: r#124
[#205 '<=']: r#124
[#205 '==']: r#124
[#205 '>']: r#124
[#205 '>=']: r#124
[#205 '>>']: r#124
[#205 '@']: r#124
[#205 ']']: r#124
[#205 '^']: r#124
[#205 '{']: r#124
[#205 '|']: r#124
[#205 '||']: r#124
[#206 '!=']: r#125
[#206 '%']: r#125
[#206 '&&']: r#125
[#206 '&']: r#125
[#206 ')']: r#125
[#206 '*']: r#125
[#206 '+']: r#125
[#206 ',']: r#125
[#206 '-']: r#125
[#206 '/']: r#125
[#206 ':']: r#125
[#206 ';']: r#125
[#206 '<']: r#125
[#206 '<<']: r#125
[#206 '<=']: r#125
[#206 '==']: r#125
[#206 '>']: r#125
[#206 '>=']: r#125
[#206 '>>']: r#125
[#206 '@']: r#125
[#206 ']']: r#125
[#206 '^']: r#125
[#206 '{']: r#125
[#206 '|']: r#125
[#206 '||']: r#125
[#207 '!=']: r#126
[#207 '%']: r#126
[#207 '&&']: r#126
[#207 '&']: r#126
[#207 ')']: r#126
[#207 '*']: r#126
[#207 '+']: r#126
[#207 ',']: r#126
[#207 '-']: r#126
[#207 '/']: r#126
[#207 ':']: r#126
[#207 ';']: r#126
[#207 '<']: r#126
[#207 '<<']: r#126
[#207 '<=']: r#126
[#207 '==']: r#126
[#207 '>']: r#126
[#207 '>=']: r#126
[#207 '>>']: r#126
[#207 '@']: r#126
[#207 ']']: r#126
[#207 '^']: r#126
[#207 '{']: r#126
[#207 '|']: r#126
[#207 '||']: r#126
[#208 '!=']: r#127
[#208 '%']: r#127
[#208 '&&']: r#127
[#208 '&']: r#127
[#208 ')']: r#127
[#208 '*']: r#127
[#208 '+']: r#127
[#208 ',']: r#127
[#208 '-']: r#127
[#208 '/']: r#127
[#208 ':']: r#127
[#208 ';']: r#127
[#208 '<']: r#127
[#208 '<<']: r#127
[#208 '<=']: r#127
[#208 '==']: r#127
[#208 '>']: r#127
[#208 '>=']: r#127
[#208 '>>']: r#127
[#208 '@']: r#127
[#208 ']']: r#127
[#208 '^']: r#127
[#208 '{']: r#127
[#208 '|']: r#127
[#208 '||']: r#127
[#209 '!']: s#68
[#209 '&']: s#71
[#209 '(']: s#83
[#209 '*']: s#70
[#209 '-']: s#67
[#209 'array']: s#87
[#209 'atomic']: s#101
[#209 'bitcast']: s#77
[#209 'bool']: s#94
[#209 'f16']: s#96
[#209 'f32']: s#95
[#209 'false']: s#93
[#209 'i32']: s#97
[#209 'mat2x2']: s#106
[#209 'mat2x3']: s#107
[#209 'mat2x4']: s#108
[#209 'mat3x2']: s#109
[#209 'mat3x3']: s#110
[#209 'mat3x4']: s#111
[#209 'mat4x2']: s#112
[#209 'mat4x3']: s#113
[#209 'mat4x4']: s#114
[#209 'ptr']: s#99
[#209 'sampler']: s#131
[#209 'sampler_comparison']: s#132
[#209 'texture_1d']: s#138
[#209 'texture_2d']: s#139
[#209 'texture_2d_array']: s#140
[#209 'texture_3d']: s#141
[#209 'texture_cube']: s#142
[#209 'texture_cube_array']: s#143
[#209 'texture_depth_2d']: s#133
[#209 'texture_depth_2d_array']: s#134
[#209 'texture_depth_cube']: s#135
[#209 'texture_depth_cube_array']: s#136
[#209 'texture_depth_multisampled_2d']: s#137
[#209 'texture_multisampled_2d']: s#144
[#209 'texture_storage_1d']: s#145
[#209 'texture_storage_2d']: s#146
[#209 'texture_storage_2d_array']: s#147
[#209 'texture_storage_3d']: s#148
[#209 'true']: s#92
[#209 'u32']: s#98
[#209 'vec2']: s#103
[#209 'vec3']: s#104
[#209 'vec4']: s#105
[#209 '~']: s#69
[#209 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#209 /0[fh]/]: s#118
[#209 /0[iu]?/]: s#115
[#209 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#209 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#209 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#209 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#209 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#209 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#209 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#209 /[1-9][0-9]*[fh]/]: s#119
[#209 /[1-9][0-9]*[iu]?/]: s#116
[#210 '!']: r#128
[#210 '&']: r#128
[#210 '(']: r#128
[#210 '*']: r#128
[#210 '-']: r#128
[#210 'array']: r#128
[#210 'atomic']: r#128
[#210 'bitcast']: r#128
[#210 'bool']: r#128
[#210 'f16']: r#128
[#210 'f32']: r#128
[#210 'false']: r#128
[#210 'i32']: r#128
[#210 'mat2x2']: r#128
[#210 'mat2x3']: r#128
[#210 'mat2x4']: r#128
[#210 'mat3x2']: r#128
[#210 'mat3x3']: r#128
[#210 'mat3x4']: r#128
[#210 'mat4x2']: r#128
[#210 'mat4x3']: r#128
[#210 'mat4x4']: r#128
[#210 'ptr']: r#128
[#210 'sampler']: r#128
[#210 'sampler_comparison']: r#128
[#210 'texture_1d']: r#128
[#210 'texture_2d']: r#128
[#210 'texture_2d_array']: r#128
[#210 'texture_3d']: r#128
[#210 'texture_cube']: r#128
[#210 'texture_cube_array']: r#128
[#210 'texture_depth_2d']: r#128
[#210 'texture_depth_2d_array']: r#128
[#210 'texture_depth_cube']: r#128
[#210 'texture_depth_cube_array']: r#128
[#210 'texture_depth_multisampled_2d']: r#128
[#210 'texture_multisampled_2d']: r#128
[#210 'texture_storage_1d']: r#128
[#210 'texture_storage_2d']: r#128
[#210 'texture_storage_2d_array']: r#128
[#210 'texture_storage_3d']: r#128
[#210 'true']: r#128
[#210 'u32']: r#128
[#210 'vec2']: r#128
[#210 'vec3']: r#128
[#210 'vec4']: r#128
[#210 '~']: r#128
[#210 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#128
[#210 /0[fh]/]: r#128
[#210 /0[iu]?/]: r#128
[#210 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#128
[#210 /0[xX][0-9a-fA-F]+[iu]?/]: r#128
[#210 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#128
[#210 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#128
[#210 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#128
[#210 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#128
[#210 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#128
[#210 /[1-9][0-9]*[fh]/]: r#128
[#210 /[1-9][0-9]*[iu]?/]: r#128
[#211 '!']: r#129
[#211 '&']: r#129
[#211 '(']: r#129
[#211 '*']: r#129
[#211 '-']: r#129
[#211 'array']: r#129
[#211 'atomic']: r#129
[#211 'bitcast']: r#129
[#211 'bool']: r#129
[#211 'f16']: r#129
[#211 'f32']: r#129
[#211 'false']: r#129
[#211 'i32']: r#129
[#211 'mat2x2']: r#129
[#211 'mat2x3']: r#129
[#211 'mat2x4']: r#129
[#211 'mat3x2']: r#129
[#211 'mat3x3']: r#129
[#211 'mat3x4']: r#129
[#211 'mat4x2']: r#129
[#211 'mat4x3']: r#129
[#211 'mat4x4']: r#129
[#211 'ptr']: r#129
[#211 'sampler']: r#129
[#211 'sampler_comparison']: r#129
[#211 'texture_1d']: r#129
[#211 'texture_2d']: r#129
[#211 'texture_2d_array']: r#129
[#211 'texture_3d']: r#129
[#211 'texture_cube']: r#129
[#211 'texture_cube_array']: r#129
[#211 'texture_depth_2d']: r#129
[#211 'texture_depth_2d_array']: r#129
[#211 'texture_depth_cube']: r#129
[#211 'texture_depth_cube_array']: r#129
[#211 'texture_depth_multisampled_2d']: r#129
[#211 'texture_multisampled_2d']: r#129
[#211 'texture_storage_1d']: r#129
[#211 'texture_storage_2d']: r#129
[#211 'texture_storage_2d_array']: r#129
[#211 'texture_storage_3d']: r#129
[#211 'true']: r#129
[#211 'u32']: r#129
[#211 'vec2']: r#129
[#211 'vec3']: r#129
[#211 'vec4']: r#129
[#211 '~']: r#129
[#211 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#129
[#211 /0[fh]/]: r#129
[#211 /0[iu]?/]: r#129
[#211 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#129
[#211 /0[xX][0-9a-fA-F]+[iu]?/]: r#129
[#211 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#129
[#211 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#129
[#211 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#129
[#211 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#129
[#211 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#129
[#211 /[1-9][0-9]*[fh]/]: r#129
[#211 /[1-9][0-9]*[iu]?/]: r#129
[#212 '!']: r#130
[#212 '&']: r#130
[#212 '(']: r#130
[#212 '*']: r#130
[#212 '-']: r#130
[#212 'array']: r#130
[#212 'atomic']: r#130
[#212 'bitcast']: r#130
[#212 'bool']: r#130
[#212 'f16']: r#130
[#212 'f32']: r#130
[#212 'false']: r#130
[#212 'i32']: r#130
[#212 'mat2x2']: r#130
[#212 'mat2x3']: r#130
[#212 'mat2x4']: r#130
[#212 'mat3x2']: r#130
[#212 'mat3x3']: r#130
[#212 'mat3x4']: r#130
[#212 'mat4x2']: r#130
[#212 'mat4x3']: r#130
[#212 'mat4x4']: r#130
[#212 'ptr']: r#130
[#212 'sampler']: r#130
[#212 'sampler_comparison']: r#130
[#212 'texture_1d']: r#130
[#212 'texture_2d']: r#130
[#212 'texture_2d_array']: r#130
[#212 'texture_3d']: r#130
[#212 'texture_cube']: r#130
[#212 'texture_cube_array']: r#130
[#212 'texture_depth_2d']: r#130
[#212 'texture_depth_2d_array']: r#130
[#212 'texture_depth_cube']: r#130
[#212 'texture_depth_cube_array']: r#130
[#212 'texture_depth_multisampled_2d']: r#130
[#212 'texture_multisampled_2d']: r#130
[#212 'texture_storage_1d']: r#130
[#212 'texture_storage_2d']: r#130
[#212 'texture_storage_2d_array']: r#130
[#212 'texture_storage_3d']: r#130
[#212 'true']: r#130
[#212 'u32']: r#130
[#212 'vec2']: r#130
[#212 'vec3']: r#130
[#212 'vec4']: r#130
[#212 '~']: r#130
[#212 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#130
[#212 /0[fh]/]: r#130
[#212 /0[iu]?/]: r#130
[#212 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#130
[#212 /0[xX][0-9a-fA-F]+[iu]?/]: r#130
[#212 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#130
[#212 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#130
[#212 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#130
[#212 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#130
[#212 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#130
[#212 /[1-9][0-9]*[fh]/]: r#130
[#212 /[1-9][0-9]*[iu]?/]: r#130
[#213 '!']: s#68
[#213 '&']: s#71
[#213 '(']: s#83
[#213 '*']: s#70
[#213 '-']: s#67
[#213 'array']: s#87
[#213 'atomic']: s#101
[#213 'bitcast']: s#77
[#213 'bool']: s#94
[#213 'f16']: s#96
[#213 'f32']: s#95
[#213 'false']: s#93
[#213 'i32']: s#97
[#213 'mat2x2']: s#106
[#213 'mat2x3']: s#107
[#213 'mat2x4']: s#108
[#213 'mat3x2']: s#109
[#213 'mat3x3']: s#110
[#213 'mat3x4']: s#111
[#213 'mat4x2']: s#112
[#213 'mat4x3']: s#113
[#213 'mat4x4']: s#114
[#213 'ptr']: s#99
[#213 'sampler']: s#131
[#213 'sampler_comparison']: s#132
[#213 'texture_1d']: s#138
[#213 'texture_2d']: s#139
[#213 'texture_2d_array']: s#140
[#213 'texture_3d']: s#141
[#213 'texture_cube']: s#142
[#213 'texture_cube_array']: s#143
[#213 'texture_depth_2d']: s#133
[#213 'texture_depth_2d_array']: s#134
[#213 'texture_depth_cube']: s#135
[#213 'texture_depth_cube_array']: s#136
[#213 'texture_depth_multisampled_2d']: s#137
[#213 'texture_multisampled_2d']: s#144
[#213 'texture_storage_1d']: s#145
[#213 'texture_storage_2d']: s#146
[#213 'texture_storage_2d_array']: s#147
[#213 'texture_storage_3d']: s#148
[#213 'true']: s#92
[#213 'u32']: s#98
[#213 'vec2']: s#103
[#213 'vec3']: s#104
[#213 'vec4']: s#105
[#213 '~']: s#69
[#213 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#213 /0[fh]/]: s#118
[#213 /0[iu]?/]: s#115
[#213 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#213 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#213 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#213 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#213 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#213 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#213 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#213 /[1-9][0-9]*[fh]/]: s#119
[#213 /[1-9][0-9]*[iu]?/]: s#116
[#214 '!']: s#68
[#214 '&']: s#71
[#214 '(']: s#83
[#214 '*']: s#70
[#214 '-']: s#67
[#214 'array']: s#87
[#214 'atomic']: s#101
[#214 'bitcast']: s#77
[#214 'bool']: s#94
[#214 'f16']: s#96
[#214 'f32']: s#95
[#214 'false']: s#93
[#214 'i32']: s#97
[#214 'mat2x2']: s#106
[#214 'mat2x3']: s#107
[#214 'mat2x4']: s#108
[#214 'mat3x2']: s#109
[#214 'mat3x3']: s#110
[#214 'mat3x4']: s#111
[#214 'mat4x2']: s#112
[#214 'mat4x3']: s#113
[#214 'mat4x4']: s#114
[#214 'ptr']: s#99
[#214 'sampler']: s#131
[#214 'sampler_comparison']: s#132
[#214 'texture_1d']: s#138
[#214 'texture_2d']: s#139
[#214 'texture_2d_array']: s#140
[#214 'texture_3d']: s#141
[#214 'texture_cube']: s#142
[#214 'texture_cube_array']: s#143
[#214 'texture_depth_2d']: s#133
[#214 'texture_depth_2d_array']: s#134
[#214 'texture_depth_cube']: s#135
[#214 'texture_depth_cube_array']: s#136
[#214 'texture_depth_multisampled_2d']: s#137
[#214 'texture_multisampled_2d']: s#144
[#214 'texture_storage_1d']: s#145
[#214 'texture_storage_2d']: s#146
[#214 'texture_storage_2d_array']: s#147
[#214 'texture_storage_3d']: s#148
[#214 'true']: s#92
[#214 'u32']: s#98
[#214 'vec2']: s#103
[#214 'vec3']: s#104
[#214 'vec4']: s#105
[#214 '~']: s#69
[#214 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#214 /0[fh]/]: s#118
[#214 /0[iu]?/]: s#115
[#214 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#214 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#214 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#214 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#214 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#214 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#214 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#214 /[1-9][0-9]*[fh]/]: s#119
[#214 /[1-9][0-9]*[iu]?/]: s#116
[#215 '!']: s#68
[#215 '&']: s#71
[#215 '(']: s#83
[#215 '*']: s#70
[#215 '-']: s#67
[#215 'array']: s#87
[#215 'atomic']: s#101
[#215 'bitcast']: s#77
[#215 'bool']: s#94
[#215 'f16']: s#96
[#215 'f32']: s#95
[#215 'false']: s#93
[#215 'i32']: s#97
[#215 'mat2x2']: s#106
[#215 'mat2x3']: s#107
[#215 'mat2x4']: s#108
[#215 'mat3x2']: s#109
[#215 'mat3x3']: s#110
[#215 'mat3x4']: s#111
[#215 'mat4x2']: s#112
[#215 'mat4x3']: s#113
[#215 'mat4x4']: s#114
[#215 'ptr']: s#99
[#215 'sampler']: s#131
[#215 'sampler_comparison']: s#132
[#215 'texture_1d']: s#138
[#215 'texture_2d']: s#139
[#215 'texture_2d_array']: s#140
[#215 'texture_3d']: s#141
[#215 'texture_cube']: s#142
[#215 'texture_cube_array']: s#143
[#215 'texture_depth_2d']: s#133
[#215 'texture_depth_2d_array']: s#134
[#215 'texture_depth_cube']: s#135
[#215 'texture_depth_cube_array']: s#136
[#215 'texture_depth_multisampled_2d']: s#137
[#215 'texture_multisampled_2d']: s#144
[#215 'texture_storage_1d']: s#145
[#215 'texture_storage_2d']: s#146
[#215 'texture_storage_2d_array']: s#147
[#215 'texture_storage_3d']: s#148
[#215 'true']: s#92
[#215 'u32']: s#98
[#215 'vec2']: s#103
[#215 'vec3']: s#104
[#215 'vec4']: s#105
[#215 '~']: s#69
[#215 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#215 /0[fh]/]: s#118
[#215 /0[iu]?/]: s#115
[#215 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#215 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#215 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#215 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#215 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#215 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#215 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#215 /[1-9][0-9]*[fh]/]: s#119
[#215 /[1-9][0-9]*[iu]?/]: s#116
[#216 '!']: r#131
[#216 '&']: r#131
[#216 '(']: r#131
[#216 '*']: r#131
[#216 '-']: r#131
[#216 'array']: r#131
[#216 'atomic']: r#131
[#216 'bitcast']: r#131
[#216 'bool']: r#131
[#216 'f16']: r#131
[#216 'f32']: r#131
[#216 'false']: r#131
[#216 'i32']: r#131
[#216 'mat2x2']: r#131
[#216 'mat2x3']: r#131
[#216 'mat2x4']: r#131
[#216 'mat3x2']: r#131
[#216 'mat3x3']: r#131
[#216 'mat3x4']: r#131
[#216 'mat4x2']: r#131
[#216 'mat4x3']: r#131
[#216 'mat4x4']: r#131
[#216 'ptr']: r#131
[#216 'sampler']: r#131
[#216 'sampler_comparison']: r#131
[#216 'texture_1d']: r#131
[#216 'texture_2d']: r#131
[#216 'texture_2d_array']: r#131
[#216 'texture_3d']: r#131
[#216 'texture_cube']: r#131
[#216 'texture_cube_array']: r#131
[#216 'texture_depth_2d']: r#131
[#216 'texture_depth_2d_array']: r#131
[#216 'texture_depth_cube']: r#131
[#216 'texture_depth_cube_array']: r#131
[#216 'texture_depth_multisampled_2d']: r#131
[#216 'texture_multisampled_2d']: r#131
[#216 'texture_storage_1d']: r#131
[#216 'texture_storage_2d']: r#131
[#216 'texture_storage_2d_array']: r#131
[#216 'texture_storage_3d']: r#131
[#216 'true']: r#131
[#216 'u32']: r#131
[#216 'vec2']: r#131
[#216 'vec3']: r#131
[#216 'vec4']: r#131
[#216 '~']: r#131
[#216 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#131
[#216 /0[fh]/]: r#131
[#216 /0[iu]?/]: r#131
[#216 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#131
[#216 /0[xX][0-9a-fA-F]+[iu]?/]: r#131
[#216 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#131
[#216 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#131
[#216 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#131
[#216 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#131
[#216 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#131
[#216 /[1-9][0-9]*[fh]/]: r#131
[#216 /[1-9][0-9]*[iu]?/]: r#131
[#217 '!']: r#132
[#217 '&']: r#132
[#217 '(']: r#132
[#217 '*']: r#132
[#217 '-']: r#132
[#217 'array']: r#132
[#217 'atomic']: r#132
[#217 'bitcast']: r#132
[#217 'bool']: r#132
[#217 'f16']: r#132
[#217 'f32']: r#132
[#217 'false']: r#132
[#217 'i32']: r#132
[#217 'mat2x2']: r#132
[#217 'mat2x3']: r#132
[#217 'mat2x4']: r#132
[#217 'mat3x2']: r#132
[#217 'mat3x3']: r#132
[#217 'mat3x4']: r#132
[#217 'mat4x2']: r#132
[#217 'mat4x3']: r#132
[#217 'mat4x4']: r#132
[#217 'ptr']: r#132
[#217 'sampler']: r#132
[#217 'sampler_comparison']: r#132
[#217 'texture_1d']: r#132
[#217 'texture_2d']: r#132
[#217 'texture_2d_array']: r#132
[#217 'texture_3d']: r#132
[#217 'texture_cube']: r#132
[#217 'texture_cube_array']: r#132
[#217 'texture_depth_2d']: r#132
[#217 'texture_depth_2d_array']: r#132
[#217 'texture_depth_cube']: r#132
[#217 'texture_depth_cube_array']: r#132
[#217 'texture_depth_multisampled_2d']: r#132
[#217 'texture_multisampled_2d']: r#132
[#217 'texture_storage_1d']: r#132
[#217 'texture_storage_2d']: r#132
[#217 'texture_storage_2d_array']: r#132
[#217 'texture_storage_3d']: r#132
[#217 'true']: r#132
[#217 'u32']: r#132
[#217 'vec2']: r#132
[#217 'vec3']: r#132
[#217 'vec4']: r#132
[#217 '~']: r#132
[#217 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#132
[#217 /0[fh]/]: r#132
[#217 /0[iu]?/]: r#132
[#217 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#132
[#217 /0[xX][0-9a-fA-F]+[iu]?/]: r#132
[#217 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#132
[#217 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#132
[#217 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#132
[#217 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#132
[#217 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#132
[#217 /[1-9][0-9]*[fh]/]: r#132
[#217 /[1-9][0-9]*[iu]?/]: r#132
[#218 '!']: s#68
[#218 '&']: s#71
[#218 '(']: s#83
[#218 '*']: s#70
[#218 '-']: s#67
[#218 'array']: s#87
[#218 'atomic']: s#101
[#218 'bitcast']: s#77
[#218 'bool']: s#94
[#218 'f16']: s#96
[#218 'f32']: s#95
[#218 'false']: s#93
[#218 'i32']: s#97
[#218 'mat2x2']: s#106
[#218 'mat2x3']: s#107
[#218 'mat2x4']: s#108
[#218 'mat3x2']: s#109
[#218 'mat3x3']: s#110
[#218 'mat3x4']: s#111
[#218 'mat4x2']: s#112
[#218 'mat4x3']: s#113
[#218 'mat4x4']: s#114
[#218 'ptr']: s#99
[#218 'sampler']: s#131
[#218 'sampler_comparison']: s#132
[#218 'texture_1d']: s#138
[#218 'texture_2d']: s#139
[#218 'texture_2d_array']: s#140
[#218 'texture_3d']: s#141
[#218 'texture_cube']: s#142
[#218 'texture_cube_array']: s#143
[#218 'texture_depth_2d']: s#133
[#218 'texture_depth_2d_array']: s#134
[#218 'texture_depth_cube']: s#135
[#218 'texture_depth_cube_array']: s#136
[#218 'texture_depth_multisampled_2d']: s#137
[#218 'texture_multisampled_2d']: s#144
[#218 'texture_storage_1d']: s#145
[#218 'texture_storage_2d']: s#146
[#218 'texture_storage_2d_array']: s#147
[#218 'texture_storage_3d']: s#148
[#218 'true']: s#92
[#218 'u32']: s#98
[#218 'vec2']: s#103
[#218 'vec3']: s#104
[#218 'vec4']: s#105
[#218 '~']: s#69
[#218 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#218 /0[fh]/]: s#118
[#218 /0[iu]?/]: s#115
[#218 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#218 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#218 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#218 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#218 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#218 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#218 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#218 /[1-9][0-9]*[fh]/]: s#119
[#218 /[1-9][0-9]*[iu]?/]: s#116
[#219 '!']: s#68
[#219 '&']: s#71
[#219 '(']: s#83
[#219 '*']: s#70
[#219 '-']: s#67
[#219 'array']: s#87
[#219 'atomic']: s#101
[#219 'bitcast']: s#77
[#219 'bool']: s#94
[#219 'f16']: s#96
[#219 'f32']: s#95
[#219 'false']: s#93
[#219 'i32']: s#97
[#219 'mat2x2']: s#106
[#219 'mat2x3']: s#107
[#219 'mat2x4']: s#108
[#219 'mat3x2']: s#109
[#219 'mat3x3']: s#110
[#219 'mat3x4']: s#111
[#219 'mat4x2']: s#112
[#219 'mat4x3']: s#113
[#219 'mat4x4']: s#114
[#219 'ptr']: s#99
[#219 'sampler']: s#131
[#219 'sampler_comparison']: s#132
[#219 'texture_1d']: s#138
[#219 'texture_2d']: s#139
[#219 'texture_2d_array']: s#140
[#219 'texture_3d']: s#141
[#219 'texture_cube']: s#142
[#219 'texture_cube_array']: s#143
[#219 'texture_depth_2d']: s#133
[#219 'texture_depth_2d_array']: s#134
[#219 'texture_depth_cube']: s#135
[#219 'texture_depth_cube_array']: s#136
[#219 'texture_depth_multisampled_2d']: s#137
[#219 'texture_multisampled_2d']: s#144
[#219 'texture_storage_1d']: s#145
[#219 'texture_storage_2d']: s#146
[#219 'texture_storage_2d_array']: s#147
[#219 'texture_storage_3d']: s#148
[#219 'true']: s#92
[#219 'u32']: s#98
[#219 'vec2']: s#103
[#219 'vec3']: s#104
[#219 'vec4']: s#105
[#219 '~']: s#69
[#219 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#219 /0[fh]/]: s#118
[#219 /0[iu]?/]: s#115
[#219 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#219 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#219 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#219 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#219 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#219 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#219 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#219 /[1-9][0-9]*[fh]/]: s#119
[#219 /[1-9][0-9]*[iu]?/]: s#116
[#220 '!']: s#68
[#220 '&']: s#71
[#220 '(']: s#83
[#220 '*']: s#70
[#220 '-']: s#67
[#220 'array']: s#87
[#220 'atomic']: s#101
[#220 'bitcast']: s#77
[#220 'bool']: s#94
[#220 'f16']: s#96
[#220 'f32']: s#95
[#220 'false']: s#93
[#220 'i32']: s#97
[#220 'mat2x2']: s#106
[#220 'mat2x3']: s#107
[#220 'mat2x4']: s#108
[#220 'mat3x2']: s#109
[#220 'mat3x3']: s#110
[#220 'mat3x4']: s#111
[#220 'mat4x2']: s#112
[#220 'mat4x3']: s#113
[#220 'mat4x4']: s#114
[#220 'ptr']: s#99
[#220 'sampler']: s#131
[#220 'sampler_comparison']: s#132
[#220 'texture_1d']: s#138
[#220 'texture_2d']: s#139
[#220 'texture_2d_array']: s#140
[#220 'texture_3d']: s#141
[#220 'texture_cube']: s#142
[#220 'texture_cube_array']: s#143
[#220 'texture_depth_2d']: s#133
[#220 'texture_depth_2d_array']: s#134
[#220 'texture_depth_cube']: s#135
[#220 'texture_depth_cube_array']: s#136
[#220 'texture_depth_multisampled_2d']: s#137
[#220 'texture_multisampled_2d']: s#144
[#220 'texture_storage_1d']: s#145
[#220 'texture_storage_2d']: s#146
[#220 'texture_storage_2d_array']: s#147
[#220 'texture_storage_3d']: s#148
[#220 'true']: s#92
[#220 'u32']: s#98
[#220 'vec2']: s#103
[#220 'vec3']: s#104
[#220 'vec4']: s#105
[#220 '~']: s#69
[#220 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#220 /0[fh]/]: s#118
[#220 /0[iu]?/]: s#115
[#220 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#220 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#220 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#220 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#220 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#220 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#220 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#220 /[1-9][0-9]*[fh]/]: s#119
[#220 /[1-9][0-9]*[iu]?/]: s#116
[#221 '!']: s#68
[#221 '&']: s#71
[#221 '(']: s#83
[#221 '*']: s#70
[#221 '-']: s#67
[#221 'array']: s#87
[#221 'atomic']: s#101
[#221 'bitcast']: s#77
[#221 'bool']: s#94
[#221 'f16']: s#96
[#221 'f32']: s#95
[#221 'false']: s#93
[#221 'i32']: s#97
[#221 'mat2x2']: s#106
[#221 'mat2x3']: s#107
[#221 'mat2x4']: s#108
[#221 'mat3x2']: s#109
[#221 'mat3x3']: s#110
[#221 'mat3x4']: s#111
[#221 'mat4x2']: s#112
[#221 'mat4x3']: s#113
[#221 'mat4x4']: s#114
[#221 'ptr']: s#99
[#221 'sampler']: s#131
[#221 'sampler_comparison']: s#132
[#221 'texture_1d']: s#138
[#221 'texture_2d']: s#139
[#221 'texture_2d_array']: s#140
[#221 'texture_3d']: s#141
[#221 'texture_cube']: s#142
[#221 'texture_cube_array']: s#143
[#221 'texture_depth_2d']: s#133
[#221 'texture_depth_2d_array']: s#134
[#221 'texture_depth_cube']: s#135
[#221 'texture_depth_cube_array']: s#136
[#221 'texture_depth_multisampled_2d']: s#137
[#221 'texture_multisampled_2d']: s#144
[#221 'texture_storage_1d']: s#145
[#221 'texture_storage_2d']: s#146
[#221 'texture_storage_2d_array']: s#147
[#221 'texture_storage_3d']: s#148
[#221 'true']: s#92
[#221 'u32']: s#98
[#221 'vec2']: s#103
[#221 'vec3']: s#104
[#221 'vec4']: s#105
[#221 '~']: s#69
[#221 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#221 /0[fh]/]: s#118
[#221 /0[iu]?/]: s#115
[#221 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#221 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#221 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#221 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#221 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#221 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#221 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#221 /[1-9][0-9]*[fh]/]: s#119
[#221 /[1-9][0-9]*[iu]?/]: s#116
[#222 '!']: s#68
[#222 '&']: s#71
[#222 '(']: s#83
[#222 '*']: s#70
[#222 '-']: s#67
[#222 'array']: s#87
[#222 'atomic']: s#101
[#222 'bitcast']: s#77
[#222 'bool']: s#94
[#222 'f16']: s#96
[#222 'f32']: s#95
[#222 'false']: s#93
[#222 'i32']: s#97
[#222 'mat2x2']: s#106
[#222 'mat2x3']: s#107
[#222 'mat2x4']: s#108
[#222 'mat3x2']: s#109
[#222 'mat3x3']: s#110
[#222 'mat3x4']: s#111
[#222 'mat4x2']: s#112
[#222 'mat4x3']: s#113
[#222 'mat4x4']: s#114
[#222 'ptr']: s#99
[#222 'sampler']: s#131
[#222 'sampler_comparison']: s#132
[#222 'texture_1d']: s#138
[#222 'texture_2d']: s#139
[#222 'texture_2d_array']: s#140
[#222 'texture_3d']: s#141
[#222 'texture_cube']: s#142
[#222 'texture_cube_array']: s#143
[#222 'texture_depth_2d']: s#133
[#222 'texture_depth_2d_array']: s#134
[#222 'texture_depth_cube']: s#135
[#222 'texture_depth_cube_array']: s#136
[#222 'texture_depth_multisampled_2d']: s#137
[#222 'texture_multisampled_2d']: s#144
[#222 'texture_storage_1d']: s#145
[#222 'texture_storage_2d']: s#146
[#222 'texture_storage_2d_array']: s#147
[#222 'texture_storage_3d']: s#148
[#222 'true']: s#92
[#222 'u32']: s#98
[#222 'vec2']: s#103
[#222 'vec3']: s#104
[#222 'vec4']: s#105
[#222 '~']: s#69
[#222 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#222 /0[fh]/]: s#118
[#222 /0[iu]?/]: s#115
[#222 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#222 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#222 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#222 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#222 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#222 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#222 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#222 /[1-9][0-9]*[fh]/]: s#119
[#222 /[1-9][0-9]*[iu]?/]: s#116
[#223 '!']: s#68
[#223 '&']: s#71
[#223 '(']: s#83
[#223 '*']: s#70
[#223 '-']: s#67
[#223 'array']: s#87
[#223 'atomic']: s#101
[#223 'bitcast']: s#77
[#223 'bool']: s#94
[#223 'f16']: s#96
[#223 'f32']: s#95
[#223 'false']: s#93
[#223 'i32']: s#97
[#223 'mat2x2']: s#106
[#223 'mat2x3']: s#107
[#223 'mat2x4']: s#108
[#223 'mat3x2']: s#109
[#223 'mat3x3']: s#110
[#223 'mat3x4']: s#111
[#223 'mat4x2']: s#112
[#223 'mat4x3']: s#113
[#223 'mat4x4']: s#114
[#223 'ptr']: s#99
[#223 'sampler']: s#131
[#223 'sampler_comparison']: s#132
[#223 'texture_1d']: s#138
[#223 'texture_2d']: s#139
[#223 'texture_2d_array']: s#140
[#223 'texture_3d']: s#141
[#223 'texture_cube']: s#142
[#223 'texture_cube_array']: s#143
[#223 'texture_depth_2d']: s#133
[#223 'texture_depth_2d_array']: s#134
[#223 'texture_depth_cube']: s#135
[#223 'texture_depth_cube_array']: s#136
[#223 'texture_depth_multisampled_2d']: s#137
[#223 'texture_multisampled_2d']: s#144
[#223 'texture_storage_1d']: s#145
[#223 'texture_storage_2d']: s#146
[#223 'texture_storage_2d_array']: s#147
[#223 'texture_storage_3d']: s#148
[#223 'true']: s#92
[#223 'u32']: s#98
[#223 'vec2']: s#103
[#223 'vec3']: s#104
[#223 'vec4']: s#105
[#223 '~']: s#69
[#223 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#223 /0[fh]/]: s#118
[#223 /0[iu]?/]: s#115
[#223 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#223 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#223 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#223 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#223 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#223 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#223 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#223 /[1-9][0-9]*[fh]/]: s#119
[#223 /[1-9][0-9]*[iu]?/]: s#116
[#224 '!']: s#68
[#224 '&']: s#71
[#224 '(']: s#83
[#224 '*']: s#70
[#224 '-']: s#67
[#224 'array']: s#87
[#224 'atomic']: s#101
[#224 'bitcast']: s#77
[#224 'bool']: s#94
[#224 'f16']: s#96
[#224 'f32']: s#95
[#224 'false']: s#93
[#224 'i32']: s#97
[#224 'mat2x2']: s#106
[#224 'mat2x3']: s#107
[#224 'mat2x4']: s#108
[#224 'mat3x2']: s#109
[#224 'mat3x3']: s#110
[#224 'mat3x4']: s#111
[#224 'mat4x2']: s#112
[#224 'mat4x3']: s#113
[#224 'mat4x4']: s#114
[#224 'ptr']: s#99
[#224 'sampler']: s#131
[#224 'sampler_comparison']: s#132
[#224 'texture_1d']: s#138
[#224 'texture_2d']: s#139
[#224 'texture_2d_array']: s#140
[#224 'texture_3d']: s#141
[#224 'texture_cube']: s#142
[#224 'texture_cube_array']: s#143
[#224 'texture_depth_2d']: s#133
[#224 'texture_depth_2d_array']: s#134
[#224 'texture_depth_cube']: s#135
[#224 'texture_depth_cube_array']: s#136
[#224 'texture_depth_multisampled_2d']: s#137
[#224 'texture_multisampled_2d']: s#144
[#224 'texture_storage_1d']: s#145
[#224 'texture_storage_2d']: s#146
[#224 'texture_storage_2d_array']: s#147
[#224 'texture_storage_3d']: s#148
[#224 'true']: s#92
[#224 'u32']: s#98
[#224 'vec2']: s#103
[#224 'vec3']: s#104
[#224 'vec4']: s#105
[#224 '~']: s#69
[#224 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#224 /0[fh]/]: s#118
[#224 /0[iu]?/]: s#115
[#224 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#224 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#224 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#224 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#224 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#224 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#224 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#224 /[1-9][0-9]*[fh]/]: s#119
[#224 /[1-9][0-9]*[iu]?/]: s#116
[#225 '!']: s#68
[#225 '&']: s#71
[#225 '(']: s#83
[#225 '*']: s#70
[#225 '-']: s#67
[#225 'array']: s#87
[#225 'atomic']: s#101
[#225 'bitcast']: s#77
[#225 'bool']: s#94
[#225 'f16']: s#96
[#225 'f32']: s#95
[#225 'false']: s#93
[#225 'i32']: s#97
[#225 'mat2x2']: s#106
[#225 'mat2x3']: s#107
[#225 'mat2x4']: s#108
[#225 'mat3x2']: s#109
[#225 'mat3x3']: s#110
[#225 'mat3x4']: s#111
[#225 'mat4x2']: s#112
[#225 'mat4x3']: s#113
[#225 'mat4x4']: s#114
[#225 'ptr']: s#99
[#225 'sampler']: s#131
[#225 'sampler_comparison']: s#132
[#225 'texture_1d']: s#138
[#225 'texture_2d']: s#139
[#225 'texture_2d_array']: s#140
[#225 'texture_3d']: s#141
[#225 'texture_cube']: s#142
[#225 'texture_cube_array']: s#143
[#225 'texture_depth_2d']: s#133
[#225 'texture_depth_2d_array']: s#134
[#225 'texture_depth_cube']: s#135
[#225 'texture_depth_cube_array']: s#136
[#225 'texture_depth_multisampled_2d']: s#137
[#225 'texture_multisampled_2d']: s#144
[#225 'texture_storage_1d']: s#145
[#225 'texture_storage_2d']: s#146
[#225 'texture_storage_2d_array']: s#147
[#225 'texture_storage_3d']: s#148
[#225 'true']: s#92
[#225 'u32']: s#98
[#225 'vec2']: s#103
[#225 'vec3']: s#104
[#225 'vec4']: s#105
[#225 '~']: s#69
[#225 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#225 /0[fh]/]: s#118
[#225 /0[iu]?/]: s#115
[#225 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#225 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#225 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#225 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#225 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#225 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#225 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#225 /[1-9][0-9]*[fh]/]: s#119
[#225 /[1-9][0-9]*[iu]?/]: s#116
[#226 '!']: s#68
[#226 '&']: s#71
[#226 '(']: s#83
[#226 '*']: s#70
[#226 '-']: s#67
[#226 'array']: s#87
[#226 'atomic']: s#101
[#226 'bitcast']: s#77
[#226 'bool']: s#94
[#226 'f16']: s#96
[#226 'f32']: s#95
[#226 'false']: s#93
[#226 'i32']: s#97
[#226 'mat2x2']: s#106
[#226 'mat2x3']: s#107
[#226 'mat2x4']: s#108
[#226 'mat3x2']: s#109
[#226 'mat3x3']: s#110
[#226 'mat3x4']: s#111
[#226 'mat4x2']: s#112
[#226 'mat4x3']: s#113
[#226 'mat4x4']: s#114
[#226 'ptr']: s#99
[#226 'sampler']: s#131
[#226 'sampler_comparison']: s#132
[#226 'texture_1d']: s#138
[#226 'texture_2d']: s#139
[#226 'texture_2d_array']: s#140
[#226 'texture_3d']: s#141
[#226 'texture_cube']: s#142
[#226 'texture_cube_array']: s#143
[#226 'texture_depth_2d']: s#133
[#226 'texture_depth_2d_array']: s#134
[#226 'texture_depth_cube']: s#135
[#226 'texture_depth_cube_array']: s#136
[#226 'texture_depth_multisampled_2d']: s#137
[#226 'texture_multisampled_2d']: s#144
[#226 'texture_storage_1d']: s#145
[#226 'texture_storage_2d']: s#146
[#226 'texture_storage_2d_array']: s#147
[#226 'texture_storage_3d']: s#148
[#226 'true']: s#92
[#226 'u32']: s#98
[#226 'vec2']: s#103
[#226 'vec3']: s#104
[#226 'vec4']: s#105
[#226 '~']: s#69
[#226 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#226 /0[fh]/]: s#118
[#226 /0[iu]?/]: s#115
[#226 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#226 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#226 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#226 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#226 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#226 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#226 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#226 /[1-9][0-9]*[fh]/]: s#119
[#226 /[1-9][0-9]*[iu]?/]: s#116
[#227 '!']: s#68
[#227 '&']: s#71
[#227 '(']: s#83
[#227 '*']: s#70
[#227 '-']: s#67
[#227 'array']: s#87
[#227 'atomic']: s#101
[#227 'bitcast']: s#77
[#227 'bool']: s#94
[#227 'f16']: s#96
[#227 'f32']: s#95
[#227 'false']: s#93
[#227 'i32']: s#97
[#227 'mat2x2']: s#106
[#227 'mat2x3']: s#107
[#227 'mat2x4']: s#108
[#227 'mat3x2']: s#109
[#227 'mat3x3']: s#110
[#227 'mat3x4']: s#111
[#227 'mat4x2']: s#112
[#227 'mat4x3']: s#113
[#227 'mat4x4']: s#114
[#227 'ptr']: s#99
[#227 'sampler']: s#131
[#227 'sampler_comparison']: s#132
[#227 'texture_1d']: s#138
[#227 'texture_2d']: s#139
[#227 'texture_2d_array']: s#140
[#227 'texture_3d']: s#141
[#227 'texture_cube']: s#142
[#227 'texture_cube_array']: s#143
[#227 'texture_depth_2d']: s#133
[#227 'texture_depth_2d_array']: s#134
[#227 'texture_depth_cube']: s#135
[#227 'texture_depth_cube_array']: s#136
[#227 'texture_depth_multisampled_2d']: s#137
[#227 'texture_multisampled_2d']: s#144
[#227 'texture_storage_1d']: s#145
[#227 'texture_storage_2d']: s#146
[#227 'texture_storage_2d_array']: s#147
[#227 'texture_storage_3d']: s#148
[#227 'true']: s#92
[#227 'u32']: s#98
[#227 'vec2']: s#103
[#227 'vec3']: s#104
[#227 'vec4']: s#105
[#227 '~']: s#69
[#227 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#227 /0[fh]/]: s#118
[#227 /0[iu]?/]: s#115
[#227 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#227 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#227 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#227 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#227 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#227 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#227 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#227 /[1-9][0-9]*[fh]/]: s#119
[#227 /[1-9][0-9]*[iu]?/]: s#116
[#228 '!']: s#68
[#228 '&']: s#71
[#228 '(']: s#83
[#228 '*']: s#70
[#228 '-']: s#67
[#228 'array']: s#87
[#228 'atomic']: s#101
[#228 'bitcast']: s#77
[#228 'bool']: s#94
[#228 'f16']: s#96
[#228 'f32']: s#95
[#228 'false']: s#93
[#228 'i32']: s#97
[#228 'mat2x2']: s#106
[#228 'mat2x3']: s#107
[#228 'mat2x4']: s#108
[#228 'mat3x2']: s#109
[#228 'mat3x3']: s#110
[#228 'mat3x4']: s#111
[#228 'mat4x2']: s#112
[#228 'mat4x3']: s#113
[#228 'mat4x4']: s#114
[#228 'ptr']: s#99
[#228 'sampler']: s#131
[#228 'sampler_comparison']: s#132
[#228 'texture_1d']: s#138
[#228 'texture_2d']: s#139
[#228 'texture_2d_array']: s#140
[#228 'texture_3d']: s#141
[#228 'texture_cube']: s#142
[#228 'texture_cube_array']: s#143
[#228 'texture_depth_2d']: s#133
[#228 'texture_depth_2d_array']: s#134
[#228 'texture_depth_cube']: s#135
[#228 'texture_depth_cube_array']: s#136
[#228 'texture_depth_multisampled_2d']: s#137
[#228 'texture_multisampled_2d']: s#144
[#228 'texture_storage_1d']: s#145
[#228 'texture_storage_2d']: s#146
[#228 'texture_storage_2d_array']: s#147
[#228 'texture_storage_3d']: s#148
[#228 'true']: s#92
[#228 'u32']: s#98
[#228 'vec2']: s#103
[#228 'vec3']: s#104
[#228 'vec4']: s#105
[#228 '~']: s#69
[#228 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#228 /0[fh]/]: s#118
[#228 /0[iu]?/]: s#115
[#228 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#228 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#228 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#228 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#228 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#228 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#228 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#228 /[1-9][0-9]*[fh]/]: s#119
[#228 /[1-9][0-9]*[iu]?/]: s#116
[#229 '!']: s#68
[#229 '&']: s#71
[#229 '(']: s#83
[#229 '*']: s#70
[#229 '-']: s#67
[#229 'array']: s#87
[#229 'atomic']: s#101
[#229 'bitcast']: s#77
[#229 'bool']: s#94
[#229 'f16']: s#96
[#229 'f32']: s#95
[#229 'false']: s#93
[#229 'i32']: s#97
[#229 'mat2x2']: s#106
[#229 'mat2x3']: s#107
[#229 'mat2x4']: s#108
[#229 'mat3x2']: s#109
[#229 'mat3x3']: s#110
[#229 'mat3x4']: s#111
[#229 'mat4x2']: s#112
[#229 'mat4x3']: s#113
[#229 'mat4x4']: s#114
[#229 'ptr']: s#99
[#229 'sampler']: s#131
[#229 'sampler_comparison']: s#132
[#229 'texture_1d']: s#138
[#229 'texture_2d']: s#139
[#229 'texture_2d_array']: s#140
[#229 'texture_3d']: s#141
[#229 'texture_cube']: s#142
[#229 'texture_cube_array']: s#143
[#229 'texture_depth_2d']: s#133
[#229 'texture_depth_2d_array']: s#134
[#229 'texture_depth_cube']: s#135
[#229 'texture_depth_cube_array']: s#136
[#229 'texture_depth_multisampled_2d']: s#137
[#229 'texture_multisampled_2d']: s#144
[#229 'texture_storage_1d']: s#145
[#229 'texture_storage_2d']: s#146
[#229 'texture_storage_2d_array']: s#147
[#229 'texture_storage_3d']: s#148
[#229 'true']: s#92
[#229 'u32']: s#98
[#229 'vec2']: s#103
[#229 'vec3']: s#104
[#229 'vec4']: s#105
[#229 '~']: s#69
[#229 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#229 /0[fh]/]: s#118
[#229 /0[iu]?/]: s#115
[#229 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#229 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#229 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#229 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#229 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#229 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#229 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#229 /[1-9][0-9]*[fh]/]: s#119
[#229 /[1-9][0-9]*[iu]?/]: s#116
[#230 '!']: s#68
[#230 '&']: s#71
[#230 '(']: s#83
[#230 '*']: s#70
[#230 '-']: s#67
[#230 'array']: s#87
[#230 'atomic']: s#101
[#230 'bitcast']: s#77
[#230 'bool']: s#94
[#230 'f16']: s#96
[#230 'f32']: s#95
[#230 'false']: s#93
[#230 'i32']: s#97
[#230 'mat2x2']: s#106
[#230 'mat2x3']: s#107
[#230 'mat2x4']: s#108
[#230 'mat3x2']: s#109
[#230 'mat3x3']: s#110
[#230 'mat3x4']: s#111
[#230 'mat4x2']: s#112
[#230 'mat4x3']: s#113
[#230 'mat4x4']: s#114
[#230 'ptr']: s#99
[#230 'sampler']: s#131
[#230 'sampler_comparison']: s#132
[#230 'texture_1d']: s#138
[#230 'texture_2d']: s#139
[#230 'texture_2d_array']: s#140
[#230 'texture_3d']: s#141
[#230 'texture_cube']: s#142
[#230 'texture_cube_array']: s#143
[#230 'texture_depth_2d']: s#133
[#230 'texture_depth_2d_array']: s#134
[#230 'texture_depth_cube']: s#135
[#230 'texture_depth_cube_array']: s#136
[#230 'texture_depth_multisampled_2d']: s#137
[#230 'texture_multisampled_2d']: s#144
[#230 'texture_storage_1d']: s#145
[#230 'texture_storage_2d']: s#146
[#230 'texture_storage_2d_array']: s#147
[#230 'texture_storage_3d']: s#148
[#230 'true']: s#92
[#230 'u32']: s#98
[#230 'vec2']: s#103
[#230 'vec3']: s#104
[#230 'vec4']: s#105
[#230 '~']: s#69
[#230 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#230 /0[fh]/]: s#118
[#230 /0[iu]?/]: s#115
[#230 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#230 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#230 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#230 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#230 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#230 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#230 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#230 /[1-9][0-9]*[fh]/]: s#119
[#230 /[1-9][0-9]*[iu]?/]: s#116
[#231 '!']: s#68
[#231 '&']: s#71
[#231 '(']: s#83
[#231 '*']: s#70
[#231 '-']: s#67
[#231 'array']: s#87
[#231 'atomic']: s#101
[#231 'bitcast']: s#77
[#231 'bool']: s#94
[#231 'f16']: s#96
[#231 'f32']: s#95
[#231 'false']: s#93
[#231 'i32']: s#97
[#231 'mat2x2']: s#106
[#231 'mat2x3']: s#107
[#231 'mat2x4']: s#108
[#231 'mat3x2']: s#109
[#231 'mat3x3']: s#110
[#231 'mat3x4']: s#111
[#231 'mat4x2']: s#112
[#231 'mat4x3']: s#113
[#231 'mat4x4']: s#114
[#231 'ptr']: s#99
[#231 'sampler']: s#131
[#231 'sampler_comparison']: s#132
[#231 'texture_1d']: s#138
[#231 'texture_2d']: s#139
[#231 'texture_2d_array']: s#140
[#231 'texture_3d']: s#141
[#231 'texture_cube']: s#142
[#231 'texture_cube_array']: s#143
[#231 'texture_depth_2d']: s#133
[#231 'texture_depth_2d_array']: s#134
[#231 'texture_depth_cube']: s#135
[#231 'texture_depth_cube_array']: s#136
[#231 'texture_depth_multisampled_2d']: s#137
[#231 'texture_multisampled_2d']: s#144
[#231 'texture_storage_1d']: s#145
[#231 'texture_storage_2d']: s#146
[#231 'texture_storage_2d_array']: s#147
[#231 'texture_storage_3d']: s#148
[#231 'true']: s#92
[#231 'u32']: s#98
[#231 'vec2']: s#103
[#231 'vec3']: s#104
[#231 'vec4']: s#105
[#231 '~']: s#69
[#231 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#231 /0[fh]/]: s#118
[#231 /0[iu]?/]: s#115
[#231 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#231 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#231 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#231 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#231 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#231 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#231 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#231 /[1-9][0-9]*[fh]/]: s#119
[#231 /[1-9][0-9]*[iu]?/]: s#116
[#232 'flat']: s#259
[#232 'linear']: s#258
[#232 'perspective']: s#257
[#233 '!']: s#68
[#233 '&']: s#71
[#233 '(']: s#83
[#233 '*']: s#70
[#233 '-']: s#67
[#233 'array']: s#87
[#233 'atomic']: s#101
[#233 'bitcast']: s#77
[#233 'bool']: s#94
[#233 'f16']: s#96
[#233 'f32']: s#95
[#233 'false']: s#93
[#233 'i32']: s#97
[#233 'mat2x2']: s#106
[#233 'mat2x3']: s#107
[#233 'mat2x4']: s#108
[#233 'mat3x2']: s#109
[#233 'mat3x3']: s#110
[#233 'mat3x4']: s#111
[#233 'mat4x2']: s#112
[#233 'mat4x3']: s#113
[#233 'mat4x4']: s#114
[#233 'ptr']: s#99
[#233 'sampler']: s#131
[#233 'sampler_comparison']: s#132
[#233 'texture_1d']: s#138
[#233 'texture_2d']: s#139
[#233 'texture_2d_array']: s#140
[#233 'texture_3d']: s#141
[#233 'texture_cube']: s#142
[#233 'texture_cube_array']: s#143
[#233 'texture_depth_2d']: s#133
[#233 'texture_depth_2d_array']: s#134
[#233 'texture_depth_cube']: s#135
[#233 'texture_depth_cube_array']: s#136
[#233 'texture_depth_multisampled_2d']: s#137
[#233 'texture_multisampled_2d']: s#144
[#233 'texture_storage_1d']: s#145
[#233 'texture_storage_2d']: s#146
[#233 'texture_storage_2d_array']: s#147
[#233 'texture_storage_3d']: s#148
[#233 'true']: s#92
[#233 'u32']: s#98
[#233 'vec2']: s#103
[#233 'vec3']: s#104
[#233 'vec4']: s#105
[#233 '~']: s#69
[#233 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#233 /0[fh]/]: s#118
[#233 /0[iu]?/]: s#115
[#233 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#233 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#233 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#233 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#233 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#233 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#233 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#233 /[1-9][0-9]*[fh]/]: s#119
[#233 /[1-9][0-9]*[iu]?/]: s#116
[#234 '!']: s#68
[#234 '&']: s#71
[#234 '(']: s#83
[#234 '*']: s#70
[#234 '-']: s#67
[#234 'array']: s#87
[#234 'atomic']: s#101
[#234 'bitcast']: s#77
[#234 'bool']: s#94
[#234 'f16']: s#96
[#234 'f32']: s#95
[#234 'false']: s#93
[#234 'i32']: s#97
[#234 'mat2x2']: s#106
[#234 'mat2x3']: s#107
[#234 'mat2x4']: s#108
[#234 'mat3x2']: s#109
[#234 'mat3x3']: s#110
[#234 'mat3x4']: s#111
[#234 'mat4x2']: s#112
[#234 'mat4x3']: s#113
[#234 'mat4x4']: s#114
[#234 'ptr']: s#99
[#234 'sampler']: s#131
[#234 'sampler_comparison']: s#132
[#234 'texture_1d']: s#138
[#234 'texture_2d']: s#139
[#234 'texture_2d_array']: s#140
[#234 'texture_3d']: s#141
[#234 'texture_cube']: s#142
[#234 'texture_cube_array']: s#143
[#234 'texture_depth_2d']: s#133
[#234 'texture_depth_2d_array']: s#134
[#234 'texture_depth_cube']: s#135
[#234 'texture_depth_cube_array']: s#136
[#234 'texture_depth_multisampled_2d']: s#137
[#234 'texture_multisampled_2d']: s#144
[#234 'texture_storage_1d']: s#145
[#234 'texture_storage_2d']: s#146
[#234 'texture_storage_2d_array']: s#147
[#234 'texture_storage_3d']: s#148
[#234 'true']: s#92
[#234 'u32']: s#98
[#234 'vec2']: s#103
[#234 'vec3']: s#104
[#234 'vec4']: s#105
[#234 '~']: s#69
[#234 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#234 /0[fh]/]: s#118
[#234 /0[iu]?/]: s#115
[#234 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#234 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#234 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#234 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#234 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#234 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#234 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#234 /[1-9][0-9]*[fh]/]: s#119
[#234 /[1-9][0-9]*[iu]?/]: s#116
[#235 '@']: r#133
[#235 'array']: r#133
[#235 'atomic']: r#133
[#235 'bool']: r#133
[#235 'f16']: r#133
[#235 'f32']: r#133
[#235 'fn']: r#133
[#235 'for']: r#133
[#235 'i32']: r#133
[#235 'if']: r#133
[#235 'loop']: r#133
[#235 'mat2x2']: r#133
[#235 'mat2x3']: r#133
[#235 'mat2x4']: r#133
[#235 'mat3x2']: r#133
[#235 'mat3x3']: r#133
[#235 'mat3x4']: r#133
[#235 'mat4x2']: r#133
[#235 'mat4x3']: r#133
[#235 'mat4x4']: r#133
[#235 'override']: r#133
[#235 'ptr']: r#133
[#235 'sampler']: r#133
[#235 'sampler_comparison']: r#133
[#235 'switch']: r#133
[#235 'texture_1d']: r#133
[#235 'texture_2d']: r#133
[#235 'texture_2d_array']: r#133
[#235 'texture_3d']: r#133
[#235 'texture_cube']: r#133
[#235 'texture_cube_array']: r#133
[#235 'texture_depth_2d']: r#133
[#235 'texture_depth_2d_array']: r#133
[#235 'texture_depth_cube']: r#133
[#235 'texture_depth_cube_array']: r#133
[#235 'texture_depth_multisampled_2d']: r#133
[#235 'texture_multisampled_2d']: r#133
[#235 'texture_storage_1d']: r#133
[#235 'texture_storage_2d']: r#133
[#235 'texture_storage_2d_array']: r#133
[#235 'texture_storage_3d']: r#133
[#235 'u32']: r#133
[#235 'var']: r#133
[#235 'vec2']: r#133
[#235 'vec3']: r#133
[#235 'vec4']: r#133
[#235 'while']: r#133
[#235 '{']: r#133
[#235 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#133
[#236 'frag_depth']: s#246
[#236 'front_facing']: s#245
[#236 'global_invocation_id']: s#249
[#236 'instance_index']: s#243
[#236 'local_invocation_id']: s#247
[#236 'local_invocation_index']: s#248
[#236 'num_workgroups']: s#251
[#236 'position']: s#244
[#236 'sample_index']: s#252
[#236 'sample_mask']: s#253
[#236 'vertex_index']: s#242
[#236 'workgroup_id']: s#250
[#237 '!']: s#68
[#237 '&']: s#71
[#237 '(']: s#83
[#237 '*']: s#70
[#237 '-']: s#67
[#237 'array']: s#87
[#237 'atomic']: s#101
[#237 'bitcast']: s#77
[#237 'bool']: s#94
[#237 'f16']: s#96
[#237 'f32']: s#95
[#237 'false']: s#93
[#237 'i32']: s#97
[#237 'mat2x2']: s#106
[#237 'mat2x3']: s#107
[#237 'mat2x4']: s#108
[#237 'mat3x2']: s#109
[#237 'mat3x3']: s#110
[#237 'mat3x4']: s#111
[#237 'mat4x2']: s#112
[#237 'mat4x3']: s#113
[#237 'mat4x4']: s#114
[#237 'ptr']: s#99
[#237 'sampler']: s#131
[#237 'sampler_comparison']: s#132
[#237 'texture_1d']: s#138
[#237 'texture_2d']: s#139
[#237 'texture_2d_array']: s#140
[#237 'texture_3d']: s#141
[#237 'texture_cube']: s#142
[#237 'texture_cube_array']: s#143
[#237 'texture_depth_2d']: s#133
[#237 'texture_depth_2d_array']: s#134
[#237 'texture_depth_cube']: s#135
[#237 'texture_depth_cube_array']: s#136
[#237 'texture_depth_multisampled_2d']: s#137
[#237 'texture_multisampled_2d']: s#144
[#237 'texture_storage_1d']: s#145
[#237 'texture_storage_2d']: s#146
[#237 'texture_storage_2d_array']: s#147
[#237 'texture_storage_3d']: s#148
[#237 'true']: s#92
[#237 'u32']: s#98
[#237 'vec2']: s#103
[#237 'vec3']: s#104
[#237 'vec4']: s#105
[#237 '~']: s#69
[#237 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#237 /0[fh]/]: s#118
[#237 /0[iu]?/]: s#115
[#237 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#237 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#237 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#237 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#237 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#237 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#237 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#237 /[1-9][0-9]*[fh]/]: s#119
[#237 /[1-9][0-9]*[iu]?/]: s#116
[#238 '!']: s#68
[#238 '&']: s#71
[#238 '(']: s#83
[#238 '*']: s#70
[#238 '-']: s#67
[#238 'array']: s#87
[#238 'atomic']: s#101
[#238 'bitcast']: s#77
[#238 'bool']: s#94
[#238 'f16']: s#96
[#238 'f32']: s#95
[#238 'false']: s#93
[#238 'i32']: s#97
[#238 'mat2x2']: s#106
[#238 'mat2x3']: s#107
[#238 'mat2x4']: s#108
[#238 'mat3x2']: s#109
[#238 'mat3x3']: s#110
[#238 'mat3x4']: s#111
[#238 'mat4x2']: s#112
[#238 'mat4x3']: s#113
[#238 'mat4x4']: s#114
[#238 'ptr']: s#99
[#238 'sampler']: s#131
[#238 'sampler_comparison']: s#132
[#238 'texture_1d']: s#138
[#238 'texture_2d']: s#139
[#238 'texture_2d_array']: s#140
[#238 'texture_3d']: s#141
[#238 'texture_cube']: s#142
[#238 'texture_cube_array']: s#143
[#238 'texture_depth_2d']: s#133
[#238 'texture_depth_2d_array']: s#134
[#238 'texture_depth_cube']: s#135
[#238 'texture_depth_cube_array']: s#136
[#238 'texture_depth_multisampled_2d']: s#137
[#238 'texture_multisampled_2d']: s#144
[#238 'texture_storage_1d']: s#145
[#238 'texture_storage_2d']: s#146
[#238 'texture_storage_2d_array']: s#147
[#238 'texture_storage_3d']: s#148
[#238 'true']: s#92
[#238 'u32']: s#98
[#238 'vec2']: s#103
[#238 'vec3']: s#104
[#238 'vec4']: s#105
[#238 '~']: s#69
[#238 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#238 /0[fh]/]: s#118
[#238 /0[iu]?/]: s#115
[#238 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#238 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#238 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#238 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#238 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#238 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#238 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#238 /[1-9][0-9]*[fh]/]: s#119
[#238 /[1-9][0-9]*[iu]?/]: s#116
[#239 ',']: s#351
[#240 ',']: s#351
[#241 ',']: s#351
[#242 ')']: r#134
[#242 ',']: r#134
[#243 ')']: r#135
[#243 ',']: r#135
[#244 ')']: r#136
[#244 ',']: r#136
[#245 ')']: r#137
[#245 ',']: r#137
[#246 ')']: r#138
[#246 ',']: r#138
[#247 ')']: r#139
[#247 ',']: r#139
[#248 ')']: r#140
[#248 ',']: r#140
[#249 ')']: r#141
[#249 ',']: r#141
[#250 ')']: r#142
[#250 ',']: r#142
[#251 ')']: r#143
[#251 ',']: r#143
[#252 ')']: r#144
[#252 ',']: r#144
[#253 ')']: r#145
[#253 ',']: r#145
[#254 ',']: s#351
[#255 ',']: s#351
[#256 ',']: s#438
[#257 ')']: r#146
[#257 ',']: r#146
[#258 ')']: r#147
[#258 ',']: r#147
[#259 ')']: r#148
[#259 ',']: r#148
[#260 ',']: s#351
[#261 ',']: s#351
[#262 ',']: s#434
[#263 ')']: r#149
[#263 ',']: r#149
[#263 ':']: r#149
[#263 ';']: r#149
[#263 '@']: r#149
[#263 ']']: r#149
[#263 '{']: r#149
[#263 '||']: r#150
[#264 '!=']: r#31
[#264 '%']: r#31
[#264 '&&']: r#31
[#264 ')']: r#31
[#264 '*']: r#31
[#264 '+']: r#31
[#264 ',']: r#31
[#264 '-']: r#31
[#264 '/']: r#31
[#264 ':']: r#31
[#264 ';']: r#31
[#264 '<']: r#31
[#264 '<<']: s#213
[#264 '<=']: r#31
[#264 '==']: r#31
[#264 '>']: r#31
[#264 '>=']: r#31
[#264 '>>']: s#214
[#264 '@']: r#31
[#264 ']']: r#31
[#264 '{']: r#31
[#264 '||']: r#31
[#265 '&&']: r#152
[#265 ')']: r#151
[#265 ',']: r#151
[#265 ':']: r#151
[#265 ';']: r#151
[#265 '@']: r#151
[#265 ']']: r#151
[#265 '{']: r#151
[#266 '&&']: r#153
[#266 ')']: r#153
[#266 ',']: r#153
[#266 ':']: r#153
[#266 ';']: r#153
[#266 '@']: r#153
[#266 ']']: r#153
[#266 '{']: r#153
[#266 '||']: r#153
[#267 '&&']: r#154
[#267 ')']: r#154
[#267 ',']: r#154
[#267 ':']: r#154
[#267 ';']: r#154
[#267 '@']: r#154
[#267 ']']: r#154
[#267 '{']: r#154
[#267 '||']: r#154
[#268 '&&']: r#155
[#268 ')']: r#155
[#268 ',']: r#155
[#268 ':']: r#155
[#268 ';']: r#155
[#268 '@']: r#155
[#268 ']']: r#155
[#268 '{']: r#155
[#268 '||']: r#155
[#269 '&&']: r#156
[#269 ')']: r#156
[#269 ',']: r#156
[#269 ':']: r#156
[#269 ';']: r#156
[#269 '@']: r#156
[#269 ']']: r#156
[#269 '{']: r#156
[#269 '||']: r#156
[#270 '&&']: r#157
[#270 ')']: r#157
[#270 ',']: r#157
[#270 ':']: r#157
[#270 ';']: r#157
[#270 '@']: r#157
[#270 ']']: r#157
[#270 '{']: r#157
[#270 '||']: r#157
[#271 '&&']: r#158
[#271 ')']: r#158
[#271 ',']: r#158
[#271 ':']: r#158
[#271 ';']: r#158
[#271 '@']: r#158
[#271 ']']: r#158
[#271 '{']: r#158
[#271 '||']: r#158
[#272 '&']: r#160
[#272 ')']: r#159
[#272 ',']: r#159
[#272 ':']: r#159
[#272 ';']: r#159
[#272 '>']: r#159
[#272 '@']: r#159
[#272 ']']: r#159
[#272 '{']: r#159
[#273 ')']: r#161
[#273 ',']: r#161
[#273 ':']: r#161
[#273 ';']: r#161
[#273 '>']: r#161
[#273 '@']: r#161
[#273 ']']: r#161
[#273 '{']: r#161
[#273 '|']: r#162
[#274 ')']: r#163
[#274 ',']: r#163
[#274 ':']: r#163
[#274 ';']: r#163
[#274 '>']: r#163
[#274 '@']: r#163
[#274 ']']: r#163
[#274 '^']: r#164
[#274 '{']: r#163
[#275 '!=']: r#165
[#275 '%']: s#212
[#275 '&&']: r#165
[#275 ')']: r#165
[#275 '*']: s#210
[#275 '+']: r#165
[#275 ',']: r#165
[#275 '-']: r#165
[#275 '/']: s#211
[#275 ':']: r#165
[#275 ';']: r#165
[#275 '<']: r#165
[#275 '<=']: r#165
[#275 '==']: r#165
[#275 '>']: r#165
[#275 '>=']: r#165
[#275 '@']: r#165
[#275 ']']: r#165
[#275 '{']: r#165
[#275 '||']: r#165
[#276 '!=']: r#31
[#276 '%']: r#31
[#276 '&&']: r#31
[#276 ')']: r#31
[#276 '*']: r#31
[#276 '+']: r#31
[#276 ',']: r#31
[#276 '-']: r#31
[#276 '/']: r#31
[#276 ':']: r#31
[#276 ';']: r#31
[#276 '<']: r#31
[#276 '<=']: r#31
[#276 '==']: r#31
[#276 '>']: r#31
[#276 '>=']: r#31
[#276 '@']: r#31
[#276 ']']: r#31
[#276 '{']: r#31
[#276 '||']: r#31
[#277 '!=']: r#166
[#277 '&&']: r#166
[#277 ')']: r#166
[#277 ',']: r#166
[#277 ':']: r#166
[#277 ';']: r#166
[#277 '<']: r#166
[#277 '<=']: r#166
[#277 '==']: r#166
[#277 '>']: r#166
[#277 '>=']: r#166
[#277 '@']: r#166
[#277 ']']: r#166
[#277 '{']: r#166
[#277 '||']: r#166
[#278 '!=']: r#167
[#278 '&&']: r#167
[#278 ')']: r#167
[#278 ',']: r#167
[#278 ':']: r#167
[#278 ';']: r#167
[#278 '<']: r#167
[#278 '<=']: r#167
[#278 '==']: r#167
[#278 '>']: r#167
[#278 '>=']: r#167
[#278 '@']: r#167
[#278 ']']: r#167
[#278 '{']: r#167
[#278 '||']: r#167
[#279 '!=']: r#168
[#279 '%']: r#168
[#279 '&&']: r#168
[#279 ')']: r#168
[#279 '*']: r#168
[#279 '+']: r#168
[#279 ',']: r#168
[#279 '-']: r#168
[#279 '/']: r#168
[#279 ':']: r#168
[#279 ';']: r#168
[#279 '<']: r#168
[#279 '<=']: r#168
[#279 '==']: r#168
[#279 '>']: r#168
[#279 '>=']: r#168
[#279 '@']: r#168
[#279 ']']: r#168
[#279 '{']: r#168
[#279 '||']: r#168
[#280 '.']: s#203
[#280 '[']: s#202
[#281 '.']: s#203
[#281 '[']: s#202
[#282 '!=']: r#169
[#282 '%']: r#169
[#282 '%=']: r#169
[#282 '&&']: r#169
[#282 '&']: r#169
[#282 '&=']: r#169
[#282 ')']: r#169
[#282 '*']: r#169
[#282 '*=']: r#169
[#282 '+']: r#169
[#282 '++']: r#169
[#282 '+=']: r#169
[#282 ',']: r#169
[#282 '-']: r#169
[#282 '--']: r#169
[#282 '-=']: r#169
[#282 '.']: r#169
[#282 '/']: r#169
[#282 '/=']: r#169
[#282 ':']: r#169
[#282 ';']: r#169
[#282 '<']: r#169
[#282 '<<']: r#169
[#282 '<<=']: r#169
[#282 '<=']: r#169
[#282 '=']: r#169
[#282 '==']: r#169
[#282 '>']: r#169
[#282 '>=']: r#169
[#282 '>>']: r#169
[#282 '>>=']: r#169
[#282 '@']: r#169
[#282 '[']: r#169
[#282 ']']: r#169
[#282 '^']: r#169
[#282 '^=']: r#169
[#282 '{']: r#169
[#282 '|']: r#169
[#282 '|=']: r#169
[#282 '||']: r#169
[#283 '!=']: r#170
[#283 '%']: r#170
[#283 '%=']: r#170
[#283 '&&']: r#170
[#283 '&']: r#170
[#283 '&=']: r#170
[#283 ')']: r#170
[#283 '*']: r#170
[#283 '*=']: r#170
[#283 '+']: r#170
[#283 '++']: r#170
[#283 '+=']: r#170
[#283 ',']: r#170
[#283 '-']: r#170
[#283 '--']: r#170
[#283 '-=']: r#170
[#283 '.']: r#170
[#283 '/']: r#170
[#283 '/=']: r#170
[#283 ':']: r#170
[#283 ';']: r#170
[#283 '<']: r#170
[#283 '<<']: r#170
[#283 '<<=']: r#170
[#283 '<=']: r#170
[#283 '=']: r#170
[#283 '==']: r#170
[#283 '>']: r#170
[#283 '>=']: r#170
[#283 '>>']: r#170
[#283 '>>=']: r#170
[#283 '@']: r#170
[#283 '[']: r#170
[#283 ']']: r#170
[#283 '^']: r#170
[#283 '^=']: r#170
[#283 '{']: r#170
[#283 '|']: r#170
[#283 '|=']: r#170
[#283 '||']: r#170
[#284 '!=']: r#171
[#284 '%']: r#171
[#284 '%=']: r#171
[#284 '&&']: r#171
[#284 '&']: r#171
[#284 '&=']: r#171
[#284 ')']: r#171
[#284 '*']: r#171
[#284 '*=']: r#171
[#284 '+']: r#171
[#284 '++']: r#171
[#284 '+=']: r#171
[#284 ',']: r#171
[#284 '-']: r#171
[#284 '--']: r#171
[#284 '-=']: r#171
[#284 '.']: r#171
[#284 '/']: r#171
[#284 '/=']: r#171
[#284 ':']: r#171
[#284 ';']: r#171
[#284 '<']: r#171
[#284 '<<']: r#171
[#284 '<<=']: r#171
[#284 '<=']: r#171
[#284 '=']: r#171
[#284 '==']: r#171
[#284 '>']: r#171
[#284 '>=']: r#171
[#284 '>>']: r#171
[#284 '>>=']: r#171
[#284 '@']: r#171
[#284 '[']: r#171
[#284 ']']: r#171
[#284 '^']: r#171
[#284 '^=']: r#171
[#284 '{']: r#171
[#284 '|']: r#171
[#284 '|=']: r#171
[#284 '||']: r#171
[#285 '!=']: r#172
[#285 '%']: r#172
[#285 '%=']: r#172
[#285 '&&']: r#172
[#285 '&']: r#172
[#285 '&=']: r#172
[#285 ')']: r#172
[#285 '*']: r#172
[#285 '*=']: r#172
[#285 '+']: r#172
[#285 '++']: r#172
[#285 '+=']: r#172
[#285 ',']: r#172
[#285 '-']: r#172
[#285 '--']: r#172
[#285 '-=']: r#172
[#285 '.']: r#172
[#285 '/']: r#172
[#285 '/=']: r#172
[#285 ':']: r#172
[#285 ';']: r#172
[#285 '<']: r#172
[#285 '<<']: r#172
[#285 '<<=']: r#172
[#285 '<=']: r#172
[#285 '=']: r#172
[#285 '==']: r#172
[#285 '>']: r#172
[#285 '>=']: r#172
[#285 '>>']: r#172
[#285 '>>=']: r#172
[#285 '@']: r#172
[#285 '[']: r#172
[#285 ']']: r#172
[#285 '^']: r#172
[#285 '^=']: r#172
[#285 '{']: r#172
[#285 '|']: r#172
[#285 '|=']: r#172
[#285 '||']: r#172
[#286 '!=']: r#173
[#286 '%']: r#173
[#286 '%=']: r#173
[#286 '&&']: r#173
[#286 '&']: r#173
[#286 '&=']: r#173
[#286 ')']: r#173
[#286 '*']: r#173
[#286 '*=']: r#173
[#286 '+']: r#173
[#286 '++']: r#173
[#286 '+=']: r#173
[#286 ',']: r#173
[#286 '-']: r#173
[#286 '--']: r#173
[#286 '-=']: r#173
[#286 '.']: r#173
[#286 '/']: r#173
[#286 '/=']: r#173
[#286 ':']: r#173
[#286 ';']: r#173
[#286 '<']: r#173
[#286 '<<']: r#173
[#286 '<<=']: r#173
[#286 '<=']: r#173
[#286 '=']: r#173
[#286 '==']: r#173
[#286 '>']: r#173
[#286 '>=']: r#173
[#286 '>>']: r#173
[#286 '>>=']: r#173
[#286 '@']: r#173
[#286 '[']: r#173
[#286 ']']: r#173
[#286 '^']: r#173
[#286 '^=']: r#173
[#286 '{']: r#173
[#286 '|']: r#173
[#286 '|=']: r#173
[#286 '||']: r#173
[#287 '!=']: r#174
[#287 '%']: r#174
[#287 '%=']: r#174
[#287 '&&']: r#174
[#287 '&']: r#174
[#287 '&=']: r#174
[#287 ')']: r#174
[#287 '*']: r#174
[#287 '*=']: r#174
[#287 '+']: r#174
[#287 '++']: r#174
[#287 '+=']: r#174
[#287 ',']: r#174
[#287 '-']: r#174
[#287 '--']: r#174
[#287 '-=']: r#174
[#287 '.']: r#174
[#287 '/']: r#174
[#287 '/=']: r#174
[#287 ':']: r#174
[#287 ';']: r#174
[#287 '<']: r#174
[#287 '<<']: r#174
[#287 '<<=']: r#174
[#287 '<=']: r#174
[#287 '=']: r#174
[#287 '==']: r#174
[#287 '>']: r#174
[#287 '>=']: r#174
[#287 '>>']: r#174
[#287 '>>=']: r#174
[#287 '@']: r#174
[#287 '[']: r#174
[#287 ']']: r#174
[#287 '^']: r#174
[#287 '^=']: r#174
[#287 '{']: r#174
[#287 '|']: r#174
[#287 '|=']: r#174
[#287 '||']: r#174
[#288 '!=']: r#175
[#288 '%']: r#175
[#288 '%=']: r#175
[#288 '&&']: r#175
[#288 '&']: r#175
[#288 '&=']: r#175
[#288 ')']: r#175
[#288 '*']: r#175
[#288 '*=']: r#175
[#288 '+']: r#175
[#288 '++']: r#175
[#288 '+=']: r#175
[#288 ',']: r#175
[#288 '-']: r#175
[#288 '--']: r#175
[#288 '-=']: r#175
[#288 '.']: r#175
[#288 '/']: r#175
[#288 '/=']: r#175
[#288 ':']: r#175
[#288 ';']: r#175
[#288 '<']: r#175
[#288 '<<']: r#175
[#288 '<<=']: r#175
[#288 '<=']: r#175
[#288 '=']: r#175
[#288 '==']: r#175
[#288 '>']: r#175
[#288 '>=']: r#175
[#288 '>>']: r#175
[#288 '>>=']: r#175
[#288 '@']: r#175
[#288 '[']: r#175
[#288 ']']: r#175
[#288 '^']: r#175
[#288 '^=']: r#175
[#288 '{']: r#175
[#288 '|']: r#175
[#288 '|=']: r#175
[#288 '||']: r#175
[#289 '!=']: r#176
[#289 '%']: r#176
[#289 '%=']: r#176
[#289 '&&']: r#176
[#289 '&']: r#176
[#289 '&=']: r#176
[#289 ')']: r#176
[#289 '*']: r#176
[#289 '*=']: r#176
[#289 '+']: r#176
[#289 '++']: r#176
[#289 '+=']: r#176
[#289 ',']: r#176
[#289 '-']: r#176
[#289 '--']: r#176
[#289 '-=']: r#176
[#289 '.']: r#176
[#289 '/']: r#176
[#289 '/=']: r#176
[#289 ':']: r#176
[#289 ';']: r#176
[#289 '<']: r#176
[#289 '<<']: r#176
[#289 '<<=']: r#176
[#289 '<=']: r#176
[#289 '=']: r#176
[#289 '==']: r#176
[#289 '>']: r#176
[#289 '>=']: r#176
[#289 '>>']: r#176
[#289 '>>=']: r#176
[#289 '@']: r#176
[#289 '[']: r#176
[#289 ']']: r#176
[#289 '^']: r#176
[#289 '^=']: r#176
[#289 '{']: r#176
[#289 '|']: r#176
[#289 '|=']: r#176
[#289 '||']: r#176
[#290 '!=']: r#177
[#290 '%']: r#177
[#290 '%=']: r#177
[#290 '&&']: r#177
[#290 '&']: r#177
[#290 '&=']: r#177
[#290 ')']: r#177
[#290 '*']: r#177
[#290 '*=']: r#177
[#290 '+']: r#177
[#290 '++']: r#177
[#290 '+=']: r#177
[#290 ',']: r#177
[#290 '-']: r#177
[#290 '--']: r#177
[#290 '-=']: r#177
[#290 '.']: r#177
[#290 '/']: r#177
[#290 '/=']: r#177
[#290 ':']: r#177
[#290 ';']: r#177
[#290 '<']: r#177
[#290 '<<']: r#177
[#290 '<<=']: r#177
[#290 '<=']: r#177
[#290 '=']: r#177
[#290 '==']: r#177
[#290 '>']: r#177
[#290 '>=']: r#177
[#290 '>>']: r#177
[#290 '>>=']: r#177
[#290 '@']: r#177
[#290 '[']: r#177
[#290 ']']: r#177
[#290 '^']: r#177
[#290 '^=']: r#177
[#290 '{']: r#177
[#290 '|']: r#177
[#290 '|=']: r#177
[#290 '||']: r#177
[#291 ']']: s#428
[#292 '>']: s#427
[#293 ')']: r#178
[#293 ',']: r#178
[#293 ';']: r#178
[#293 '=']: r#178
[#293 '>']: r#178
[#293 '@']: r#178
[#293 '{']: r#178
[#293 '}']: r#178
[#294 ')']: r#179
[#294 ',']: r#179
[#294 ';']: r#179
[#294 '=']: r#179
[#294 '>']: r#179
[#294 '@']: r#179
[#294 '{']: r#179
[#294 '}']: r#179
[#295 '<']: s#195
[#296 '<']: s#194
[#297 '<']: s#193
[#298 ')']: s#426
[#299 ')']: r#180
[#300 ',']: s#425
[#301 '!=']: r#181
[#301 '%']: r#181
[#301 '&&']: r#181
[#301 '&']: r#181
[#301 ')']: r#181
[#301 '*']: r#181
[#301 '+']: r#181
[#301 ',']: r#181
[#301 '-']: r#181
[#301 '.']: r#181
[#301 '/']: r#181
[#301 ':']: r#181
[#301 ';']: r#181
[#301 '<']: r#181
[#301 '<<']: r#181
[#301 '<=']: r#181
[#301 '==']: r#181
[#301 '>']: r#181
[#301 '>=']: r#181
[#301 '>>']: r#181
[#301 '@']: r#181
[#301 '[']: r#181
[#301 ']']: r#181
[#301 '^']: r#181
[#301 '{']: r#181
[#301 '|']: r#181
[#301 '||']: r#181
[#302 '>']: s#421
[#303 '>']: s#420
[#304 ',']: s#419
[#305 ',']: s#417
[#306 ',']: r#182
[#306 '>']: r#182
[#307 ',']: r#183
[#307 '>']: r#183
[#308 ',']: r#184
[#308 '>']: r#184
[#309 ',']: r#185
[#309 '>']: r#185
[#310 ',']: r#186
[#310 '>']: r#186
[#311 '>']: s#416
[#312 '>']: s#415
[#313 '>']: s#414
[#314 ',']: s#413
[#315 ',']: r#187
[#316 ',']: r#188
[#317 ',']: r#189
[#318 ',']: r#190
[#319 ',']: r#191
[#320 ',']: r#192
[#321 ',']: r#193
[#322 ',']: r#194
[#323 ',']: r#195
[#324 ',']: r#196
[#325 ',']: r#197
[#326 ',']: r#198
[#327 ',']: r#199
[#328 ',']: r#200
[#329 ',']: r#201
[#330 ',']: r#202
[#331 ',']: r#203
[#332 '{']: r#204
[#333 '&']: s#411
[#333 '(']: s#412
[#333 '*']: s#410
[#333 ';']: s#370
[#333 '@']: s#35
[#333 '_']: s#407
[#333 'array']: s#87
[#333 'atomic']: s#101
[#333 'bool']: s#94
[#333 'break']: s#395
[#333 'const']: s#394
[#333 'const_assert']: s#30
[#333 'continue']: s#396
[#333 'discard']: s#381
[#333 'f16']: s#96
[#333 'f32']: s#95
[#333 'i32']: s#97
[#333 'let']: s#393
[#333 'mat2x2']: s#106
[#333 'mat2x3']: s#107
[#333 'mat2x4']: s#108
[#333 'mat3x2']: s#109
[#333 'mat3x3']: s#110
[#333 'mat3x4']: s#111
[#333 'mat4x2']: s#112
[#333 'mat4x3']: s#113
[#333 'mat4x4']: s#114
[#333 'ptr']: s#99
[#333 'return']: s#385
[#333 'sampler']: s#131
[#333 'sampler_comparison']: s#132
[#333 'texture_1d']: s#138
[#333 'texture_2d']: s#139
[#333 'texture_2d_array']: s#140
[#333 'texture_3d']: s#141
[#333 'texture_cube']: s#142
[#333 'texture_cube_array']: s#143
[#333 'texture_depth_2d']: s#133
[#333 'texture_depth_2d_array']: s#134
[#333 'texture_depth_cube']: s#135
[#333 'texture_depth_cube_array']: s#136
[#333 'texture_depth_multisampled_2d']: s#137
[#333 'texture_multisampled_2d']: s#144
[#333 'texture_storage_1d']: s#145
[#333 'texture_storage_2d']: s#146
[#333 'texture_storage_2d_array']: s#147
[#333 'texture_storage_3d']: s#148
[#333 'u32']: s#98
[#333 'var']: s#157
[#333 'vec2']: s#103
[#333 'vec3']: s#104
[#333 'vec4']: s#105
[#333 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#334 '@']: s#35
[#335 ',']: s#360
[#336 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#282
[#337 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#205
[#338 '@']: s#35
[#339 ';']: r#206
[#340 ';']: r#207
[#341 '!']: s#68
[#341 '&']: s#71
[#341 '(']: s#83
[#341 '*']: s#70
[#341 '-']: s#67
[#341 'array']: s#87
[#341 'atomic']: s#101
[#341 'bitcast']: s#77
[#341 'bool']: s#94
[#341 'f16']: s#96
[#341 'f32']: s#95
[#341 'false']: s#93
[#341 'i32']: s#97
[#341 'mat2x2']: s#106
[#341 'mat2x3']: s#107
[#341 'mat2x4']: s#108
[#341 'mat3x2']: s#109
[#341 'mat3x3']: s#110
[#341 'mat3x4']: s#111
[#341 'mat4x2']: s#112
[#341 'mat4x3']: s#113
[#341 'mat4x4']: s#114
[#341 'ptr']: s#99
[#341 'sampler']: s#131
[#341 'sampler_comparison']: s#132
[#341 'texture_1d']: s#138
[#341 'texture_2d']: s#139
[#341 'texture_2d_array']: s#140
[#341 'texture_3d']: s#141
[#341 'texture_cube']: s#142
[#341 'texture_cube_array']: s#143
[#341 'texture_depth_2d']: s#133
[#341 'texture_depth_2d_array']: s#134
[#341 'texture_depth_cube']: s#135
[#341 'texture_depth_cube_array']: s#136
[#341 'texture_depth_multisampled_2d']: s#137
[#341 'texture_multisampled_2d']: s#144
[#341 'texture_storage_1d']: s#145
[#341 'texture_storage_2d']: s#146
[#341 'texture_storage_2d_array']: s#147
[#341 'texture_storage_3d']: s#148
[#341 'true']: s#92
[#341 'u32']: s#98
[#341 'vec2']: s#103
[#341 'vec3']: s#104
[#341 'vec4']: s#105
[#341 '~']: s#69
[#341 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#341 /0[fh]/]: s#118
[#341 /0[iu]?/]: s#115
[#341 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#341 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#341 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#341 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#341 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#341 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#341 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#341 /[1-9][0-9]*[fh]/]: s#119
[#341 /[1-9][0-9]*[iu]?/]: s#116
[#342 ';']: r#208
[#343 ';']: r#209
[#343 '=']: r#209
[#344 ';']: r#210
[#345 ',']: s#353
[#346 ';']: r#211
[#346 '=']: r#211
[#347 ',']: s#351
[#348 ')']: r#212
[#348 ',']: r#212
[#349 ';']: r#213
[#349 '@']: r#213
[#349 'array']: r#213
[#349 'atomic']: r#213
[#349 'bool']: r#213
[#349 'f16']: r#213
[#349 'f32']: r#213
[#349 'fn']: r#213
[#349 'for']: r#213
[#349 'i32']: r#213
[#349 'if']: r#213
[#349 'loop']: r#213
[#349 'mat2x2']: r#213
[#349 'mat2x3']: r#213
[#349 'mat2x4']: r#213
[#349 'mat3x2']: r#213
[#349 'mat3x3']: r#213
[#349 'mat3x4']: r#213
[#349 'mat4x2']: r#213
[#349 'mat4x3']: r#213
[#349 'mat4x4']: r#213
[#349 'override']: r#213
[#349 'ptr']: r#213
[#349 'sampler']: r#213
[#349 'sampler_comparison']: r#213
[#349 'switch']: r#213
[#349 'texture_1d']: r#213
[#349 'texture_2d']: r#213
[#349 'texture_2d_array']: r#213
[#349 'texture_3d']: r#213
[#349 'texture_cube']: r#213
[#349 'texture_cube_array']: r#213
[#349 'texture_depth_2d']: r#213
[#349 'texture_depth_2d_array']: r#213
[#349 'texture_depth_cube']: r#213
[#349 'texture_depth_cube_array']: r#213
[#349 'texture_depth_multisampled_2d']: r#213
[#349 'texture_multisampled_2d']: r#213
[#349 'texture_storage_1d']: r#213
[#349 'texture_storage_2d']: r#213
[#349 'texture_storage_2d_array']: r#213
[#349 'texture_storage_3d']: r#213
[#349 'u32']: r#213
[#349 'var']: r#213
[#349 'vec2']: r#213
[#349 'vec3']: r#213
[#349 'vec4']: r#213
[#349 'while']: r#213
[#349 '{']: r#213
[#349 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#213
[#350 ')']: s#529
[#351 ')']: r#214
[#352 '>']: s#528
[#353 'read']: s#463
[#353 'read_write']: s#465
[#353 'write']: s#464
[#354 ';']: r#215
[#355 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#216
[#356 ':']: s#526
[#357 ',']: s#525
[#358 ',']: r#217
[#358 '}']: r#217
[#359 ',']: s#360
[#360 '@']: s#35
[#361 ')']: s#521
[#362 ')']: r#218
[#363 ',']: s#520
[#364 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#365 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#219
[#366 '@']: s#35
[#367 '}']: s#514
[#368 '}']: r#220
[#369 '&']: s#411
[#369 '(']: s#412
[#369 '*']: s#410
[#369 ';']: s#370
[#369 '@']: s#35
[#369 '_']: s#407
[#369 'array']: s#87
[#369 'atomic']: s#101
[#369 'bool']: s#94
[#369 'break']: s#395
[#369 'const']: s#394
[#369 'const_assert']: s#30
[#369 'continue']: s#396
[#369 'discard']: s#381
[#369 'f16']: s#96
[#369 'f32']: s#95
[#369 'i32']: s#97
[#369 'let']: s#393
[#369 'mat2x2']: s#106
[#369 'mat2x3']: s#107
[#369 'mat2x4']: s#108
[#369 'mat3x2']: s#109
[#369 'mat3x3']: s#110
[#369 'mat3x4']: s#111
[#369 'mat4x2']: s#112
[#369 'mat4x3']: s#113
[#369 'mat4x4']: s#114
[#369 'ptr']: s#99
[#369 'return']: s#385
[#369 'sampler']: s#131
[#369 'sampler_comparison']: s#132
[#369 'texture_1d']: s#138
[#369 'texture_2d']: s#139
[#369 'texture_2d_array']: s#140
[#369 'texture_3d']: s#141
[#369 'texture_cube']: s#142
[#369 'texture_cube_array']: s#143
[#369 'texture_depth_2d']: s#133
[#369 'texture_depth_2d_array']: s#134
[#369 'texture_depth_cube']: s#135
[#369 'texture_depth_cube_array']: s#136
[#369 'texture_depth_multisampled_2d']: s#137
[#369 'texture_multisampled_2d']: s#144
[#369 'texture_storage_1d']: s#145
[#369 'texture_storage_2d']: s#146
[#369 'texture_storage_2d_array']: s#147
[#369 'texture_storage_3d']: s#148
[#369 'u32']: s#98
[#369 'var']: s#157
[#369 'vec2']: s#103
[#369 'vec3']: s#104
[#369 'vec4']: s#105
[#369 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#370 '&']: r#221
[#370 '(']: r#221
[#370 '*']: r#221
[#370 ';']: r#221
[#370 '@']: r#221
[#370 '_']: r#221
[#370 'array']: r#221
[#370 'atomic']: r#221
[#370 'bool']: r#221
[#370 'break']: r#221
[#370 'const']: r#221
[#370 'const_assert']: r#221
[#370 'continue']: r#221
[#370 'continuing']: r#221
[#370 'discard']: r#221
[#370 'f16']: r#221
[#370 'f32']: r#221
[#370 'for']: r#221
[#370 'i32']: r#221
[#370 'if']: r#221
[#370 'let']: r#221
[#370 'loop']: r#221
[#370 'mat2x2']: r#221
[#370 'mat2x3']: r#221
[#370 'mat2x4']: r#221
[#370 'mat3x2']: r#221
[#370 'mat3x3']: r#221
[#370 'mat3x4']: r#221
[#370 'mat4x2']: r#221
[#370 'mat4x3']: r#221
[#370 'mat4x4']: r#221
[#370 'ptr']: r#221
[#370 'return']: r#221
[#370 'sampler']: r#221
[#370 'sampler_comparison']: r#221
[#370 'switch']: r#221
[#370 'texture_1d']: r#221
[#370 'texture_2d']: r#221
[#370 'texture_2d_array']: r#221
[#370 'texture_3d']: r#221
[#370 'texture_cube']: r#221
[#370 'texture_cube_array']: r#221
[#370 'texture_depth_2d']: r#221
[#370 'texture_depth_2d_array']: r#221
[#370 'texture_depth_cube']: r#221
[#370 'texture_depth_cube_array']: r#221
[#370 'texture_depth_multisampled_2d']: r#221
[#370 'texture_multisampled_2d']: r#221
[#370 'texture_storage_1d']: r#221
[#370 'texture_storage_2d']: r#221
[#370 'texture_storage_2d_array']: r#221
[#370 'texture_storage_3d']: r#221
[#370 'u32']: r#221
[#370 'var']: r#221
[#370 'vec2']: r#221
[#370 'vec3']: r#221
[#370 'vec4']: r#221
[#370 'while']: r#221
[#370 '{']: r#221
[#370 '}']: r#221
[#370 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#221
[#371 ';']: s#512
[#372 '&']: r#222
[#372 '(']: r#222
[#372 '*']: r#222
[#372 ';']: r#222
[#372 '@']: r#222
[#372 '_']: r#222
[#372 'array']: r#222
[#372 'atomic']: r#222
[#372 'bool']: r#222
[#372 'break']: r#222
[#372 'const']: r#222
[#372 'const_assert']: r#222
[#372 'continue']: r#222
[#372 'continuing']: r#222
[#372 'discard']: r#222
[#372 'f16']: r#222
[#372 'f32']: r#222
[#372 'for']: r#222
[#372 'i32']: r#222
[#372 'if']: r#222
[#372 'let']: r#222
[#372 'loop']: r#222
[#372 'mat2x2']: r#222
[#372 'mat2x3']: r#222
[#372 'mat2x4']: r#222
[#372 'mat3x2']: r#222
[#372 'mat3x3']: r#222
[#372 'mat3x4']: r#222
[#372 'mat4x2']: r#222
[#372 'mat4x3']: r#222
[#372 'mat4x4']: r#222
[#372 'ptr']: r#222
[#372 'return']: r#222
[#372 'sampler']: r#222
[#372 'sampler_comparison']: r#222
[#372 'switch']: r#222
[#372 'texture_1d']: r#222
[#372 'texture_2d']: r#222
[#372 'texture_2d_array']: r#222
[#372 'texture_3d']: r#222
[#372 'texture_cube']: r#222
[#372 'texture_cube_array']: r#222
[#372 'texture_depth_2d']: r#222
[#372 'texture_depth_2d_array']: r#222
[#372 'texture_depth_cube']: r#222
[#372 'texture_depth_cube_array']: r#222
[#372 'texture_depth_multisampled_2d']: r#222
[#372 'texture_multisampled_2d']: r#222
[#372 'texture_storage_1d']: r#222
[#372 'texture_storage_2d']: r#222
[#372 'texture_storage_2d_array']: r#222
[#372 'texture_storage_3d']: r#222
[#372 'u32']: r#222
[#372 'var']: r#222
[#372 'vec2']: r#222
[#372 'vec3']: r#222
[#372 'vec4']: r#222
[#372 'while']: r#222
[#372 '{']: r#222
[#372 '}']: r#222
[#372 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#222
[#373 '&']: r#223
[#373 '(']: r#223
[#373 '*']: r#223
[#373 ';']: r#223
[#373 '@']: r#223
[#373 '_']: r#223
[#373 'array']: r#223
[#373 'atomic']: r#223
[#373 'bool']: r#223
[#373 'break']: r#223
[#373 'const']: r#223
[#373 'const_assert']: r#223
[#373 'continue']: r#223
[#373 'continuing']: r#223
[#373 'discard']: r#223
[#373 'f16']: r#223
[#373 'f32']: r#223
[#373 'for']: r#223
[#373 'i32']: r#223
[#373 'if']: r#223
[#373 'let']: r#223
[#373 'loop']: r#223
[#373 'mat2x2']: r#223
[#373 'mat2x3']: r#223
[#373 'mat2x4']: r#223
[#373 'mat3x2']: r#223
[#373 'mat3x3']: r#223
[#373 'mat3x4']: r#223
[#373 'mat4x2']: r#223
[#373 'mat4x3']: r#223
[#373 'mat4x4']: r#223
[#373 'ptr']: r#223
[#373 'return']: r#223
[#373 'sampler']: r#223
[#373 'sampler_comparison']: r#223
[#373 'switch']: r#223
[#373 'texture_1d']: r#223
[#373 'texture_2d']: r#223
[#373 'texture_2d_array']: r#223
[#373 'texture_3d']: r#223
[#373 'texture_cube']: r#223
[#373 'texture_cube_array']: r#223
[#373 'texture_depth_2d']: r#223
[#373 'texture_depth_2d_array']: r#223
[#373 'texture_depth_cube']: r#223
[#373 'texture_depth_cube_array']: r#223
[#373 'texture_depth_multisampled_2d']: r#223
[#373 'texture_multisampled_2d']: r#223
[#373 'texture_storage_1d']: r#223
[#373 'texture_storage_2d']: r#223
[#373 'texture_storage_2d_array']: r#223
[#373 'texture_storage_3d']: r#223
[#373 'u32']: r#223
[#373 'var']: r#223
[#373 'vec2']: r#223
[#373 'vec3']: r#223
[#373 'vec4']: r#223
[#373 'while']: r#223
[#373 '{']: r#223
[#373 '}']: r#223
[#373 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#223
[#374 '&']: r#224
[#374 '(']: r#224
[#374 '*']: r#224
[#374 ';']: r#224
[#374 '@']: r#224
[#374 '_']: r#224
[#374 'array']: r#224
[#374 'atomic']: r#224
[#374 'bool']: r#224
[#374 'break']: r#224
[#374 'const']: r#224
[#374 'const_assert']: r#224
[#374 'continue']: r#224
[#374 'continuing']: r#224
[#374 'discard']: r#224
[#374 'f16']: r#224
[#374 'f32']: r#224
[#374 'for']: r#224
[#374 'i32']: r#224
[#374 'if']: r#224
[#374 'let']: r#224
[#374 'loop']: r#224
[#374 'mat2x2']: r#224
[#374 'mat2x3']: r#224
[#374 'mat2x4']: r#224
[#374 'mat3x2']: r#224
[#374 'mat3x3']: r#224
[#374 'mat3x4']: r#224
[#374 'mat4x2']: r#224
[#374 'mat4x3']: r#224
[#374 'mat4x4']: r#224
[#374 'ptr']: r#224
[#374 'return']: r#224
[#374 'sampler']: r#224
[#374 'sampler_comparison']: r#224
[#374 'switch']: r#224
[#374 'texture_1d']: r#224
[#374 'texture_2d']: r#224
[#374 'texture_2d_array']: r#224
[#374 'texture_3d']: r#224
[#374 'texture_cube']: r#224
[#374 'texture_cube_array']: r#224
[#374 'texture_depth_2d']: r#224
[#374 'texture_depth_2d_array']: r#224
[#374 'texture_depth_cube']: r#224
[#374 'texture_depth_cube_array']: r#224
[#374 'texture_depth_multisampled_2d']: r#224
[#374 'texture_multisampled_2d']: r#224
[#374 'texture_storage_1d']: r#224
[#374 'texture_storage_2d']: r#224
[#374 'texture_storage_2d_array']: r#224
[#374 'texture_storage_3d']: r#224
[#374 'u32']: r#224
[#374 'var']: r#224
[#374 'vec2']: r#224
[#374 'vec3']: r#224
[#374 'vec4']: r#224
[#374 'while']: r#224
[#374 '{']: r#224
[#374 '}']: r#224
[#374 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#224
[#375 '&']: r#225
[#375 '(']: r#225
[#375 '*']: r#225
[#375 ';']: r#225
[#375 '@']: r#225
[#375 '_']: r#225
[#375 'array']: r#225
[#375 'atomic']: r#225
[#375 'bool']: r#225
[#375 'break']: r#225
[#375 'const']: r#225
[#375 'const_assert']: r#225
[#375 'continue']: r#225
[#375 'continuing']: r#225
[#375 'discard']: r#225
[#375 'f16']: r#225
[#375 'f32']: r#225
[#375 'for']: r#225
[#375 'i32']: r#225
[#375 'if']: r#225
[#375 'let']: r#225
[#375 'loop']: r#225
[#375 'mat2x2']: r#225
[#375 'mat2x3']: r#225
[#375 'mat2x4']: r#225
[#375 'mat3x2']: r#225
[#375 'mat3x3']: r#225
[#375 'mat3x4']: r#225
[#375 'mat4x2']: r#225
[#375 'mat4x3']: r#225
[#375 'mat4x4']: r#225
[#375 'ptr']: r#225
[#375 'return']: r#225
[#375 'sampler']: r#225
[#375 'sampler_comparison']: r#225
[#375 'switch']: r#225
[#375 'texture_1d']: r#225
[#375 'texture_2d']: r#225
[#375 'texture_2d_array']: r#225
[#375 'texture_3d']: r#225
[#375 'texture_cube']: r#225
[#375 'texture_cube_array']: r#225
[#375 'texture_depth_2d']: r#225
[#375 'texture_depth_2d_array']: r#225
[#375 'texture_depth_cube']: r#225
[#375 'texture_depth_cube_array']: r#225
[#375 'texture_depth_multisampled_2d']: r#225
[#375 'texture_multisampled_2d']: r#225
[#375 'texture_storage_1d']: r#225
[#375 'texture_storage_2d']: r#225
[#375 'texture_storage_2d_array']: r#225
[#375 'texture_storage_3d']: r#225
[#375 'u32']: r#225
[#375 'var']: r#225
[#375 'vec2']: r#225
[#375 'vec3']: r#225
[#375 'vec4']: r#225
[#375 'while']: r#225
[#375 '{']: r#225
[#375 '}']: r#225
[#375 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#225
[#376 '&']: r#226
[#376 '(']: r#226
[#376 '*']: r#226
[#376 ';']: r#226
[#376 '@']: r#226
[#376 '_']: r#226
[#376 'array']: r#226
[#376 'atomic']: r#226
[#376 'bool']: r#226
[#376 'break']: r#226
[#376 'const']: r#226
[#376 'const_assert']: r#226
[#376 'continue']: r#226
[#376 'continuing']: r#226
[#376 'discard']: r#226
[#376 'f16']: r#226
[#376 'f32']: r#226
[#376 'for']: r#226
[#376 'i32']: r#226
[#376 'if']: r#226
[#376 'let']: r#226
[#376 'loop']: r#226
[#376 'mat2x2']: r#226
[#376 'mat2x3']: r#226
[#376 'mat2x4']: r#226
[#376 'mat3x2']: r#226
[#376 'mat3x3']: r#226
[#376 'mat3x4']: r#226
[#376 'mat4x2']: r#226
[#376 'mat4x3']: r#226
[#376 'mat4x4']: r#226
[#376 'ptr']: r#226
[#376 'return']: r#226
[#376 'sampler']: r#226
[#376 'sampler_comparison']: r#226
[#376 'switch']: r#226
[#376 'texture_1d']: r#226
[#376 'texture_2d']: r#226
[#376 'texture_2d_array']: r#226
[#376 'texture_3d']: r#226
[#376 'texture_cube']: r#226
[#376 'texture_cube_array']: r#226
[#376 'texture_depth_2d']: r#226
[#376 'texture_depth_2d_array']: r#226
[#376 'texture_depth_cube']: r#226
[#376 'texture_depth_cube_array']: r#226
[#376 'texture_depth_multisampled_2d']: r#226
[#376 'texture_multisampled_2d']: r#226
[#376 'texture_storage_1d']: r#226
[#376 'texture_storage_2d']: r#226
[#376 'texture_storage_2d_array']: r#226
[#376 'texture_storage_3d']: r#226
[#376 'u32']: r#226
[#376 'var']: r#226
[#376 'vec2']: r#226
[#376 'vec3']: r#226
[#376 'vec4']: r#226
[#376 'while']: r#226
[#376 '{']: r#226
[#376 '}']: r#226
[#376 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#226
[#377 ';']: s#511
[#378 ';']: s#510
[#379 ';']: s#509
[#380 ';']: s#508
[#381 ';']: s#507
[#382 ';']: s#506
[#383 '&']: r#227
[#383 '(']: r#227
[#383 '*']: r#227
[#383 ';']: r#227
[#383 '@']: r#227
[#383 '_']: r#227
[#383 'array']: r#227
[#383 'atomic']: r#227
[#383 'bool']: r#227
[#383 'break']: r#227
[#383 'const']: r#227
[#383 'const_assert']: r#227
[#383 'continue']: r#227
[#383 'continuing']: r#227
[#383 'discard']: r#227
[#383 'f16']: r#227
[#383 'f32']: r#227
[#383 'for']: r#227
[#383 'i32']: r#227
[#383 'if']: r#227
[#383 'let']: r#227
[#383 'loop']: r#227
[#383 'mat2x2']: r#227
[#383 'mat2x3']: r#227
[#383 'mat2x4']: r#227
[#383 'mat3x2']: r#227
[#383 'mat3x3']: r#227
[#383 'mat3x4']: r#227
[#383 'mat4x2']: r#227
[#383 'mat4x3']: r#227
[#383 'mat4x4']: r#227
[#383 'ptr']: r#227
[#383 'return']: r#227
[#383 'sampler']: r#227
[#383 'sampler_comparison']: r#227
[#383 'switch']: r#227
[#383 'texture_1d']: r#227
[#383 'texture_2d']: r#227
[#383 'texture_2d_array']: r#227
[#383 'texture_3d']: r#227
[#383 'texture_cube']: r#227
[#383 'texture_cube_array']: r#227
[#383 'texture_depth_2d']: r#227
[#383 'texture_depth_2d_array']: r#227
[#383 'texture_depth_cube']: r#227
[#383 'texture_depth_cube_array']: r#227
[#383 'texture_depth_multisampled_2d']: r#227
[#383 'texture_multisampled_2d']: r#227
[#383 'texture_storage_1d']: r#227
[#383 'texture_storage_2d']: r#227
[#383 'texture_storage_2d_array']: r#227
[#383 'texture_storage_3d']: r#227
[#383 'u32']: r#227
[#383 'var']: r#227
[#383 'vec2']: r#227
[#383 'vec3']: r#227
[#383 'vec4']: r#227
[#383 'while']: r#227
[#383 '{']: r#227
[#383 '}']: r#227
[#383 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#227
[#384 ';']: s#505
[#385 '!']: s#68
[#385 '&']: s#71
[#385 '(']: s#83
[#385 '*']: s#70
[#385 '-']: s#67
[#385 'array']: s#87
[#385 'atomic']: s#101
[#385 'bitcast']: s#77
[#385 'bool']: s#94
[#385 'f16']: s#96
[#385 'f32']: s#95
[#385 'false']: s#93
[#385 'i32']: s#97
[#385 'mat2x2']: s#106
[#385 'mat2x3']: s#107
[#385 'mat2x4']: s#108
[#385 'mat3x2']: s#109
[#385 'mat3x3']: s#110
[#385 'mat3x4']: s#111
[#385 'mat4x2']: s#112
[#385 'mat4x3']: s#113
[#385 'mat4x4']: s#114
[#385 'ptr']: s#99
[#385 'sampler']: s#131
[#385 'sampler_comparison']: s#132
[#385 'texture_1d']: s#138
[#385 'texture_2d']: s#139
[#385 'texture_2d_array']: s#140
[#385 'texture_3d']: s#141
[#385 'texture_cube']: s#142
[#385 'texture_cube_array']: s#143
[#385 'texture_depth_2d']: s#133
[#385 'texture_depth_2d_array']: s#134
[#385 'texture_depth_cube']: s#135
[#385 'texture_depth_cube_array']: s#136
[#385 'texture_depth_multisampled_2d']: s#137
[#385 'texture_multisampled_2d']: s#144
[#385 'texture_storage_1d']: s#145
[#385 'texture_storage_2d']: s#146
[#385 'texture_storage_2d_array']: s#147
[#385 'texture_storage_3d']: s#148
[#385 'true']: s#92
[#385 'u32']: s#98
[#385 'vec2']: s#103
[#385 'vec3']: s#104
[#385 'vec4']: s#105
[#385 '~']: s#69
[#385 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#385 /0[fh]/]: s#118
[#385 /0[iu]?/]: s#115
[#385 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#385 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#385 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#385 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#385 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#385 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#385 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#385 /[1-9][0-9]*[fh]/]: s#119
[#385 /[1-9][0-9]*[iu]?/]: s#116
[#386 'if']: s#502
[#387 'switch']: s#500
[#388 'loop']: s#499
[#389 'for']: s#498
[#390 'while']: s#497
[#391 '(']: s#198
[#392 ';']: r#228
[#392 '=']: s#495
[#393 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#394 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#395 ';']: r#229
[#396 ';']: r#230
[#397 ')']: r#231
[#397 ';']: r#231
[#398 ')']: r#232
[#398 ';']: r#232
[#399 ')']: r#233
[#399 ';']: r#233
[#400 'if']: r#234
[#401 'switch']: r#235
[#402 'loop']: r#236
[#403 'for']: r#237
[#404 'while']: r#238
[#405 '%=']: r#239
[#405 '&=']: r#239
[#405 '(']: r#35
[#405 '*=']: r#239
[#405 '++']: r#239
[#405 '+=']: r#239
[#405 '--']: r#239
[#405 '-=']: r#239
[#405 '.']: r#239
[#405 '/=']: r#239
[#405 '<<=']: r#239
[#405 '=']: r#239
[#405 '>>=']: r#239
[#405 '[']: r#239
[#405 '^=']: r#239
[#405 '|=']: r#239
[#406 '%=']: s#487
[#406 '&=']: s#488
[#406 '*=']: s#485
[#406 '++']: s#479
[#406 '+=']: s#483
[#406 '--']: s#480
[#406 '-=']: s#484
[#406 '/=']: s#486
[#406 '<<=']: s#492
[#406 '=']: s#481
[#406 '>>=']: s#491
[#406 '^=']: s#490
[#406 '|=']: s#489
[#407 '=']: s#477
[#408 '@']: s#35
[#409 '.']: s#203
[#409 '[']: s#202
[#410 '&']: s#411
[#410 '(']: s#412
[#410 '*']: s#410
[#410 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#411 '&']: s#411
[#411 '(']: s#412
[#411 '*']: s#410
[#411 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#412 '&']: s#411
[#412 '(']: s#412
[#412 '*']: s#410
[#412 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#413 'read']: s#463
[#413 'read_write']: s#465
[#413 'write']: s#464
[#414 '(']: r#240
[#414 ')']: r#240
[#414 ',']: r#240
[#414 ';']: r#240
[#414 '=']: r#240
[#414 '>']: r#240
[#414 '@']: r#240
[#414 '{']: r#240
[#414 '}']: r#240
[#415 '(']: r#241
[#415 ')']: r#241
[#415 ',']: r#241
[#415 ';']: r#241
[#415 '=']: r#241
[#415 '>']: r#241
[#415 '@']: r#241
[#415 '{']: r#241
[#415 '}']: r#241
[#416 '(']: r#242
[#416 ')']: r#242
[#416 ',']: r#242
[#416 ';']: r#242
[#416 '=']: r#242
[#416 '>']: r#242
[#416 '@']: r#242
[#416 '{']: r#242
[#416 '}']: r#242
[#417 'array']: s#297
[#417 'atomic']: s#101
[#417 'bool']: s#94
[#417 'f16']: s#96
[#417 'f32']: s#95
[#417 'i32']: s#97
[#417 'mat2x2']: s#106
[#417 'mat2x3']: s#107
[#417 'mat2x4']: s#108
[#417 'mat3x2']: s#109
[#417 'mat3x3']: s#110
[#417 'mat3x4']: s#111
[#417 'mat4x2']: s#112
[#417 'mat4x3']: s#113
[#417 'mat4x4']: s#114
[#417 'ptr']: s#99
[#417 'sampler']: s#131
[#417 'sampler_comparison']: s#132
[#417 'texture_1d']: s#138
[#417 'texture_2d']: s#139
[#417 'texture_2d_array']: s#140
[#417 'texture_3d']: s#141
[#417 'texture_cube']: s#142
[#417 'texture_cube_array']: s#143
[#417 'texture_depth_2d']: s#133
[#417 'texture_depth_2d_array']: s#134
[#417 'texture_depth_cube']: s#135
[#417 'texture_depth_cube_array']: s#136
[#417 'texture_depth_multisampled_2d']: s#137
[#417 'texture_multisampled_2d']: s#144
[#417 'texture_storage_1d']: s#145
[#417 'texture_storage_2d']: s#146
[#417 'texture_storage_2d_array']: s#147
[#417 'texture_storage_3d']: s#148
[#417 'u32']: s#98
[#417 'vec2']: s#103
[#417 'vec3']: s#104
[#417 'vec4']: s#105
[#417 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#418 '>']: s#460
[#419 '!']: s#68
[#419 '&']: s#71
[#419 '(']: s#83
[#419 '*']: s#70
[#419 '-']: s#67
[#419 'array']: s#87
[#419 'atomic']: s#101
[#419 'bitcast']: s#77
[#419 'bool']: s#94
[#419 'f16']: s#96
[#419 'f32']: s#95
[#419 'false']: s#93
[#419 'i32']: s#97
[#419 'mat2x2']: s#106
[#419 'mat2x3']: s#107
[#419 'mat2x4']: s#108
[#419 'mat3x2']: s#109
[#419 'mat3x3']: s#110
[#419 'mat3x4']: s#111
[#419 'mat4x2']: s#112
[#419 'mat4x3']: s#113
[#419 'mat4x4']: s#114
[#419 'ptr']: s#99
[#419 'sampler']: s#131
[#419 'sampler_comparison']: s#132
[#419 'texture_1d']: s#138
[#419 'texture_2d']: s#139
[#419 'texture_2d_array']: s#140
[#419 'texture_3d']: s#141
[#419 'texture_cube']: s#142
[#419 'texture_cube_array']: s#143
[#419 'texture_depth_2d']: s#133
[#419 'texture_depth_2d_array']: s#134
[#419 'texture_depth_cube']: s#135
[#419 'texture_depth_cube_array']: s#136
[#419 'texture_depth_multisampled_2d']: s#137
[#419 'texture_multisampled_2d']: s#144
[#419 'texture_storage_1d']: s#145
[#419 'texture_storage_2d']: s#146
[#419 'texture_storage_2d_array']: s#147
[#419 'texture_storage_3d']: s#148
[#419 'true']: s#92
[#419 'u32']: s#98
[#419 'vec2']: s#103
[#419 'vec3']: s#104
[#419 'vec4']: s#105
[#419 '~']: s#69
[#419 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#419 /0[fh]/]: s#118
[#419 /0[iu]?/]: s#115
[#419 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#419 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#419 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#419 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#419 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#419 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#419 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#419 /[1-9][0-9]*[fh]/]: s#119
[#419 /[1-9][0-9]*[iu]?/]: s#116
[#420 '(']: r#243
[#420 ')']: r#243
[#420 ',']: r#243
[#420 ';']: r#243
[#420 '=']: r#243
[#420 '>']: r#243
[#420 '@']: r#243
[#420 '{']: r#243
[#420 '}']: r#243
[#421 '(']: r#244
[#421 ')']: r#244
[#421 ',']: r#244
[#421 ';']: r#244
[#421 '=']: r#244
[#421 '>']: r#244
[#421 '@']: r#244
[#421 '{']: r#244
[#421 '}']: r#244
[#422 ',']: s#455
[#423 ')']: r#245
[#423 ',']: r#245
[#424 ',']: s#425
[#425 '!']: s#68
[#425 '&']: s#71
[#425 '(']: s#83
[#425 '*']: s#70
[#425 '-']: s#67
[#425 'array']: s#87
[#425 'atomic']: s#101
[#425 'bitcast']: s#77
[#425 'bool']: s#94
[#425 'f16']: s#96
[#425 'f32']: s#95
[#425 'false']: s#93
[#425 'i32']: s#97
[#425 'mat2x2']: s#106
[#425 'mat2x3']: s#107
[#425 'mat2x4']: s#108
[#425 'mat3x2']: s#109
[#425 'mat3x3']: s#110
[#425 'mat3x4']: s#111
[#425 'mat4x2']: s#112
[#425 'mat4x3']: s#113
[#425 'mat4x4']: s#114
[#425 'ptr']: s#99
[#425 'sampler']: s#131
[#425 'sampler_comparison']: s#132
[#425 'texture_1d']: s#138
[#425 'texture_2d']: s#139
[#425 'texture_2d_array']: s#140
[#425 'texture_3d']: s#141
[#425 'texture_cube']: s#142
[#425 'texture_cube_array']: s#143
[#425 'texture_depth_2d']: s#133
[#425 'texture_depth_2d_array']: s#134
[#425 'texture_depth_cube']: s#135
[#425 'texture_depth_cube_array']: s#136
[#425 'texture_depth_multisampled_2d']: s#137
[#425 'texture_multisampled_2d']: s#144
[#425 'texture_storage_1d']: s#145
[#425 'texture_storage_2d']: s#146
[#425 'texture_storage_2d_array']: s#147
[#425 'texture_storage_3d']: s#148
[#425 'true']: s#92
[#425 'u32']: s#98
[#425 'vec2']: s#103
[#425 'vec3']: s#104
[#425 'vec4']: s#105
[#425 '~']: s#69
[#425 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#425 /0[fh]/]: s#118
[#425 /0[iu]?/]: s#115
[#425 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#425 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#425 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#425 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#425 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#425 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#425 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#425 /[1-9][0-9]*[fh]/]: s#119
[#425 /[1-9][0-9]*[iu]?/]: s#116
[#426 '!=']: r#246
[#426 '%']: r#246
[#426 '&&']: r#246
[#426 '&']: r#246
[#426 ')']: r#246
[#426 '*']: r#246
[#426 '+']: r#246
[#426 ',']: r#246
[#426 '-']: r#246
[#426 '.']: r#246
[#426 '/']: r#246
[#426 ':']: r#246
[#426 ';']: r#246
[#426 '<']: r#246
[#426 '<<']: r#246
[#426 '<=']: r#246
[#426 '==']: r#246
[#426 '>']: r#246
[#426 '>=']: r#246
[#426 '>>']: r#246
[#426 '@']: r#246
[#426 '[']: r#246
[#426 ']']: r#246
[#426 '^']: r#246
[#426 '{']: r#246
[#426 '|']: r#246
[#426 '||']: r#246
[#427 '(']: s#83
[#428 '.']: s#203
[#428 '[']: s#202
[#429 '!=']: r#247
[#429 '%']: r#247
[#429 '%=']: r#247
[#429 '&&']: r#247
[#429 '&']: r#247
[#429 '&=']: r#247
[#429 ')']: r#247
[#429 '*']: r#247
[#429 '*=']: r#247
[#429 '+']: r#247
[#429 '++']: r#247
[#429 '+=']: r#247
[#429 ',']: r#247
[#429 '-']: r#247
[#429 '--']: r#247
[#429 '-=']: r#247
[#429 '/']: r#247
[#429 '/=']: r#247
[#429 ':']: r#247
[#429 ';']: r#247
[#429 '<']: r#247
[#429 '<<']: r#247
[#429 '<<=']: r#247
[#429 '<=']: r#247
[#429 '=']: r#247
[#429 '==']: r#247
[#429 '>']: r#247
[#429 '>=']: r#247
[#429 '>>']: r#247
[#429 '>>=']: r#247
[#429 '@']: r#247
[#429 ']']: r#247
[#429 '^']: r#247
[#429 '^=']: r#247
[#429 '{']: r#247
[#429 '|']: r#247
[#429 '|=']: r#247
[#429 '||']: r#247
[#430 '!=']: r#248
[#430 '%']: r#248
[#430 '%=']: r#248
[#430 '&&']: r#248
[#430 '&']: r#248
[#430 '&=']: r#248
[#430 ')']: r#248
[#430 '*']: r#248
[#430 '*=']: r#248
[#430 '+']: r#248
[#430 '++']: r#248
[#430 '+=']: r#248
[#430 ',']: r#248
[#430 '-']: r#248
[#430 '--']: r#248
[#430 '-=']: r#248
[#430 '/']: r#248
[#430 '/=']: r#248
[#430 ':']: r#248
[#430 ';']: r#248
[#430 '<']: r#248
[#430 '<<']: r#248
[#430 '<<=']: r#248
[#430 '<=']: r#248
[#430 '=']: r#248
[#430 '==']: r#248
[#430 '>']: r#248
[#430 '>=']: r#248
[#430 '>>']: r#248
[#430 '>>=']: r#248
[#430 '@']: r#248
[#430 ']']: r#248
[#430 '^']: r#248
[#430 '^=']: r#248
[#430 '{']: r#248
[#430 '|']: r#248
[#430 '|=']: r#248
[#430 '||']: r#248
[#431 '!=']: r#249
[#431 '%']: r#249
[#431 '%=']: r#249
[#431 '&&']: r#249
[#431 '&']: r#249
[#431 '&=']: r#249
[#431 ')']: r#249
[#431 '*']: r#249
[#431 '*=']: r#249
[#431 '+']: r#249
[#431 '++']: r#249
[#431 '+=']: r#249
[#431 ',']: r#249
[#431 '-']: r#249
[#431 '--']: r#249
[#431 '-=']: r#249
[#431 '/']: r#249
[#431 '/=']: r#249
[#431 ':']: r#249
[#431 ';']: r#249
[#431 '<']: r#249
[#431 '<<']: r#249
[#431 '<<=']: r#249
[#431 '<=']: r#249
[#431 '=']: r#249
[#431 '==']: r#249
[#431 '>']: r#249
[#431 '>=']: r#249
[#431 '>>']: r#249
[#431 '>>=']: r#249
[#431 '@']: r#249
[#431 ']']: r#249
[#431 '^']: r#249
[#431 '^=']: r#249
[#431 '{']: r#249
[#431 '|']: r#249
[#431 '|=']: r#249
[#431 '||']: r#249
[#432 '!=']: r#250
[#432 '%']: r#250
[#432 '%=']: r#250
[#432 '&&']: r#250
[#432 '&']: r#250
[#432 '&=']: r#250
[#432 ')']: r#250
[#432 '*']: r#250
[#432 '*=']: r#250
[#432 '+']: r#250
[#432 '++']: r#250
[#432 '+=']: r#250
[#432 ',']: r#250
[#432 '-']: r#250
[#432 '--']: r#250
[#432 '-=']: r#250
[#432 '/']: r#250
[#432 '/=']: r#250
[#432 ':']: r#250
[#432 ';']: r#250
[#432 '<']: r#250
[#432 '<<']: r#250
[#432 '<<=']: r#250
[#432 '<=']: r#250
[#432 '=']: r#250
[#432 '==']: r#250
[#432 '>']: r#250
[#432 '>=']: r#250
[#432 '>>']: r#250
[#432 '>>=']: r#250
[#432 '@']: r#250
[#432 ']']: r#250
[#432 '^']: r#250
[#432 '^=']: r#250
[#432 '{']: r#250
[#432 '|']: r#250
[#432 '|=']: r#250
[#432 '||']: r#250
[#433 '@']: r#251
[#433 'array']: r#251
[#433 'atomic']: r#251
[#433 'bool']: r#251
[#433 'f16']: r#251
[#433 'f32']: r#251
[#433 'fn']: r#251
[#433 'for']: r#251
[#433 'i32']: r#251
[#433 'if']: r#251
[#433 'loop']: r#251
[#433 'mat2x2']: r#251
[#433 'mat2x3']: r#251
[#433 'mat2x4']: r#251
[#433 'mat3x2']: r#251
[#433 'mat3x3']: r#251
[#433 'mat3x4']: r#251
[#433 'mat4x2']: r#251
[#433 'mat4x3']: r#251
[#433 'mat4x4']: r#251
[#433 'override']: r#251
[#433 'ptr']: r#251
[#433 'sampler']: r#251
[#433 'sampler_comparison']: r#251
[#433 'switch']: r#251
[#433 'texture_1d']: r#251
[#433 'texture_2d']: r#251
[#433 'texture_2d_array']: r#251
[#433 'texture_3d']: r#251
[#433 'texture_cube']: r#251
[#433 'texture_cube_array']: r#251
[#433 'texture_depth_2d']: r#251
[#433 'texture_depth_2d_array']: r#251
[#433 'texture_depth_cube']: r#251
[#433 'texture_depth_cube_array']: r#251
[#433 'texture_depth_multisampled_2d']: r#251
[#433 'texture_multisampled_2d']: r#251
[#433 'texture_storage_1d']: r#251
[#433 'texture_storage_2d']: r#251
[#433 'texture_storage_2d_array']: r#251
[#433 'texture_storage_3d']: r#251
[#433 'u32']: r#251
[#433 'var']: r#251
[#433 'vec2']: r#251
[#433 'vec3']: r#251
[#433 'vec4']: r#251
[#433 'while']: r#251
[#433 '{']: r#251
[#433 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#251
[#434 '!']: s#68
[#434 '&']: s#71
[#434 '(']: s#83
[#434 ')']: r#214
[#434 '*']: s#70
[#434 '-']: s#67
[#434 'array']: s#87
[#434 'atomic']: s#101
[#434 'bitcast']: s#77
[#434 'bool']: s#94
[#434 'f16']: s#96
[#434 'f32']: s#95
[#434 'false']: s#93
[#434 'i32']: s#97
[#434 'mat2x2']: s#106
[#434 'mat2x3']: s#107
[#434 'mat2x4']: s#108
[#434 'mat3x2']: s#109
[#434 'mat3x3']: s#110
[#434 'mat3x4']: s#111
[#434 'mat4x2']: s#112
[#434 'mat4x3']: s#113
[#434 'mat4x4']: s#114
[#434 'ptr']: s#99
[#434 'sampler']: s#131
[#434 'sampler_comparison']: s#132
[#434 'texture_1d']: s#138
[#434 'texture_2d']: s#139
[#434 'texture_2d_array']: s#140
[#434 'texture_3d']: s#141
[#434 'texture_cube']: s#142
[#434 'texture_cube_array']: s#143
[#434 'texture_depth_2d']: s#133
[#434 'texture_depth_2d_array']: s#134
[#434 'texture_depth_cube']: s#135
[#434 'texture_depth_cube_array']: s#136
[#434 'texture_depth_multisampled_2d']: s#137
[#434 'texture_multisampled_2d']: s#144
[#434 'texture_storage_1d']: s#145
[#434 'texture_storage_2d']: s#146
[#434 'texture_storage_2d_array']: s#147
[#434 'texture_storage_3d']: s#148
[#434 'true']: s#92
[#434 'u32']: s#98
[#434 'vec2']: s#103
[#434 'vec3']: s#104
[#434 'vec4']: s#105
[#434 '~']: s#69
[#434 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#434 /0[fh]/]: s#118
[#434 /0[iu]?/]: s#115
[#434 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#434 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#434 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#434 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#434 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#434 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#434 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#434 /[1-9][0-9]*[fh]/]: s#119
[#434 /[1-9][0-9]*[iu]?/]: s#116
[#435 '@']: r#252
[#435 'array']: r#252
[#435 'atomic']: r#252
[#435 'bool']: r#252
[#435 'f16']: r#252
[#435 'f32']: r#252
[#435 'fn']: r#252
[#435 'for']: r#252
[#435 'i32']: r#252
[#435 'if']: r#252
[#435 'loop']: r#252
[#435 'mat2x2']: r#252
[#435 'mat2x3']: r#252
[#435 'mat2x4']: r#252
[#435 'mat3x2']: r#252
[#435 'mat3x3']: r#252
[#435 'mat3x4']: r#252
[#435 'mat4x2']: r#252
[#435 'mat4x3']: r#252
[#435 'mat4x4']: r#252
[#435 'override']: r#252
[#435 'ptr']: r#252
[#435 'sampler']: r#252
[#435 'sampler_comparison']: r#252
[#435 'switch']: r#252
[#435 'texture_1d']: r#252
[#435 'texture_2d']: r#252
[#435 'texture_2d_array']: r#252
[#435 'texture_3d']: r#252
[#435 'texture_cube']: r#252
[#435 'texture_cube_array']: r#252
[#435 'texture_depth_2d']: r#252
[#435 'texture_depth_2d_array']: r#252
[#435 'texture_depth_cube']: r#252
[#435 'texture_depth_cube_array']: r#252
[#435 'texture_depth_multisampled_2d']: r#252
[#435 'texture_multisampled_2d']: r#252
[#435 'texture_storage_1d']: r#252
[#435 'texture_storage_2d']: r#252
[#435 'texture_storage_2d_array']: r#252
[#435 'texture_storage_3d']: r#252
[#435 'u32']: r#252
[#435 'var']: r#252
[#435 'vec2']: r#252
[#435 'vec3']: r#252
[#435 'vec4']: r#252
[#435 'while']: r#252
[#435 '{']: r#252
[#435 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#252
[#436 '@']: r#253
[#436 'array']: r#253
[#436 'atomic']: r#253
[#436 'bool']: r#253
[#436 'f16']: r#253
[#436 'f32']: r#253
[#436 'fn']: r#253
[#436 'for']: r#253
[#436 'i32']: r#253
[#436 'if']: r#253
[#436 'loop']: r#253
[#436 'mat2x2']: r#253
[#436 'mat2x3']: r#253
[#436 'mat2x4']: r#253
[#436 'mat3x2']: r#253
[#436 'mat3x3']: r#253
[#436 'mat3x4']: r#253
[#436 'mat4x2']: r#253
[#436 'mat4x3']: r#253
[#436 'mat4x4']: r#253
[#436 'override']: r#253
[#436 'ptr']: r#253
[#436 'sampler']: r#253
[#436 'sampler_comparison']: r#253
[#436 'switch']: r#253
[#436 'texture_1d']: r#253
[#436 'texture_2d']: r#253
[#436 'texture_2d_array']: r#253
[#436 'texture_3d']: r#253
[#436 'texture_cube']: r#253
[#436 'texture_cube_array']: r#253
[#436 'texture_depth_2d']: r#253
[#436 'texture_depth_2d_array']: r#253
[#436 'texture_depth_cube']: r#253
[#436 'texture_depth_cube_array']: r#253
[#436 'texture_depth_multisampled_2d']: r#253
[#436 'texture_multisampled_2d']: r#253
[#436 'texture_storage_1d']: r#253
[#436 'texture_storage_2d']: r#253
[#436 'texture_storage_2d_array']: r#253
[#436 'texture_storage_3d']: r#253
[#436 'u32']: r#253
[#436 'var']: r#253
[#436 'vec2']: r#253
[#436 'vec3']: r#253
[#436 'vec4']: r#253
[#436 'while']: r#253
[#436 '{']: r#253
[#436 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#253
[#437 '@']: r#254
[#437 'array']: r#254
[#437 'atomic']: r#254
[#437 'bool']: r#254
[#437 'f16']: r#254
[#437 'f32']: r#254
[#437 'fn']: r#254
[#437 'for']: r#254
[#437 'i32']: r#254
[#437 'if']: r#254
[#437 'loop']: r#254
[#437 'mat2x2']: r#254
[#437 'mat2x3']: r#254
[#437 'mat2x4']: r#254
[#437 'mat3x2']: r#254
[#437 'mat3x3']: r#254
[#437 'mat3x4']: r#254
[#437 'mat4x2']: r#254
[#437 'mat4x3']: r#254
[#437 'mat4x4']: r#254
[#437 'override']: r#254
[#437 'ptr']: r#254
[#437 'sampler']: r#254
[#437 'sampler_comparison']: r#254
[#437 'switch']: r#254
[#437 'texture_1d']: r#254
[#437 'texture_2d']: r#254
[#437 'texture_2d_array']: r#254
[#437 'texture_3d']: r#254
[#437 'texture_cube']: r#254
[#437 'texture_cube_array']: r#254
[#437 'texture_depth_2d']: r#254
[#437 'texture_depth_2d_array']: r#254
[#437 'texture_depth_cube']: r#254
[#437 'texture_depth_cube_array']: r#254
[#437 'texture_depth_multisampled_2d']: r#254
[#437 'texture_multisampled_2d']: r#254
[#437 'texture_storage_1d']: r#254
[#437 'texture_storage_2d']: r#254
[#437 'texture_storage_2d_array']: r#254
[#437 'texture_storage_3d']: r#254
[#437 'u32']: r#254
[#437 'var']: r#254
[#437 'vec2']: r#254
[#437 'vec3']: r#254
[#437 'vec4']: r#254
[#437 'while']: r#254
[#437 '{']: r#254
[#437 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#254
[#438 ')']: r#214
[#438 'center']: s#445
[#438 'centroid']: s#446
[#438 'sample']: s#447
[#439 '@']: r#255
[#439 'array']: r#255
[#439 'atomic']: r#255
[#439 'bool']: r#255
[#439 'f16']: r#255
[#439 'f32']: r#255
[#439 'fn']: r#255
[#439 'for']: r#255
[#439 'i32']: r#255
[#439 'if']: r#255
[#439 'loop']: r#255
[#439 'mat2x2']: r#255
[#439 'mat2x3']: r#255
[#439 'mat2x4']: r#255
[#439 'mat3x2']: r#255
[#439 'mat3x3']: r#255
[#439 'mat3x4']: r#255
[#439 'mat4x2']: r#255
[#439 'mat4x3']: r#255
[#439 'mat4x4']: r#255
[#439 'override']: r#255
[#439 'ptr']: r#255
[#439 'sampler']: r#255
[#439 'sampler_comparison']: r#255
[#439 'switch']: r#255
[#439 'texture_1d']: r#255
[#439 'texture_2d']: r#255
[#439 'texture_2d_array']: r#255
[#439 'texture_3d']: r#255
[#439 'texture_cube']: r#255
[#439 'texture_cube_array']: r#255
[#439 'texture_depth_2d']: r#255
[#439 'texture_depth_2d_array']: r#255
[#439 'texture_depth_cube']: r#255
[#439 'texture_depth_cube_array']: r#255
[#439 'texture_depth_multisampled_2d']: r#255
[#439 'texture_multisampled_2d']: r#255
[#439 'texture_storage_1d']: r#255
[#439 'texture_storage_2d']: r#255
[#439 'texture_storage_2d_array']: r#255
[#439 'texture_storage_3d']: r#255
[#439 'u32']: r#255
[#439 'var']: r#255
[#439 'vec2']: r#255
[#439 'vec3']: r#255
[#439 'vec4']: r#255
[#439 'while']: r#255
[#439 '{']: r#255
[#439 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#255
[#440 '@']: r#256
[#440 'array']: r#256
[#440 'atomic']: r#256
[#440 'bool']: r#256
[#440 'f16']: r#256
[#440 'f32']: r#256
[#440 'fn']: r#256
[#440 'for']: r#256
[#440 'i32']: r#256
[#440 'if']: r#256
[#440 'loop']: r#256
[#440 'mat2x2']: r#256
[#440 'mat2x3']: r#256
[#440 'mat2x4']: r#256
[#440 'mat3x2']: r#256
[#440 'mat3x3']: r#256
[#440 'mat3x4']: r#256
[#440 'mat4x2']: r#256
[#440 'mat4x3']: r#256
[#440 'mat4x4']: r#256
[#440 'override']: r#256
[#440 'ptr']: r#256
[#440 'sampler']: r#256
[#440 'sampler_comparison']: r#256
[#440 'switch']: r#256
[#440 'texture_1d']: r#256
[#440 'texture_2d']: r#256
[#440 'texture_2d_array']: r#256
[#440 'texture_3d']: r#256
[#440 'texture_cube']: r#256
[#440 'texture_cube_array']: r#256
[#440 'texture_depth_2d']: r#256
[#440 'texture_depth_2d_array']: r#256
[#440 'texture_depth_cube']: r#256
[#440 'texture_depth_cube_array']: r#256
[#440 'texture_depth_multisampled_2d']: r#256
[#440 'texture_multisampled_2d']: r#256
[#440 'texture_storage_1d']: r#256
[#440 'texture_storage_2d']: r#256
[#440 'texture_storage_2d_array']: r#256
[#440 'texture_storage_3d']: r#256
[#440 'u32']: r#256
[#440 'var']: r#256
[#440 'vec2']: r#256
[#440 'vec3']: r#256
[#440 'vec4']: r#256
[#440 'while']: r#256
[#440 '{']: r#256
[#440 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#256
[#441 '@']: r#257
[#441 'array']: r#257
[#441 'atomic']: r#257
[#441 'bool']: r#257
[#441 'f16']: r#257
[#441 'f32']: r#257
[#441 'fn']: r#257
[#441 'for']: r#257
[#441 'i32']: r#257
[#441 'if']: r#257
[#441 'loop']: r#257
[#441 'mat2x2']: r#257
[#441 'mat2x3']: r#257
[#441 'mat2x4']: r#257
[#441 'mat3x2']: r#257
[#441 'mat3x3']: r#257
[#441 'mat3x4']: r#257
[#441 'mat4x2']: r#257
[#441 'mat4x3']: r#257
[#441 'mat4x4']: r#257
[#441 'override']: r#257
[#441 'ptr']: r#257
[#441 'sampler']: r#257
[#441 'sampler_comparison']: r#257
[#441 'switch']: r#257
[#441 'texture_1d']: r#257
[#441 'texture_2d']: r#257
[#441 'texture_2d_array']: r#257
[#441 'texture_3d']: r#257
[#441 'texture_cube']: r#257
[#441 'texture_cube_array']: r#257
[#441 'texture_depth_2d']: r#257
[#441 'texture_depth_2d_array']: r#257
[#441 'texture_depth_cube']: r#257
[#441 'texture_depth_cube_array']: r#257
[#441 'texture_depth_multisampled_2d']: r#257
[#441 'texture_multisampled_2d']: r#257
[#441 'texture_storage_1d']: r#257
[#441 'texture_storage_2d']: r#257
[#441 'texture_storage_2d_array']: r#257
[#441 'texture_storage_3d']: r#257
[#441 'u32']: r#257
[#441 'var']: r#257
[#441 'vec2']: r#257
[#441 'vec3']: r#257
[#441 'vec4']: r#257
[#441 'while']: r#257
[#441 '{']: r#257
[#441 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#257
[#442 '@']: r#258
[#442 'array']: r#258
[#442 'atomic']: r#258
[#442 'bool']: r#258
[#442 'f16']: r#258
[#442 'f32']: r#258
[#442 'fn']: r#258
[#442 'for']: r#258
[#442 'i32']: r#258
[#442 'if']: r#258
[#442 'loop']: r#258
[#442 'mat2x2']: r#258
[#442 'mat2x3']: r#258
[#442 'mat2x4']: r#258
[#442 'mat3x2']: r#258
[#442 'mat3x3']: r#258
[#442 'mat3x4']: r#258
[#442 'mat4x2']: r#258
[#442 'mat4x3']: r#258
[#442 'mat4x4']: r#258
[#442 'override']: r#258
[#442 'ptr']: r#258
[#442 'sampler']: r#258
[#442 'sampler_comparison']: r#258
[#442 'switch']: r#258
[#442 'texture_1d']: r#258
[#442 'texture_2d']: r#258
[#442 'texture_2d_array']: r#258
[#442 'texture_3d']: r#258
[#442 'texture_cube']: r#258
[#442 'texture_cube_array']: r#258
[#442 'texture_depth_2d']: r#258
[#442 'texture_depth_2d_array']: r#258
[#442 'texture_depth_cube']: r#258
[#442 'texture_depth_cube_array']: r#258
[#442 'texture_depth_multisampled_2d']: r#258
[#442 'texture_multisampled_2d']: r#258
[#442 'texture_storage_1d']: r#258
[#442 'texture_storage_2d']: r#258
[#442 'texture_storage_2d_array']: r#258
[#442 'texture_storage_3d']: r#258
[#442 'u32']: r#258
[#442 'var']: r#258
[#442 'vec2']: r#258
[#442 'vec3']: r#258
[#442 'vec4']: r#258
[#442 'while']: r#258
[#442 '{']: r#258
[#442 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#258
[#443 '@']: r#259
[#443 'array']: r#259
[#443 'atomic']: r#259
[#443 'bool']: r#259
[#443 'f16']: r#259
[#443 'f32']: r#259
[#443 'fn']: r#259
[#443 'for']: r#259
[#443 'i32']: r#259
[#443 'if']: r#259
[#443 'loop']: r#259
[#443 'mat2x2']: r#259
[#443 'mat2x3']: r#259
[#443 'mat2x4']: r#259
[#443 'mat3x2']: r#259
[#443 'mat3x3']: r#259
[#443 'mat3x4']: r#259
[#443 'mat4x2']: r#259
[#443 'mat4x3']: r#259
[#443 'mat4x4']: r#259
[#443 'override']: r#259
[#443 'ptr']: r#259
[#443 'sampler']: r#259
[#443 'sampler_comparison']: r#259
[#443 'switch']: r#259
[#443 'texture_1d']: r#259
[#443 'texture_2d']: r#259
[#443 'texture_2d_array']: r#259
[#443 'texture_3d']: r#259
[#443 'texture_cube']: r#259
[#443 'texture_cube_array']: r#259
[#443 'texture_depth_2d']: r#259
[#443 'texture_depth_2d_array']: r#259
[#443 'texture_depth_cube']: r#259
[#443 'texture_depth_cube_array']: r#259
[#443 'texture_depth_multisampled_2d']: r#259
[#443 'texture_multisampled_2d']: r#259
[#443 'texture_storage_1d']: r#259
[#443 'texture_storage_2d']: r#259
[#443 'texture_storage_2d_array']: r#259
[#443 'texture_storage_3d']: r#259
[#443 'u32']: r#259
[#443 'var']: r#259
[#443 'vec2']: r#259
[#443 'vec3']: r#259
[#443 'vec4']: r#259
[#443 'while']: r#259
[#443 '{']: r#259
[#443 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#259
[#444 ',']: s#351
[#445 ')']: r#260
[#445 ',']: r#260
[#446 ')']: r#261
[#446 ',']: r#261
[#447 ')']: r#262
[#447 ',']: r#262
[#448 ',']: s#560
[#449 '!=']: r#263
[#449 '%']: r#263
[#449 '%=']: r#263
[#449 '&&']: r#263
[#449 '&']: r#263
[#449 '&=']: r#263
[#449 ')']: r#263
[#449 '*']: r#263
[#449 '*=']: r#263
[#449 '+']: r#263
[#449 '++']: r#263
[#449 '+=']: r#263
[#449 ',']: r#263
[#449 '-']: r#263
[#449 '--']: r#263
[#449 '-=']: r#263
[#449 '/']: r#263
[#449 '/=']: r#263
[#449 ':']: r#263
[#449 ';']: r#263
[#449 '<']: r#263
[#449 '<<']: r#263
[#449 '<<=']: r#263
[#449 '<=']: r#263
[#449 '=']: r#263
[#449 '==']: r#263
[#449 '>']: r#263
[#449 '>=']: r#263
[#449 '>>']: r#263
[#449 '>>=']: r#263
[#449 '@']: r#263
[#449 ']']: r#263
[#449 '^']: r#263
[#449 '^=']: r#263
[#449 '{']: r#263
[#449 '|']: r#263
[#449 '|=']: r#263
[#449 '||']: r#263
[#450 '!=']: r#264
[#450 '%']: r#264
[#450 '%=']: r#264
[#450 '&&']: r#264
[#450 '&']: r#264
[#450 '&=']: r#264
[#450 ')']: r#264
[#450 '*']: r#264
[#450 '*=']: r#264
[#450 '+']: r#264
[#450 '++']: r#264
[#450 '+=']: r#264
[#450 ',']: r#264
[#450 '-']: r#264
[#450 '--']: r#264
[#450 '-=']: r#264
[#450 '/']: r#264
[#450 '/=']: r#264
[#450 ':']: r#264
[#450 ';']: r#264
[#450 '<']: r#264
[#450 '<<']: r#264
[#450 '<<=']: r#264
[#450 '<=']: r#264
[#450 '=']: r#264
[#450 '==']: r#264
[#450 '>']: r#264
[#450 '>=']: r#264
[#450 '>>']: r#264
[#450 '>>=']: r#264
[#450 '@']: r#264
[#450 ']']: r#264
[#450 '^']: r#264
[#450 '^=']: r#264
[#450 '{']: r#264
[#450 '|']: r#264
[#450 '|=']: r#264
[#450 '||']: r#264
[#451 '!=']: r#265
[#451 '%']: r#265
[#451 '&&']: r#265
[#451 '&']: r#265
[#451 ')']: r#265
[#451 '*']: r#265
[#451 '+']: r#265
[#451 ',']: r#265
[#451 '-']: r#265
[#451 '.']: r#265
[#451 '/']: r#265
[#451 ':']: r#265
[#451 ';']: r#265
[#451 '<']: r#265
[#451 '<<']: r#265
[#451 '<=']: r#265
[#451 '==']: r#265
[#451 '>']: r#265
[#451 '>=']: r#265
[#451 '>>']: r#265
[#451 '@']: r#265
[#451 '[']: r#265
[#451 ']']: r#265
[#451 '^']: r#265
[#451 '{']: r#265
[#451 '|']: r#265
[#451 '||']: r#265
[#452 ')']: r#266
[#452 ',']: r#266
[#453 ')']: r#267
[#453 ',']: r#267
[#454 ')']: r#268
[#455 ')']: r#269
[#456 '>']: r#270
[#457 '+']: s#216
[#457 '-']: s#217
[#457 '>']: r#271
[#458 '>']: r#272
[#459 '%']: r#31
[#459 '&']: r#28
[#459 '*']: r#31
[#459 '+']: r#31
[#459 '-']: r#31
[#459 '/']: r#31
[#459 '>']: r#31
[#459 '^']: r#30
[#459 '|']: r#29
[#460 '(']: r#273
[#460 ')']: r#273
[#460 ',']: r#273
[#460 ';']: r#273
[#460 '=']: r#273
[#460 '>']: r#273
[#460 '@']: r#273
[#460 '{']: r#273
[#460 '}']: r#273
[#461 ',']: s#558
[#462 '>']: s#556
[#463 '>']: r#274
[#464 '>']: r#275
[#465 '>']: r#276
[#466 ')']: s#555
[#467 '%=']: r#239
[#467 '&=']: r#239
[#467 ')']: r#239
[#467 '*=']: r#239
[#467 '++']: r#239
[#467 '+=']: r#239
[#467 '--']: r#239
[#467 '-=']: r#239
[#467 '.']: r#239
[#467 '/=']: r#239
[#467 '<<=']: r#239
[#467 '=']: r#239
[#467 '>>=']: r#239
[#467 '[']: r#239
[#467 '^=']: r#239
[#467 '|=']: r#239
[#468 '%=']: r#277
[#468 '&=']: r#277
[#468 ')']: r#277
[#468 '*=']: r#277
[#468 '++']: r#277
[#468 '+=']: r#277
[#468 '--']: r#277
[#468 '-=']: r#277
[#468 '/=']: r#277
[#468 '<<=']: r#277
[#468 '=']: r#277
[#468 '>>=']: r#277
[#468 '^=']: r#277
[#468 '|=']: r#277
[#469 '%=']: r#278
[#469 '&=']: r#278
[#469 ')']: r#278
[#469 '*=']: r#278
[#469 '++']: r#278
[#469 '+=']: r#278
[#469 '--']: r#278
[#469 '-=']: r#278
[#469 '/=']: r#278
[#469 '<<=']: r#278
[#469 '=']: r#278
[#469 '>>=']: r#278
[#469 '^=']: r#278
[#469 '|=']: r#278
[#470 '%=']: r#279
[#470 '&=']: r#279
[#470 ')']: r#279
[#470 '*=']: r#279
[#470 '++']: r#279
[#470 '+=']: r#279
[#470 '--']: r#279
[#470 '-=']: r#279
[#470 '/=']: r#279
[#470 '<<=']: r#279
[#470 '=']: r#279
[#470 '>>=']: r#279
[#470 '^=']: r#279
[#470 '|=']: r#279
[#471 '%=']: r#280
[#471 '&=']: r#280
[#471 ')']: r#280
[#471 '*=']: r#280
[#471 '++']: r#280
[#471 '+=']: r#280
[#471 '--']: r#280
[#471 '-=']: r#280
[#471 '/=']: r#280
[#471 '<<=']: r#280
[#471 '=']: r#280
[#471 '>>=']: r#280
[#471 '^=']: r#280
[#471 '|=']: r#280
[#472 'if']: r#281
[#473 'switch']: r#282
[#474 'loop']: r#283
[#475 'for']: r#284
[#476 'while']: r#285
[#477 '!']: s#68
[#477 '&']: s#71
[#477 '(']: s#83
[#477 '*']: s#70
[#477 '-']: s#67
[#477 'array']: s#87
[#477 'atomic']: s#101
[#477 'bitcast']: s#77
[#477 'bool']: s#94
[#477 'f16']: s#96
[#477 'f32']: s#95
[#477 'false']: s#93
[#477 'i32']: s#97
[#477 'mat2x2']: s#106
[#477 'mat2x3']: s#107
[#477 'mat2x4']: s#108
[#477 'mat3x2']: s#109
[#477 'mat3x3']: s#110
[#477 'mat3x4']: s#111
[#477 'mat4x2']: s#112
[#477 'mat4x3']: s#113
[#477 'mat4x4']: s#114
[#477 'ptr']: s#99
[#477 'sampler']: s#131
[#477 'sampler_comparison']: s#132
[#477 'texture_1d']: s#138
[#477 'texture_2d']: s#139
[#477 'texture_2d_array']: s#140
[#477 'texture_3d']: s#141
[#477 'texture_cube']: s#142
[#477 'texture_cube_array']: s#143
[#477 'texture_depth_2d']: s#133
[#477 'texture_depth_2d_array']: s#134
[#477 'texture_depth_cube']: s#135
[#477 'texture_depth_cube_array']: s#136
[#477 'texture_depth_multisampled_2d']: s#137
[#477 'texture_multisampled_2d']: s#144
[#477 'texture_storage_1d']: s#145
[#477 'texture_storage_2d']: s#146
[#477 'texture_storage_2d_array']: s#147
[#477 'texture_storage_3d']: s#148
[#477 'true']: s#92
[#477 'u32']: s#98
[#477 'vec2']: s#103
[#477 'vec3']: s#104
[#477 'vec4']: s#105
[#477 '~']: s#69
[#477 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#477 /0[fh]/]: s#118
[#477 /0[iu]?/]: s#115
[#477 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#477 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#477 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#477 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#477 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#477 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#477 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#477 /[1-9][0-9]*[fh]/]: s#119
[#477 /[1-9][0-9]*[iu]?/]: s#116
[#478 '!']: s#68
[#478 '&']: s#71
[#478 '(']: s#83
[#478 '*']: s#70
[#478 '-']: s#67
[#478 'array']: s#87
[#478 'atomic']: s#101
[#478 'bitcast']: s#77
[#478 'bool']: s#94
[#478 'f16']: s#96
[#478 'f32']: s#95
[#478 'false']: s#93
[#478 'i32']: s#97
[#478 'mat2x2']: s#106
[#478 'mat2x3']: s#107
[#478 'mat2x4']: s#108
[#478 'mat3x2']: s#109
[#478 'mat3x3']: s#110
[#478 'mat3x4']: s#111
[#478 'mat4x2']: s#112
[#478 'mat4x3']: s#113
[#478 'mat4x4']: s#114
[#478 'ptr']: s#99
[#478 'sampler']: s#131
[#478 'sampler_comparison']: s#132
[#478 'texture_1d']: s#138
[#478 'texture_2d']: s#139
[#478 'texture_2d_array']: s#140
[#478 'texture_3d']: s#141
[#478 'texture_cube']: s#142
[#478 'texture_cube_array']: s#143
[#478 'texture_depth_2d']: s#133
[#478 'texture_depth_2d_array']: s#134
[#478 'texture_depth_cube']: s#135
[#478 'texture_depth_cube_array']: s#136
[#478 'texture_depth_multisampled_2d']: s#137
[#478 'texture_multisampled_2d']: s#144
[#478 'texture_storage_1d']: s#145
[#478 'texture_storage_2d']: s#146
[#478 'texture_storage_2d_array']: s#147
[#478 'texture_storage_3d']: s#148
[#478 'true']: s#92
[#478 'u32']: s#98
[#478 'vec2']: s#103
[#478 'vec3']: s#104
[#478 'vec4']: s#105
[#478 '~']: s#69
[#478 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#478 /0[fh]/]: s#118
[#478 /0[iu]?/]: s#115
[#478 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#478 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#478 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#478 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#478 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#478 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#478 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#478 /[1-9][0-9]*[fh]/]: s#119
[#478 /[1-9][0-9]*[iu]?/]: s#116
[#479 ')']: r#286
[#479 ';']: r#286
[#480 ')']: r#287
[#480 ';']: r#287
[#481 '!']: r#288
[#481 '&']: r#288
[#481 '(']: r#288
[#481 '*']: r#288
[#481 '-']: r#288
[#481 'array']: r#288
[#481 'atomic']: r#288
[#481 'bitcast']: r#288
[#481 'bool']: r#288
[#481 'f16']: r#288
[#481 'f32']: r#288
[#481 'false']: r#288
[#481 'i32']: r#288
[#481 'mat2x2']: r#288
[#481 'mat2x3']: r#288
[#481 'mat2x4']: r#288
[#481 'mat3x2']: r#288
[#481 'mat3x3']: r#288
[#481 'mat3x4']: r#288
[#481 'mat4x2']: r#288
[#481 'mat4x3']: r#288
[#481 'mat4x4']: r#288
[#481 'ptr']: r#288
[#481 'sampler']: r#288
[#481 'sampler_comparison']: r#288
[#481 'texture_1d']: r#288
[#481 'texture_2d']: r#288
[#481 'texture_2d_array']: r#288
[#481 'texture_3d']: r#288
[#481 'texture_cube']: r#288
[#481 'texture_cube_array']: r#288
[#481 'texture_depth_2d']: r#288
[#481 'texture_depth_2d_array']: r#288
[#481 'texture_depth_cube']: r#288
[#481 'texture_depth_cube_array']: r#288
[#481 'texture_depth_multisampled_2d']: r#288
[#481 'texture_multisampled_2d']: r#288
[#481 'texture_storage_1d']: r#288
[#481 'texture_storage_2d']: r#288
[#481 'texture_storage_2d_array']: r#288
[#481 'texture_storage_3d']: r#288
[#481 'true']: r#288
[#481 'u32']: r#288
[#481 'vec2']: r#288
[#481 'vec3']: r#288
[#481 'vec4']: r#288
[#481 '~']: r#288
[#481 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#288
[#481 /0[fh]/]: r#288
[#481 /0[iu]?/]: r#288
[#481 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#288
[#481 /0[xX][0-9a-fA-F]+[iu]?/]: r#288
[#481 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#288
[#481 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#288
[#481 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#288
[#481 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#288
[#481 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#288
[#481 /[1-9][0-9]*[fh]/]: r#288
[#481 /[1-9][0-9]*[iu]?/]: r#288
[#482 '!']: r#289
[#482 '&']: r#289
[#482 '(']: r#289
[#482 '*']: r#289
[#482 '-']: r#289
[#482 'array']: r#289
[#482 'atomic']: r#289
[#482 'bitcast']: r#289
[#482 'bool']: r#289
[#482 'f16']: r#289
[#482 'f32']: r#289
[#482 'false']: r#289
[#482 'i32']: r#289
[#482 'mat2x2']: r#289
[#482 'mat2x3']: r#289
[#482 'mat2x4']: r#289
[#482 'mat3x2']: r#289
[#482 'mat3x3']: r#289
[#482 'mat3x4']: r#289
[#482 'mat4x2']: r#289
[#482 'mat4x3']: r#289
[#482 'mat4x4']: r#289
[#482 'ptr']: r#289
[#482 'sampler']: r#289
[#482 'sampler_comparison']: r#289
[#482 'texture_1d']: r#289
[#482 'texture_2d']: r#289
[#482 'texture_2d_array']: r#289
[#482 'texture_3d']: r#289
[#482 'texture_cube']: r#289
[#482 'texture_cube_array']: r#289
[#482 'texture_depth_2d']: r#289
[#482 'texture_depth_2d_array']: r#289
[#482 'texture_depth_cube']: r#289
[#482 'texture_depth_cube_array']: r#289
[#482 'texture_depth_multisampled_2d']: r#289
[#482 'texture_multisampled_2d']: r#289
[#482 'texture_storage_1d']: r#289
[#482 'texture_storage_2d']: r#289
[#482 'texture_storage_2d_array']: r#289
[#482 'texture_storage_3d']: r#289
[#482 'true']: r#289
[#482 'u32']: r#289
[#482 'vec2']: r#289
[#482 'vec3']: r#289
[#482 'vec4']: r#289
[#482 '~']: r#289
[#482 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#289
[#482 /0[fh]/]: r#289
[#482 /0[iu]?/]: r#289
[#482 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#289
[#482 /0[xX][0-9a-fA-F]+[iu]?/]: r#289
[#482 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#289
[#482 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#289
[#482 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#289
[#482 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#289
[#482 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#289
[#482 /[1-9][0-9]*[fh]/]: r#289
[#482 /[1-9][0-9]*[iu]?/]: r#289
[#483 '!']: r#290
[#483 '&']: r#290
[#483 '(']: r#290
[#483 '*']: r#290
[#483 '-']: r#290
[#483 'array']: r#290
[#483 'atomic']: r#290
[#483 'bitcast']: r#290
[#483 'bool']: r#290
[#483 'f16']: r#290
[#483 'f32']: r#290
[#483 'false']: r#290
[#483 'i32']: r#290
[#483 'mat2x2']: r#290
[#483 'mat2x3']: r#290
[#483 'mat2x4']: r#290
[#483 'mat3x2']: r#290
[#483 'mat3x3']: r#290
[#483 'mat3x4']: r#290
[#483 'mat4x2']: r#290
[#483 'mat4x3']: r#290
[#483 'mat4x4']: r#290
[#483 'ptr']: r#290
[#483 'sampler']: r#290
[#483 'sampler_comparison']: r#290
[#483 'texture_1d']: r#290
[#483 'texture_2d']: r#290
[#483 'texture_2d_array']: r#290
[#483 'texture_3d']: r#290
[#483 'texture_cube']: r#290
[#483 'texture_cube_array']: r#290
[#483 'texture_depth_2d']: r#290
[#483 'texture_depth_2d_array']: r#290
[#483 'texture_depth_cube']: r#290
[#483 'texture_depth_cube_array']: r#290
[#483 'texture_depth_multisampled_2d']: r#290
[#483 'texture_multisampled_2d']: r#290
[#483 'texture_storage_1d']: r#290
[#483 'texture_storage_2d']: r#290
[#483 'texture_storage_2d_array']: r#290
[#483 'texture_storage_3d']: r#290
[#483 'true']: r#290
[#483 'u32']: r#290
[#483 'vec2']: r#290
[#483 'vec3']: r#290
[#483 'vec4']: r#290
[#483 '~']: r#290
[#483 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#290
[#483 /0[fh]/]: r#290
[#483 /0[iu]?/]: r#290
[#483 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#290
[#483 /0[xX][0-9a-fA-F]+[iu]?/]: r#290
[#483 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#290
[#483 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#290
[#483 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#290
[#483 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#290
[#483 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#290
[#483 /[1-9][0-9]*[fh]/]: r#290
[#483 /[1-9][0-9]*[iu]?/]: r#290
[#484 '!']: r#291
[#484 '&']: r#291
[#484 '(']: r#291
[#484 '*']: r#291
[#484 '-']: r#291
[#484 'array']: r#291
[#484 'atomic']: r#291
[#484 'bitcast']: r#291
[#484 'bool']: r#291
[#484 'f16']: r#291
[#484 'f32']: r#291
[#484 'false']: r#291
[#484 'i32']: r#291
[#484 'mat2x2']: r#291
[#484 'mat2x3']: r#291
[#484 'mat2x4']: r#291
[#484 'mat3x2']: r#291
[#484 'mat3x3']: r#291
[#484 'mat3x4']: r#291
[#484 'mat4x2']: r#291
[#484 'mat4x3']: r#291
[#484 'mat4x4']: r#291
[#484 'ptr']: r#291
[#484 'sampler']: r#291
[#484 'sampler_comparison']: r#291
[#484 'texture_1d']: r#291
[#484 'texture_2d']: r#291
[#484 'texture_2d_array']: r#291
[#484 'texture_3d']: r#291
[#484 'texture_cube']: r#291
[#484 'texture_cube_array']: r#291
[#484 'texture_depth_2d']: r#291
[#484 'texture_depth_2d_array']: r#291
[#484 'texture_depth_cube']: r#291
[#484 'texture_depth_cube_array']: r#291
[#484 'texture_depth_multisampled_2d']: r#291
[#484 'texture_multisampled_2d']: r#291
[#484 'texture_storage_1d']: r#291
[#484 'texture_storage_2d']: r#291
[#484 'texture_storage_2d_array']: r#291
[#484 'texture_storage_3d']: r#291
[#484 'true']: r#291
[#484 'u32']: r#291
[#484 'vec2']: r#291
[#484 'vec3']: r#291
[#484 'vec4']: r#291
[#484 '~']: r#291
[#484 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#291
[#484 /0[fh]/]: r#291
[#484 /0[iu]?/]: r#291
[#484 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#291
[#484 /0[xX][0-9a-fA-F]+[iu]?/]: r#291
[#484 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#291
[#484 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#291
[#484 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#291
[#484 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#291
[#484 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#291
[#484 /[1-9][0-9]*[fh]/]: r#291
[#484 /[1-9][0-9]*[iu]?/]: r#291
[#485 '!']: r#292
[#485 '&']: r#292
[#485 '(']: r#292
[#485 '*']: r#292
[#485 '-']: r#292
[#485 'array']: r#292
[#485 'atomic']: r#292
[#485 'bitcast']: r#292
[#485 'bool']: r#292
[#485 'f16']: r#292
[#485 'f32']: r#292
[#485 'false']: r#292
[#485 'i32']: r#292
[#485 'mat2x2']: r#292
[#485 'mat2x3']: r#292
[#485 'mat2x4']: r#292
[#485 'mat3x2']: r#292
[#485 'mat3x3']: r#292
[#485 'mat3x4']: r#292
[#485 'mat4x2']: r#292
[#485 'mat4x3']: r#292
[#485 'mat4x4']: r#292
[#485 'ptr']: r#292
[#485 'sampler']: r#292
[#485 'sampler_comparison']: r#292
[#485 'texture_1d']: r#292
[#485 'texture_2d']: r#292
[#485 'texture_2d_array']: r#292
[#485 'texture_3d']: r#292
[#485 'texture_cube']: r#292
[#485 'texture_cube_array']: r#292
[#485 'texture_depth_2d']: r#292
[#485 'texture_depth_2d_array']: r#292
[#485 'texture_depth_cube']: r#292
[#485 'texture_depth_cube_array']: r#292
[#485 'texture_depth_multisampled_2d']: r#292
[#485 'texture_multisampled_2d']: r#292
[#485 'texture_storage_1d']: r#292
[#485 'texture_storage_2d']: r#292
[#485 'texture_storage_2d_array']: r#292
[#485 'texture_storage_3d']: r#292
[#485 'true']: r#292
[#485 'u32']: r#292
[#485 'vec2']: r#292
[#485 'vec3']: r#292
[#485 'vec4']: r#292
[#485 '~']: r#292
[#485 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#292
[#485 /0[fh]/]: r#292
[#485 /0[iu]?/]: r#292
[#485 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#292
[#485 /0[xX][0-9a-fA-F]+[iu]?/]: r#292
[#485 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#292
[#485 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#292
[#485 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#292
[#485 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#292
[#485 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#292
[#485 /[1-9][0-9]*[fh]/]: r#292
[#485 /[1-9][0-9]*[iu]?/]: r#292
[#486 '!']: r#293
[#486 '&']: r#293
[#486 '(']: r#293
[#486 '*']: r#293
[#486 '-']: r#293
[#486 'array']: r#293
[#486 'atomic']: r#293
[#486 'bitcast']: r#293
[#486 'bool']: r#293
[#486 'f16']: r#293
[#486 'f32']: r#293
[#486 'false']: r#293
[#486 'i32']: r#293
[#486 'mat2x2']: r#293
[#486 'mat2x3']: r#293
[#486 'mat2x4']: r#293
[#486 'mat3x2']: r#293
[#486 'mat3x3']: r#293
[#486 'mat3x4']: r#293
[#486 'mat4x2']: r#293
[#486 'mat4x3']: r#293
[#486 'mat4x4']: r#293
[#486 'ptr']: r#293
[#486 'sampler']: r#293
[#486 'sampler_comparison']: r#293
[#486 'texture_1d']: r#293
[#486 'texture_2d']: r#293
[#486 'texture_2d_array']: r#293
[#486 'texture_3d']: r#293
[#486 'texture_cube']: r#293
[#486 'texture_cube_array']: r#293
[#486 'texture_depth_2d']: r#293
[#486 'texture_depth_2d_array']: r#293
[#486 'texture_depth_cube']: r#293
[#486 'texture_depth_cube_array']: r#293
[#486 'texture_depth_multisampled_2d']: r#293
[#486 'texture_multisampled_2d']: r#293
[#486 'texture_storage_1d']: r#293
[#486 'texture_storage_2d']: r#293
[#486 'texture_storage_2d_array']: r#293
[#486 'texture_storage_3d']: r#293
[#486 'true']: r#293
[#486 'u32']: r#293
[#486 'vec2']: r#293
[#486 'vec3']: r#293
[#486 'vec4']: r#293
[#486 '~']: r#293
[#486 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#293
[#486 /0[fh]/]: r#293
[#486 /0[iu]?/]: r#293
[#486 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#293
[#486 /0[xX][0-9a-fA-F]+[iu]?/]: r#293
[#486 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#293
[#486 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#293
[#486 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#293
[#486 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#293
[#486 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#293
[#486 /[1-9][0-9]*[fh]/]: r#293
[#486 /[1-9][0-9]*[iu]?/]: r#293
[#487 '!']: r#294
[#487 '&']: r#294
[#487 '(']: r#294
[#487 '*']: r#294
[#487 '-']: r#294
[#487 'array']: r#294
[#487 'atomic']: r#294
[#487 'bitcast']: r#294
[#487 'bool']: r#294
[#487 'f16']: r#294
[#487 'f32']: r#294
[#487 'false']: r#294
[#487 'i32']: r#294
[#487 'mat2x2']: r#294
[#487 'mat2x3']: r#294
[#487 'mat2x4']: r#294
[#487 'mat3x2']: r#294
[#487 'mat3x3']: r#294
[#487 'mat3x4']: r#294
[#487 'mat4x2']: r#294
[#487 'mat4x3']: r#294
[#487 'mat4x4']: r#294
[#487 'ptr']: r#294
[#487 'sampler']: r#294
[#487 'sampler_comparison']: r#294
[#487 'texture_1d']: r#294
[#487 'texture_2d']: r#294
[#487 'texture_2d_array']: r#294
[#487 'texture_3d']: r#294
[#487 'texture_cube']: r#294
[#487 'texture_cube_array']: r#294
[#487 'texture_depth_2d']: r#294
[#487 'texture_depth_2d_array']: r#294
[#487 'texture_depth_cube']: r#294
[#487 'texture_depth_cube_array']: r#294
[#487 'texture_depth_multisampled_2d']: r#294
[#487 'texture_multisampled_2d']: r#294
[#487 'texture_storage_1d']: r#294
[#487 'texture_storage_2d']: r#294
[#487 'texture_storage_2d_array']: r#294
[#487 'texture_storage_3d']: r#294
[#487 'true']: r#294
[#487 'u32']: r#294
[#487 'vec2']: r#294
[#487 'vec3']: r#294
[#487 'vec4']: r#294
[#487 '~']: r#294
[#487 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#294
[#487 /0[fh]/]: r#294
[#487 /0[iu]?/]: r#294
[#487 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#294
[#487 /0[xX][0-9a-fA-F]+[iu]?/]: r#294
[#487 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#294
[#487 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#294
[#487 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#294
[#487 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#294
[#487 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#294
[#487 /[1-9][0-9]*[fh]/]: r#294
[#487 /[1-9][0-9]*[iu]?/]: r#294
[#488 '!']: r#295
[#488 '&']: r#295
[#488 '(']: r#295
[#488 '*']: r#295
[#488 '-']: r#295
[#488 'array']: r#295
[#488 'atomic']: r#295
[#488 'bitcast']: r#295
[#488 'bool']: r#295
[#488 'f16']: r#295
[#488 'f32']: r#295
[#488 'false']: r#295
[#488 'i32']: r#295
[#488 'mat2x2']: r#295
[#488 'mat2x3']: r#295
[#488 'mat2x4']: r#295
[#488 'mat3x2']: r#295
[#488 'mat3x3']: r#295
[#488 'mat3x4']: r#295
[#488 'mat4x2']: r#295
[#488 'mat4x3']: r#295
[#488 'mat4x4']: r#295
[#488 'ptr']: r#295
[#488 'sampler']: r#295
[#488 'sampler_comparison']: r#295
[#488 'texture_1d']: r#295
[#488 'texture_2d']: r#295
[#488 'texture_2d_array']: r#295
[#488 'texture_3d']: r#295
[#488 'texture_cube']: r#295
[#488 'texture_cube_array']: r#295
[#488 'texture_depth_2d']: r#295
[#488 'texture_depth_2d_array']: r#295
[#488 'texture_depth_cube']: r#295
[#488 'texture_depth_cube_array']: r#295
[#488 'texture_depth_multisampled_2d']: r#295
[#488 'texture_multisampled_2d']: r#295
[#488 'texture_storage_1d']: r#295
[#488 'texture_storage_2d']: r#295
[#488 'texture_storage_2d_array']: r#295
[#488 'texture_storage_3d']: r#295
[#488 'true']: r#295
[#488 'u32']: r#295
[#488 'vec2']: r#295
[#488 'vec3']: r#295
[#488 'vec4']: r#295
[#488 '~']: r#295
[#488 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#295
[#488 /0[fh]/]: r#295
[#488 /0[iu]?/]: r#295
[#488 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#295
[#488 /0[xX][0-9a-fA-F]+[iu]?/]: r#295
[#488 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#295
[#488 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#295
[#488 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#295
[#488 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#295
[#488 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#295
[#488 /[1-9][0-9]*[fh]/]: r#295
[#488 /[1-9][0-9]*[iu]?/]: r#295
[#489 '!']: r#296
[#489 '&']: r#296
[#489 '(']: r#296
[#489 '*']: r#296
[#489 '-']: r#296
[#489 'array']: r#296
[#489 'atomic']: r#296
[#489 'bitcast']: r#296
[#489 'bool']: r#296
[#489 'f16']: r#296
[#489 'f32']: r#296
[#489 'false']: r#296
[#489 'i32']: r#296
[#489 'mat2x2']: r#296
[#489 'mat2x3']: r#296
[#489 'mat2x4']: r#296
[#489 'mat3x2']: r#296
[#489 'mat3x3']: r#296
[#489 'mat3x4']: r#296
[#489 'mat4x2']: r#296
[#489 'mat4x3']: r#296
[#489 'mat4x4']: r#296
[#489 'ptr']: r#296
[#489 'sampler']: r#296
[#489 'sampler_comparison']: r#296
[#489 'texture_1d']: r#296
[#489 'texture_2d']: r#296
[#489 'texture_2d_array']: r#296
[#489 'texture_3d']: r#296
[#489 'texture_cube']: r#296
[#489 'texture_cube_array']: r#296
[#489 'texture_depth_2d']: r#296
[#489 'texture_depth_2d_array']: r#296
[#489 'texture_depth_cube']: r#296
[#489 'texture_depth_cube_array']: r#296
[#489 'texture_depth_multisampled_2d']: r#296
[#489 'texture_multisampled_2d']: r#296
[#489 'texture_storage_1d']: r#296
[#489 'texture_storage_2d']: r#296
[#489 'texture_storage_2d_array']: r#296
[#489 'texture_storage_3d']: r#296
[#489 'true']: r#296
[#489 'u32']: r#296
[#489 'vec2']: r#296
[#489 'vec3']: r#296
[#489 'vec4']: r#296
[#489 '~']: r#296
[#489 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#296
[#489 /0[fh]/]: r#296
[#489 /0[iu]?/]: r#296
[#489 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#296
[#489 /0[xX][0-9a-fA-F]+[iu]?/]: r#296
[#489 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#296
[#489 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#296
[#489 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#296
[#489 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#296
[#489 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#296
[#489 /[1-9][0-9]*[fh]/]: r#296
[#489 /[1-9][0-9]*[iu]?/]: r#296
[#490 '!']: r#297
[#490 '&']: r#297
[#490 '(']: r#297
[#490 '*']: r#297
[#490 '-']: r#297
[#490 'array']: r#297
[#490 'atomic']: r#297
[#490 'bitcast']: r#297
[#490 'bool']: r#297
[#490 'f16']: r#297
[#490 'f32']: r#297
[#490 'false']: r#297
[#490 'i32']: r#297
[#490 'mat2x2']: r#297
[#490 'mat2x3']: r#297
[#490 'mat2x4']: r#297
[#490 'mat3x2']: r#297
[#490 'mat3x3']: r#297
[#490 'mat3x4']: r#297
[#490 'mat4x2']: r#297
[#490 'mat4x3']: r#297
[#490 'mat4x4']: r#297
[#490 'ptr']: r#297
[#490 'sampler']: r#297
[#490 'sampler_comparison']: r#297
[#490 'texture_1d']: r#297
[#490 'texture_2d']: r#297
[#490 'texture_2d_array']: r#297
[#490 'texture_3d']: r#297
[#490 'texture_cube']: r#297
[#490 'texture_cube_array']: r#297
[#490 'texture_depth_2d']: r#297
[#490 'texture_depth_2d_array']: r#297
[#490 'texture_depth_cube']: r#297
[#490 'texture_depth_cube_array']: r#297
[#490 'texture_depth_multisampled_2d']: r#297
[#490 'texture_multisampled_2d']: r#297
[#490 'texture_storage_1d']: r#297
[#490 'texture_storage_2d']: r#297
[#490 'texture_storage_2d_array']: r#297
[#490 'texture_storage_3d']: r#297
[#490 'true']: r#297
[#490 'u32']: r#297
[#490 'vec2']: r#297
[#490 'vec3']: r#297
[#490 'vec4']: r#297
[#490 '~']: r#297
[#490 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#297
[#490 /0[fh]/]: r#297
[#490 /0[iu]?/]: r#297
[#490 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#297
[#490 /0[xX][0-9a-fA-F]+[iu]?/]: r#297
[#490 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#297
[#490 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#297
[#490 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#297
[#490 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#297
[#490 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#297
[#490 /[1-9][0-9]*[fh]/]: r#297
[#490 /[1-9][0-9]*[iu]?/]: r#297
[#491 '!']: r#298
[#491 '&']: r#298
[#491 '(']: r#298
[#491 '*']: r#298
[#491 '-']: r#298
[#491 'array']: r#298
[#491 'atomic']: r#298
[#491 'bitcast']: r#298
[#491 'bool']: r#298
[#491 'f16']: r#298
[#491 'f32']: r#298
[#491 'false']: r#298
[#491 'i32']: r#298
[#491 'mat2x2']: r#298
[#491 'mat2x3']: r#298
[#491 'mat2x4']: r#298
[#491 'mat3x2']: r#298
[#491 'mat3x3']: r#298
[#491 'mat3x4']: r#298
[#491 'mat4x2']: r#298
[#491 'mat4x3']: r#298
[#491 'mat4x4']: r#298
[#491 'ptr']: r#298
[#491 'sampler']: r#298
[#491 'sampler_comparison']: r#298
[#491 'texture_1d']: r#298
[#491 'texture_2d']: r#298
[#491 'texture_2d_array']: r#298
[#491 'texture_3d']: r#298
[#491 'texture_cube']: r#298
[#491 'texture_cube_array']: r#298
[#491 'texture_depth_2d']: r#298
[#491 'texture_depth_2d_array']: r#298
[#491 'texture_depth_cube']: r#298
[#491 'texture_depth_cube_array']: r#298
[#491 'texture_depth_multisampled_2d']: r#298
[#491 'texture_multisampled_2d']: r#298
[#491 'texture_storage_1d']: r#298
[#491 'texture_storage_2d']: r#298
[#491 'texture_storage_2d_array']: r#298
[#491 'texture_storage_3d']: r#298
[#491 'true']: r#298
[#491 'u32']: r#298
[#491 'vec2']: r#298
[#491 'vec3']: r#298
[#491 'vec4']: r#298
[#491 '~']: r#298
[#491 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#298
[#491 /0[fh]/]: r#298
[#491 /0[iu]?/]: r#298
[#491 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#298
[#491 /0[xX][0-9a-fA-F]+[iu]?/]: r#298
[#491 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#298
[#491 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#298
[#491 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#298
[#491 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#298
[#491 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#298
[#491 /[1-9][0-9]*[fh]/]: r#298
[#491 /[1-9][0-9]*[iu]?/]: r#298
[#492 '!']: r#299
[#492 '&']: r#299
[#492 '(']: r#299
[#492 '*']: r#299
[#492 '-']: r#299
[#492 'array']: r#299
[#492 'atomic']: r#299
[#492 'bitcast']: r#299
[#492 'bool']: r#299
[#492 'f16']: r#299
[#492 'f32']: r#299
[#492 'false']: r#299
[#492 'i32']: r#299
[#492 'mat2x2']: r#299
[#492 'mat2x3']: r#299
[#492 'mat2x4']: r#299
[#492 'mat3x2']: r#299
[#492 'mat3x3']: r#299
[#492 'mat3x4']: r#299
[#492 'mat4x2']: r#299
[#492 'mat4x3']: r#299
[#492 'mat4x4']: r#299
[#492 'ptr']: r#299
[#492 'sampler']: r#299
[#492 'sampler_comparison']: r#299
[#492 'texture_1d']: r#299
[#492 'texture_2d']: r#299
[#492 'texture_2d_array']: r#299
[#492 'texture_3d']: r#299
[#492 'texture_cube']: r#299
[#492 'texture_cube_array']: r#299
[#492 'texture_depth_2d']: r#299
[#492 'texture_depth_2d_array']: r#299
[#492 'texture_depth_cube']: r#299
[#492 'texture_depth_cube_array']: r#299
[#492 'texture_depth_multisampled_2d']: r#299
[#492 'texture_multisampled_2d']: r#299
[#492 'texture_storage_1d']: r#299
[#492 'texture_storage_2d']: r#299
[#492 'texture_storage_2d_array']: r#299
[#492 'texture_storage_3d']: r#299
[#492 'true']: r#299
[#492 'u32']: r#299
[#492 'vec2']: r#299
[#492 'vec3']: r#299
[#492 'vec4']: r#299
[#492 '~']: r#299
[#492 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#299
[#492 /0[fh]/]: r#299
[#492 /0[iu]?/]: r#299
[#492 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#299
[#492 /0[xX][0-9a-fA-F]+[iu]?/]: r#299
[#492 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#299
[#492 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#299
[#492 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#299
[#492 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#299
[#492 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#299
[#492 /[1-9][0-9]*[fh]/]: r#299
[#492 /[1-9][0-9]*[iu]?/]: r#299
[#493 '=']: s#552
[#494 '=']: s#551
[#495 '!']: s#68
[#495 '&']: s#71
[#495 '(']: s#83
[#495 '*']: s#70
[#495 '-']: s#67
[#495 'array']: s#87
[#495 'atomic']: s#101
[#495 'bitcast']: s#77
[#495 'bool']: s#94
[#495 'f16']: s#96
[#495 'f32']: s#95
[#495 'false']: s#93
[#495 'i32']: s#97
[#495 'mat2x2']: s#106
[#495 'mat2x3']: s#107
[#495 'mat2x4']: s#108
[#495 'mat3x2']: s#109
[#495 'mat3x3']: s#110
[#495 'mat3x4']: s#111
[#495 'mat4x2']: s#112
[#495 'mat4x3']: s#113
[#495 'mat4x4']: s#114
[#495 'ptr']: s#99
[#495 'sampler']: s#131
[#495 'sampler_comparison']: s#132
[#495 'texture_1d']: s#138
[#495 'texture_2d']: s#139
[#495 'texture_2d_array']: s#140
[#495 'texture_3d']: s#141
[#495 'texture_cube']: s#142
[#495 'texture_cube_array']: s#143
[#495 'texture_depth_2d']: s#133
[#495 'texture_depth_2d_array']: s#134
[#495 'texture_depth_cube']: s#135
[#495 'texture_depth_cube_array']: s#136
[#495 'texture_depth_multisampled_2d']: s#137
[#495 'texture_multisampled_2d']: s#144
[#495 'texture_storage_1d']: s#145
[#495 'texture_storage_2d']: s#146
[#495 'texture_storage_2d_array']: s#147
[#495 'texture_storage_3d']: s#148
[#495 'true']: s#92
[#495 'u32']: s#98
[#495 'vec2']: s#103
[#495 'vec3']: s#104
[#495 'vec4']: s#105
[#495 '~']: s#69
[#495 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#495 /0[fh]/]: s#118
[#495 /0[iu]?/]: s#115
[#495 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#495 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#495 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#495 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#495 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#495 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#495 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#495 /[1-9][0-9]*[fh]/]: s#119
[#495 /[1-9][0-9]*[iu]?/]: s#116
[#496 ')']: r#300
[#496 ';']: r#300
[#497 '!']: s#68
[#497 '&']: s#71
[#497 '(']: s#83
[#497 '*']: s#70
[#497 '-']: s#67
[#497 'array']: s#87
[#497 'atomic']: s#101
[#497 'bitcast']: s#77
[#497 'bool']: s#94
[#497 'f16']: s#96
[#497 'f32']: s#95
[#497 'false']: s#93
[#497 'i32']: s#97
[#497 'mat2x2']: s#106
[#497 'mat2x3']: s#107
[#497 'mat2x4']: s#108
[#497 'mat3x2']: s#109
[#497 'mat3x3']: s#110
[#497 'mat3x4']: s#111
[#497 'mat4x2']: s#112
[#497 'mat4x3']: s#113
[#497 'mat4x4']: s#114
[#497 'ptr']: s#99
[#497 'sampler']: s#131
[#497 'sampler_comparison']: s#132
[#497 'texture_1d']: s#138
[#497 'texture_2d']: s#139
[#497 'texture_2d_array']: s#140
[#497 'texture_3d']: s#141
[#497 'texture_cube']: s#142
[#497 'texture_cube_array']: s#143
[#497 'texture_depth_2d']: s#133
[#497 'texture_depth_2d_array']: s#134
[#497 'texture_depth_cube']: s#135
[#497 'texture_depth_cube_array']: s#136
[#497 'texture_depth_multisampled_2d']: s#137
[#497 'texture_multisampled_2d']: s#144
[#497 'texture_storage_1d']: s#145
[#497 'texture_storage_2d']: s#146
[#497 'texture_storage_2d_array']: s#147
[#497 'texture_storage_3d']: s#148
[#497 'true']: s#92
[#497 'u32']: s#98
[#497 'vec2']: s#103
[#497 'vec3']: s#104
[#497 'vec4']: s#105
[#497 '~']: s#69
[#497 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#497 /0[fh]/]: s#118
[#497 /0[iu]?/]: s#115
[#497 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#497 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#497 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#497 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#497 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#497 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#497 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#497 /[1-9][0-9]*[fh]/]: s#119
[#497 /[1-9][0-9]*[iu]?/]: s#116
[#498 '(']: s#548
[#499 '@']: s#35
[#500 '!']: s#68
[#500 '&']: s#71
[#500 '(']: s#83
[#500 '*']: s#70
[#500 '-']: s#67
[#500 'array']: s#87
[#500 'atomic']: s#101
[#500 'bitcast']: s#77
[#500 'bool']: s#94
[#500 'f16']: s#96
[#500 'f32']: s#95
[#500 'false']: s#93
[#500 'i32']: s#97
[#500 'mat2x2']: s#106
[#500 'mat2x3']: s#107
[#500 'mat2x4']: s#108
[#500 'mat3x2']: s#109
[#500 'mat3x3']: s#110
[#500 'mat3x4']: s#111
[#500 'mat4x2']: s#112
[#500 'mat4x3']: s#113
[#500 'mat4x4']: s#114
[#500 'ptr']: s#99
[#500 'sampler']: s#131
[#500 'sampler_comparison']: s#132
[#500 'texture_1d']: s#138
[#500 'texture_2d']: s#139
[#500 'texture_2d_array']: s#140
[#500 'texture_3d']: s#141
[#500 'texture_cube']: s#142
[#500 'texture_cube_array']: s#143
[#500 'texture_depth_2d']: s#133
[#500 'texture_depth_2d_array']: s#134
[#500 'texture_depth_cube']: s#135
[#500 'texture_depth_cube_array']: s#136
[#500 'texture_depth_multisampled_2d']: s#137
[#500 'texture_multisampled_2d']: s#144
[#500 'texture_storage_1d']: s#145
[#500 'texture_storage_2d']: s#146
[#500 'texture_storage_2d_array']: s#147
[#500 'texture_storage_3d']: s#148
[#500 'true']: s#92
[#500 'u32']: s#98
[#500 'vec2']: s#103
[#500 'vec3']: s#104
[#500 'vec4']: s#105
[#500 '~']: s#69
[#500 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#500 /0[fh]/]: s#118
[#500 /0[iu]?/]: s#115
[#500 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#500 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#500 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#500 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#500 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#500 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#500 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#500 /[1-9][0-9]*[fh]/]: s#119
[#500 /[1-9][0-9]*[iu]?/]: s#116
[#501 'else']: s#543
[#502 '!']: s#68
[#502 '&']: s#71
[#502 '(']: s#83
[#502 '*']: s#70
[#502 '-']: s#67
[#502 'array']: s#87
[#502 'atomic']: s#101
[#502 'bitcast']: s#77
[#502 'bool']: s#94
[#502 'f16']: s#96
[#502 'f32']: s#95
[#502 'false']: s#93
[#502 'i32']: s#97
[#502 'mat2x2']: s#106
[#502 'mat2x3']: s#107
[#502 'mat2x4']: s#108
[#502 'mat3x2']: s#109
[#502 'mat3x3']: s#110
[#502 'mat3x4']: s#111
[#502 'mat4x2']: s#112
[#502 'mat4x3']: s#113
[#502 'mat4x4']: s#114
[#502 'ptr']: s#99
[#502 'sampler']: s#131
[#502 'sampler_comparison']: s#132
[#502 'texture_1d']: s#138
[#502 'texture_2d']: s#139
[#502 'texture_2d_array']: s#140
[#502 'texture_3d']: s#141
[#502 'texture_cube']: s#142
[#502 'texture_cube_array']: s#143
[#502 'texture_depth_2d']: s#133
[#502 'texture_depth_2d_array']: s#134
[#502 'texture_depth_cube']: s#135
[#502 'texture_depth_cube_array']: s#136
[#502 'texture_depth_multisampled_2d']: s#137
[#502 'texture_multisampled_2d']: s#144
[#502 'texture_storage_1d']: s#145
[#502 'texture_storage_2d']: s#146
[#502 'texture_storage_2d_array']: s#147
[#502 'texture_storage_3d']: s#148
[#502 'true']: s#92
[#502 'u32']: s#98
[#502 'vec2']: s#103
[#502 'vec3']: s#104
[#502 'vec4']: s#105
[#502 '~']: s#69
[#502 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#502 /0[fh]/]: s#118
[#502 /0[iu]?/]: s#115
[#502 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#502 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#502 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#502 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#502 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#502 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#502 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#502 /[1-9][0-9]*[fh]/]: s#119
[#502 /[1-9][0-9]*[iu]?/]: s#116
[#503 ';']: r#301
[#504 ';']: r#302
[#505 '&']: r#303
[#505 '(']: r#303
[#505 '*']: r#303
[#505 ';']: r#303
[#505 '@']: r#303
[#505 '_']: r#303
[#505 'array']: r#303
[#505 'atomic']: r#303
[#505 'bool']: r#303
[#505 'break']: r#303
[#505 'const']: r#303
[#505 'const_assert']: r#303
[#505 'continue']: r#303
[#505 'continuing']: r#303
[#505 'discard']: r#303
[#505 'f16']: r#303
[#505 'f32']: r#303
[#505 'for']: r#303
[#505 'i32']: r#303
[#505 'if']: r#303
[#505 'let']: r#303
[#505 'loop']: r#303
[#505 'mat2x2']: r#303
[#505 'mat2x3']: r#303
[#505 'mat2x4']: r#303
[#505 'mat3x2']: r#303
[#505 'mat3x3']: r#303
[#505 'mat3x4']: r#303
[#505 'mat4x2']: r#303
[#505 'mat4x3']: r#303
[#505 'mat4x4']: r#303
[#505 'ptr']: r#303
[#505 'return']: r#303
[#505 'sampler']: r#303
[#505 'sampler_comparison']: r#303
[#505 'switch']: r#303
[#505 'texture_1d']: r#303
[#505 'texture_2d']: r#303
[#505 'texture_2d_array']: r#303
[#505 'texture_3d']: r#303
[#505 'texture_cube']: r#303
[#505 'texture_cube_array']: r#303
[#505 'texture_depth_2d']: r#303
[#505 'texture_depth_2d_array']: r#303
[#505 'texture_depth_cube']: r#303
[#505 'texture_depth_cube_array']: r#303
[#505 'texture_depth_multisampled_2d']: r#303
[#505 'texture_multisampled_2d']: r#303
[#505 'texture_storage_1d']: r#303
[#505 'texture_storage_2d']: r#303
[#505 'texture_storage_2d_array']: r#303
[#505 'texture_storage_3d']: r#303
[#505 'u32']: r#303
[#505 'var']: r#303
[#505 'vec2']: r#303
[#505 'vec3']: r#303
[#505 'vec4']: r#303
[#505 'while']: r#303
[#505 '{']: r#303
[#505 '}']: r#303
[#505 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#303
[#506 '&']: r#304
[#506 '(']: r#304
[#506 '*']: r#304
[#506 ';']: r#304
[#506 '@']: r#304
[#506 '_']: r#304
[#506 'array']: r#304
[#506 'atomic']: r#304
[#506 'bool']: r#304
[#506 'break']: r#304
[#506 'const']: r#304
[#506 'const_assert']: r#304
[#506 'continue']: r#304
[#506 'continuing']: r#304
[#506 'discard']: r#304
[#506 'f16']: r#304
[#506 'f32']: r#304
[#506 'for']: r#304
[#506 'i32']: r#304
[#506 'if']: r#304
[#506 'let']: r#304
[#506 'loop']: r#304
[#506 'mat2x2']: r#304
[#506 'mat2x3']: r#304
[#506 'mat2x4']: r#304
[#506 'mat3x2']: r#304
[#506 'mat3x3']: r#304
[#506 'mat3x4']: r#304
[#506 'mat4x2']: r#304
[#506 'mat4x3']: r#304
[#506 'mat4x4']: r#304
[#506 'ptr']: r#304
[#506 'return']: r#304
[#506 'sampler']: r#304
[#506 'sampler_comparison']: r#304
[#506 'switch']: r#304
[#506 'texture_1d']: r#304
[#506 'texture_2d']: r#304
[#506 'texture_2d_array']: r#304
[#506 'texture_3d']: r#304
[#506 'texture_cube']: r#304
[#506 'texture_cube_array']: r#304
[#506 'texture_depth_2d']: r#304
[#506 'texture_depth_2d_array']: r#304
[#506 'texture_depth_cube']: r#304
[#506 'texture_depth_cube_array']: r#304
[#506 'texture_depth_multisampled_2d']: r#304
[#506 'texture_multisampled_2d']: r#304
[#506 'texture_storage_1d']: r#304
[#506 'texture_storage_2d']: r#304
[#506 'texture_storage_2d_array']: r#304
[#506 'texture_storage_3d']: r#304
[#506 'u32']: r#304
[#506 'var']: r#304
[#506 'vec2']: r#304
[#506 'vec3']: r#304
[#506 'vec4']: r#304
[#506 'while']: r#304
[#506 '{']: r#304
[#506 '}']: r#304
[#506 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#304
[#507 '&']: r#305
[#507 '(']: r#305
[#507 '*']: r#305
[#507 ';']: r#305
[#507 '@']: r#305
[#507 '_']: r#305
[#507 'array']: r#305
[#507 'atomic']: r#305
[#507 'bool']: r#305
[#507 'break']: r#305
[#507 'const']: r#305
[#507 'const_assert']: r#305
[#507 'continue']: r#305
[#507 'continuing']: r#305
[#507 'discard']: r#305
[#507 'f16']: r#305
[#507 'f32']: r#305
[#507 'for']: r#305
[#507 'i32']: r#305
[#507 'if']: r#305
[#507 'let']: r#305
[#507 'loop']: r#305
[#507 'mat2x2']: r#305
[#507 'mat2x3']: r#305
[#507 'mat2x4']: r#305
[#507 'mat3x2']: r#305
[#507 'mat3x3']: r#305
[#507 'mat3x4']: r#305
[#507 'mat4x2']: r#305
[#507 'mat4x3']: r#305
[#507 'mat4x4']: r#305
[#507 'ptr']: r#305
[#507 'return']: r#305
[#507 'sampler']: r#305
[#507 'sampler_comparison']: r#305
[#507 'switch']: r#305
[#507 'texture_1d']: r#305
[#507 'texture_2d']: r#305
[#507 'texture_2d_array']: r#305
[#507 'texture_3d']: r#305
[#507 'texture_cube']: r#305
[#507 'texture_cube_array']: r#305
[#507 'texture_depth_2d']: r#305
[#507 'texture_depth_2d_array']: r#305
[#507 'texture_depth_cube']: r#305
[#507 'texture_depth_cube_array']: r#305
[#507 'texture_depth_multisampled_2d']: r#305
[#507 'texture_multisampled_2d']: r#305
[#507 'texture_storage_1d']: r#305
[#507 'texture_storage_2d']: r#305
[#507 'texture_storage_2d_array']: r#305
[#507 'texture_storage_3d']: r#305
[#507 'u32']: r#305
[#507 'var']: r#305
[#507 'vec2']: r#305
[#507 'vec3']: r#305
[#507 'vec4']: r#305
[#507 'while']: r#305
[#507 '{']: r#305
[#507 '}']: r#305
[#507 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#305
[#508 '&']: r#306
[#508 '(']: r#306
[#508 '*']: r#306
[#508 ';']: r#306
[#508 '@']: r#306
[#508 '_']: r#306
[#508 'array']: r#306
[#508 'atomic']: r#306
[#508 'bool']: r#306
[#508 'break']: r#306
[#508 'const']: r#306
[#508 'const_assert']: r#306
[#508 'continue']: r#306
[#508 'continuing']: r#306
[#508 'discard']: r#306
[#508 'f16']: r#306
[#508 'f32']: r#306
[#508 'for']: r#306
[#508 'i32']: r#306
[#508 'if']: r#306
[#508 'let']: r#306
[#508 'loop']: r#306
[#508 'mat2x2']: r#306
[#508 'mat2x3']: r#306
[#508 'mat2x4']: r#306
[#508 'mat3x2']: r#306
[#508 'mat3x3']: r#306
[#508 'mat3x4']: r#306
[#508 'mat4x2']: r#306
[#508 'mat4x3']: r#306
[#508 'mat4x4']: r#306
[#508 'ptr']: r#306
[#508 'return']: r#306
[#508 'sampler']: r#306
[#508 'sampler_comparison']: r#306
[#508 'switch']: r#306
[#508 'texture_1d']: r#306
[#508 'texture_2d']: r#306
[#508 'texture_2d_array']: r#306
[#508 'texture_3d']: r#306
[#508 'texture_cube']: r#306
[#508 'texture_cube_array']: r#306
[#508 'texture_depth_2d']: r#306
[#508 'texture_depth_2d_array']: r#306
[#508 'texture_depth_cube']: r#306
[#508 'texture_depth_cube_array']: r#306
[#508 'texture_depth_multisampled_2d']: r#306
[#508 'texture_multisampled_2d']: r#306
[#508 'texture_storage_1d']: r#306
[#508 'texture_storage_2d']: r#306
[#508 'texture_storage_2d_array']: r#306
[#508 'texture_storage_3d']: r#306
[#508 'u32']: r#306
[#508 'var']: r#306
[#508 'vec2']: r#306
[#508 'vec3']: r#306
[#508 'vec4']: r#306
[#508 'while']: r#306
[#508 '{']: r#306
[#508 '}']: r#306
[#508 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#306
[#509 '&']: r#307
[#509 '(']: r#307
[#509 '*']: r#307
[#509 ';']: r#307
[#509 '@']: r#307
[#509 '_']: r#307
[#509 'array']: r#307
[#509 'atomic']: r#307
[#509 'bool']: r#307
[#509 'break']: r#307
[#509 'const']: r#307
[#509 'const_assert']: r#307
[#509 'continue']: r#307
[#509 'continuing']: r#307
[#509 'discard']: r#307
[#509 'f16']: r#307
[#509 'f32']: r#307
[#509 'for']: r#307
[#509 'i32']: r#307
[#509 'if']: r#307
[#509 'let']: r#307
[#509 'loop']: r#307
[#509 'mat2x2']: r#307
[#509 'mat2x3']: r#307
[#509 'mat2x4']: r#307
[#509 'mat3x2']: r#307
[#509 'mat3x3']: r#307
[#509 'mat3x4']: r#307
[#509 'mat4x2']: r#307
[#509 'mat4x3']: r#307
[#509 'mat4x4']: r#307
[#509 'ptr']: r#307
[#509 'return']: r#307
[#509 'sampler']: r#307
[#509 'sampler_comparison']: r#307
[#509 'switch']: r#307
[#509 'texture_1d']: r#307
[#509 'texture_2d']: r#307
[#509 'texture_2d_array']: r#307
[#509 'texture_3d']: r#307
[#509 'texture_cube']: r#307
[#509 'texture_cube_array']: r#307
[#509 'texture_depth_2d']: r#307
[#509 'texture_depth_2d_array']: r#307
[#509 'texture_depth_cube']: r#307
[#509 'texture_depth_cube_array']: r#307
[#509 'texture_depth_multisampled_2d']: r#307
[#509 'texture_multisampled_2d']: r#307
[#509 'texture_storage_1d']: r#307
[#509 'texture_storage_2d']: r#307
[#509 'texture_storage_2d_array']: r#307
[#509 'texture_storage_3d']: r#307
[#509 'u32']: r#307
[#509 'var']: r#307
[#509 'vec2']: r#307
[#509 'vec3']: r#307
[#509 'vec4']: r#307
[#509 'while']: r#307
[#509 '{']: r#307
[#509 '}']: r#307
[#509 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#307
[#510 '&']: r#308
[#510 '(']: r#308
[#510 '*']: r#308
[#510 ';']: r#308
[#510 '@']: r#308
[#510 '_']: r#308
[#510 'array']: r#308
[#510 'atomic']: r#308
[#510 'bool']: r#308
[#510 'break']: r#308
[#510 'const']: r#308
[#510 'const_assert']: r#308
[#510 'continue']: r#308
[#510 'continuing']: r#308
[#510 'discard']: r#308
[#510 'f16']: r#308
[#510 'f32']: r#308
[#510 'for']: r#308
[#510 'i32']: r#308
[#510 'if']: r#308
[#510 'let']: r#308
[#510 'loop']: r#308
[#510 'mat2x2']: r#308
[#510 'mat2x3']: r#308
[#510 'mat2x4']: r#308
[#510 'mat3x2']: r#308
[#510 'mat3x3']: r#308
[#510 'mat3x4']: r#308
[#510 'mat4x2']: r#308
[#510 'mat4x3']: r#308
[#510 'mat4x4']: r#308
[#510 'ptr']: r#308
[#510 'return']: r#308
[#510 'sampler']: r#308
[#510 'sampler_comparison']: r#308
[#510 'switch']: r#308
[#510 'texture_1d']: r#308
[#510 'texture_2d']: r#308
[#510 'texture_2d_array']: r#308
[#510 'texture_3d']: r#308
[#510 'texture_cube']: r#308
[#510 'texture_cube_array']: r#308
[#510 'texture_depth_2d']: r#308
[#510 'texture_depth_2d_array']: r#308
[#510 'texture_depth_cube']: r#308
[#510 'texture_depth_cube_array']: r#308
[#510 'texture_depth_multisampled_2d']: r#308
[#510 'texture_multisampled_2d']: r#308
[#510 'texture_storage_1d']: r#308
[#510 'texture_storage_2d']: r#308
[#510 'texture_storage_2d_array']: r#308
[#510 'texture_storage_3d']: r#308
[#510 'u32']: r#308
[#510 'var']: r#308
[#510 'vec2']: r#308
[#510 'vec3']: r#308
[#510 'vec4']: r#308
[#510 'while']: r#308
[#510 '{']: r#308
[#510 '}']: r#308
[#510 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#308
[#511 '&']: r#309
[#511 '(']: r#309
[#511 '*']: r#309
[#511 ';']: r#309
[#511 '@']: r#309
[#511 '_']: r#309
[#511 'array']: r#309
[#511 'atomic']: r#309
[#511 'bool']: r#309
[#511 'break']: r#309
[#511 'const']: r#309
[#511 'const_assert']: r#309
[#511 'continue']: r#309
[#511 'continuing']: r#309
[#511 'discard']: r#309
[#511 'f16']: r#309
[#511 'f32']: r#309
[#511 'for']: r#309
[#511 'i32']: r#309
[#511 'if']: r#309
[#511 'let']: r#309
[#511 'loop']: r#309
[#511 'mat2x2']: r#309
[#511 'mat2x3']: r#309
[#511 'mat2x4']: r#309
[#511 'mat3x2']: r#309
[#511 'mat3x3']: r#309
[#511 'mat3x4']: r#309
[#511 'mat4x2']: r#309
[#511 'mat4x3']: r#309
[#511 'mat4x4']: r#309
[#511 'ptr']: r#309
[#511 'return']: r#309
[#511 'sampler']: r#309
[#511 'sampler_comparison']: r#309
[#511 'switch']: r#309
[#511 'texture_1d']: r#309
[#511 'texture_2d']: r#309
[#511 'texture_2d_array']: r#309
[#511 'texture_3d']: r#309
[#511 'texture_cube']: r#309
[#511 'texture_cube_array']: r#309
[#511 'texture_depth_2d']: r#309
[#511 'texture_depth_2d_array']: r#309
[#511 'texture_depth_cube']: r#309
[#511 'texture_depth_cube_array']: r#309
[#511 'texture_depth_multisampled_2d']: r#309
[#511 'texture_multisampled_2d']: r#309
[#511 'texture_storage_1d']: r#309
[#511 'texture_storage_2d']: r#309
[#511 'texture_storage_2d_array']: r#309
[#511 'texture_storage_3d']: r#309
[#511 'u32']: r#309
[#511 'var']: r#309
[#511 'vec2']: r#309
[#511 'vec3']: r#309
[#511 'vec4']: r#309
[#511 'while']: r#309
[#511 '{']: r#309
[#511 '}']: r#309
[#511 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#309
[#512 '&']: r#310
[#512 '(']: r#310
[#512 '*']: r#310
[#512 ';']: r#310
[#512 '@']: r#310
[#512 '_']: r#310
[#512 'array']: r#310
[#512 'atomic']: r#310
[#512 'bool']: r#310
[#512 'break']: r#310
[#512 'const']: r#310
[#512 'const_assert']: r#310
[#512 'continue']: r#310
[#512 'continuing']: r#310
[#512 'discard']: r#310
[#512 'f16']: r#310
[#512 'f32']: r#310
[#512 'for']: r#310
[#512 'i32']: r#310
[#512 'if']: r#310
[#512 'let']: r#310
[#512 'loop']: r#310
[#512 'mat2x2']: r#310
[#512 'mat2x3']: r#310
[#512 'mat2x4']: r#310
[#512 'mat3x2']: r#310
[#512 'mat3x3']: r#310
[#512 'mat3x4']: r#310
[#512 'mat4x2']: r#310
[#512 'mat4x3']: r#310
[#512 'mat4x4']: r#310
[#512 'ptr']: r#310
[#512 'return']: r#310
[#512 'sampler']: r#310
[#512 'sampler_comparison']: r#310
[#512 'switch']: r#310
[#512 'texture_1d']: r#310
[#512 'texture_2d']: r#310
[#512 'texture_2d_array']: r#310
[#512 'texture_3d']: r#310
[#512 'texture_cube']: r#310
[#512 'texture_cube_array']: r#310
[#512 'texture_depth_2d']: r#310
[#512 'texture_depth_2d_array']: r#310
[#512 'texture_depth_cube']: r#310
[#512 'texture_depth_cube_array']: r#310
[#512 'texture_depth_multisampled_2d']: r#310
[#512 'texture_multisampled_2d']: r#310
[#512 'texture_storage_1d']: r#310
[#512 'texture_storage_2d']: r#310
[#512 'texture_storage_2d_array']: r#310
[#512 'texture_storage_3d']: r#310
[#512 'u32']: r#310
[#512 'var']: r#310
[#512 'vec2']: r#310
[#512 'vec3']: r#310
[#512 'vec4']: r#310
[#512 'while']: r#310
[#512 '{']: r#310
[#512 '}']: r#310
[#512 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#310
[#513 '}']: r#311
[#514 '&']: r#312
[#514 '(']: r#312
[#514 '*']: r#312
[#514 ';']: r#312
[#514 '@']: r#312
[#514 '_']: r#312
[#514 'alias']: r#312
[#514 'array']: r#312
[#514 'atomic']: r#312
[#514 'bool']: r#312
[#514 'break']: r#312
[#514 'case']: r#312
[#514 'const']: r#312
[#514 'const_assert']: r#312
[#514 'continue']: r#312
[#514 'continuing']: r#312
[#514 'default']: r#312
[#514 'discard']: r#312
[#514 'else']: r#312
[#514 'f16']: r#312
[#514 'f32']: r#312
[#514 'fn']: r#312
[#514 'for']: r#312
[#514 'i32']: r#312
[#514 'if']: r#312
[#514 'let']: r#312
[#514 'loop']: r#312
[#514 'mat2x2']: r#312
[#514 'mat2x3']: r#312
[#514 'mat2x4']: r#312
[#514 'mat3x2']: r#312
[#514 'mat3x3']: r#312
[#514 'mat3x4']: r#312
[#514 'mat4x2']: r#312
[#514 'mat4x3']: r#312
[#514 'mat4x4']: r#312
[#514 'override']: r#312
[#514 'ptr']: r#312
[#514 'return']: r#312
[#514 'sampler']: r#312
[#514 'sampler_comparison']: r#312
[#514 'struct']: r#312
[#514 'switch']: r#312
[#514 'texture_1d']: r#312
[#514 'texture_2d']: r#312
[#514 'texture_2d_array']: r#312
[#514 'texture_3d']: r#312
[#514 'texture_cube']: r#312
[#514 'texture_cube_array']: r#312
[#514 'texture_depth_2d']: r#312
[#514 'texture_depth_2d_array']: r#312
[#514 'texture_depth_cube']: r#312
[#514 'texture_depth_cube_array']: r#312
[#514 'texture_depth_multisampled_2d']: r#312
[#514 'texture_multisampled_2d']: r#312
[#514 'texture_storage_1d']: r#312
[#514 'texture_storage_2d']: r#312
[#514 'texture_storage_2d_array']: r#312
[#514 'texture_storage_3d']: r#312
[#514 'u32']: r#312
[#514 'var']: r#312
[#514 'vec2']: r#312
[#514 'vec3']: r#312
[#514 'vec4']: r#312
[#514 'while']: r#312
[#514 '{']: r#312
[#514 '}']: r#312
[#514 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#312
[#514 EndOfText]: r#312
[#515 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#313
[#516 ':']: s#538
[#517 ',']: s#537
[#518 ')']: r#314
[#518 ',']: r#314
[#519 ',']: s#520
[#520 '@']: s#35
[#521 '->']: s#533
[#522 ',']: r#315
[#522 '}']: r#315
[#523 ',']: r#316
[#523 '}']: r#316
[#524 '}']: s#531
[#525 '}']: r#317
[#526 'array']: s#297
[#526 'atomic']: s#101
[#526 'bool']: s#94
[#526 'f16']: s#96
[#526 'f32']: s#95
[#526 'i32']: s#97
[#526 'mat2x2']: s#106
[#526 'mat2x3']: s#107
[#526 'mat2x4']: s#108
[#526 'mat3x2']: s#109
[#526 'mat3x3']: s#110
[#526 'mat3x4']: s#111
[#526 'mat4x2']: s#112
[#526 'mat4x3']: s#113
[#526 'mat4x4']: s#114
[#526 'ptr']: s#99
[#526 'sampler']: s#131
[#526 'sampler_comparison']: s#132
[#526 'texture_1d']: s#138
[#526 'texture_2d']: s#139
[#526 'texture_2d_array']: s#140
[#526 'texture_3d']: s#141
[#526 'texture_cube']: s#142
[#526 'texture_cube_array']: s#143
[#526 'texture_depth_2d']: s#133
[#526 'texture_depth_2d_array']: s#134
[#526 'texture_depth_cube']: s#135
[#526 'texture_depth_cube_array']: s#136
[#526 'texture_depth_multisampled_2d']: s#137
[#526 'texture_multisampled_2d']: s#144
[#526 'texture_storage_1d']: s#145
[#526 'texture_storage_2d']: s#146
[#526 'texture_storage_2d_array']: s#147
[#526 'texture_storage_3d']: s#148
[#526 'u32']: s#98
[#526 'vec2']: s#103
[#526 'vec3']: s#104
[#526 'vec4']: s#105
[#526 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#527 '>']: r#318
[#528 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#319
[#529 ';']: r#320
[#529 '@']: r#320
[#529 'array']: r#320
[#529 'atomic']: r#320
[#529 'bool']: r#320
[#529 'f16']: r#320
[#529 'f32']: r#320
[#529 'fn']: r#320
[#529 'for']: r#320
[#529 'i32']: r#320
[#529 'if']: r#320
[#529 'loop']: r#320
[#529 'mat2x2']: r#320
[#529 'mat2x3']: r#320
[#529 'mat2x4']: r#320
[#529 'mat3x2']: r#320
[#529 'mat3x3']: r#320
[#529 'mat3x4']: r#320
[#529 'mat4x2']: r#320
[#529 'mat4x3']: r#320
[#529 'mat4x4']: r#320
[#529 'override']: r#320
[#529 'ptr']: r#320
[#529 'sampler']: r#320
[#529 'sampler_comparison']: r#320
[#529 'switch']: r#320
[#529 'texture_1d']: r#320
[#529 'texture_2d']: r#320
[#529 'texture_2d_array']: r#320
[#529 'texture_3d']: r#320
[#529 'texture_cube']: r#320
[#529 'texture_cube_array']: r#320
[#529 'texture_depth_2d']: r#320
[#529 'texture_depth_2d_array']: r#320
[#529 'texture_depth_cube']: r#320
[#529 'texture_depth_cube_array']: r#320
[#529 'texture_depth_multisampled_2d']: r#320
[#529 'texture_multisampled_2d']: r#320
[#529 'texture_storage_1d']: r#320
[#529 'texture_storage_2d']: r#320
[#529 'texture_storage_2d_array']: r#320
[#529 'texture_storage_3d']: r#320
[#529 'u32']: r#320
[#529 'var']: r#320
[#529 'vec2']: r#320
[#529 'vec3']: r#320
[#529 'vec4']: r#320
[#529 'while']: r#320
[#529 '{']: r#320
[#529 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#320
[#530 ',']: r#321
[#530 '}']: r#321
[#531 ';']: r#322
[#531 '@']: r#322
[#531 'alias']: r#322
[#531 'const']: r#322
[#531 'const_assert']: r#322
[#531 'fn']: r#322
[#531 'override']: r#322
[#531 'struct']: r#322
[#531 'var']: r#322
[#531 EndOfText]: r#322
[#532 '@']: r#323
[#532 '{']: r#323
[#533 '@']: s#35
[#534 ')']: r#324
[#534 ',']: r#324
[#535 ')']: r#325
[#535 ',']: r#325
[#536 ')']: r#326
[#537 ')']: r#327
[#538 'array']: s#297
[#538 'atomic']: s#101
[#538 'bool']: s#94
[#538 'f16']: s#96
[#538 'f32']: s#95
[#538 'i32']: s#97
[#538 'mat2x2']: s#106
[#538 'mat2x3']: s#107
[#538 'mat2x4']: s#108
[#538 'mat3x2']: s#109
[#538 'mat3x3']: s#110
[#538 'mat3x4']: s#111
[#538 'mat4x2']: s#112
[#538 'mat4x3']: s#113
[#538 'mat4x4']: s#114
[#538 'ptr']: s#99
[#538 'sampler']: s#131
[#538 'sampler_comparison']: s#132
[#538 'texture_1d']: s#138
[#538 'texture_2d']: s#139
[#538 'texture_2d_array']: s#140
[#538 'texture_3d']: s#141
[#538 'texture_cube']: s#142
[#538 'texture_cube_array']: s#143
[#538 'texture_depth_2d']: s#133
[#538 'texture_depth_2d_array']: s#134
[#538 'texture_depth_cube']: s#135
[#538 'texture_depth_cube_array']: s#136
[#538 'texture_depth_multisampled_2d']: s#137
[#538 'texture_multisampled_2d']: s#144
[#538 'texture_storage_1d']: s#145
[#538 'texture_storage_2d']: s#146
[#538 'texture_storage_2d_array']: s#147
[#538 'texture_storage_3d']: s#148
[#538 'u32']: s#98
[#538 'vec2']: s#103
[#538 'vec3']: s#104
[#538 'vec4']: s#105
[#538 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#539 '@']: s#35
[#540 'else']: s#584
[#541 '&']: r#328
[#541 '(']: r#328
[#541 '*']: r#328
[#541 ';']: r#328
[#541 '@']: r#328
[#541 '_']: r#328
[#541 'array']: r#328
[#541 'atomic']: r#328
[#541 'bool']: r#328
[#541 'break']: r#328
[#541 'const']: r#328
[#541 'const_assert']: r#328
[#541 'continue']: r#328
[#541 'continuing']: r#328
[#541 'discard']: r#328
[#541 'else']: r#328
[#541 'f16']: r#328
[#541 'f32']: r#328
[#541 'for']: r#328
[#541 'i32']: r#328
[#541 'if']: r#328
[#541 'let']: r#328
[#541 'loop']: r#328
[#541 'mat2x2']: r#328
[#541 'mat2x3']: r#328
[#541 'mat2x4']: r#328
[#541 'mat3x2']: r#328
[#541 'mat3x3']: r#328
[#541 'mat3x4']: r#328
[#541 'mat4x2']: r#328
[#541 'mat4x3']: r#328
[#541 'mat4x4']: r#328
[#541 'ptr']: r#328
[#541 'return']: r#328
[#541 'sampler']: r#328
[#541 'sampler_comparison']: r#328
[#541 'switch']: r#328
[#541 'texture_1d']: r#328
[#541 'texture_2d']: r#328
[#541 'texture_2d_array']: r#328
[#541 'texture_3d']: r#328
[#541 'texture_cube']: r#328
[#541 'texture_cube_array']: r#328
[#541 'texture_depth_2d']: r#328
[#541 'texture_depth_2d_array']: r#328
[#541 'texture_depth_cube']: r#328
[#541 'texture_depth_cube_array']: r#328
[#541 'texture_depth_multisampled_2d']: r#328
[#541 'texture_multisampled_2d']: r#328
[#541 'texture_storage_1d']: r#328
[#541 'texture_storage_2d']: r#328
[#541 'texture_storage_2d_array']: r#328
[#541 'texture_storage_3d']: r#328
[#541 'u32']: r#328
[#541 'var']: r#328
[#541 'vec2']: r#328
[#541 'vec3']: r#328
[#541 'vec4']: r#328
[#541 'while']: r#328
[#541 '{']: r#328
[#541 '}']: r#328
[#541 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#328
[#542 'else']: s#543
[#543 'if']: s#580
[#544 '@']: s#35
[#545 '{']: s#575
[#546 '{']: r#329
[#547 '@']: s#35
[#548 '&']: s#411
[#548 '(']: s#412
[#548 '*']: s#410
[#548 '_']: s#407
[#548 'array']: s#87
[#548 'atomic']: s#101
[#548 'bool']: s#94
[#548 'const']: s#394
[#548 'f16']: s#96
[#548 'f32']: s#95
[#548 'i32']: s#97
[#548 'let']: s#393
[#548 'mat2x2']: s#106
[#548 'mat2x3']: s#107
[#548 'mat2x4']: s#108
[#548 'mat3x2']: s#109
[#548 'mat3x3']: s#110
[#548 'mat3x4']: s#111
[#548 'mat4x2']: s#112
[#548 'mat4x3']: s#113
[#548 'mat4x4']: s#114
[#548 'ptr']: s#99
[#548 'sampler']: s#131
[#548 'sampler_comparison']: s#132
[#548 'texture_1d']: s#138
[#548 'texture_2d']: s#139
[#548 'texture_2d_array']: s#140
[#548 'texture_3d']: s#141
[#548 'texture_cube']: s#142
[#548 'texture_cube_array']: s#143
[#548 'texture_depth_2d']: s#133
[#548 'texture_depth_2d_array']: s#134
[#548 'texture_depth_cube']: s#135
[#548 'texture_depth_cube_array']: s#136
[#548 'texture_depth_multisampled_2d']: s#137
[#548 'texture_multisampled_2d']: s#144
[#548 'texture_storage_1d']: s#145
[#548 'texture_storage_2d']: s#146
[#548 'texture_storage_2d_array']: s#147
[#548 'texture_storage_3d']: s#148
[#548 'u32']: s#98
[#548 'var']: s#157
[#548 'vec2']: s#103
[#548 'vec3']: s#104
[#548 'vec4']: s#105
[#548 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#549 '@']: s#35
[#550 ';']: r#330
[#551 '!']: s#68
[#551 '&']: s#71
[#551 '(']: s#83
[#551 '*']: s#70
[#551 '-']: s#67
[#551 'array']: s#87
[#551 'atomic']: s#101
[#551 'bitcast']: s#77
[#551 'bool']: s#94
[#551 'f16']: s#96
[#551 'f32']: s#95
[#551 'false']: s#93
[#551 'i32']: s#97
[#551 'mat2x2']: s#106
[#551 'mat2x3']: s#107
[#551 'mat2x4']: s#108
[#551 'mat3x2']: s#109
[#551 'mat3x3']: s#110
[#551 'mat3x4']: s#111
[#551 'mat4x2']: s#112
[#551 'mat4x3']: s#113
[#551 'mat4x4']: s#114
[#551 'ptr']: s#99
[#551 'sampler']: s#131
[#551 'sampler_comparison']: s#132
[#551 'texture_1d']: s#138
[#551 'texture_2d']: s#139
[#551 'texture_2d_array']: s#140
[#551 'texture_3d']: s#141
[#551 'texture_cube']: s#142
[#551 'texture_cube_array']: s#143
[#551 'texture_depth_2d']: s#133
[#551 'texture_depth_2d_array']: s#134
[#551 'texture_depth_cube']: s#135
[#551 'texture_depth_cube_array']: s#136
[#551 'texture_depth_multisampled_2d']: s#137
[#551 'texture_multisampled_2d']: s#144
[#551 'texture_storage_1d']: s#145
[#551 'texture_storage_2d']: s#146
[#551 'texture_storage_2d_array']: s#147
[#551 'texture_storage_3d']: s#148
[#551 'true']: s#92
[#551 'u32']: s#98
[#551 'vec2']: s#103
[#551 'vec3']: s#104
[#551 'vec4']: s#105
[#551 '~']: s#69
[#551 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#551 /0[fh]/]: s#118
[#551 /0[iu]?/]: s#115
[#551 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#551 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#551 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#551 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#551 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#551 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#551 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#551 /[1-9][0-9]*[fh]/]: s#119
[#551 /[1-9][0-9]*[iu]?/]: s#116
[#552 '!']: s#68
[#552 '&']: s#71
[#552 '(']: s#83
[#552 '*']: s#70
[#552 '-']: s#67
[#552 'array']: s#87
[#552 'atomic']: s#101
[#552 'bitcast']: s#77
[#552 'bool']: s#94
[#552 'f16']: s#96
[#552 'f32']: s#95
[#552 'false']: s#93
[#552 'i32']: s#97
[#552 'mat2x2']: s#106
[#552 'mat2x3']: s#107
[#552 'mat2x4']: s#108
[#552 'mat3x2']: s#109
[#552 'mat3x3']: s#110
[#552 'mat3x4']: s#111
[#552 'mat4x2']: s#112
[#552 'mat4x3']: s#113
[#552 'mat4x4']: s#114
[#552 'ptr']: s#99
[#552 'sampler']: s#131
[#552 'sampler_comparison']: s#132
[#552 'texture_1d']: s#138
[#552 'texture_2d']: s#139
[#552 'texture_2d_array']: s#140
[#552 'texture_3d']: s#141
[#552 'texture_cube']: s#142
[#552 'texture_cube_array']: s#143
[#552 'texture_depth_2d']: s#133
[#552 'texture_depth_2d_array']: s#134
[#552 'texture_depth_cube']: s#135
[#552 'texture_depth_cube_array']: s#136
[#552 'texture_depth_multisampled_2d']: s#137
[#552 'texture_multisampled_2d']: s#144
[#552 'texture_storage_1d']: s#145
[#552 'texture_storage_2d']: s#146
[#552 'texture_storage_2d_array']: s#147
[#552 'texture_storage_3d']: s#148
[#552 'true']: s#92
[#552 'u32']: s#98
[#552 'vec2']: s#103
[#552 'vec3']: s#104
[#552 'vec4']: s#105
[#552 '~']: s#69
[#552 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#552 /0[fh]/]: s#118
[#552 /0[iu]?/]: s#115
[#552 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#552 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#552 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#552 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#552 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#552 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#552 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#552 /[1-9][0-9]*[fh]/]: s#119
[#552 /[1-9][0-9]*[iu]?/]: s#116
[#553 ')']: r#331
[#553 ';']: r#331
[#554 ')']: r#332
[#554 ';']: r#332
[#555 '%=']: r#333
[#555 '&=']: r#333
[#555 ')']: r#333
[#555 '*=']: r#333
[#555 '++']: r#333
[#555 '+=']: r#333
[#555 '--']: r#333
[#555 '-=']: r#333
[#555 '.']: r#333
[#555 '/=']: r#333
[#555 '<<=']: r#333
[#555 '=']: r#333
[#555 '>>=']: r#333
[#555 '[']: r#333
[#555 '^=']: r#333
[#555 '|=']: r#333
[#556 '(']: r#334
[#556 ')']: r#334
[#556 ',']: r#334
[#556 ';']: r#334
[#556 '=']: r#334
[#556 '>']: r#334
[#556 '@']: r#334
[#556 '{']: r#334
[#556 '}']: r#334
[#557 '>']: s#564
[#558 'read']: s#463
[#558 'read_write']: s#465
[#558 'write']: s#464
[#559 '@']: r#335
[#559 'array']: r#335
[#559 'atomic']: r#335
[#559 'bool']: r#335
[#559 'f16']: r#335
[#559 'f32']: r#335
[#559 'fn']: r#335
[#559 'for']: r#335
[#559 'i32']: r#335
[#559 'if']: r#335
[#559 'loop']: r#335
[#559 'mat2x2']: r#335
[#559 'mat2x3']: r#335
[#559 'mat2x4']: r#335
[#559 'mat3x2']: r#335
[#559 'mat3x3']: r#335
[#559 'mat3x4']: r#335
[#559 'mat4x2']: r#335
[#559 'mat4x3']: r#335
[#559 'mat4x4']: r#335
[#559 'override']: r#335
[#559 'ptr']: r#335
[#559 'sampler']: r#335
[#559 'sampler_comparison']: r#335
[#559 'switch']: r#335
[#559 'texture_1d']: r#335
[#559 'texture_2d']: r#335
[#559 'texture_2d_array']: r#335
[#559 'texture_3d']: r#335
[#559 'texture_cube']: r#335
[#559 'texture_cube_array']: r#335
[#559 'texture_depth_2d']: r#335
[#559 'texture_depth_2d_array']: r#335
[#559 'texture_depth_cube']: r#335
[#559 'texture_depth_cube_array']: r#335
[#559 'texture_depth_multisampled_2d']: r#335
[#559 'texture_multisampled_2d']: r#335
[#559 'texture_storage_1d']: r#335
[#559 'texture_storage_2d']: r#335
[#559 'texture_storage_2d_array']: r#335
[#559 'texture_storage_3d']: r#335
[#559 'u32']: r#335
[#559 'var']: r#335
[#559 'vec2']: r#335
[#559 'vec3']: r#335
[#559 'vec4']: r#335
[#559 'while']: r#335
[#559 '{']: r#335
[#559 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#335
[#560 '!']: s#68
[#560 '&']: s#71
[#560 '(']: s#83
[#560 ')']: r#214
[#560 '*']: s#70
[#560 '-']: s#67
[#560 'array']: s#87
[#560 'atomic']: s#101
[#560 'bitcast']: s#77
[#560 'bool']: s#94
[#560 'f16']: s#96
[#560 'f32']: s#95
[#560 'false']: s#93
[#560 'i32']: s#97
[#560 'mat2x2']: s#106
[#560 'mat2x3']: s#107
[#560 'mat2x4']: s#108
[#560 'mat3x2']: s#109
[#560 'mat3x3']: s#110
[#560 'mat3x4']: s#111
[#560 'mat4x2']: s#112
[#560 'mat4x3']: s#113
[#560 'mat4x4']: s#114
[#560 'ptr']: s#99
[#560 'sampler']: s#131
[#560 'sampler_comparison']: s#132
[#560 'texture_1d']: s#138
[#560 'texture_2d']: s#139
[#560 'texture_2d_array']: s#140
[#560 'texture_3d']: s#141
[#560 'texture_cube']: s#142
[#560 'texture_cube_array']: s#143
[#560 'texture_depth_2d']: s#133
[#560 'texture_depth_2d_array']: s#134
[#560 'texture_depth_cube']: s#135
[#560 'texture_depth_cube_array']: s#136
[#560 'texture_depth_multisampled_2d']: s#137
[#560 'texture_multisampled_2d']: s#144
[#560 'texture_storage_1d']: s#145
[#560 'texture_storage_2d']: s#146
[#560 'texture_storage_2d_array']: s#147
[#560 'texture_storage_3d']: s#148
[#560 'true']: s#92
[#560 'u32']: s#98
[#560 'vec2']: s#103
[#560 'vec3']: s#104
[#560 'vec4']: s#105
[#560 '~']: s#69
[#560 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#560 /0[fh]/]: s#118
[#560 /0[iu]?/]: s#115
[#560 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#560 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#560 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#560 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#560 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#560 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#560 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#560 /[1-9][0-9]*[fh]/]: s#119
[#560 /[1-9][0-9]*[iu]?/]: s#116
[#561 '@']: r#336
[#561 'array']: r#336
[#561 'atomic']: r#336
[#561 'bool']: r#336
[#561 'f16']: r#336
[#561 'f32']: r#336
[#561 'fn']: r#336
[#561 'for']: r#336
[#561 'i32']: r#336
[#561 'if']: r#336
[#561 'loop']: r#336
[#561 'mat2x2']: r#336
[#561 'mat2x3']: r#336
[#561 'mat2x4']: r#336
[#561 'mat3x2']: r#336
[#561 'mat3x3']: r#336
[#561 'mat3x4']: r#336
[#561 'mat4x2']: r#336
[#561 'mat4x3']: r#336
[#561 'mat4x4']: r#336
[#561 'override']: r#336
[#561 'ptr']: r#336
[#561 'sampler']: r#336
[#561 'sampler_comparison']: r#336
[#561 'switch']: r#336
[#561 'texture_1d']: r#336
[#561 'texture_2d']: r#336
[#561 'texture_2d_array']: r#336
[#561 'texture_3d']: r#336
[#561 'texture_cube']: r#336
[#561 'texture_cube_array']: r#336
[#561 'texture_depth_2d']: r#336
[#561 'texture_depth_2d_array']: r#336
[#561 'texture_depth_cube']: r#336
[#561 'texture_depth_cube_array']: r#336
[#561 'texture_depth_multisampled_2d']: r#336
[#561 'texture_multisampled_2d']: r#336
[#561 'texture_storage_1d']: r#336
[#561 'texture_storage_2d']: r#336
[#561 'texture_storage_2d_array']: r#336
[#561 'texture_storage_3d']: r#336
[#561 'u32']: r#336
[#561 'var']: r#336
[#561 'vec2']: r#336
[#561 'vec3']: r#336
[#561 'vec4']: r#336
[#561 'while']: r#336
[#561 '{']: r#336
[#561 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#336
[#562 ',']: s#351
[#563 '>']: r#337
[#564 '(']: r#338
[#564 ')']: r#338
[#564 ',']: r#338
[#564 ';']: r#338
[#564 '=']: r#338
[#564 '>']: r#338
[#564 '@']: r#338
[#564 '{']: r#338
[#564 '}']: r#338
[#565 ';']: r#339
[#566 ';']: r#340
[#567 '&']: r#341
[#567 '(']: r#341
[#567 '*']: r#341
[#567 ';']: r#341
[#567 '@']: r#341
[#567 '_']: r#341
[#567 'array']: r#341
[#567 'atomic']: r#341
[#567 'bool']: r#341
[#567 'break']: r#341
[#567 'const']: r#341
[#567 'const_assert']: r#341
[#567 'continue']: r#341
[#567 'continuing']: r#341
[#567 'discard']: r#341
[#567 'f16']: r#341
[#567 'f32']: r#341
[#567 'for']: r#341
[#567 'i32']: r#341
[#567 'if']: r#341
[#567 'let']: r#341
[#567 'loop']: r#341
[#567 'mat2x2']: r#341
[#567 'mat2x3']: r#341
[#567 'mat2x4']: r#341
[#567 'mat3x2']: r#341
[#567 'mat3x3']: r#341
[#567 'mat3x4']: r#341
[#567 'mat4x2']: r#341
[#567 'mat4x3']: r#341
[#567 'mat4x4']: r#341
[#567 'ptr']: r#341
[#567 'return']: r#341
[#567 'sampler']: r#341
[#567 'sampler_comparison']: r#341
[#567 'switch']: r#341
[#567 'texture_1d']: r#341
[#567 'texture_2d']: r#341
[#567 'texture_2d_array']: r#341
[#567 'texture_3d']: r#341
[#567 'texture_cube']: r#341
[#567 'texture_cube_array']: r#341
[#567 'texture_depth_2d']: r#341
[#567 'texture_depth_2d_array']: r#341
[#567 'texture_depth_cube']: r#341
[#567 'texture_depth_cube_array']: r#341
[#567 'texture_depth_multisampled_2d']: r#341
[#567 'texture_multisampled_2d']: r#341
[#567 'texture_storage_1d']: r#341
[#567 'texture_storage_2d']: r#341
[#567 'texture_storage_2d_array']: r#341
[#567 'texture_storage_3d']: r#341
[#567 'u32']: r#341
[#567 'var']: r#341
[#567 'vec2']: r#341
[#567 'vec3']: r#341
[#567 'vec4']: r#341
[#567 'while']: r#341
[#567 '{']: r#341
[#567 '}']: r#341
[#567 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#341
[#568 ')']: s#600
[#569 ';']: s#599
[#570 ';']: r#342
[#571 ';']: r#343
[#572 ';']: r#344
[#573 ';']: r#345
[#574 '{']: r#346
[#575 '&']: s#411
[#575 '(']: s#412
[#575 '*']: s#410
[#575 ';']: s#370
[#575 '@']: s#35
[#575 '_']: s#407
[#575 'array']: s#87
[#575 'atomic']: s#101
[#575 'bool']: s#94
[#575 'break']: s#395
[#575 'const']: s#394
[#575 'const_assert']: s#30
[#575 'continue']: s#396
[#575 'discard']: s#381
[#575 'f16']: s#96
[#575 'f32']: s#95
[#575 'i32']: s#97
[#575 'let']: s#393
[#575 'mat2x2']: s#106
[#575 'mat2x3']: s#107
[#575 'mat2x4']: s#108
[#575 'mat3x2']: s#109
[#575 'mat3x3']: s#110
[#575 'mat3x4']: s#111
[#575 'mat4x2']: s#112
[#575 'mat4x3']: s#113
[#575 'mat4x4']: s#114
[#575 'ptr']: s#99
[#575 'return']: s#385
[#575 'sampler']: s#131
[#575 'sampler_comparison']: s#132
[#575 'texture_1d']: s#138
[#575 'texture_2d']: s#139
[#575 'texture_2d_array']: s#140
[#575 'texture_3d']: s#141
[#575 'texture_cube']: s#142
[#575 'texture_cube_array']: s#143
[#575 'texture_depth_2d']: s#133
[#575 'texture_depth_2d_array']: s#134
[#575 'texture_depth_cube']: s#135
[#575 'texture_depth_cube_array']: s#136
[#575 'texture_depth_multisampled_2d']: s#137
[#575 'texture_multisampled_2d']: s#144
[#575 'texture_storage_1d']: s#145
[#575 'texture_storage_2d']: s#146
[#575 'texture_storage_2d_array']: s#147
[#575 'texture_storage_3d']: s#148
[#575 'u32']: s#98
[#575 'var']: s#157
[#575 'vec2']: s#103
[#575 'vec3']: s#104
[#575 'vec4']: s#105
[#575 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#576 '&']: r#347
[#576 '(']: r#347
[#576 '*']: r#347
[#576 ';']: r#347
[#576 '@']: r#347
[#576 '_']: r#347
[#576 'array']: r#347
[#576 'atomic']: r#347
[#576 'bool']: r#347
[#576 'break']: r#347
[#576 'const']: r#347
[#576 'const_assert']: r#347
[#576 'continue']: r#347
[#576 'continuing']: r#347
[#576 'discard']: r#347
[#576 'f16']: r#347
[#576 'f32']: r#347
[#576 'for']: r#347
[#576 'i32']: r#347
[#576 'if']: r#347
[#576 'let']: r#347
[#576 'loop']: r#347
[#576 'mat2x2']: r#347
[#576 'mat2x3']: r#347
[#576 'mat2x4']: r#347
[#576 'mat3x2']: r#347
[#576 'mat3x3']: r#347
[#576 'mat3x4']: r#347
[#576 'mat4x2']: r#347
[#576 'mat4x3']: r#347
[#576 'mat4x4']: r#347
[#576 'ptr']: r#347
[#576 'return']: r#347
[#576 'sampler']: r#347
[#576 'sampler_comparison']: r#347
[#576 'switch']: r#347
[#576 'texture_1d']: r#347
[#576 'texture_2d']: r#347
[#576 'texture_2d_array']: r#347
[#576 'texture_3d']: r#347
[#576 'texture_cube']: r#347
[#576 'texture_cube_array']: r#347
[#576 'texture_depth_2d']: r#347
[#576 'texture_depth_2d_array']: r#347
[#576 'texture_depth_cube']: r#347
[#576 'texture_depth_cube_array']: r#347
[#576 'texture_depth_multisampled_2d']: r#347
[#576 'texture_multisampled_2d']: r#347
[#576 'texture_storage_1d']: r#347
[#576 'texture_storage_2d']: r#347
[#576 'texture_storage_2d_array']: r#347
[#576 'texture_storage_3d']: r#347
[#576 'u32']: r#347
[#576 'var']: r#347
[#576 'vec2']: r#347
[#576 'vec3']: r#347
[#576 'vec4']: r#347
[#576 'while']: r#347
[#576 '{']: r#347
[#576 '}']: r#347
[#576 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#347
[#577 '{']: s#595
[#578 '{']: r#348
[#579 '@']: s#35
[#580 '!']: s#68
[#580 '&']: s#71
[#580 '(']: s#83
[#580 '*']: s#70
[#580 '-']: s#67
[#580 'array']: s#87
[#580 'atomic']: s#101
[#580 'bitcast']: s#77
[#580 'bool']: s#94
[#580 'f16']: s#96
[#580 'f32']: s#95
[#580 'false']: s#93
[#580 'i32']: s#97
[#580 'mat2x2']: s#106
[#580 'mat2x3']: s#107
[#580 'mat2x4']: s#108
[#580 'mat3x2']: s#109
[#580 'mat3x3']: s#110
[#580 'mat3x4']: s#111
[#580 'mat4x2']: s#112
[#580 'mat4x3']: s#113
[#580 'mat4x4']: s#114
[#580 'ptr']: s#99
[#580 'sampler']: s#131
[#580 'sampler_comparison']: s#132
[#580 'texture_1d']: s#138
[#580 'texture_2d']: s#139
[#580 'texture_2d_array']: s#140
[#580 'texture_3d']: s#141
[#580 'texture_cube']: s#142
[#580 'texture_cube_array']: s#143
[#580 'texture_depth_2d']: s#133
[#580 'texture_depth_2d_array']: s#134
[#580 'texture_depth_cube']: s#135
[#580 'texture_depth_cube_array']: s#136
[#580 'texture_depth_multisampled_2d']: s#137
[#580 'texture_multisampled_2d']: s#144
[#580 'texture_storage_1d']: s#145
[#580 'texture_storage_2d']: s#146
[#580 'texture_storage_2d_array']: s#147
[#580 'texture_storage_3d']: s#148
[#580 'true']: s#92
[#580 'u32']: s#98
[#580 'vec2']: s#103
[#580 'vec3']: s#104
[#580 'vec4']: s#105
[#580 '~']: s#69
[#580 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#580 /0[fh]/]: s#118
[#580 /0[iu]?/]: s#115
[#580 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#580 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#580 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#580 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#580 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#580 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#580 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#580 /[1-9][0-9]*[fh]/]: s#119
[#580 /[1-9][0-9]*[iu]?/]: s#116
[#581 '&']: r#349
[#581 '(']: r#349
[#581 '*']: r#349
[#581 ';']: r#349
[#581 '@']: r#349
[#581 '_']: r#349
[#581 'array']: r#349
[#581 'atomic']: r#349
[#581 'bool']: r#349
[#581 'break']: r#349
[#581 'const']: r#349
[#581 'const_assert']: r#349
[#581 'continue']: r#349
[#581 'continuing']: r#349
[#581 'discard']: r#349
[#581 'else']: r#349
[#581 'f16']: r#349
[#581 'f32']: r#349
[#581 'for']: r#349
[#581 'i32']: r#349
[#581 'if']: r#349
[#581 'let']: r#349
[#581 'loop']: r#349
[#581 'mat2x2']: r#349
[#581 'mat2x3']: r#349
[#581 'mat2x4']: r#349
[#581 'mat3x2']: r#349
[#581 'mat3x3']: r#349
[#581 'mat3x4']: r#349
[#581 'mat4x2']: r#349
[#581 'mat4x3']: r#349
[#581 'mat4x4']: r#349
[#581 'ptr']: r#349
[#581 'return']: r#349
[#581 'sampler']: r#349
[#581 'sampler_comparison']: r#349
[#581 'switch']: r#349
[#581 'texture_1d']: r#349
[#581 'texture_2d']: r#349
[#581 'texture_2d_array']: r#349
[#581 'texture_3d']: r#349
[#581 'texture_cube']: r#349
[#581 'texture_cube_array']: r#349
[#581 'texture_depth_2d']: r#349
[#581 'texture_depth_2d_array']: r#349
[#581 'texture_depth_cube']: r#349
[#581 'texture_depth_cube_array']: r#349
[#581 'texture_depth_multisampled_2d']: r#349
[#581 'texture_multisampled_2d']: r#349
[#581 'texture_storage_1d']: r#349
[#581 'texture_storage_2d']: r#349
[#581 'texture_storage_2d_array']: r#349
[#581 'texture_storage_3d']: r#349
[#581 'u32']: r#349
[#581 'var']: r#349
[#581 'vec2']: r#349
[#581 'vec3']: r#349
[#581 'vec4']: r#349
[#581 'while']: r#349
[#581 '{']: r#349
[#581 '}']: r#349
[#581 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#349
[#582 '&']: r#350
[#582 '(']: r#350
[#582 '*']: r#350
[#582 ';']: r#350
[#582 '@']: r#350
[#582 '_']: r#350
[#582 'array']: r#350
[#582 'atomic']: r#350
[#582 'bool']: r#350
[#582 'break']: r#350
[#582 'const']: r#350
[#582 'const_assert']: r#350
[#582 'continue']: r#350
[#582 'continuing']: r#350
[#582 'discard']: r#350
[#582 'f16']: r#350
[#582 'f32']: r#350
[#582 'for']: r#350
[#582 'i32']: r#350
[#582 'if']: r#350
[#582 'let']: r#350
[#582 'loop']: r#350
[#582 'mat2x2']: r#350
[#582 'mat2x3']: r#350
[#582 'mat2x4']: r#350
[#582 'mat3x2']: r#350
[#582 'mat3x3']: r#350
[#582 'mat3x4']: r#350
[#582 'mat4x2']: r#350
[#582 'mat4x3']: r#350
[#582 'mat4x4']: r#350
[#582 'ptr']: r#350
[#582 'return']: r#350
[#582 'sampler']: r#350
[#582 'sampler_comparison']: r#350
[#582 'switch']: r#350
[#582 'texture_1d']: r#350
[#582 'texture_2d']: r#350
[#582 'texture_2d_array']: r#350
[#582 'texture_3d']: r#350
[#582 'texture_cube']: r#350
[#582 'texture_cube_array']: r#350
[#582 'texture_depth_2d']: r#350
[#582 'texture_depth_2d_array']: r#350
[#582 'texture_depth_cube']: r#350
[#582 'texture_depth_cube_array']: r#350
[#582 'texture_depth_multisampled_2d']: r#350
[#582 'texture_multisampled_2d']: r#350
[#582 'texture_storage_1d']: r#350
[#582 'texture_storage_2d']: r#350
[#582 'texture_storage_2d_array']: r#350
[#582 'texture_storage_3d']: r#350
[#582 'u32']: r#350
[#582 'var']: r#350
[#582 'vec2']: r#350
[#582 'vec3']: r#350
[#582 'vec4']: r#350
[#582 'while']: r#350
[#582 '{']: r#350
[#582 '}']: r#350
[#582 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#350
[#583 '&']: r#351
[#583 '(']: r#351
[#583 '*']: r#351
[#583 ';']: r#351
[#583 '@']: r#351
[#583 '_']: r#351
[#583 'array']: r#351
[#583 'atomic']: r#351
[#583 'bool']: r#351
[#583 'break']: r#351
[#583 'const']: r#351
[#583 'const_assert']: r#351
[#583 'continue']: r#351
[#583 'continuing']: r#351
[#583 'discard']: r#351
[#583 'f16']: r#351
[#583 'f32']: r#351
[#583 'for']: r#351
[#583 'i32']: r#351
[#583 'if']: r#351
[#583 'let']: r#351
[#583 'loop']: r#351
[#583 'mat2x2']: r#351
[#583 'mat2x3']: r#351
[#583 'mat2x4']: r#351
[#583 'mat3x2']: r#351
[#583 'mat3x3']: r#351
[#583 'mat3x4']: r#351
[#583 'mat4x2']: r#351
[#583 'mat4x3']: r#351
[#583 'mat4x4']: r#351
[#583 'ptr']: r#351
[#583 'return']: r#351
[#583 'sampler']: r#351
[#583 'sampler_comparison']: r#351
[#583 'switch']: r#351
[#583 'texture_1d']: r#351
[#583 'texture_2d']: r#351
[#583 'texture_2d_array']: r#351
[#583 'texture_3d']: r#351
[#583 'texture_cube']: r#351
[#583 'texture_cube_array']: r#351
[#583 'texture_depth_2d']: r#351
[#583 'texture_depth_2d_array']: r#351
[#583 'texture_depth_cube']: r#351
[#583 'texture_depth_cube_array']: r#351
[#583 'texture_depth_multisampled_2d']: r#351
[#583 'texture_multisampled_2d']: r#351
[#583 'texture_storage_1d']: r#351
[#583 'texture_storage_2d']: r#351
[#583 'texture_storage_2d_array']: r#351
[#583 'texture_storage_3d']: r#351
[#583 'u32']: r#351
[#583 'var']: r#351
[#583 'vec2']: r#351
[#583 'vec3']: r#351
[#583 'vec4']: r#351
[#583 'while']: r#351
[#583 '{']: r#351
[#583 '}']: r#351
[#583 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#351
[#584 '@']: s#35
[#585 '&']: r#352
[#585 '(']: r#352
[#585 '*']: r#352
[#585 ';']: r#352
[#585 '@']: r#352
[#585 '_']: r#352
[#585 'array']: r#352
[#585 'atomic']: r#352
[#585 'bool']: r#352
[#585 'break']: r#352
[#585 'const']: r#352
[#585 'const_assert']: r#352
[#585 'continue']: r#352
[#585 'continuing']: r#352
[#585 'discard']: r#352
[#585 'else']: r#352
[#585 'f16']: r#352
[#585 'f32']: r#352
[#585 'for']: r#352
[#585 'i32']: r#352
[#585 'if']: r#352
[#585 'let']: r#352
[#585 'loop']: r#352
[#585 'mat2x2']: r#352
[#585 'mat2x3']: r#352
[#585 'mat2x4']: r#352
[#585 'mat3x2']: r#352
[#585 'mat3x3']: r#352
[#585 'mat3x4']: r#352
[#585 'mat4x2']: r#352
[#585 'mat4x3']: r#352
[#585 'mat4x4']: r#352
[#585 'ptr']: r#352
[#585 'return']: r#352
[#585 'sampler']: r#352
[#585 'sampler_comparison']: r#352
[#585 'switch']: r#352
[#585 'texture_1d']: r#352
[#585 'texture_2d']: r#352
[#585 'texture_2d_array']: r#352
[#585 'texture_3d']: r#352
[#585 'texture_cube']: r#352
[#585 'texture_cube_array']: r#352
[#585 'texture_depth_2d']: r#352
[#585 'texture_depth_2d_array']: r#352
[#585 'texture_depth_cube']: r#352
[#585 'texture_depth_cube_array']: r#352
[#585 'texture_depth_multisampled_2d']: r#352
[#585 'texture_multisampled_2d']: r#352
[#585 'texture_storage_1d']: r#352
[#585 'texture_storage_2d']: r#352
[#585 'texture_storage_2d_array']: r#352
[#585 'texture_storage_3d']: r#352
[#585 'u32']: r#352
[#585 'var']: r#352
[#585 'vec2']: r#352
[#585 'vec3']: r#352
[#585 'vec4']: r#352
[#585 'while']: r#352
[#585 '{']: r#352
[#585 '}']: r#352
[#585 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#352
[#586 ')']: r#353
[#586 ',']: r#353
[#587 'array']: s#297
[#587 'atomic']: s#101
[#587 'bool']: s#94
[#587 'f16']: s#96
[#587 'f32']: s#95
[#587 'i32']: s#97
[#587 'mat2x2']: s#106
[#587 'mat2x3']: s#107
[#587 'mat2x4']: s#108
[#587 'mat3x2']: s#109
[#587 'mat3x3']: s#110
[#587 'mat3x4']: s#111
[#587 'mat4x2']: s#112
[#587 'mat4x3']: s#113
[#587 'mat4x4']: s#114
[#587 'ptr']: s#99
[#587 'sampler']: s#131
[#587 'sampler_comparison']: s#132
[#587 'texture_1d']: s#138
[#587 'texture_2d']: s#139
[#587 'texture_2d_array']: s#140
[#587 'texture_3d']: s#141
[#587 'texture_cube']: s#142
[#587 'texture_cube_array']: s#143
[#587 'texture_depth_2d']: s#133
[#587 'texture_depth_2d_array']: s#134
[#587 'texture_depth_cube']: s#135
[#587 'texture_depth_cube_array']: s#136
[#587 'texture_depth_multisampled_2d']: s#137
[#587 'texture_multisampled_2d']: s#144
[#587 'texture_storage_1d']: s#145
[#587 'texture_storage_2d']: s#146
[#587 'texture_storage_2d_array']: s#147
[#587 'texture_storage_3d']: s#148
[#587 'u32']: s#98
[#587 'vec2']: s#103
[#587 'vec3']: s#104
[#587 'vec4']: s#105
[#587 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#588 'array']: r#354
[#588 'atomic']: r#354
[#588 'bool']: r#354
[#588 'f16']: r#354
[#588 'f32']: r#354
[#588 'i32']: r#354
[#588 'mat2x2']: r#354
[#588 'mat2x3']: r#354
[#588 'mat2x4']: r#354
[#588 'mat3x2']: r#354
[#588 'mat3x3']: r#354
[#588 'mat3x4']: r#354
[#588 'mat4x2']: r#354
[#588 'mat4x3']: r#354
[#588 'mat4x4']: r#354
[#588 'ptr']: r#354
[#588 'sampler']: r#354
[#588 'sampler_comparison']: r#354
[#588 'texture_1d']: r#354
[#588 'texture_2d']: r#354
[#588 'texture_2d_array']: r#354
[#588 'texture_3d']: r#354
[#588 'texture_cube']: r#354
[#588 'texture_cube_array']: r#354
[#588 'texture_depth_2d']: r#354
[#588 'texture_depth_2d_array']: r#354
[#588 'texture_depth_cube']: r#354
[#588 'texture_depth_cube_array']: r#354
[#588 'texture_depth_multisampled_2d']: r#354
[#588 'texture_multisampled_2d']: r#354
[#588 'texture_storage_1d']: r#354
[#588 'texture_storage_2d']: r#354
[#588 'texture_storage_2d_array']: r#354
[#588 'texture_storage_3d']: r#354
[#588 'u32']: r#354
[#588 'vec2']: r#354
[#588 'vec3']: r#354
[#588 'vec4']: r#354
[#588 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#354
[#589 '@']: s#35
[#590 'array']: r#355
[#590 'atomic']: r#355
[#590 'bool']: r#355
[#590 'f16']: r#355
[#590 'f32']: r#355
[#590 'i32']: r#355
[#590 'mat2x2']: r#355
[#590 'mat2x3']: r#355
[#590 'mat2x4']: r#355
[#590 'mat3x2']: r#355
[#590 'mat3x3']: r#355
[#590 'mat3x4']: r#355
[#590 'mat4x2']: r#355
[#590 'mat4x3']: r#355
[#590 'mat4x4']: r#355
[#590 'ptr']: r#355
[#590 'sampler']: r#355
[#590 'sampler_comparison']: r#355
[#590 'texture_1d']: r#355
[#590 'texture_2d']: r#355
[#590 'texture_2d_array']: r#355
[#590 'texture_3d']: r#355
[#590 'texture_cube']: r#355
[#590 'texture_cube_array']: r#355
[#590 'texture_depth_2d']: r#355
[#590 'texture_depth_2d_array']: r#355
[#590 'texture_depth_cube']: r#355
[#590 'texture_depth_cube_array']: r#355
[#590 'texture_depth_multisampled_2d']: r#355
[#590 'texture_multisampled_2d']: r#355
[#590 'texture_storage_1d']: r#355
[#590 'texture_storage_2d']: r#355
[#590 'texture_storage_2d_array']: r#355
[#590 'texture_storage_3d']: r#355
[#590 'u32']: r#355
[#590 'vec2']: r#355
[#590 'vec3']: r#355
[#590 'vec4']: r#355
[#590 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#355
[#591 '@']: r#356
[#591 '{']: r#356
[#592 '&']: r#357
[#592 '(']: r#357
[#592 '*']: r#357
[#592 ';']: r#357
[#592 '@']: r#357
[#592 '_']: r#357
[#592 'array']: r#357
[#592 'atomic']: r#357
[#592 'bool']: r#357
[#592 'break']: r#357
[#592 'const']: r#357
[#592 'const_assert']: r#357
[#592 'continue']: r#357
[#592 'continuing']: r#357
[#592 'discard']: r#357
[#592 'f16']: r#357
[#592 'f32']: r#357
[#592 'for']: r#357
[#592 'i32']: r#357
[#592 'if']: r#357
[#592 'let']: r#357
[#592 'loop']: r#357
[#592 'mat2x2']: r#357
[#592 'mat2x3']: r#357
[#592 'mat2x4']: r#357
[#592 'mat3x2']: r#357
[#592 'mat3x3']: r#357
[#592 'mat3x4']: r#357
[#592 'mat4x2']: r#357
[#592 'mat4x3']: r#357
[#592 'mat4x4']: r#357
[#592 'ptr']: r#357
[#592 'return']: r#357
[#592 'sampler']: r#357
[#592 'sampler_comparison']: r#357
[#592 'switch']: r#357
[#592 'texture_1d']: r#357
[#592 'texture_2d']: r#357
[#592 'texture_2d_array']: r#357
[#592 'texture_3d']: r#357
[#592 'texture_cube']: r#357
[#592 'texture_cube_array']: r#357
[#592 'texture_depth_2d']: r#357
[#592 'texture_depth_2d_array']: r#357
[#592 'texture_depth_cube']: r#357
[#592 'texture_depth_cube_array']: r#357
[#592 'texture_depth_multisampled_2d']: r#357
[#592 'texture_multisampled_2d']: r#357
[#592 'texture_storage_1d']: r#357
[#592 'texture_storage_2d']: r#357
[#592 'texture_storage_2d_array']: r#357
[#592 'texture_storage_3d']: r#357
[#592 'u32']: r#357
[#592 'var']: r#357
[#592 'vec2']: r#357
[#592 'vec3']: r#357
[#592 'vec4']: r#357
[#592 'while']: r#357
[#592 '{']: r#357
[#592 '}']: r#357
[#592 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#357
[#593 '@']: s#35
[#594 '{']: r#358
[#595 'case']: s#614
[#595 'default']: s#615
[#596 'continuing']: s#608
[#597 'continuing']: r#359
[#597 '}']: r#359
[#598 '&']: s#411
[#598 '(']: s#412
[#598 '*']: s#410
[#598 ';']: s#370
[#598 '@']: s#35
[#598 '_']: s#407
[#598 'array']: s#87
[#598 'atomic']: s#101
[#598 'bool']: s#94
[#598 'break']: s#395
[#598 'const']: s#394
[#598 'const_assert']: s#30
[#598 'continue']: s#396
[#598 'discard']: s#381
[#598 'f16']: s#96
[#598 'f32']: s#95
[#598 'i32']: s#97
[#598 'let']: s#393
[#598 'mat2x2']: s#106
[#598 'mat2x3']: s#107
[#598 'mat2x4']: s#108
[#598 'mat3x2']: s#109
[#598 'mat3x3']: s#110
[#598 'mat3x4']: s#111
[#598 'mat4x2']: s#112
[#598 'mat4x3']: s#113
[#598 'mat4x4']: s#114
[#598 'ptr']: s#99
[#598 'return']: s#385
[#598 'sampler']: s#131
[#598 'sampler_comparison']: s#132
[#598 'texture_1d']: s#138
[#598 'texture_2d']: s#139
[#598 'texture_2d_array']: s#140
[#598 'texture_3d']: s#141
[#598 'texture_cube']: s#142
[#598 'texture_cube_array']: s#143
[#598 'texture_depth_2d']: s#133
[#598 'texture_depth_2d_array']: s#134
[#598 'texture_depth_cube']: s#135
[#598 'texture_depth_cube_array']: s#136
[#598 'texture_depth_multisampled_2d']: s#137
[#598 'texture_multisampled_2d']: s#144
[#598 'texture_storage_1d']: s#145
[#598 'texture_storage_2d']: s#146
[#598 'texture_storage_2d_array']: s#147
[#598 'texture_storage_3d']: s#148
[#598 'u32']: s#98
[#598 'var']: s#157
[#598 'vec2']: s#103
[#598 'vec3']: s#104
[#598 'vec4']: s#105
[#598 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#599 '!']: s#68
[#599 '&']: s#71
[#599 '(']: s#83
[#599 '*']: s#70
[#599 '-']: s#67
[#599 'array']: s#87
[#599 'atomic']: s#101
[#599 'bitcast']: s#77
[#599 'bool']: s#94
[#599 'f16']: s#96
[#599 'f32']: s#95
[#599 'false']: s#93
[#599 'i32']: s#97
[#599 'mat2x2']: s#106
[#599 'mat2x3']: s#107
[#599 'mat2x4']: s#108
[#599 'mat3x2']: s#109
[#599 'mat3x3']: s#110
[#599 'mat3x4']: s#111
[#599 'mat4x2']: s#112
[#599 'mat4x3']: s#113
[#599 'mat4x4']: s#114
[#599 'ptr']: s#99
[#599 'sampler']: s#131
[#599 'sampler_comparison']: s#132
[#599 'texture_1d']: s#138
[#599 'texture_2d']: s#139
[#599 'texture_2d_array']: s#140
[#599 'texture_3d']: s#141
[#599 'texture_cube']: s#142
[#599 'texture_cube_array']: s#143
[#599 'texture_depth_2d']: s#133
[#599 'texture_depth_2d_array']: s#134
[#599 'texture_depth_cube']: s#135
[#599 'texture_depth_cube_array']: s#136
[#599 'texture_depth_multisampled_2d']: s#137
[#599 'texture_multisampled_2d']: s#144
[#599 'texture_storage_1d']: s#145
[#599 'texture_storage_2d']: s#146
[#599 'texture_storage_2d_array']: s#147
[#599 'texture_storage_3d']: s#148
[#599 'true']: s#92
[#599 'u32']: s#98
[#599 'vec2']: s#103
[#599 'vec3']: s#104
[#599 'vec4']: s#105
[#599 '~']: s#69
[#599 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#599 /0[fh]/]: s#118
[#599 /0[iu]?/]: s#115
[#599 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#599 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#599 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#599 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#599 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#599 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#599 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#599 /[1-9][0-9]*[fh]/]: s#119
[#599 /[1-9][0-9]*[iu]?/]: s#116
[#600 '@']: s#35
[#601 '@']: r#360
[#601 'array']: r#360
[#601 'atomic']: r#360
[#601 'bool']: r#360
[#601 'f16']: r#360
[#601 'f32']: r#360
[#601 'fn']: r#360
[#601 'for']: r#360
[#601 'i32']: r#360
[#601 'if']: r#360
[#601 'loop']: r#360
[#601 'mat2x2']: r#360
[#601 'mat2x3']: r#360
[#601 'mat2x4']: r#360
[#601 'mat3x2']: r#360
[#601 'mat3x3']: r#360
[#601 'mat3x4']: r#360
[#601 'mat4x2']: r#360
[#601 'mat4x3']: r#360
[#601 'mat4x4']: r#360
[#601 'override']: r#360
[#601 'ptr']: r#360
[#601 'sampler']: r#360
[#601 'sampler_comparison']: r#360
[#601 'switch']: r#360
[#601 'texture_1d']: r#360
[#601 'texture_2d']: r#360
[#601 'texture_2d_array']: r#360
[#601 'texture_3d']: r#360
[#601 'texture_cube']: r#360
[#601 'texture_cube_array']: r#360
[#601 'texture_depth_2d']: r#360
[#601 'texture_depth_2d_array']: r#360
[#601 'texture_depth_cube']: r#360
[#601 'texture_depth_cube_array']: r#360
[#601 'texture_depth_multisampled_2d']: r#360
[#601 'texture_multisampled_2d']: r#360
[#601 'texture_storage_1d']: r#360
[#601 'texture_storage_2d']: r#360
[#601 'texture_storage_2d_array']: r#360
[#601 'texture_storage_3d']: r#360
[#601 'u32']: r#360
[#601 'var']: r#360
[#601 'vec2']: r#360
[#601 'vec3']: r#360
[#601 'vec4']: r#360
[#601 'while']: r#360
[#601 '{']: r#360
[#601 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#360
[#602 '&']: r#361
[#602 '(']: r#361
[#602 '*']: r#361
[#602 ';']: r#361
[#602 '@']: r#361
[#602 '_']: r#361
[#602 'array']: r#361
[#602 'atomic']: r#361
[#602 'bool']: r#361
[#602 'break']: r#361
[#602 'const']: r#361
[#602 'const_assert']: r#361
[#602 'continue']: r#361
[#602 'continuing']: r#361
[#602 'discard']: r#361
[#602 'f16']: r#361
[#602 'f32']: r#361
[#602 'for']: r#361
[#602 'i32']: r#361
[#602 'if']: r#361
[#602 'let']: r#361
[#602 'loop']: r#361
[#602 'mat2x2']: r#361
[#602 'mat2x3']: r#361
[#602 'mat2x4']: r#361
[#602 'mat3x2']: r#361
[#602 'mat3x3']: r#361
[#602 'mat3x4']: r#361
[#602 'mat4x2']: r#361
[#602 'mat4x3']: r#361
[#602 'mat4x4']: r#361
[#602 'ptr']: r#361
[#602 'return']: r#361
[#602 'sampler']: r#361
[#602 'sampler_comparison']: r#361
[#602 'switch']: r#361
[#602 'texture_1d']: r#361
[#602 'texture_2d']: r#361
[#602 'texture_2d_array']: r#361
[#602 'texture_3d']: r#361
[#602 'texture_cube']: r#361
[#602 'texture_cube_array']: r#361
[#602 'texture_depth_2d']: r#361
[#602 'texture_depth_2d_array']: r#361
[#602 'texture_depth_cube']: r#361
[#602 'texture_depth_cube_array']: r#361
[#602 'texture_depth_multisampled_2d']: r#361
[#602 'texture_multisampled_2d']: r#361
[#602 'texture_storage_1d']: r#361
[#602 'texture_storage_2d']: r#361
[#602 'texture_storage_2d_array']: r#361
[#602 'texture_storage_3d']: r#361
[#602 'u32']: r#361
[#602 'var']: r#361
[#602 'vec2']: r#361
[#602 'vec3']: r#361
[#602 'vec4']: r#361
[#602 'while']: r#361
[#602 '{']: r#361
[#602 '}']: r#361
[#602 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#361
[#603 ';']: s#630
[#604 ';']: r#362
[#605 'continuing']: r#363
[#605 '}']: r#363
[#606 '}']: s#629
[#607 '}']: r#364
[#608 '@']: s#35
[#609 '}']: s#624
[#610 '}']: r#365
[#611 'case']: s#614
[#611 'default']: s#615
[#612 'case']: r#366
[#612 'default']: r#366
[#612 '}']: r#366
[#613 'case']: r#367
[#613 'default']: r#367
[#613 '}']: r#367
[#614 '!']: s#68
[#614 '&']: s#71
[#614 '(']: s#83
[#614 '*']: s#70
[#614 '-']: s#67
[#614 'array']: s#87
[#614 'atomic']: s#101
[#614 'bitcast']: s#77
[#614 'bool']: s#94
[#614 'default']: s#621
[#614 'f16']: s#96
[#614 'f32']: s#95
[#614 'false']: s#93
[#614 'i32']: s#97
[#614 'mat2x2']: s#106
[#614 'mat2x3']: s#107
[#614 'mat2x4']: s#108
[#614 'mat3x2']: s#109
[#614 'mat3x3']: s#110
[#614 'mat3x4']: s#111
[#614 'mat4x2']: s#112
[#614 'mat4x3']: s#113
[#614 'mat4x4']: s#114
[#614 'ptr']: s#99
[#614 'sampler']: s#131
[#614 'sampler_comparison']: s#132
[#614 'texture_1d']: s#138
[#614 'texture_2d']: s#139
[#614 'texture_2d_array']: s#140
[#614 'texture_3d']: s#141
[#614 'texture_cube']: s#142
[#614 'texture_cube_array']: s#143
[#614 'texture_depth_2d']: s#133
[#614 'texture_depth_2d_array']: s#134
[#614 'texture_depth_cube']: s#135
[#614 'texture_depth_cube_array']: s#136
[#614 'texture_depth_multisampled_2d']: s#137
[#614 'texture_multisampled_2d']: s#144
[#614 'texture_storage_1d']: s#145
[#614 'texture_storage_2d']: s#146
[#614 'texture_storage_2d_array']: s#147
[#614 'texture_storage_3d']: s#148
[#614 'true']: s#92
[#614 'u32']: s#98
[#614 'vec2']: s#103
[#614 'vec3']: s#104
[#614 'vec4']: s#105
[#614 '~']: s#69
[#614 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#614 /0[fh]/]: s#118
[#614 /0[iu]?/]: s#115
[#614 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#614 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#614 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#614 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#614 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#614 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#614 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#614 /[1-9][0-9]*[fh]/]: s#119
[#614 /[1-9][0-9]*[iu]?/]: s#116
[#615 ':']: s#618
[#616 '&']: r#368
[#616 '(']: r#368
[#616 '*']: r#368
[#616 ';']: r#368
[#616 '@']: r#368
[#616 '_']: r#368
[#616 'array']: r#368
[#616 'atomic']: r#368
[#616 'bool']: r#368
[#616 'break']: r#368
[#616 'const']: r#368
[#616 'const_assert']: r#368
[#616 'continue']: r#368
[#616 'continuing']: r#368
[#616 'discard']: r#368
[#616 'else']: r#368
[#616 'f16']: r#368
[#616 'f32']: r#368
[#616 'for']: r#368
[#616 'i32']: r#368
[#616 'if']: r#368
[#616 'let']: r#368
[#616 'loop']: r#368
[#616 'mat2x2']: r#368
[#616 'mat2x3']: r#368
[#616 'mat2x4']: r#368
[#616 'mat3x2']: r#368
[#616 'mat3x3']: r#368
[#616 'mat3x4']: r#368
[#616 'mat4x2']: r#368
[#616 'mat4x3']: r#368
[#616 'mat4x4']: r#368
[#616 'ptr']: r#368
[#616 'return']: r#368
[#616 'sampler']: r#368
[#616 'sampler_comparison']: r#368
[#616 'switch']: r#368
[#616 'texture_1d']: r#368
[#616 'texture_2d']: r#368
[#616 'texture_2d_array']: r#368
[#616 'texture_3d']: r#368
[#616 'texture_cube']: r#368
[#616 'texture_cube_array']: r#368
[#616 'texture_depth_2d']: r#368
[#616 'texture_depth_2d_array']: r#368
[#616 'texture_depth_cube']: r#368
[#616 'texture_depth_cube_array']: r#368
[#616 'texture_depth_multisampled_2d']: r#368
[#616 'texture_multisampled_2d']: r#368
[#616 'texture_storage_1d']: r#368
[#616 'texture_storage_2d']: r#368
[#616 'texture_storage_2d_array']: r#368
[#616 'texture_storage_3d']: r#368
[#616 'u32']: r#368
[#616 'var']: r#368
[#616 'vec2']: r#368
[#616 'vec3']: r#368
[#616 'vec4']: r#368
[#616 'while']: r#368
[#616 '{']: r#368
[#616 '}']: r#368
[#616 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#368
[#617 '@']: s#35
[#618 '@']: r#369
[#618 '{']: r#369
[#619 ':']: s#642
[#620 ',']: s#640
[#621 ',']: r#370
[#621 ':']: r#370
[#621 '@']: r#370
[#621 '{']: r#370
[#622 ',']: r#371
[#622 ':']: r#371
[#622 '@']: r#371
[#622 '{']: r#371
[#623 '}']: r#372
[#624 '&']: r#373
[#624 '(']: r#373
[#624 '*']: r#373
[#624 ';']: r#373
[#624 '@']: r#373
[#624 '_']: r#373
[#624 'array']: r#373
[#624 'atomic']: r#373
[#624 'bool']: r#373
[#624 'break']: r#373
[#624 'const']: r#373
[#624 'const_assert']: r#373
[#624 'continue']: r#373
[#624 'continuing']: r#373
[#624 'discard']: r#373
[#624 'f16']: r#373
[#624 'f32']: r#373
[#624 'for']: r#373
[#624 'i32']: r#373
[#624 'if']: r#373
[#624 'let']: r#373
[#624 'loop']: r#373
[#624 'mat2x2']: r#373
[#624 'mat2x3']: r#373
[#624 'mat2x4']: r#373
[#624 'mat3x2']: r#373
[#624 'mat3x3']: r#373
[#624 'mat3x4']: r#373
[#624 'mat4x2']: r#373
[#624 'mat4x3']: r#373
[#624 'mat4x4']: r#373
[#624 'ptr']: r#373
[#624 'return']: r#373
[#624 'sampler']: r#373
[#624 'sampler_comparison']: r#373
[#624 'switch']: r#373
[#624 'texture_1d']: r#373
[#624 'texture_2d']: r#373
[#624 'texture_2d_array']: r#373
[#624 'texture_3d']: r#373
[#624 'texture_cube']: r#373
[#624 'texture_cube_array']: r#373
[#624 'texture_depth_2d']: r#373
[#624 'texture_depth_2d_array']: r#373
[#624 'texture_depth_cube']: r#373
[#624 'texture_depth_cube_array']: r#373
[#624 'texture_depth_multisampled_2d']: r#373
[#624 'texture_multisampled_2d']: r#373
[#624 'texture_storage_1d']: r#373
[#624 'texture_storage_2d']: r#373
[#624 'texture_storage_2d_array']: r#373
[#624 'texture_storage_3d']: r#373
[#624 'u32']: r#373
[#624 'var']: r#373
[#624 'vec2']: r#373
[#624 'vec3']: r#373
[#624 'vec4']: r#373
[#624 'while']: r#373
[#624 '{']: r#373
[#624 '}']: r#373
[#624 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#373
[#625 '}']: r#374
[#626 '{']: s#636
[#627 '{']: r#375
[#628 '@']: s#35
[#629 '&']: r#376
[#629 '(']: r#376
[#629 '*']: r#376
[#629 ';']: r#376
[#629 '@']: r#376
[#629 '_']: r#376
[#629 'array']: r#376
[#629 'atomic']: r#376
[#629 'bool']: r#376
[#629 'break']: r#376
[#629 'const']: r#376
[#629 'const_assert']: r#376
[#629 'continue']: r#376
[#629 'continuing']: r#376
[#629 'discard']: r#376
[#629 'f16']: r#376
[#629 'f32']: r#376
[#629 'for']: r#376
[#629 'i32']: r#376
[#629 'if']: r#376
[#629 'let']: r#376
[#629 'loop']: r#376
[#629 'mat2x2']: r#376
[#629 'mat2x3']: r#376
[#629 'mat2x4']: r#376
[#629 'mat3x2']: r#376
[#629 'mat3x3']: r#376
[#629 'mat3x4']: r#376
[#629 'mat4x2']: r#376
[#629 'mat4x3']: r#376
[#629 'mat4x4']: r#376
[#629 'ptr']: r#376
[#629 'return']: r#376
[#629 'sampler']: r#376
[#629 'sampler_comparison']: r#376
[#629 'switch']: r#376
[#629 'texture_1d']: r#376
[#629 'texture_2d']: r#376
[#629 'texture_2d_array']: r#376
[#629 'texture_3d']: r#376
[#629 'texture_cube']: r#376
[#629 'texture_cube_array']: r#376
[#629 'texture_depth_2d']: r#376
[#629 'texture_depth_2d_array']: r#376
[#629 'texture_depth_cube']: r#376
[#629 'texture_depth_cube_array']: r#376
[#629 'texture_depth_multisampled_2d']: r#376
[#629 'texture_multisampled_2d']: r#376
[#629 'texture_storage_1d']: r#376
[#629 'texture_storage_2d']: r#376
[#629 'texture_storage_2d_array']: r#376
[#629 'texture_storage_3d']: r#376
[#629 'u32']: r#376
[#629 'var']: r#376
[#629 'vec2']: r#376
[#629 'vec3']: r#376
[#629 'vec4']: r#376
[#629 'while']: r#376
[#629 '{']: r#376
[#629 '}']: r#376
[#629 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#376
[#630 '&']: s#411
[#630 '(']: s#412
[#630 '*']: s#410
[#630 '_']: s#407
[#630 'array']: s#87
[#630 'atomic']: s#101
[#630 'bool']: s#94
[#630 'f16']: s#96
[#630 'f32']: s#95
[#630 'i32']: s#97
[#630 'mat2x2']: s#106
[#630 'mat2x3']: s#107
[#630 'mat2x4']: s#108
[#630 'mat3x2']: s#109
[#630 'mat3x3']: s#110
[#630 'mat3x4']: s#111
[#630 'mat4x2']: s#112
[#630 'mat4x3']: s#113
[#630 'mat4x4']: s#114
[#630 'ptr']: s#99
[#630 'sampler']: s#131
[#630 'sampler_comparison']: s#132
[#630 'texture_1d']: s#138
[#630 'texture_2d']: s#139
[#630 'texture_2d_array']: s#140
[#630 'texture_3d']: s#141
[#630 'texture_cube']: s#142
[#630 'texture_cube_array']: s#143
[#630 'texture_depth_2d']: s#133
[#630 'texture_depth_2d_array']: s#134
[#630 'texture_depth_cube']: s#135
[#630 'texture_depth_cube_array']: s#136
[#630 'texture_depth_multisampled_2d']: s#137
[#630 'texture_multisampled_2d']: s#144
[#630 'texture_storage_1d']: s#145
[#630 'texture_storage_2d']: s#146
[#630 'texture_storage_2d_array']: s#147
[#630 'texture_storage_3d']: s#148
[#630 'u32']: s#98
[#630 'vec2']: s#103
[#630 'vec3']: s#104
[#630 'vec4']: s#105
[#630 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#631 ')']: r#377
[#632 ')']: r#378
[#633 ')']: r#379
[#634 ')']: r#380
[#635 '{']: r#381
[#636 '&']: s#411
[#636 '(']: s#412
[#636 '*']: s#410
[#636 ';']: s#370
[#636 '@']: s#35
[#636 '_']: s#407
[#636 'array']: s#87
[#636 'atomic']: s#101
[#636 'bool']: s#94
[#636 'break']: s#395
[#636 'const']: s#394
[#636 'const_assert']: s#30
[#636 'continue']: s#396
[#636 'discard']: s#381
[#636 'f16']: s#96
[#636 'f32']: s#95
[#636 'i32']: s#97
[#636 'let']: s#393
[#636 'mat2x2']: s#106
[#636 'mat2x3']: s#107
[#636 'mat2x4']: s#108
[#636 'mat3x2']: s#109
[#636 'mat3x3']: s#110
[#636 'mat3x4']: s#111
[#636 'mat4x2']: s#112
[#636 'mat4x3']: s#113
[#636 'mat4x4']: s#114
[#636 'ptr']: s#99
[#636 'return']: s#385
[#636 'sampler']: s#131
[#636 'sampler_comparison']: s#132
[#636 'texture_1d']: s#138
[#636 'texture_2d']: s#139
[#636 'texture_2d_array']: s#140
[#636 'texture_3d']: s#141
[#636 'texture_cube']: s#142
[#636 'texture_cube_array']: s#143
[#636 'texture_depth_2d']: s#133
[#636 'texture_depth_2d_array']: s#134
[#636 'texture_depth_cube']: s#135
[#636 'texture_depth_cube_array']: s#136
[#636 'texture_depth_multisampled_2d']: s#137
[#636 'texture_multisampled_2d']: s#144
[#636 'texture_storage_1d']: s#145
[#636 'texture_storage_2d']: s#146
[#636 'texture_storage_2d_array']: s#147
[#636 'texture_storage_3d']: s#148
[#636 'u32']: s#98
[#636 'var']: s#157
[#636 'vec2']: s#103
[#636 'vec3']: s#104
[#636 'vec4']: s#105
[#636 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#637 ',']: s#648
[#638 ',']: r#382
[#638 ':']: r#382
[#638 '@']: r#382
[#638 '{']: r#382
[#639 ',']: s#640
[#640 '!']: s#68
[#640 '&']: s#71
[#640 '(']: s#83
[#640 '*']: s#70
[#640 '-']: s#67
[#640 'array']: s#87
[#640 'atomic']: s#101
[#640 'bitcast']: s#77
[#640 'bool']: s#94
[#640 'default']: s#621
[#640 'f16']: s#96
[#640 'f32']: s#95
[#640 'false']: s#93
[#640 'i32']: s#97
[#640 'mat2x2']: s#106
[#640 'mat2x3']: s#107
[#640 'mat2x4']: s#108
[#640 'mat3x2']: s#109
[#640 'mat3x3']: s#110
[#640 'mat3x4']: s#111
[#640 'mat4x2']: s#112
[#640 'mat4x3']: s#113
[#640 'mat4x4']: s#114
[#640 'ptr']: s#99
[#640 'sampler']: s#131
[#640 'sampler_comparison']: s#132
[#640 'texture_1d']: s#138
[#640 'texture_2d']: s#139
[#640 'texture_2d_array']: s#140
[#640 'texture_3d']: s#141
[#640 'texture_cube']: s#142
[#640 'texture_cube_array']: s#143
[#640 'texture_depth_2d']: s#133
[#640 'texture_depth_2d_array']: s#134
[#640 'texture_depth_cube']: s#135
[#640 'texture_depth_cube_array']: s#136
[#640 'texture_depth_multisampled_2d']: s#137
[#640 'texture_multisampled_2d']: s#144
[#640 'texture_storage_1d']: s#145
[#640 'texture_storage_2d']: s#146
[#640 'texture_storage_2d_array']: s#147
[#640 'texture_storage_3d']: s#148
[#640 'true']: s#92
[#640 'u32']: s#98
[#640 'vec2']: s#103
[#640 'vec3']: s#104
[#640 'vec4']: s#105
[#640 '~']: s#69
[#640 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#640 /0[fh]/]: s#118
[#640 /0[iu]?/]: s#115
[#640 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#640 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#640 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#640 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#640 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#640 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#640 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#640 /[1-9][0-9]*[fh]/]: s#119
[#640 /[1-9][0-9]*[iu]?/]: s#116
[#641 '@']: s#35
[#642 '@']: r#383
[#642 '{']: r#383
[#643 'case']: r#384
[#643 'default']: r#384
[#643 '}']: r#384
[#644 'case']: r#385
[#644 'default']: r#385
[#644 '}']: r#385
[#645 ',']: r#386
[#645 ':']: r#386
[#645 '@']: r#386
[#645 '{']: r#386
[#646 ',']: r#387
[#646 ':']: r#387
[#646 '@']: r#387
[#646 '{']: r#387
[#647 ':']: r#388
[#647 '@']: r#388
[#647 '{']: r#388
[#648 ':']: r#389
[#648 '@']: r#389
[#648 '{']: r#389
[#649 'break']: s#655
[#650 'break']: r#390
[#650 '}']: r#390
[#651 '&']: s#411
[#651 '(']: s#412
[#651 '*']: s#410
[#651 ';']: s#370
[#651 '@']: s#35
[#651 '_']: s#407
[#651 'array']: s#87
[#651 'atomic']: s#101
[#651 'bool']: s#94
[#651 'break']: s#395
[#651 'const']: s#394
[#651 'const_assert']: s#30
[#651 'continue']: s#396
[#651 'discard']: s#381
[#651 'f16']: s#96
[#651 'f32']: s#95
[#651 'i32']: s#97
[#651 'let']: s#393
[#651 'mat2x2']: s#106
[#651 'mat2x3']: s#107
[#651 'mat2x4']: s#108
[#651 'mat3x2']: s#109
[#651 'mat3x3']: s#110
[#651 'mat3x4']: s#111
[#651 'mat4x2']: s#112
[#651 'mat4x3']: s#113
[#651 'mat4x4']: s#114
[#651 'ptr']: s#99
[#651 'return']: s#385
[#651 'sampler']: s#131
[#651 'sampler_comparison']: s#132
[#651 'texture_1d']: s#138
[#651 'texture_2d']: s#139
[#651 'texture_2d_array']: s#140
[#651 'texture_3d']: s#141
[#651 'texture_cube']: s#142
[#651 'texture_cube_array']: s#143
[#651 'texture_depth_2d']: s#133
[#651 'texture_depth_2d_array']: s#134
[#651 'texture_depth_cube']: s#135
[#651 'texture_depth_cube_array']: s#136
[#651 'texture_depth_multisampled_2d']: s#137
[#651 'texture_multisampled_2d']: s#144
[#651 'texture_storage_1d']: s#145
[#651 'texture_storage_2d']: s#146
[#651 'texture_storage_2d_array']: s#147
[#651 'texture_storage_3d']: s#148
[#651 'u32']: s#98
[#651 'var']: s#157
[#651 'vec2']: s#103
[#651 'vec3']: s#104
[#651 'vec4']: s#105
[#651 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#652 'break']: r#391
[#652 '}']: r#391
[#653 '}']: s#657
[#654 '}']: r#392
[#655 'if']: s#656
[#656 '!']: s#68
[#656 '&']: s#71
[#656 '(']: s#83
[#656 '*']: s#70
[#656 '-']: s#67
[#656 'array']: s#87
[#656 'atomic']: s#101
[#656 'bitcast']: s#77
[#656 'bool']: s#94
[#656 'f16']: s#96
[#656 'f32']: s#95
[#656 'false']: s#93
[#656 'i32']: s#97
[#656 'mat2x2']: s#106
[#656 'mat2x3']: s#107
[#656 'mat2x4']: s#108
[#656 'mat3x2']: s#109
[#656 'mat3x3']: s#110
[#656 'mat3x4']: s#111
[#656 'mat4x2']: s#112
[#656 'mat4x3']: s#113
[#656 'mat4x4']: s#114
[#656 'ptr']: s#99
[#656 'sampler']: s#131
[#656 'sampler_comparison']: s#132
[#656 'texture_1d']: s#138
[#656 'texture_2d']: s#139
[#656 'texture_2d_array']: s#140
[#656 'texture_3d']: s#141
[#656 'texture_cube']: s#142
[#656 'texture_cube_array']: s#143
[#656 'texture_depth_2d']: s#133
[#656 'texture_depth_2d_array']: s#134
[#656 'texture_depth_cube']: s#135
[#656 'texture_depth_cube_array']: s#136
[#656 'texture_depth_multisampled_2d']: s#137
[#656 'texture_multisampled_2d']: s#144
[#656 'texture_storage_1d']: s#145
[#656 'texture_storage_2d']: s#146
[#656 'texture_storage_2d_array']: s#147
[#656 'texture_storage_3d']: s#148
[#656 'true']: s#92
[#656 'u32']: s#98
[#656 'vec2']: s#103
[#656 'vec3']: s#104
[#656 'vec4']: s#105
[#656 '~']: s#69
[#656 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#656 /0[fh]/]: s#118
[#656 /0[iu]?/]: s#115
[#656 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#656 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#656 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#656 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#656 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#656 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#656 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#656 /[1-9][0-9]*[fh]/]: s#119
[#656 /[1-9][0-9]*[iu]?/]: s#116
[#657 '}']: r#393
[#658 ';']: s#659
[#659 '}']: r#394

=Goto:
[#0 diagnostic_directive]: #5
[#0 enable_directive]: #6
[#0 global_directive]: #4
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attribute]: #34
[#2 const_assert_statement]: #23
[#2 function_decl]: #22
[#2 function_decl/0.0]: #29
[#2 function_decl/0.0/0]: #33
[#2 global_constant_decl]: #19
[#2 global_constant_decl/1.0]: #26
[#2 global_constant_decl/1.0/0]: #32
[#2 global_decl]: #16
[#2 global_variable_decl]: #18
[#2 global_variable_decl/0.0]: #24
[#2 global_variable_decl/0.0/0]: #31
[#2 struct_decl]: #21
[#2 translation_unit/0.1]: #14
[#2 translation_unit/0.1/0]: #15
[#2 type_alias_decl]: #20
[#4 diagnostic_directive]: #5
[#4 enable_directive]: #6
[#4 global_directive]: #4
[#4 translation_unit/0.0/0]: #13
[#7 diagnostic_control]: #11
[#8 extension_name]: #9
[#12 severity_control_name]: #163
[#16 attribute]: #34
[#16 const_assert_statement]: #23
[#16 function_decl]: #22
[#16 function_decl/0.0]: #29
[#16 function_decl/0.0/0]: #33
[#16 global_constant_decl]: #19
[#16 global_constant_decl/1.0]: #26
[#16 global_constant_decl/1.0/0]: #32
[#16 global_decl]: #16
[#16 global_variable_decl]: #18
[#16 global_variable_decl/0.0]: #24
[#16 global_variable_decl/0.0/0]: #31
[#16 struct_decl]: #21
[#16 translation_unit/0.1/0]: #162
[#16 type_alias_decl]: #20
[#24 variable_decl]: #156
[#25 ident]: #155
[#25 optionally_typed_ident]: #154
[#27 ident]: #152
[#28 ident]: #151
[#29 function_header]: #149
[#30 additive_expression]: #63
[#30 array_type_specifier]: #100
[#30 binary_and_expression]: #60
[#30 binary_or_expression]: #61
[#30 binary_xor_expression]: #62
[#30 bitwise_expression]: #58
[#30 bool_literal]: #82
[#30 call_expression]: #74
[#30 callable]: #79
[#30 decimal_float_literal]: #90
[#30 decimal_int_literal]: #88
[#30 depth_texture_type]: #127
[#30 expression]: #54
[#30 float_literal]: #81
[#30 hex_float_literal]: #91
[#30 hex_int_literal]: #89
[#30 ident]: #73
[#30 int_literal]: #80
[#30 literal]: #75
[#30 mat_prefix]: #86
[#30 multiplicative_expression]: #65
[#30 multisampled_texture_type]: #129
[#30 paren_expression]: #76
[#30 primary_expression]: #72
[#30 relational_expression]: #55
[#30 sampled_texture_type]: #128
[#30 sampler_type]: #126
[#30 shift_expression]: #59
[#30 short_circuit_and_expression]: #57
[#30 short_circuit_or_expression]: #56
[#30 singular_expression]: #66
[#30 storage_texture_type]: #130
[#30 texture_and_sampler_types]: #102
[#30 type_specifier_without_ident]: #84
[#30 unary_expression]: #64
[#30 vec_prefix]: #85
[#34 attribute]: #34
[#34 function_decl/0.0/0]: #53
[#34 global_constant_decl/1.0/0]: #52
[#34 global_variable_decl/0.0/0]: #51
[#40 diagnostic_control]: #235
[#63 additive_operator]: #215
[#65 multiplicative_operator]: #209
[#67 array_type_specifier]: #100
[#67 bool_literal]: #82
[#67 call_expression]: #74
[#67 callable]: #79
[#67 decimal_float_literal]: #90
[#67 decimal_int_literal]: #88
[#67 depth_texture_type]: #127
[#67 float_literal]: #81
[#67 hex_float_literal]: #91
[#67 hex_int_literal]: #89
[#67 ident]: #73
[#67 int_literal]: #80
[#67 literal]: #75
[#67 mat_prefix]: #86
[#67 multisampled_texture_type]: #129
[#67 paren_expression]: #76
[#67 primary_expression]: #72
[#67 sampled_texture_type]: #128
[#67 sampler_type]: #126
[#67 singular_expression]: #66
[#67 storage_texture_type]: #130
[#67 texture_and_sampler_types]: #102
[#67 type_specifier_without_ident]: #84
[#67 unary_expression]: #208
[#67 vec_prefix]: #85
[#68 array_type_specifier]: #100
[#68 bool_literal]: #82
[#68 call_expression]: #74
[#68 callable]: #79
[#68 decimal_float_literal]: #90
[#68 decimal_int_literal]: #88
[#68 depth_texture_type]: #127
[#68 float_literal]: #81
[#68 hex_float_literal]: #91
[#68 hex_int_literal]: #89
[#68 ident]: #73
[#68 int_literal]: #80
[#68 literal]: #75
[#68 mat_prefix]: #86
[#68 multisampled_texture_type]: #129
[#68 paren_expression]: #76
[#68 primary_expression]: #72
[#68 sampled_texture_type]: #128
[#68 sampler_type]: #126
[#68 singular_expression]: #66
[#68 storage_texture_type]: #130
[#68 texture_and_sampler_types]: #102
[#68 type_specifier_without_ident]: #84
[#68 unary_expression]: #207
[#68 vec_prefix]: #85
[#69 array_type_specifier]: #100
[#69 bool_literal]: #82
[#69 call_expression]: #74
[#69 callable]: #79
[#69 decimal_float_literal]: #90
[#69 decimal_int_literal]: #88
[#69 depth_texture_type]: #127
[#69 float_literal]: #81
[#69 hex_float_literal]: #91
[#69 hex_int_literal]: #89
[#69 ident]: #73
[#69 int_literal]: #80
[#69 literal]: #75
[#69 mat_prefix]: #86
[#69 multisampled_texture_type]: #129
[#69 paren_expression]: #76
[#69 primary_expression]: #72
[#69 sampled_texture_type]: #128
[#69 sampler_type]: #126
[#69 singular_expression]: #66
[#69 storage_texture_type]: #130
[#69 texture_and_sampler_types]: #102
[#69 type_specifier_without_ident]: #84
[#69 unary_expression]: #206
[#69 vec_prefix]: #85
[#70 array_type_specifier]: #100
[#70 bool_literal]: #82
[#70 call_expression]: #74
[#70 callable]: #79
[#70 decimal_float_literal]: #90
[#70 decimal_int_literal]: #88
[#70 depth_texture_type]: #127
[#70 float_literal]: #81
[#70 hex_float_literal]: #91
[#70 hex_int_literal]: #89
[#70 ident]: #73
[#70 int_literal]: #80
[#70 literal]: #75
[#70 mat_prefix]: #86
[#70 multisampled_texture_type]: #129
[#70 paren_expression]: #76
[#70 primary_expression]: #72
[#70 sampled_texture_type]: #128
[#70 sampler_type]: #126
[#70 singular_expression]: #66
[#70 storage_texture_type]: #130
[#70 texture_and_sampler_types]: #102
[#70 type_specifier_without_ident]: #84
[#70 unary_expression]: #205
[#70 vec_prefix]: #85
[#71 array_type_specifier]: #100
[#71 bool_literal]: #82
[#71 call_expression]: #74
[#71 callable]: #79
[#71 decimal_float_literal]: #90
[#71 decimal_int_literal]: #88
[#71 depth_texture_type]: #127
[#71 float_literal]: #81
[#71 hex_float_literal]: #91
[#71 hex_int_literal]: #89
[#71 ident]: #73
[#71 int_literal]: #80
[#71 literal]: #75
[#71 mat_prefix]: #86
[#71 multisampled_texture_type]: #129
[#71 paren_expression]: #76
[#71 primary_expression]: #72
[#71 sampled_texture_type]: #128
[#71 sampler_type]: #126
[#71 singular_expression]: #66
[#71 storage_texture_type]: #130
[#71 texture_and_sampler_types]: #102
[#71 type_specifier_without_ident]: #84
[#71 unary_expression]: #204
[#71 vec_prefix]: #85
[#72 component_or_swizzle_specifier]: #201
[#72 singular_expression/0.1]: #200
[#79 argument_expression_list]: #197
[#83 additive_expression]: #63
[#83 array_type_specifier]: #100
[#83 binary_and_expression]: #60
[#83 binary_or_expression]: #61
[#83 binary_xor_expression]: #62
[#83 bitwise_expression]: #58
[#83 bool_literal]: #82
[#83 call_expression]: #74
[#83 callable]: #79
[#83 decimal_float_literal]: #90
[#83 decimal_int_literal]: #88
[#83 depth_texture_type]: #127
[#83 expression]: #196
[#83 float_literal]: #81
[#83 hex_float_literal]: #91
[#83 hex_int_literal]: #89
[#83 ident]: #73
[#83 int_literal]: #80
[#83 literal]: #75
[#83 mat_prefix]: #86
[#83 multiplicative_expression]: #65
[#83 multisampled_texture_type]: #129
[#83 paren_expression]: #76
[#83 primary_expression]: #72
[#83 relational_expression]: #55
[#83 sampled_texture_type]: #128
[#83 sampler_type]: #126
[#83 shift_expression]: #59
[#83 short_circuit_and_expression]: #57
[#83 short_circuit_or_expression]: #56
[#83 singular_expression]: #66
[#83 storage_texture_type]: #130
[#83 texture_and_sampler_types]: #102
[#83 type_specifier_without_ident]: #84
[#83 unary_expression]: #64
[#83 vec_prefix]: #85
[#149 attribute]: #187
[#149 compound_statement]: #184
[#149 compound_statement/0.0]: #185
[#149 compound_statement/0.0/0]: #186
[#150 ident]: #183
[#151 struct_body_decl]: #181
[#153 ident]: #155
[#153 optionally_typed_ident]: #179
[#155 optionally_typed_ident/0.1]: #176
[#156 global_variable_decl/0.2]: #174
[#157 variable_decl/0.1]: #171
[#157 variable_qualifier]: #172
[#170 diagnostic_rule_name]: #347
[#171 ident]: #155
[#171 optionally_typed_ident]: #346
[#173 address_space]: #345
[#175 additive_expression]: #63
[#175 array_type_specifier]: #100
[#175 binary_and_expression]: #60
[#175 binary_or_expression]: #61
[#175 binary_xor_expression]: #62
[#175 bitwise_expression]: #58
[#175 bool_literal]: #82
[#175 call_expression]: #74
[#175 callable]: #79
[#175 decimal_float_literal]: #90
[#175 decimal_int_literal]: #88
[#175 depth_texture_type]: #127
[#175 expression]: #344
[#175 float_literal]: #81
[#175 hex_float_literal]: #91
[#175 hex_int_literal]: #89
[#175 ident]: #73
[#175 int_literal]: #80
[#175 literal]: #75
[#175 mat_prefix]: #86
[#175 multiplicative_expression]: #65
[#175 multisampled_texture_type]: #129
[#175 paren_expression]: #76
[#175 primary_expression]: #72
[#175 relational_expression]: #55
[#175 sampled_texture_type]: #128
[#175 sampler_type]: #126
[#175 shift_expression]: #59
[#175 short_circuit_and_expression]: #57
[#175 short_circuit_or_expression]: #56
[#175 singular_expression]: #66
[#175 storage_texture_type]: #130
[#175 texture_and_sampler_types]: #102
[#175 type_specifier_without_ident]: #84
[#175 unary_expression]: #64
[#175 vec_prefix]: #85
[#177 array_type_specifier]: #100
[#177 depth_texture_type]: #127
[#177 ident]: #293
[#177 mat_prefix]: #296
[#177 multisampled_texture_type]: #129
[#177 sampled_texture_type]: #128
[#177 sampler_type]: #126
[#177 storage_texture_type]: #130
[#177 texture_and_sampler_types]: #102
[#177 type_specifier]: #343
[#177 type_specifier_without_ident]: #294
[#177 vec_prefix]: #295
[#178 additive_expression]: #63
[#178 array_type_specifier]: #100
[#178 binary_and_expression]: #60
[#178 binary_or_expression]: #61
[#178 binary_xor_expression]: #62
[#178 bitwise_expression]: #58
[#178 bool_literal]: #82
[#178 call_expression]: #74
[#178 callable]: #79
[#178 decimal_float_literal]: #90
[#178 decimal_int_literal]: #88
[#178 depth_texture_type]: #127
[#178 expression]: #342
[#178 float_literal]: #81
[#178 hex_float_literal]: #91
[#178 hex_int_literal]: #89
[#178 ident]: #73
[#178 int_literal]: #80
[#178 literal]: #75
[#178 mat_prefix]: #86
[#178 multiplicative_expression]: #65
[#178 multisampled_texture_type]: #129
[#178 paren_expression]: #76
[#178 primary_expression]: #72
[#178 relational_expression]: #55
[#178 sampled_texture_type]: #128
[#178 sampler_type]: #126
[#178 shift_expression]: #59
[#178 short_circuit_and_expression]: #57
[#178 short_circuit_or_expression]: #56
[#178 singular_expression]: #66
[#178 storage_texture_type]: #130
[#178 texture_and_sampler_types]: #102
[#178 type_specifier_without_ident]: #84
[#178 unary_expression]: #64
[#178 vec_prefix]: #85
[#179 global_constant_decl/1.3]: #340
[#180 array_type_specifier]: #100
[#180 depth_texture_type]: #127
[#180 ident]: #293
[#180 mat_prefix]: #296
[#180 multisampled_texture_type]: #129
[#180 sampled_texture_type]: #128
[#180 sampler_type]: #126
[#180 storage_texture_type]: #130
[#180 texture_and_sampler_types]: #102
[#180 type_specifier]: #339
[#180 type_specifier_without_ident]: #294
[#180 vec_prefix]: #295
[#182 attribute]: #338
[#182 struct_member]: #335
[#182 struct_member/0.0]: #336
[#182 struct_member/0.0/0]: #337
[#187 attribute]: #187
[#187 compound_statement/0.0/0]: #332
[#188 texel_format]: #314
[#189 array_type_specifier]: #100
[#189 depth_texture_type]: #127
[#189 ident]: #293
[#189 mat_prefix]: #296
[#189 multisampled_texture_type]: #129
[#189 sampled_texture_type]: #128
[#189 sampler_type]: #126
[#189 storage_texture_type]: #130
[#189 texture_and_sampler_types]: #102
[#189 type_specifier]: #313
[#189 type_specifier_without_ident]: #294
[#189 vec_prefix]: #295
[#190 array_type_specifier]: #100
[#190 depth_texture_type]: #127
[#190 ident]: #293
[#190 mat_prefix]: #296
[#190 multisampled_texture_type]: #129
[#190 sampled_texture_type]: #128
[#190 sampler_type]: #126
[#190 storage_texture_type]: #130
[#190 texture_and_sampler_types]: #102
[#190 type_specifier]: #312
[#190 type_specifier_without_ident]: #294
[#190 vec_prefix]: #295
[#191 array_type_specifier]: #100
[#191 depth_texture_type]: #127
[#191 ident]: #293
[#191 mat_prefix]: #296
[#191 multisampled_texture_type]: #129
[#191 sampled_texture_type]: #128
[#191 sampler_type]: #126
[#191 storage_texture_type]: #130
[#191 texture_and_sampler_types]: #102
[#191 type_specifier]: #311
[#191 type_specifier_without_ident]: #294
[#191 vec_prefix]: #295
[#192 address_space]: #305
[#193 array_type_specifier]: #100
[#193 depth_texture_type]: #127
[#193 ident]: #293
[#193 mat_prefix]: #296
[#193 multisampled_texture_type]: #129
[#193 sampled_texture_type]: #128
[#193 sampler_type]: #126
[#193 storage_texture_type]: #130
[#193 texture_and_sampler_types]: #102
[#193 type_specifier]: #304
[#193 type_specifier_without_ident]: #294
[#193 vec_prefix]: #295
[#194 array_type_specifier]: #100
[#194 depth_texture_type]: #127
[#194 ident]: #293
[#194 mat_prefix]: #296
[#194 multisampled_texture_type]: #129
[#194 sampled_texture_type]: #128
[#194 sampler_type]: #126
[#194 storage_texture_type]: #130
[#194 texture_and_sampler_types]: #102
[#194 type_specifier]: #303
[#194 type_specifier_without_ident]: #294
[#194 vec_prefix]: #295
[#195 array_type_specifier]: #100
[#195 depth_texture_type]: #127
[#195 ident]: #293
[#195 mat_prefix]: #296
[#195 multisampled_texture_type]: #129
[#195 sampled_texture_type]: #128
[#195 sampler_type]: #126
[#195 storage_texture_type]: #130
[#195 texture_and_sampler_types]: #102
[#195 type_specifier]: #302
[#195 type_specifier_without_ident]: #294
[#195 vec_prefix]: #295
[#198 additive_expression]: #63
[#198 argument_expression_list/0.1]: #298
[#198 array_type_specifier]: #100
[#198 binary_and_expression]: #60
[#198 binary_or_expression]: #61
[#198 binary_xor_expression]: #62
[#198 bitwise_expression]: #58
[#198 bool_literal]: #82
[#198 call_expression]: #74
[#198 callable]: #79
[#198 decimal_float_literal]: #90
[#198 decimal_int_literal]: #88
[#198 depth_texture_type]: #127
[#198 expression]: #300
[#198 expression_comma_list]: #299
[#198 float_literal]: #81
[#198 hex_float_literal]: #91
[#198 hex_int_literal]: #89
[#198 ident]: #73
[#198 int_literal]: #80
[#198 literal]: #75
[#198 mat_prefix]: #86
[#198 multiplicative_expression]: #65
[#198 multisampled_texture_type]: #129
[#198 paren_expression]: #76
[#198 primary_expression]: #72
[#198 relational_expression]: #55
[#198 sampled_texture_type]: #128
[#198 sampler_type]: #126
[#198 shift_expression]: #59
[#198 short_circuit_and_expression]: #57
[#198 short_circuit_or_expression]: #56
[#198 singular_expression]: #66
[#198 storage_texture_type]: #130
[#198 texture_and_sampler_types]: #102
[#198 type_specifier_without_ident]: #84
[#198 unary_expression]: #64
[#198 vec_prefix]: #85
[#199 array_type_specifier]: #100
[#199 depth_texture_type]: #127
[#199 ident]: #293
[#199 mat_prefix]: #296
[#199 multisampled_texture_type]: #129
[#199 sampled_texture_type]: #128
[#199 sampler_type]: #126
[#199 storage_texture_type]: #130
[#199 texture_and_sampler_types]: #102
[#199 type_specifier]: #292
[#199 type_specifier_without_ident]: #294
[#199 vec_prefix]: #295
[#202 additive_expression]: #63
[#202 array_type_specifier]: #100
[#202 binary_and_expression]: #60
[#202 binary_or_expression]: #61
[#202 binary_xor_expression]: #62
[#202 bitwise_expression]: #58
[#202 bool_literal]: #82
[#202 call_expression]: #74
[#202 callable]: #79
[#202 decimal_float_literal]: #90
[#202 decimal_int_literal]: #88
[#202 depth_texture_type]: #127
[#202 expression]: #291
[#202 float_literal]: #81
[#202 hex_float_literal]: #91
[#202 hex_int_literal]: #89
[#202 ident]: #73
[#202 int_literal]: #80
[#202 literal]: #75
[#202 mat_prefix]: #86
[#202 multiplicative_expression]: #65
[#202 multisampled_texture_type]: #129
[#202 paren_expression]: #76
[#202 primary_expression]: #72
[#202 relational_expression]: #55
[#202 sampled_texture_type]: #128
[#202 sampler_type]: #126
[#202 shift_expression]: #59
[#202 short_circuit_and_expression]: #57
[#202 short_circuit_or_expression]: #56
[#202 singular_expression]: #66
[#202 storage_texture_type]: #130
[#202 texture_and_sampler_types]: #102
[#202 type_specifier_without_ident]: #84
[#202 unary_expression]: #64
[#202 vec_prefix]: #85
[#203 member_ident]: #280
[#203 swizzle_name]: #281
[#209 array_type_specifier]: #100
[#209 bool_literal]: #82
[#209 call_expression]: #74
[#209 callable]: #79
[#209 decimal_float_literal]: #90
[#209 decimal_int_literal]: #88
[#209 depth_texture_type]: #127
[#209 float_literal]: #81
[#209 hex_float_literal]: #91
[#209 hex_int_literal]: #89
[#209 ident]: #73
[#209 int_literal]: #80
[#209 literal]: #75
[#209 mat_prefix]: #86
[#209 multisampled_texture_type]: #129
[#209 paren_expression]: #76
[#209 primary_expression]: #72
[#209 sampled_texture_type]: #128
[#209 sampler_type]: #126
[#209 singular_expression]: #66
[#209 storage_texture_type]: #130
[#209 texture_and_sampler_types]: #102
[#209 type_specifier_without_ident]: #84
[#209 unary_expression]: #279
[#209 vec_prefix]: #85
[#213 array_type_specifier]: #100
[#213 bool_literal]: #82
[#213 call_expression]: #74
[#213 callable]: #79
[#213 decimal_float_literal]: #90
[#213 decimal_int_literal]: #88
[#213 depth_texture_type]: #127
[#213 float_literal]: #81
[#213 hex_float_literal]: #91
[#213 hex_int_literal]: #89
[#213 ident]: #73
[#213 int_literal]: #80
[#213 literal]: #75
[#213 mat_prefix]: #86
[#213 multisampled_texture_type]: #129
[#213 paren_expression]: #76
[#213 primary_expression]: #72
[#213 sampled_texture_type]: #128
[#213 sampler_type]: #126
[#213 singular_expression]: #66
[#213 storage_texture_type]: #130
[#213 texture_and_sampler_types]: #102
[#213 type_specifier_without_ident]: #84
[#213 unary_expression]: #278
[#213 vec_prefix]: #85
[#214 array_type_specifier]: #100
[#214 bool_literal]: #82
[#214 call_expression]: #74
[#214 callable]: #79
[#214 decimal_float_literal]: #90
[#214 decimal_int_literal]: #88
[#214 depth_texture_type]: #127
[#214 float_literal]: #81
[#214 hex_float_literal]: #91
[#214 hex_int_literal]: #89
[#214 ident]: #73
[#214 int_literal]: #80
[#214 literal]: #75
[#214 mat_prefix]: #86
[#214 multisampled_texture_type]: #129
[#214 paren_expression]: #76
[#214 primary_expression]: #72
[#214 sampled_texture_type]: #128
[#214 sampler_type]: #126
[#214 singular_expression]: #66
[#214 storage_texture_type]: #130
[#214 texture_and_sampler_types]: #102
[#214 type_specifier_without_ident]: #84
[#214 unary_expression]: #277
[#214 vec_prefix]: #85
[#215 array_type_specifier]: #100
[#215 bool_literal]: #82
[#215 call_expression]: #74
[#215 callable]: #79
[#215 decimal_float_literal]: #90
[#215 decimal_int_literal]: #88
[#215 depth_texture_type]: #127
[#215 float_literal]: #81
[#215 hex_float_literal]: #91
[#215 hex_int_literal]: #89
[#215 ident]: #73
[#215 int_literal]: #80
[#215 literal]: #75
[#215 mat_prefix]: #86
[#215 multiplicative_expression]: #275
[#215 multisampled_texture_type]: #129
[#215 paren_expression]: #76
[#215 primary_expression]: #72
[#215 sampled_texture_type]: #128
[#215 sampler_type]: #126
[#215 singular_expression]: #66
[#215 storage_texture_type]: #130
[#215 texture_and_sampler_types]: #102
[#215 type_specifier_without_ident]: #84
[#215 unary_expression]: #276
[#215 vec_prefix]: #85
[#218 array_type_specifier]: #100
[#218 bool_literal]: #82
[#218 call_expression]: #74
[#218 callable]: #79
[#218 decimal_float_literal]: #90
[#218 decimal_int_literal]: #88
[#218 depth_texture_type]: #127
[#218 float_literal]: #81
[#218 hex_float_literal]: #91
[#218 hex_int_literal]: #89
[#218 ident]: #73
[#218 int_literal]: #80
[#218 literal]: #75
[#218 mat_prefix]: #86
[#218 multisampled_texture_type]: #129
[#218 paren_expression]: #76
[#218 primary_expression]: #72
[#218 sampled_texture_type]: #128
[#218 sampler_type]: #126
[#218 singular_expression]: #66
[#218 storage_texture_type]: #130
[#218 texture_and_sampler_types]: #102
[#218 type_specifier_without_ident]: #84
[#218 unary_expression]: #274
[#218 vec_prefix]: #85
[#219 array_type_specifier]: #100
[#219 bool_literal]: #82
[#219 call_expression]: #74
[#219 callable]: #79
[#219 decimal_float_literal]: #90
[#219 decimal_int_literal]: #88
[#219 depth_texture_type]: #127
[#219 float_literal]: #81
[#219 hex_float_literal]: #91
[#219 hex_int_literal]: #89
[#219 ident]: #73
[#219 int_literal]: #80
[#219 literal]: #75
[#219 mat_prefix]: #86
[#219 multisampled_texture_type]: #129
[#219 paren_expression]: #76
[#219 primary_expression]: #72
[#219 sampled_texture_type]: #128
[#219 sampler_type]: #126
[#219 singular_expression]: #66
[#219 storage_texture_type]: #130
[#219 texture_and_sampler_types]: #102
[#219 type_specifier_without_ident]: #84
[#219 unary_expression]: #273
[#219 vec_prefix]: #85
[#220 array_type_specifier]: #100
[#220 bool_literal]: #82
[#220 call_expression]: #74
[#220 callable]: #79
[#220 decimal_float_literal]: #90
[#220 decimal_int_literal]: #88
[#220 depth_texture_type]: #127
[#220 float_literal]: #81
[#220 hex_float_literal]: #91
[#220 hex_int_literal]: #89
[#220 ident]: #73
[#220 int_literal]: #80
[#220 literal]: #75
[#220 mat_prefix]: #86
[#220 multisampled_texture_type]: #129
[#220 paren_expression]: #76
[#220 primary_expression]: #72
[#220 sampled_texture_type]: #128
[#220 sampler_type]: #126
[#220 singular_expression]: #66
[#220 storage_texture_type]: #130
[#220 texture_and_sampler_types]: #102
[#220 type_specifier_without_ident]: #84
[#220 unary_expression]: #272
[#220 vec_prefix]: #85
[#221 additive_expression]: #63
[#221 array_type_specifier]: #100
[#221 bool_literal]: #82
[#221 call_expression]: #74
[#221 callable]: #79
[#221 decimal_float_literal]: #90
[#221 decimal_int_literal]: #88
[#221 depth_texture_type]: #127
[#221 float_literal]: #81
[#221 hex_float_literal]: #91
[#221 hex_int_literal]: #89
[#221 ident]: #73
[#221 int_literal]: #80
[#221 literal]: #75
[#221 mat_prefix]: #86
[#221 multiplicative_expression]: #65
[#221 multisampled_texture_type]: #129
[#221 paren_expression]: #76
[#221 primary_expression]: #72
[#221 sampled_texture_type]: #128
[#221 sampler_type]: #126
[#221 shift_expression]: #271
[#221 singular_expression]: #66
[#221 storage_texture_type]: #130
[#221 texture_and_sampler_types]: #102
[#221 type_specifier_without_ident]: #84
[#221 unary_expression]: #264
[#221 vec_prefix]: #85
[#222 additive_expression]: #63
[#222 array_type_specifier]: #100
[#222 bool_literal]: #82
[#222 call_expression]: #74
[#222 callable]: #79
[#222 decimal_float_literal]: #90
[#222 decimal_int_literal]: #88
[#222 depth_texture_type]: #127
[#222 float_literal]: #81
[#222 hex_float_literal]: #91
[#222 hex_int_literal]: #89
[#222 ident]: #73
[#222 int_literal]: #80
[#222 literal]: #75
[#222 mat_prefix]: #86
[#222 multiplicative_expression]: #65
[#222 multisampled_texture_type]: #129
[#222 paren_expression]: #76
[#222 primary_expression]: #72
[#222 sampled_texture_type]: #128
[#222 sampler_type]: #126
[#222 shift_expression]: #270
[#222 singular_expression]: #66
[#222 storage_texture_type]: #130
[#222 texture_and_sampler_types]: #102
[#222 type_specifier_without_ident]: #84
[#222 unary_expression]: #264
[#222 vec_prefix]: #85
[#223 additive_expression]: #63
[#223 array_type_specifier]: #100
[#223 bool_literal]: #82
[#223 call_expression]: #74
[#223 callable]: #79
[#223 decimal_float_literal]: #90
[#223 decimal_int_literal]: #88
[#223 depth_texture_type]: #127
[#223 float_literal]: #81
[#223 hex_float_literal]: #91
[#223 hex_int_literal]: #89
[#223 ident]: #73
[#223 int_literal]: #80
[#223 literal]: #75
[#223 mat_prefix]: #86
[#223 multiplicative_expression]: #65
[#223 multisampled_texture_type]: #129
[#223 paren_expression]: #76
[#223 primary_expression]: #72
[#223 sampled_texture_type]: #128
[#223 sampler_type]: #126
[#223 shift_expression]: #269
[#223 singular_expression]: #66
[#223 storage_texture_type]: #130
[#223 texture_and_sampler_types]: #102
[#223 type_specifier_without_ident]: #84
[#223 unary_expression]: #264
[#223 vec_prefix]: #85
[#224 additive_expression]: #63
[#224 array_type_specifier]: #100
[#224 bool_literal]: #82
[#224 call_expression]: #74
[#224 callable]: #79
[#224 decimal_float_literal]: #90
[#224 decimal_int_literal]: #88
[#224 depth_texture_type]: #127
[#224 float_literal]: #81
[#224 hex_float_literal]: #91
[#224 hex_int_literal]: #89
[#224 ident]: #73
[#224 int_literal]: #80
[#224 literal]: #75
[#224 mat_prefix]: #86
[#224 multiplicative_expression]: #65
[#224 multisampled_texture_type]: #129
[#224 paren_expression]: #76
[#224 primary_expression]: #72
[#224 sampled_texture_type]: #128
[#224 sampler_type]: #126
[#224 shift_expression]: #268
[#224 singular_expression]: #66
[#224 storage_texture_type]: #130
[#224 texture_and_sampler_types]: #102
[#224 type_specifier_without_ident]: #84
[#224 unary_expression]: #264
[#224 vec_prefix]: #85
[#225 additive_expression]: #63
[#225 array_type_specifier]: #100
[#225 bool_literal]: #82
[#225 call_expression]: #74
[#225 callable]: #79
[#225 decimal_float_literal]: #90
[#225 decimal_int_literal]: #88
[#225 depth_texture_type]: #127
[#225 float_literal]: #81
[#225 hex_float_literal]: #91
[#225 hex_int_literal]: #89
[#225 ident]: #73
[#225 int_literal]: #80
[#225 literal]: #75
[#225 mat_prefix]: #86
[#225 multiplicative_expression]: #65
[#225 multisampled_texture_type]: #129
[#225 paren_expression]: #76
[#225 primary_expression]: #72
[#225 sampled_texture_type]: #128
[#225 sampler_type]: #126
[#225 shift_expression]: #267
[#225 singular_expression]: #66
[#225 storage_texture_type]: #130
[#225 texture_and_sampler_types]: #102
[#225 type_specifier_without_ident]: #84
[#225 unary_expression]: #264
[#225 vec_prefix]: #85
[#226 additive_expression]: #63
[#226 array_type_specifier]: #100
[#226 bool_literal]: #82
[#226 call_expression]: #74
[#226 callable]: #79
[#226 decimal_float_literal]: #90
[#226 decimal_int_literal]: #88
[#226 depth_texture_type]: #127
[#226 float_literal]: #81
[#226 hex_float_literal]: #91
[#226 hex_int_literal]: #89
[#226 ident]: #73
[#226 int_literal]: #80
[#226 literal]: #75
[#226 mat_prefix]: #86
[#226 multiplicative_expression]: #65
[#226 multisampled_texture_type]: #129
[#226 paren_expression]: #76
[#226 primary_expression]: #72
[#226 sampled_texture_type]: #128
[#226 sampler_type]: #126
[#226 shift_expression]: #266
[#226 singular_expression]: #66
[#226 storage_texture_type]: #130
[#226 texture_and_sampler_types]: #102
[#226 type_specifier_without_ident]: #84
[#226 unary_expression]: #264
[#226 vec_prefix]: #85
[#227 additive_expression]: #63
[#227 array_type_specifier]: #100
[#227 bool_literal]: #82
[#227 call_expression]: #74
[#227 callable]: #79
[#227 decimal_float_literal]: #90
[#227 decimal_int_literal]: #88
[#227 depth_texture_type]: #127
[#227 float_literal]: #81
[#227 hex_float_literal]: #91
[#227 hex_int_literal]: #89
[#227 ident]: #73
[#227 int_literal]: #80
[#227 literal]: #75
[#227 mat_prefix]: #86
[#227 multiplicative_expression]: #65
[#227 multisampled_texture_type]: #129
[#227 paren_expression]: #76
[#227 primary_expression]: #72
[#227 relational_expression]: #265
[#227 sampled_texture_type]: #128
[#227 sampler_type]: #126
[#227 shift_expression]: #59
[#227 singular_expression]: #66
[#227 storage_texture_type]: #130
[#227 texture_and_sampler_types]: #102
[#227 type_specifier_without_ident]: #84
[#227 unary_expression]: #264
[#227 vec_prefix]: #85
[#228 additive_expression]: #63
[#228 array_type_specifier]: #100
[#228 bool_literal]: #82
[#228 call_expression]: #74
[#228 callable]: #79
[#228 decimal_float_literal]: #90
[#228 decimal_int_literal]: #88
[#228 depth_texture_type]: #127
[#228 float_literal]: #81
[#228 hex_float_literal]: #91
[#228 hex_int_literal]: #89
[#228 ident]: #73
[#228 int_literal]: #80
[#228 literal]: #75
[#228 mat_prefix]: #86
[#228 multiplicative_expression]: #65
[#228 multisampled_texture_type]: #129
[#228 paren_expression]: #76
[#228 primary_expression]: #72
[#228 relational_expression]: #263
[#228 sampled_texture_type]: #128
[#228 sampler_type]: #126
[#228 shift_expression]: #59
[#228 singular_expression]: #66
[#228 storage_texture_type]: #130
[#228 texture_and_sampler_types]: #102
[#228 type_specifier_without_ident]: #84
[#228 unary_expression]: #264
[#228 vec_prefix]: #85
[#229 additive_expression]: #63
[#229 array_type_specifier]: #100
[#229 binary_and_expression]: #60
[#229 binary_or_expression]: #61
[#229 binary_xor_expression]: #62
[#229 bitwise_expression]: #58
[#229 bool_literal]: #82
[#229 call_expression]: #74
[#229 callable]: #79
[#229 decimal_float_literal]: #90
[#229 decimal_int_literal]: #88
[#229 depth_texture_type]: #127
[#229 expression]: #262
[#229 float_literal]: #81
[#229 hex_float_literal]: #91
[#229 hex_int_literal]: #89
[#229 ident]: #73
[#229 int_literal]: #80
[#229 literal]: #75
[#229 mat_prefix]: #86
[#229 multiplicative_expression]: #65
[#229 multisampled_texture_type]: #129
[#229 paren_expression]: #76
[#229 primary_expression]: #72
[#229 relational_expression]: #55
[#229 sampled_texture_type]: #128
[#229 sampler_type]: #126
[#229 shift_expression]: #59
[#229 short_circuit_and_expression]: #57
[#229 short_circuit_or_expression]: #56
[#229 singular_expression]: #66
[#229 storage_texture_type]: #130
[#229 texture_and_sampler_types]: #102
[#229 type_specifier_without_ident]: #84
[#229 unary_expression]: #64
[#229 vec_prefix]: #85
[#230 additive_expression]: #63
[#230 array_type_specifier]: #100
[#230 binary_and_expression]: #60
[#230 binary_or_expression]: #61
[#230 binary_xor_expression]: #62
[#230 bitwise_expression]: #58
[#230 bool_literal]: #82
[#230 call_expression]: #74
[#230 callable]: #79
[#230 decimal_float_literal]: #90
[#230 decimal_int_literal]: #88
[#230 depth_texture_type]: #127
[#230 expression]: #261
[#230 float_literal]: #81
[#230 hex_float_literal]: #91
[#230 hex_int_literal]: #89
[#230 ident]: #73
[#230 int_literal]: #80
[#230 literal]: #75
[#230 mat_prefix]: #86
[#230 multiplicative_expression]: #65
[#230 multisampled_texture_type]: #129
[#230 paren_expression]: #76
[#230 primary_expression]: #72
[#230 relational_expression]: #55
[#230 sampled_texture_type]: #128
[#230 sampler_type]: #126
[#230 shift_expression]: #59
[#230 short_circuit_and_expression]: #57
[#230 short_circuit_or_expression]: #56
[#230 singular_expression]: #66
[#230 storage_texture_type]: #130
[#230 texture_and_sampler_types]: #102
[#230 type_specifier_without_ident]: #84
[#230 unary_expression]: #64
[#230 vec_prefix]: #85
[#231 additive_expression]: #63
[#231 array_type_specifier]: #100
[#231 binary_and_expression]: #60
[#231 binary_or_expression]: #61
[#231 binary_xor_expression]: #62
[#231 bitwise_expression]: #58
[#231 bool_literal]: #82
[#231 call_expression]: #74
[#231 callable]: #79
[#231 decimal_float_literal]: #90
[#231 decimal_int_literal]: #88
[#231 depth_texture_type]: #127
[#231 expression]: #260
[#231 float_literal]: #81
[#231 hex_float_literal]: #91
[#231 hex_int_literal]: #89
[#231 ident]: #73
[#231 int_literal]: #80
[#231 literal]: #75
[#231 mat_prefix]: #86
[#231 multiplicative_expression]: #65
[#231 multisampled_texture_type]: #129
[#231 paren_expression]: #76
[#231 primary_expression]: #72
[#231 relational_expression]: #55
[#231 sampled_texture_type]: #128
[#231 sampler_type]: #126
[#231 shift_expression]: #59
[#231 short_circuit_and_expression]: #57
[#231 short_circuit_or_expression]: #56
[#231 singular_expression]: #66
[#231 storage_texture_type]: #130
[#231 texture_and_sampler_types]: #102
[#231 type_specifier_without_ident]: #84
[#231 unary_expression]: #64
[#231 vec_prefix]: #85
[#232 interpolation_type_name]: #256
[#233 additive_expression]: #63
[#233 array_type_specifier]: #100
[#233 binary_and_expression]: #60
[#233 binary_or_expression]: #61
[#233 binary_xor_expression]: #62
[#233 bitwise_expression]: #58
[#233 bool_literal]: #82
[#233 call_expression]: #74
[#233 callable]: #79
[#233 decimal_float_literal]: #90
[#233 decimal_int_literal]: #88
[#233 depth_texture_type]: #127
[#233 expression]: #255
[#233 float_literal]: #81
[#233 hex_float_literal]: #91
[#233 hex_int_literal]: #89
[#233 ident]: #73
[#233 int_literal]: #80
[#233 literal]: #75
[#233 mat_prefix]: #86
[#233 multiplicative_expression]: #65
[#233 multisampled_texture_type]: #129
[#233 paren_expression]: #76
[#233 primary_expression]: #72
[#233 relational_expression]: #55
[#233 sampled_texture_type]: #128
[#233 sampler_type]: #126
[#233 shift_expression]: #59
[#233 short_circuit_and_expression]: #57
[#233 short_circuit_or_expression]: #56
[#233 singular_expression]: #66
[#233 storage_texture_type]: #130
[#233 texture_and_sampler_types]: #102
[#233 type_specifier_without_ident]: #84
[#233 unary_expression]: #64
[#233 vec_prefix]: #85
[#234 additive_expression]: #63
[#234 array_type_specifier]: #100
[#234 binary_and_expression]: #60
[#234 binary_or_expression]: #61
[#234 binary_xor_expression]: #62
[#234 bitwise_expression]: #58
[#234 bool_literal]: #82
[#234 call_expression]: #74
[#234 callable]: #79
[#234 decimal_float_literal]: #90
[#234 decimal_int_literal]: #88
[#234 depth_texture_type]: #127
[#234 expression]: #254
[#234 float_literal]: #81
[#234 hex_float_literal]: #91
[#234 hex_int_literal]: #89
[#234 ident]: #73
[#234 int_literal]: #80
[#234 literal]: #75
[#234 mat_prefix]: #86
[#234 multiplicative_expression]: #65
[#234 multisampled_texture_type]: #129
[#234 paren_expression]: #76
[#234 primary_expression]: #72
[#234 relational_expression]: #55
[#234 sampled_texture_type]: #128
[#234 sampler_type]: #126
[#234 shift_expression]: #59
[#234 short_circuit_and_expression]: #57
[#234 short_circuit_or_expression]: #56
[#234 singular_expression]: #66
[#234 storage_texture_type]: #130
[#234 texture_and_sampler_types]: #102
[#234 type_specifier_without_ident]: #84
[#234 unary_expression]: #64
[#234 vec_prefix]: #85
[#236 builtin_value_name]: #241
[#237 additive_expression]: #63
[#237 array_type_specifier]: #100
[#237 binary_and_expression]: #60
[#237 binary_or_expression]: #61
[#237 binary_xor_expression]: #62
[#237 bitwise_expression]: #58
[#237 bool_literal]: #82
[#237 call_expression]: #74
[#237 callable]: #79
[#237 decimal_float_literal]: #90
[#237 decimal_int_literal]: #88
[#237 depth_texture_type]: #127
[#237 expression]: #240
[#237 float_literal]: #81
[#237 hex_float_literal]: #91
[#237 hex_int_literal]: #89
[#237 ident]: #73
[#237 int_literal]: #80
[#237 literal]: #75
[#237 mat_prefix]: #86
[#237 multiplicative_expression]: #65
[#237 multisampled_texture_type]: #129
[#237 paren_expression]: #76
[#237 primary_expression]: #72
[#237 relational_expression]: #55
[#237 sampled_texture_type]: #128
[#237 sampler_type]: #126
[#237 shift_expression]: #59
[#237 short_circuit_and_expression]: #57
[#237 short_circuit_or_expression]: #56
[#237 singular_expression]: #66
[#237 storage_texture_type]: #130
[#237 texture_and_sampler_types]: #102
[#237 type_specifier_without_ident]: #84
[#237 unary_expression]: #64
[#237 vec_prefix]: #85
[#238 additive_expression]: #63
[#238 array_type_specifier]: #100
[#238 binary_and_expression]: #60
[#238 binary_or_expression]: #61
[#238 binary_xor_expression]: #62
[#238 bitwise_expression]: #58
[#238 bool_literal]: #82
[#238 call_expression]: #74
[#238 callable]: #79
[#238 decimal_float_literal]: #90
[#238 decimal_int_literal]: #88
[#238 depth_texture_type]: #127
[#238 expression]: #239
[#238 float_literal]: #81
[#238 hex_float_literal]: #91
[#238 hex_int_literal]: #89
[#238 ident]: #73
[#238 int_literal]: #80
[#238 literal]: #75
[#238 mat_prefix]: #86
[#238 multiplicative_expression]: #65
[#238 multisampled_texture_type]: #129
[#238 paren_expression]: #76
[#238 primary_expression]: #72
[#238 relational_expression]: #55
[#238 sampled_texture_type]: #128
[#238 sampler_type]: #126
[#238 shift_expression]: #59
[#238 short_circuit_and_expression]: #57
[#238 short_circuit_or_expression]: #56
[#238 singular_expression]: #66
[#238 storage_texture_type]: #130
[#238 texture_and_sampler_types]: #102
[#238 type_specifier_without_ident]: #84
[#238 unary_expression]: #64
[#238 vec_prefix]: #85
[#239 attrib_end]: #443
[#239 attrib_end/0.0]: #350
[#240 attrib_end]: #442
[#240 attrib_end/0.0]: #350
[#241 attrib_end]: #441
[#241 attrib_end/0.0]: #350
[#254 attrib_end]: #440
[#254 attrib_end/0.0]: #350
[#255 attrib_end]: #439
[#255 attrib_end/0.0]: #350
[#256 attrib_end]: #437
[#256 attrib_end/0.0]: #350
[#260 attrib_end]: #436
[#260 attrib_end/0.0]: #350
[#261 attrib_end]: #435
[#261 attrib_end/0.0]: #350
[#262 attrib_end]: #433
[#262 attrib_end/0.0]: #350
[#275 multiplicative_operator]: #209
[#280 component_or_swizzle_specifier]: #432
[#280 component_or_swizzle_specifier/1.2]: #431
[#281 component_or_swizzle_specifier]: #430
[#281 component_or_swizzle_specifier/2.2]: #429
[#300 expression_comma_list/0.1]: #422
[#300 expression_comma_list/0.1/0]: #423
[#300 expression_comma_list/0.1/0/0.0]: #424
[#304 array_type_specifier/0.3]: #418
[#333 array_type_specifier]: #100
[#333 assignment_statement]: #397
[#333 attribute]: #408
[#333 break_statement]: #379
[#333 callable]: #391
[#333 compound_statement]: #383
[#333 compound_statement/0.0]: #185
[#333 compound_statement/0.0/0]: #186
[#333 compound_statement/0.2]: #367
[#333 compound_statement/0.2/0]: #368
[#333 const_assert_statement]: #384
[#333 continue_statement]: #380
[#333 core_lhs_expression]: #409
[#333 decrement_statement]: #399
[#333 depth_texture_type]: #127
[#333 for_statement]: #375
[#333 for_statement/0.0]: #389
[#333 for_statement/0.0/0]: #403
[#333 func_call_statement]: #377
[#333 ident]: #405
[#333 if_statement]: #372
[#333 if_statement/0.0]: #386
[#333 if_statement/0.0/0]: #400
[#333 increment_statement]: #398
[#333 lhs_expression]: #406
[#333 loop_statement]: #374
[#333 loop_statement/0.0]: #388
[#333 loop_statement/0.0/0]: #402
[#333 mat_prefix]: #86
[#333 multisampled_texture_type]: #129
[#333 return_statement]: #371
[#333 sampled_texture_type]: #128
[#333 sampler_type]: #126
[#333 statement]: #369
[#333 storage_texture_type]: #130
[#333 switch_statement]: #373
[#333 switch_statement/0.0]: #387
[#333 switch_statement/0.0/0]: #401
[#333 texture_and_sampler_types]: #102
[#333 type_specifier_without_ident]: #84
[#333 variable_decl]: #392
[#333 variable_statement]: #378
[#333 variable_updating_statement]: #382
[#333 vec_prefix]: #85
[#333 while_statement]: #376
[#333 while_statement/0.0]: #390
[#333 while_statement/0.0/0]: #404
[#334 attribute]: #366
[#334 function_header/0.3]: #361
[#334 param]: #363
[#334 param/0.0]: #364
[#334 param/0.0/0]: #365
[#334 param_list]: #362
[#335 struct_body_decl/0.2]: #357
[#335 struct_body_decl/0.2/0]: #358
[#335 struct_body_decl/0.2/0/0.0]: #359
[#336 member_ident]: #356
[#338 attribute]: #338
[#338 struct_member/0.0/0]: #355
[#341 additive_expression]: #63
[#341 array_type_specifier]: #100
[#341 binary_and_expression]: #60
[#341 binary_or_expression]: #61
[#341 binary_xor_expression]: #62
[#341 bitwise_expression]: #58
[#341 bool_literal]: #82
[#341 call_expression]: #74
[#341 callable]: #79
[#341 decimal_float_literal]: #90
[#341 decimal_int_literal]: #88
[#341 depth_texture_type]: #127
[#341 expression]: #354
[#341 float_literal]: #81
[#341 hex_float_literal]: #91
[#341 hex_int_literal]: #89
[#341 ident]: #73
[#341 int_literal]: #80
[#341 literal]: #75
[#341 mat_prefix]: #86
[#341 multiplicative_expression]: #65
[#341 multisampled_texture_type]: #129
[#341 paren_expression]: #76
[#341 primary_expression]: #72
[#341 relational_expression]: #55
[#341 sampled_texture_type]: #128
[#341 sampler_type]: #126
[#341 shift_expression]: #59
[#341 short_circuit_and_expression]: #57
[#341 short_circuit_or_expression]: #56
[#341 singular_expression]: #66
[#341 storage_texture_type]: #130
[#341 texture_and_sampler_types]: #102
[#341 type_specifier_without_ident]: #84
[#341 unary_expression]: #64
[#341 vec_prefix]: #85
[#345 variable_qualifier/0.2]: #352
[#347 attrib_end]: #349
[#347 attrib_end/0.0]: #350
[#353 access_mode]: #527
[#357 struct_body_decl/0.3]: #524
[#359 struct_body_decl/0.2/0]: #523
[#359 struct_body_decl/0.2/0/0.0]: #359
[#360 attribute]: #338
[#360 struct_member]: #522
[#360 struct_member/0.0]: #336
[#360 struct_member/0.0/0]: #337
[#363 param_list/0.1]: #517
[#363 param_list/0.1/0]: #518
[#363 param_list/0.1/0/0.0]: #519
[#364 ident]: #516
[#366 attribute]: #366
[#366 param/0.0/0]: #515
[#369 array_type_specifier]: #100
[#369 assignment_statement]: #397
[#369 attribute]: #408
[#369 break_statement]: #379
[#369 callable]: #391
[#369 compound_statement]: #383
[#369 compound_statement/0.0]: #185
[#369 compound_statement/0.0/0]: #186
[#369 compound_statement/0.2/0]: #513
[#369 const_assert_statement]: #384
[#369 continue_statement]: #380
[#369 core_lhs_expression]: #409
[#369 decrement_statement]: #399
[#369 depth_texture_type]: #127
[#369 for_statement]: #375
[#369 for_statement/0.0]: #389
[#369 for_statement/0.0/0]: #403
[#369 func_call_statement]: #377
[#369 ident]: #405
[#369 if_statement]: #372
[#369 if_statement/0.0]: #386
[#369 if_statement/0.0/0]: #400
[#369 increment_statement]: #398
[#369 lhs_expression]: #406
[#369 loop_statement]: #374
[#369 loop_statement/0.0]: #388
[#369 loop_statement/0.0/0]: #402
[#369 mat_prefix]: #86
[#369 multisampled_texture_type]: #129
[#369 return_statement]: #371
[#369 sampled_texture_type]: #128
[#369 sampler_type]: #126
[#369 statement]: #369
[#369 storage_texture_type]: #130
[#369 switch_statement]: #373
[#369 switch_statement/0.0]: #387
[#369 switch_statement/0.0/0]: #401
[#369 texture_and_sampler_types]: #102
[#369 type_specifier_without_ident]: #84
[#369 variable_decl]: #392
[#369 variable_statement]: #378
[#369 variable_updating_statement]: #382
[#369 vec_prefix]: #85
[#369 while_statement]: #376
[#369 while_statement/0.0]: #390
[#369 while_statement/0.0/0]: #404
[#385 additive_expression]: #63
[#385 array_type_specifier]: #100
[#385 binary_and_expression]: #60
[#385 binary_or_expression]: #61
[#385 binary_xor_expression]: #62
[#385 bitwise_expression]: #58
[#385 bool_literal]: #82
[#385 call_expression]: #74
[#385 callable]: #79
[#385 decimal_float_literal]: #90
[#385 decimal_int_literal]: #88
[#385 depth_texture_type]: #127
[#385 expression]: #504
[#385 float_literal]: #81
[#385 hex_float_literal]: #91
[#385 hex_int_literal]: #89
[#385 ident]: #73
[#385 int_literal]: #80
[#385 literal]: #75
[#385 mat_prefix]: #86
[#385 multiplicative_expression]: #65
[#385 multisampled_texture_type]: #129
[#385 paren_expression]: #76
[#385 primary_expression]: #72
[#385 relational_expression]: #55
[#385 return_statement/0.1]: #503
[#385 sampled_texture_type]: #128
[#385 sampler_type]: #126
[#385 shift_expression]: #59
[#385 short_circuit_and_expression]: #57
[#385 short_circuit_or_expression]: #56
[#385 singular_expression]: #66
[#385 storage_texture_type]: #130
[#385 texture_and_sampler_types]: #102
[#385 type_specifier_without_ident]: #84
[#385 unary_expression]: #64
[#385 vec_prefix]: #85
[#386 if_clause]: #501
[#391 argument_expression_list]: #496
[#393 ident]: #155
[#393 optionally_typed_ident]: #494
[#394 ident]: #155
[#394 optionally_typed_ident]: #493
[#406 assignment_statement/0.1]: #478
[#406 compound_assignment_operator]: #482
[#408 attribute]: #408
[#408 compound_statement/0.0/0]: #332
[#408 for_statement/0.0/0]: #475
[#408 if_statement/0.0/0]: #472
[#408 loop_statement/0.0/0]: #474
[#408 switch_statement/0.0/0]: #473
[#408 while_statement/0.0/0]: #476
[#409 component_or_swizzle_specifier]: #471
[#409 lhs_expression/0.1]: #470
[#410 core_lhs_expression]: #409
[#410 ident]: #467
[#410 lhs_expression]: #469
[#411 core_lhs_expression]: #409
[#411 ident]: #467
[#411 lhs_expression]: #468
[#412 core_lhs_expression]: #409
[#412 ident]: #467
[#412 lhs_expression]: #466
[#413 access_mode]: #462
[#417 array_type_specifier]: #100
[#417 depth_texture_type]: #127
[#417 ident]: #293
[#417 mat_prefix]: #296
[#417 multisampled_texture_type]: #129
[#417 sampled_texture_type]: #128
[#417 sampler_type]: #126
[#417 storage_texture_type]: #130
[#417 texture_and_sampler_types]: #102
[#417 type_specifier]: #461
[#417 type_specifier_without_ident]: #294
[#417 vec_prefix]: #295
[#419 additive_expression]: #457
[#419 array_type_specifier]: #100
[#419 binary_and_expression]: #60
[#419 binary_or_expression]: #61
[#419 binary_xor_expression]: #62
[#419 bitwise_expression]: #458
[#419 bool_literal]: #82
[#419 call_expression]: #74
[#419 callable]: #79
[#419 decimal_float_literal]: #90
[#419 decimal_int_literal]: #88
[#419 depth_texture_type]: #127
[#419 element_count_expression]: #456
[#419 float_literal]: #81
[#419 hex_float_literal]: #91
[#419 hex_int_literal]: #89
[#419 ident]: #73
[#419 int_literal]: #80
[#419 literal]: #75
[#419 mat_prefix]: #86
[#419 multiplicative_expression]: #65
[#419 multisampled_texture_type]: #129
[#419 paren_expression]: #76
[#419 primary_expression]: #72
[#419 sampled_texture_type]: #128
[#419 sampler_type]: #126
[#419 singular_expression]: #66
[#419 storage_texture_type]: #130
[#419 texture_and_sampler_types]: #102
[#419 type_specifier_without_ident]: #84
[#419 unary_expression]: #459
[#419 vec_prefix]: #85
[#422 expression_comma_list/0.2]: #454
[#424 expression_comma_list/0.1/0]: #453
[#424 expression_comma_list/0.1/0/0.0]: #424
[#425 additive_expression]: #63
[#425 array_type_specifier]: #100
[#425 binary_and_expression]: #60
[#425 binary_or_expression]: #61
[#425 binary_xor_expression]: #62
[#425 bitwise_expression]: #58
[#425 bool_literal]: #82
[#425 call_expression]: #74
[#425 callable]: #79
[#425 decimal_float_literal]: #90
[#425 decimal_int_literal]: #88
[#425 depth_texture_type]: #127
[#425 expression]: #452
[#425 float_literal]: #81
[#425 hex_float_literal]: #91
[#425 hex_int_literal]: #89
[#425 ident]: #73
[#425 int_literal]: #80
[#425 literal]: #75
[#425 mat_prefix]: #86
[#425 multiplicative_expression]: #65
[#425 multisampled_texture_type]: #129
[#425 paren_expression]: #76
[#425 primary_expression]: #72
[#425 relational_expression]: #55
[#425 sampled_texture_type]: #128
[#425 sampler_type]: #126
[#425 shift_expression]: #59
[#425 short_circuit_and_expression]: #57
[#425 short_circuit_or_expression]: #56
[#425 singular_expression]: #66
[#425 storage_texture_type]: #130
[#425 texture_and_sampler_types]: #102
[#425 type_specifier_without_ident]: #84
[#425 unary_expression]: #64
[#425 vec_prefix]: #85
[#427 paren_expression]: #451
[#428 component_or_swizzle_specifier]: #450
[#428 component_or_swizzle_specifier/0.3]: #449
[#434 additive_expression]: #63
[#434 array_type_specifier]: #100
[#434 binary_and_expression]: #60
[#434 binary_or_expression]: #61
[#434 binary_xor_expression]: #62
[#434 bitwise_expression]: #58
[#434 bool_literal]: #82
[#434 call_expression]: #74
[#434 callable]: #79
[#434 decimal_float_literal]: #90
[#434 decimal_int_literal]: #88
[#434 depth_texture_type]: #127
[#434 expression]: #448
[#434 float_literal]: #81
[#434 hex_float_literal]: #91
[#434 hex_int_literal]: #89
[#434 ident]: #73
[#434 int_literal]: #80
[#434 literal]: #75
[#434 mat_prefix]: #86
[#434 multiplicative_expression]: #65
[#434 multisampled_texture_type]: #129
[#434 paren_expression]: #76
[#434 primary_expression]: #72
[#434 relational_expression]: #55
[#434 sampled_texture_type]: #128
[#434 sampler_type]: #126
[#434 shift_expression]: #59
[#434 short_circuit_and_expression]: #57
[#434 short_circuit_or_expression]: #56
[#434 singular_expression]: #66
[#434 storage_texture_type]: #130
[#434 texture_and_sampler_types]: #102
[#434 type_specifier_without_ident]: #84
[#434 unary_expression]: #64
[#434 vec_prefix]: #85
[#438 interpolation_sample_name]: #444
[#444 attrib_end]: #561
[#444 attrib_end/0.0]: #350
[#448 attrib_end]: #559
[#448 attrib_end/0.0]: #350
[#457 additive_operator]: #215
[#461 type_specifier_without_ident/7.5]: #557
[#477 additive_expression]: #63
[#477 array_type_specifier]: #100
[#477 binary_and_expression]: #60
[#477 binary_or_expression]: #61
[#477 binary_xor_expression]: #62
[#477 bitwise_expression]: #58
[#477 bool_literal]: #82
[#477 call_expression]: #74
[#477 callable]: #79
[#477 decimal_float_literal]: #90
[#477 decimal_int_literal]: #88
[#477 depth_texture_type]: #127
[#477 expression]: #554
[#477 float_literal]: #81
[#477 hex_float_literal]: #91
[#477 hex_int_literal]: #89
[#477 ident]: #73
[#477 int_literal]: #80
[#477 literal]: #75
[#477 mat_prefix]: #86
[#477 multiplicative_expression]: #65
[#477 multisampled_texture_type]: #129
[#477 paren_expression]: #76
[#477 primary_expression]: #72
[#477 relational_expression]: #55
[#477 sampled_texture_type]: #128
[#477 sampler_type]: #126
[#477 shift_expression]: #59
[#477 short_circuit_and_expression]: #57
[#477 short_circuit_or_expression]: #56
[#477 singular_expression]: #66
[#477 storage_texture_type]: #130
[#477 texture_and_sampler_types]: #102
[#477 type_specifier_without_ident]: #84
[#477 unary_expression]: #64
[#477 vec_prefix]: #85
[#478 additive_expression]: #63
[#478 array_type_specifier]: #100
[#478 binary_and_expression]: #60
[#478 binary_or_expression]: #61
[#478 binary_xor_expression]: #62
[#478 bitwise_expression]: #58
[#478 bool_literal]: #82
[#478 call_expression]: #74
[#478 callable]: #79
[#478 decimal_float_literal]: #90
[#478 decimal_int_literal]: #88
[#478 depth_texture_type]: #127
[#478 expression]: #553
[#478 float_literal]: #81
[#478 hex_float_literal]: #91
[#478 hex_int_literal]: #89
[#478 ident]: #73
[#478 int_literal]: #80
[#478 literal]: #75
[#478 mat_prefix]: #86
[#478 multiplicative_expression]: #65
[#478 multisampled_texture_type]: #129
[#478 paren_expression]: #76
[#478 primary_expression]: #72
[#478 relational_expression]: #55
[#478 sampled_texture_type]: #128
[#478 sampler_type]: #126
[#478 shift_expression]: #59
[#478 short_circuit_and_expression]: #57
[#478 short_circuit_or_expression]: #56
[#478 singular_expression]: #66
[#478 storage_texture_type]: #130
[#478 texture_and_sampler_types]: #102
[#478 type_specifier_without_ident]: #84
[#478 unary_expression]: #64
[#478 vec_prefix]: #85
[#495 additive_expression]: #63
[#495 array_type_specifier]: #100
[#495 binary_and_expression]: #60
[#495 binary_or_expression]: #61
[#495 binary_xor_expression]: #62
[#495 bitwise_expression]: #58
[#495 bool_literal]: #82
[#495 call_expression]: #74
[#495 callable]: #79
[#495 decimal_float_literal]: #90
[#495 decimal_int_literal]: #88
[#495 depth_texture_type]: #127
[#495 expression]: #550
[#495 float_literal]: #81
[#495 hex_float_literal]: #91
[#495 hex_int_literal]: #89
[#495 ident]: #73
[#495 int_literal]: #80
[#495 literal]: #75
[#495 mat_prefix]: #86
[#495 multiplicative_expression]: #65
[#495 multisampled_texture_type]: #129
[#495 paren_expression]: #76
[#495 primary_expression]: #72
[#495 relational_expression]: #55
[#495 sampled_texture_type]: #128
[#495 sampler_type]: #126
[#495 shift_expression]: #59
[#495 short_circuit_and_expression]: #57
[#495 short_circuit_or_expression]: #56
[#495 singular_expression]: #66
[#495 storage_texture_type]: #130
[#495 texture_and_sampler_types]: #102
[#495 type_specifier_without_ident]: #84
[#495 unary_expression]: #64
[#495 vec_prefix]: #85
[#497 additive_expression]: #63
[#497 array_type_specifier]: #100
[#497 binary_and_expression]: #60
[#497 binary_or_expression]: #61
[#497 binary_xor_expression]: #62
[#497 bitwise_expression]: #58
[#497 bool_literal]: #82
[#497 call_expression]: #74
[#497 callable]: #79
[#497 decimal_float_literal]: #90
[#497 decimal_int_literal]: #88
[#497 depth_texture_type]: #127
[#497 expression]: #549
[#497 float_literal]: #81
[#497 hex_float_literal]: #91
[#497 hex_int_literal]: #89
[#497 ident]: #73
[#497 int_literal]: #80
[#497 literal]: #75
[#497 mat_prefix]: #86
[#497 multiplicative_expression]: #65
[#497 multisampled_texture_type]: #129
[#497 paren_expression]: #76
[#497 primary_expression]: #72
[#497 relational_expression]: #55
[#497 sampled_texture_type]: #128
[#497 sampler_type]: #126
[#497 shift_expression]: #59
[#497 short_circuit_and_expression]: #57
[#497 short_circuit_or_expression]: #56
[#497 singular_expression]: #66
[#497 storage_texture_type]: #130
[#497 texture_and_sampler_types]: #102
[#497 type_specifier_without_ident]: #84
[#497 unary_expression]: #64
[#497 vec_prefix]: #85
[#499 attribute]: #547
[#499 loop_statement/0.2]: #545
[#499 loop_statement/0.2/0]: #546
[#500 additive_expression]: #63
[#500 array_type_specifier]: #100
[#500 binary_and_expression]: #60
[#500 binary_or_expression]: #61
[#500 binary_xor_expression]: #62
[#500 bitwise_expression]: #58
[#500 bool_literal]: #82
[#500 call_expression]: #74
[#500 callable]: #79
[#500 decimal_float_literal]: #90
[#500 decimal_int_literal]: #88
[#500 depth_texture_type]: #127
[#500 expression]: #544
[#500 float_literal]: #81
[#500 hex_float_literal]: #91
[#500 hex_int_literal]: #89
[#500 ident]: #73
[#500 int_literal]: #80
[#500 literal]: #75
[#500 mat_prefix]: #86
[#500 multiplicative_expression]: #65
[#500 multisampled_texture_type]: #129
[#500 paren_expression]: #76
[#500 primary_expression]: #72
[#500 relational_expression]: #55
[#500 sampled_texture_type]: #128
[#500 sampler_type]: #126
[#500 shift_expression]: #59
[#500 short_circuit_and_expression]: #57
[#500 short_circuit_or_expression]: #56
[#500 singular_expression]: #66
[#500 storage_texture_type]: #130
[#500 texture_and_sampler_types]: #102
[#500 type_specifier_without_ident]: #84
[#500 unary_expression]: #64
[#500 vec_prefix]: #85
[#501 else_if_clause]: #542
[#501 if_statement/0.2]: #540
[#501 if_statement/0.2/0]: #541
[#502 additive_expression]: #63
[#502 array_type_specifier]: #100
[#502 binary_and_expression]: #60
[#502 binary_or_expression]: #61
[#502 binary_xor_expression]: #62
[#502 bitwise_expression]: #58
[#502 bool_literal]: #82
[#502 call_expression]: #74
[#502 callable]: #79
[#502 decimal_float_literal]: #90
[#502 decimal_int_literal]: #88
[#502 depth_texture_type]: #127
[#502 expression]: #539
[#502 float_literal]: #81
[#502 hex_float_literal]: #91
[#502 hex_int_literal]: #89
[#502 ident]: #73
[#502 int_literal]: #80
[#502 literal]: #75
[#502 mat_prefix]: #86
[#502 multiplicative_expression]: #65
[#502 multisampled_texture_type]: #129
[#502 paren_expression]: #76
[#502 primary_expression]: #72
[#502 relational_expression]: #55
[#502 sampled_texture_type]: #128
[#502 sampler_type]: #126
[#502 shift_expression]: #59
[#502 short_circuit_and_expression]: #57
[#502 short_circuit_or_expression]: #56
[#502 singular_expression]: #66
[#502 storage_texture_type]: #130
[#502 texture_and_sampler_types]: #102
[#502 type_specifier_without_ident]: #84
[#502 unary_expression]: #64
[#502 vec_prefix]: #85
[#517 param_list/0.2]: #536
[#519 param_list/0.1/0]: #535
[#519 param_list/0.1/0/0.0]: #519
[#520 attribute]: #366
[#520 param]: #534
[#520 param/0.0]: #364
[#520 param/0.0/0]: #365
[#521 function_header/0.5]: #532
[#526 array_type_specifier]: #100
[#526 depth_texture_type]: #127
[#526 ident]: #293
[#526 mat_prefix]: #296
[#526 multisampled_texture_type]: #129
[#526 sampled_texture_type]: #128
[#526 sampler_type]: #126
[#526 storage_texture_type]: #130
[#526 texture_and_sampler_types]: #102
[#526 type_specifier]: #530
[#526 type_specifier_without_ident]: #294
[#526 vec_prefix]: #295
[#533 attribute]: #589
[#533 function_header/0.5/0.1]: #587
[#533 function_header/0.5/0.1/0]: #588
[#538 array_type_specifier]: #100
[#538 depth_texture_type]: #127
[#538 ident]: #293
[#538 mat_prefix]: #296
[#538 multisampled_texture_type]: #129
[#538 sampled_texture_type]: #128
[#538 sampler_type]: #126
[#538 storage_texture_type]: #130
[#538 texture_and_sampler_types]: #102
[#538 type_specifier]: #586
[#538 type_specifier_without_ident]: #294
[#538 vec_prefix]: #295
[#539 attribute]: #187
[#539 compound_statement]: #585
[#539 compound_statement/0.0]: #185
[#539 compound_statement/0.0/0]: #186
[#540 else_clause]: #583
[#540 if_statement/0.3]: #582
[#542 else_if_clause]: #542
[#542 if_statement/0.2/0]: #581
[#544 attribute]: #579
[#544 switch_body]: #576
[#544 switch_body/0.0]: #577
[#544 switch_body/0.0/0]: #578
[#547 attribute]: #547
[#547 loop_statement/0.2/0]: #574
[#548 array_type_specifier]: #100
[#548 assignment_statement]: #397
[#548 callable]: #391
[#548 core_lhs_expression]: #409
[#548 decrement_statement]: #399
[#548 depth_texture_type]: #127
[#548 for_header]: #568
[#548 for_header/0.0]: #569
[#548 for_init]: #570
[#548 func_call_statement]: #573
[#548 ident]: #405
[#548 increment_statement]: #398
[#548 lhs_expression]: #406
[#548 mat_prefix]: #86
[#548 multisampled_texture_type]: #129
[#548 sampled_texture_type]: #128
[#548 sampler_type]: #126
[#548 storage_texture_type]: #130
[#548 texture_and_sampler_types]: #102
[#548 type_specifier_without_ident]: #84
[#548 variable_decl]: #392
[#548 variable_statement]: #571
[#548 variable_updating_statement]: #572
[#548 vec_prefix]: #85
[#549 attribute]: #187
[#549 compound_statement]: #567
[#549 compound_statement/0.0]: #185
[#549 compound_statement/0.0/0]: #186
[#551 additive_expression]: #63
[#551 array_type_specifier]: #100
[#551 binary_and_expression]: #60
[#551 binary_or_expression]: #61
[#551 binary_xor_expression]: #62
[#551 bitwise_expression]: #58
[#551 bool_literal]: #82
[#551 call_expression]: #74
[#551 callable]: #79
[#551 decimal_float_literal]: #90
[#551 decimal_int_literal]: #88
[#551 depth_texture_type]: #127
[#551 expression]: #566
[#551 float_literal]: #81
[#551 hex_float_literal]: #91
[#551 hex_int_literal]: #89
[#551 ident]: #73
[#551 int_literal]: #80
[#551 literal]: #75
[#551 mat_prefix]: #86
[#551 multiplicative_expression]: #65
[#551 multisampled_texture_type]: #129
[#551 paren_expression]: #76
[#551 primary_expression]: #72
[#551 relational_expression]: #55
[#551 sampled_texture_type]: #128
[#551 sampler_type]: #126
[#551 shift_expression]: #59
[#551 short_circuit_and_expression]: #57
[#551 short_circuit_or_expression]: #56
[#551 singular_expression]: #66
[#551 storage_texture_type]: #130
[#551 texture_and_sampler_types]: #102
[#551 type_specifier_without_ident]: #84
[#551 unary_expression]: #64
[#551 vec_prefix]: #85
[#552 additive_expression]: #63
[#552 array_type_specifier]: #100
[#552 binary_and_expression]: #60
[#552 binary_or_expression]: #61
[#552 binary_xor_expression]: #62
[#552 bitwise_expression]: #58
[#552 bool_literal]: #82
[#552 call_expression]: #74
[#552 callable]: #79
[#552 decimal_float_literal]: #90
[#552 decimal_int_literal]: #88
[#552 depth_texture_type]: #127
[#552 expression]: #565
[#552 float_literal]: #81
[#552 hex_float_literal]: #91
[#552 hex_int_literal]: #89
[#552 ident]: #73
[#552 int_literal]: #80
[#552 literal]: #75
[#552 mat_prefix]: #86
[#552 multiplicative_expression]: #65
[#552 multisampled_texture_type]: #129
[#552 paren_expression]: #76
[#552 primary_expression]: #72
[#552 relational_expression]: #55
[#552 sampled_texture_type]: #128
[#552 sampler_type]: #126
[#552 shift_expression]: #59
[#552 short_circuit_and_expression]: #57
[#552 short_circuit_or_expression]: #56
[#552 singular_expression]: #66
[#552 storage_texture_type]: #130
[#552 texture_and_sampler_types]: #102
[#552 type_specifier_without_ident]: #84
[#552 unary_expression]: #64
[#552 vec_prefix]: #85
[#558 access_mode]: #563
[#560 additive_expression]: #63
[#560 array_type_specifier]: #100
[#560 binary_and_expression]: #60
[#560 binary_or_expression]: #61
[#560 binary_xor_expression]: #62
[#560 bitwise_expression]: #58
[#560 bool_literal]: #82
[#560 call_expression]: #74
[#560 callable]: #79
[#560 decimal_float_literal]: #90
[#560 decimal_int_literal]: #88
[#560 depth_texture_type]: #127
[#560 expression]: #562
[#560 float_literal]: #81
[#560 hex_float_literal]: #91
[#560 hex_int_literal]: #89
[#560 ident]: #73
[#560 int_literal]: #80
[#560 literal]: #75
[#560 mat_prefix]: #86
[#560 multiplicative_expression]: #65
[#560 multisampled_texture_type]: #129
[#560 paren_expression]: #76
[#560 primary_expression]: #72
[#560 relational_expression]: #55
[#560 sampled_texture_type]: #128
[#560 sampler_type]: #126
[#560 shift_expression]: #59
[#560 short_circuit_and_expression]: #57
[#560 short_circuit_or_expression]: #56
[#560 singular_expression]: #66
[#560 storage_texture_type]: #130
[#560 texture_and_sampler_types]: #102
[#560 type_specifier_without_ident]: #84
[#560 unary_expression]: #64
[#560 vec_prefix]: #85
[#562 attrib_end]: #601
[#562 attrib_end/0.0]: #350
[#575 array_type_specifier]: #100
[#575 assignment_statement]: #397
[#575 attribute]: #408
[#575 break_statement]: #379
[#575 callable]: #391
[#575 compound_statement]: #383
[#575 compound_statement/0.0]: #185
[#575 compound_statement/0.0/0]: #186
[#575 const_assert_statement]: #384
[#575 continue_statement]: #380
[#575 core_lhs_expression]: #409
[#575 decrement_statement]: #399
[#575 depth_texture_type]: #127
[#575 for_statement]: #375
[#575 for_statement/0.0]: #389
[#575 for_statement/0.0/0]: #403
[#575 func_call_statement]: #377
[#575 ident]: #405
[#575 if_statement]: #372
[#575 if_statement/0.0]: #386
[#575 if_statement/0.0/0]: #400
[#575 increment_statement]: #398
[#575 lhs_expression]: #406
[#575 loop_statement]: #374
[#575 loop_statement/0.0]: #388
[#575 loop_statement/0.0/0]: #402
[#575 loop_statement/0.4]: #596
[#575 loop_statement/0.4/0]: #597
[#575 mat_prefix]: #86
[#575 multisampled_texture_type]: #129
[#575 return_statement]: #371
[#575 sampled_texture_type]: #128
[#575 sampler_type]: #126
[#575 statement]: #598
[#575 storage_texture_type]: #130
[#575 switch_statement]: #373
[#575 switch_statement/0.0]: #387
[#575 switch_statement/0.0/0]: #401
[#575 texture_and_sampler_types]: #102
[#575 type_specifier_without_ident]: #84
[#575 variable_decl]: #392
[#575 variable_statement]: #378
[#575 variable_updating_statement]: #382
[#575 vec_prefix]: #85
[#575 while_statement]: #376
[#575 while_statement/0.0]: #390
[#575 while_statement/0.0/0]: #404
[#579 attribute]: #579
[#579 switch_body/0.0/0]: #594
[#580 additive_expression]: #63
[#580 array_type_specifier]: #100
[#580 binary_and_expression]: #60
[#580 binary_or_expression]: #61
[#580 binary_xor_expression]: #62
[#580 bitwise_expression]: #58
[#580 bool_literal]: #82
[#580 call_expression]: #74
[#580 callable]: #79
[#580 decimal_float_literal]: #90
[#580 decimal_int_literal]: #88
[#580 depth_texture_type]: #127
[#580 expression]: #593
[#580 float_literal]: #81
[#580 hex_float_literal]: #91
[#580 hex_int_literal]: #89
[#580 ident]: #73
[#580 int_literal]: #80
[#580 literal]: #75
[#580 mat_prefix]: #86
[#580 multiplicative_expression]: #65
[#580 multisampled_texture_type]: #129
[#580 paren_expression]: #76
[#580 primary_expression]: #72
[#580 relational_expression]: #55
[#580 sampled_texture_type]: #128
[#580 sampler_type]: #126
[#580 shift_expression]: #59
[#580 short_circuit_and_expression]: #57
[#580 short_circuit_or_expression]: #56
[#580 singular_expression]: #66
[#580 storage_texture_type]: #130
[#580 texture_and_sampler_types]: #102
[#580 type_specifier_without_ident]: #84
[#580 unary_expression]: #64
[#580 vec_prefix]: #85
[#584 attribute]: #187
[#584 compound_statement]: #592
[#584 compound_statement/0.0]: #185
[#584 compound_statement/0.0/0]: #186
[#587 array_type_specifier]: #100
[#587 depth_texture_type]: #127
[#587 ident]: #293
[#587 mat_prefix]: #296
[#587 multisampled_texture_type]: #129
[#587 sampled_texture_type]: #128
[#587 sampler_type]: #126
[#587 storage_texture_type]: #130
[#587 texture_and_sampler_types]: #102
[#587 type_specifier]: #591
[#587 type_specifier_without_ident]: #294
[#587 vec_prefix]: #295
[#589 attribute]: #589
[#589 function_header/0.5/0.1/0]: #590
[#593 attribute]: #187
[#593 compound_statement]: #616
[#593 compound_statement/0.0]: #185
[#593 compound_statement/0.0/0]: #186
[#595 case_clause]: #612
[#595 default_alone_clause]: #613
[#595 switch_body/0.2]: #609
[#595 switch_body/0.2/0]: #610
[#595 switch_clause]: #611
[#596 continuing_statement]: #607
[#596 loop_statement/0.5]: #606
[#598 array_type_specifier]: #100
[#598 assignment_statement]: #397
[#598 attribute]: #408
[#598 break_statement]: #379
[#598 callable]: #391
[#598 compound_statement]: #383
[#598 compound_statement/0.0]: #185
[#598 compound_statement/0.0/0]: #186
[#598 const_assert_statement]: #384
[#598 continue_statement]: #380
[#598 core_lhs_expression]: #409
[#598 decrement_statement]: #399
[#598 depth_texture_type]: #127
[#598 for_statement]: #375
[#598 for_statement/0.0]: #389
[#598 for_statement/0.0/0]: #403
[#598 func_call_statement]: #377
[#598 ident]: #405
[#598 if_statement]: #372
[#598 if_statement/0.0]: #386
[#598 if_statement/0.0/0]: #400
[#598 increment_statement]: #398
[#598 lhs_expression]: #406
[#598 loop_statement]: #374
[#598 loop_statement/0.0]: #388
[#598 loop_statement/0.0/0]: #402
[#598 loop_statement/0.4/0]: #605
[#598 mat_prefix]: #86
[#598 multisampled_texture_type]: #129
[#598 return_statement]: #371
[#598 sampled_texture_type]: #128
[#598 sampler_type]: #126
[#598 statement]: #598
[#598 storage_texture_type]: #130
[#598 switch_statement]: #373
[#598 switch_statement/0.0]: #387
[#598 switch_statement/0.0/0]: #401
[#598 texture_and_sampler_types]: #102
[#598 type_specifier_without_ident]: #84
[#598 variable_decl]: #392
[#598 variable_statement]: #378
[#598 variable_updating_statement]: #382
[#598 vec_prefix]: #85
[#598 while_statement]: #376
[#598 while_statement/0.0]: #390
[#598 while_statement/0.0/0]: #404
[#599 additive_expression]: #63
[#599 array_type_specifier]: #100
[#599 binary_and_expression]: #60
[#599 binary_or_expression]: #61
[#599 binary_xor_expression]: #62
[#599 bitwise_expression]: #58
[#599 bool_literal]: #82
[#599 call_expression]: #74
[#599 callable]: #79
[#599 decimal_float_literal]: #90
[#599 decimal_int_literal]: #88
[#599 depth_texture_type]: #127
[#599 expression]: #604
[#599 float_literal]: #81
[#599 for_header/0.2]: #603
[#599 hex_float_literal]: #91
[#599 hex_int_literal]: #89
[#599 ident]: #73
[#599 int_literal]: #80
[#599 literal]: #75
[#599 mat_prefix]: #86
[#599 multiplicative_expression]: #65
[#599 multisampled_texture_type]: #129
[#599 paren_expression]: #76
[#599 primary_expression]: #72
[#599 relational_expression]: #55
[#599 sampled_texture_type]: #128
[#599 sampler_type]: #126
[#599 shift_expression]: #59
[#599 short_circuit_and_expression]: #57
[#599 short_circuit_or_expression]: #56
[#599 singular_expression]: #66
[#599 storage_texture_type]: #130
[#599 texture_and_sampler_types]: #102
[#599 type_specifier_without_ident]: #84
[#599 unary_expression]: #64
[#599 vec_prefix]: #85
[#600 attribute]: #187
[#600 compound_statement]: #602
[#600 compound_statement/0.0]: #185
[#600 compound_statement/0.0/0]: #186
[#608 attribute]: #628
[#608 continuing_compound_statement]: #625
[#608 continuing_compound_statement/0.0]: #626
[#608 continuing_compound_statement/0.0/0]: #627
[#611 case_clause]: #612
[#611 default_alone_clause]: #613
[#611 switch_body/0.2/0]: #623
[#611 switch_clause]: #611
[#614 additive_expression]: #63
[#614 array_type_specifier]: #100
[#614 binary_and_expression]: #60
[#614 binary_or_expression]: #61
[#614 binary_xor_expression]: #62
[#614 bitwise_expression]: #58
[#614 bool_literal]: #82
[#614 call_expression]: #74
[#614 callable]: #79
[#614 case_selector]: #620
[#614 case_selectors]: #619
[#614 decimal_float_literal]: #90
[#614 decimal_int_literal]: #88
[#614 depth_texture_type]: #127
[#614 expression]: #622
[#614 float_literal]: #81
[#614 hex_float_literal]: #91
[#614 hex_int_literal]: #89
[#614 ident]: #73
[#614 int_literal]: #80
[#614 literal]: #75
[#614 mat_prefix]: #86
[#614 multiplicative_expression]: #65
[#614 multisampled_texture_type]: #129
[#614 paren_expression]: #76
[#614 primary_expression]: #72
[#614 relational_expression]: #55
[#614 sampled_texture_type]: #128
[#614 sampler_type]: #126
[#614 shift_expression]: #59
[#614 short_circuit_and_expression]: #57
[#614 short_circuit_or_expression]: #56
[#614 singular_expression]: #66
[#614 storage_texture_type]: #130
[#614 texture_and_sampler_types]: #102
[#614 type_specifier_without_ident]: #84
[#614 unary_expression]: #64
[#614 vec_prefix]: #85
[#615 default_alone_clause/0.1]: #617
[#617 attribute]: #187
[#617 compound_statement]: #643
[#617 compound_statement/0.0]: #185
[#617 compound_statement/0.0/0]: #186
[#619 case_clause/0.2]: #641
[#620 case_selectors/0.1]: #637
[#620 case_selectors/0.1/0]: #638
[#620 case_selectors/0.1/0/0.0]: #639
[#628 attribute]: #628
[#628 continuing_compound_statement/0.0/0]: #635
[#630 array_type_specifier]: #100
[#630 assignment_statement]: #397
[#630 callable]: #391
[#630 core_lhs_expression]: #409
[#630 decrement_statement]: #399
[#630 depth_texture_type]: #127
[#630 for_header/0.4]: #631
[#630 for_update]: #632
[#630 func_call_statement]: #634
[#630 ident]: #405
[#630 increment_statement]: #398
[#630 lhs_expression]: #406
[#630 mat_prefix]: #86
[#630 multisampled_texture_type]: #129
[#630 sampled_texture_type]: #128
[#630 sampler_type]: #126
[#630 storage_texture_type]: #130
[#630 texture_and_sampler_types]: #102
[#630 type_specifier_without_ident]: #84
[#630 variable_updating_statement]: #633
[#630 vec_prefix]: #85
[#636 array_type_specifier]: #100
[#636 assignment_statement]: #397
[#636 attribute]: #408
[#636 break_statement]: #379
[#636 callable]: #391
[#636 compound_statement]: #383
[#636 compound_statement/0.0]: #185
[#636 compound_statement/0.0/0]: #186
[#636 const_assert_statement]: #384
[#636 continue_statement]: #380
[#636 continuing_compound_statement/0.2]: #649
[#636 continuing_compound_statement/0.2/0]: #650
[#636 core_lhs_expression]: #409
[#636 decrement_statement]: #399
[#636 depth_texture_type]: #127
[#636 for_statement]: #375
[#636 for_statement/0.0]: #389
[#636 for_statement/0.0/0]: #403
[#636 func_call_statement]: #377
[#636 ident]: #405
[#636 if_statement]: #372
[#636 if_statement/0.0]: #386
[#636 if_statement/0.0/0]: #400
[#636 increment_statement]: #398
[#636 lhs_expression]: #406
[#636 loop_statement]: #374
[#636 loop_statement/0.0]: #388
[#636 loop_statement/0.0/0]: #402
[#636 mat_prefix]: #86
[#636 multisampled_texture_type]: #129
[#636 return_statement]: #371
[#636 sampled_texture_type]: #128
[#636 sampler_type]: #126
[#636 statement]: #651
[#636 storage_texture_type]: #130
[#636 switch_statement]: #373
[#636 switch_statement/0.0]: #387
[#636 switch_statement/0.0/0]: #401
[#636 texture_and_sampler_types]: #102
[#636 type_specifier_without_ident]: #84
[#636 variable_decl]: #392
[#636 variable_statement]: #378
[#636 variable_updating_statement]: #382
[#636 vec_prefix]: #85
[#636 while_statement]: #376
[#636 while_statement/0.0]: #390
[#636 while_statement/0.0/0]: #404
[#637 case_selectors/0.2]: #647
[#639 case_selectors/0.1/0]: #646
[#639 case_selectors/0.1/0/0.0]: #639
[#640 additive_expression]: #63
[#640 array_type_specifier]: #100
[#640 binary_and_expression]: #60
[#640 binary_or_expression]: #61
[#640 binary_xor_expression]: #62
[#640 bitwise_expression]: #58
[#640 bool_literal]: #82
[#640 call_expression]: #74
[#640 callable]: #79
[#640 case_selector]: #645
[#640 decimal_float_literal]: #90
[#640 decimal_int_literal]: #88
[#640 depth_texture_type]: #127
[#640 expression]: #622
[#640 float_literal]: #81
[#640 hex_float_literal]: #91
[#640 hex_int_literal]: #89
[#640 ident]: #73
[#640 int_literal]: #80
[#640 literal]: #75
[#640 mat_prefix]: #86
[#640 multiplicative_expression]: #65
[#640 multisampled_texture_type]: #129
[#640 paren_expression]: #76
[#640 primary_expression]: #72
[#640 relational_expression]: #55
[#640 sampled_texture_type]: #128
[#640 sampler_type]: #126
[#640 shift_expression]: #59
[#640 short_circuit_and_expression]: #57
[#640 short_circuit_or_expression]: #56
[#640 singular_expression]: #66
[#640 storage_texture_type]: #130
[#640 texture_and_sampler_types]: #102
[#640 type_specifier_without_ident]: #84
[#640 unary_expression]: #64
[#640 vec_prefix]: #85
[#641 attribute]: #187
[#641 compound_statement]: #644
[#641 compound_statement/0.0]: #185
[#641 compound_statement/0.0/0]: #186
[#649 break_if_statement]: #654
[#649 continuing_compound_statement/0.3]: #653
[#651 array_type_specifier]: #100
[#651 assignment_statement]: #397
[#651 attribute]: #408
[#651 break_statement]: #379
[#651 callable]: #391
[#651 compound_statement]: #383
[#651 compound_statement/0.0]: #185
[#651 compound_statement/0.0/0]: #186
[#651 const_assert_statement]: #384
[#651 continue_statement]: #380
[#651 continuing_compound_statement/0.2/0]: #652
[#651 core_lhs_expression]: #409
[#651 decrement_statement]: #399
[#651 depth_texture_type]: #127
[#651 for_statement]: #375
[#651 for_statement/0.0]: #389
[#651 for_statement/0.0/0]: #403
[#651 func_call_statement]: #377
[#651 ident]: #405
[#651 if_statement]: #372
[#651 if_statement/0.0]: #386
[#651 if_statement/0.0/0]: #400
[#651 increment_statement]: #398
[#651 lhs_expression]: #406
[#651 loop_statement]: #374
[#651 loop_statement/0.0]: #388
[#651 loop_statement/0.0/0]: #402
[#651 mat_prefix]: #86
[#651 multisampled_texture_type]: #129
[#651 return_statement]: #371
[#651 sampled_texture_type]: #128
[#651 sampler_type]: #126
[#651 statement]: #651
[#651 storage_texture_type]: #130
[#651 switch_statement]: #373
[#651 switch_statement/0.0]: #387
[#651 switch_statement/0.0/0]: #401
[#651 texture_and_sampler_types]: #102
[#651 type_specifier_without_ident]: #84
[#651 variable_decl]: #392
[#651 variable_statement]: #378
[#651 variable_updating_statement]: #382
[#651 vec_prefix]: #85
[#651 while_statement]: #376
[#651 while_statement/0.0]: #390
[#651 while_statement/0.0/0]: #404
[#656 additive_expression]: #63
[#656 array_type_specifier]: #100
[#656 binary_and_expression]: #60
[#656 binary_or_expression]: #61
[#656 binary_xor_expression]: #62
[#656 bitwise_expression]: #58
[#656 bool_literal]: #82
[#656 call_expression]: #74
[#656 callable]: #79
[#656 decimal_float_literal]: #90
[#656 decimal_int_literal]: #88
[#656 depth_texture_type]: #127
[#656 expression]: #658
[#656 float_literal]: #81
[#656 hex_float_literal]: #91
[#656 hex_int_literal]: #89
[#656 ident]: #73
[#656 int_literal]: #80
[#656 literal]: #75
[#656 mat_prefix]: #86
[#656 multiplicative_expression]: #65
[#656 multisampled_texture_type]: #129
[#656 paren_expression]: #76
[#656 primary_expression]: #72
[#656 relational_expression]: #55
[#656 sampled_texture_type]: #128
[#656 sampler_type]: #126
[#656 shift_expression]: #59
[#656 short_circuit_and_expression]: #57
[#656 short_circuit_or_expression]: #56
[#656 singular_expression]: #66
[#656 storage_texture_type]: #130
[#656 texture_and_sampler_types]: #102
[#656 type_specifier_without_ident]: #84
[#656 unary_expression]: #64
[#656 vec_prefix]: #85
