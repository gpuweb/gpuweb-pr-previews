=Grammar:

_blankspace:/[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_block_comment:/\u200B_block_comment/
_comment:/\/\/.*/
_disambiguate_template:/\u200B_disambiguate_template/
_error_sentinel:/\u200B_error_sentinel/
_greater_than:/\u200B_greater_than/
_greater_than_equal:/\u200B_greater_than_equal/
_less_than:/\u200B_less_than/
_less_than_equal:/\u200B_less_than_equal/
_shift_left:/\u200B_shift_left/
_shift_left_assign:/\u200B_shift_left_assign/
_shift_right:/\u200B_shift_right/
_shift_right_assign:/\u200B_shift_right_assign/
_template_args_end:/\u200B_template_args_end/
_template_args_start:/\u200B_template_args_start/
access_mode:
   'read'
 | 'read_write'
 | 'write'
additive_expression:
   additive_expression additive_operator multiplicative_expression
 | multiplicative_expression
additive_operator:
   '+'
 | '-'
address_space:
   'function'
 | 'private'
 | 'storage'
 | 'uniform'
 | 'workgroup'
argument_expression_list:
   '(' expression_comma_list ? ')'
array_type_specifier:
   'array' _disambiguate_template _template_args_start type_specifier ( ',' element_count_expression )? _template_args_end
assignment_statement:
   '_' '=' expression
 | lhs_expression ( '=' | compound_assignment_operator ) expression
assignment_statement/0.1:
   '='
 | compound_assignment_operator
attrib_end:
   ',' ? ')'
attribute:
   '@' 'align' '(' expression attrib_end
 | '@' 'binding' '(' expression attrib_end
 | '@' 'builtin' '(' builtin_value_name attrib_end
 | '@' 'compute'
 | '@' 'const'
 | '@' 'diagnostic' diagnostic_control
 | '@' 'fragment'
 | '@' 'group' '(' expression attrib_end
 | '@' 'id' '(' expression attrib_end
 | '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end
 | '@' 'interpolate' '(' interpolation_type_name attrib_end
 | '@' 'invariant'
 | '@' 'location' '(' expression attrib_end
 | '@' 'size' '(' expression attrib_end
 | '@' 'vertex'
 | '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression attrib_end
binary_and_expression:
   binary_and_expression '&' unary_expression
 | unary_expression
binary_or_expression:
   binary_or_expression '|' unary_expression
 | unary_expression
binary_xor_expression:
   binary_xor_expression '^' unary_expression
 | unary_expression
bitwise_expression:
   binary_and_expression '&' unary_expression
 | binary_or_expression '|' unary_expression
 | binary_xor_expression '^' unary_expression
bool_literal:
   'false'
 | 'true'
break_if_statement:
   'break' 'if' expression ';'
break_statement:'break'
builtin_value_name:
   'frag_depth'
 | 'front_facing'
 | 'global_invocation_id'
 | 'instance_index'
 | 'local_invocation_id'
 | 'local_invocation_index'
 | 'num_workgroups'
 | 'position'
 | 'sample_index'
 | 'sample_mask'
 | 'vertex_index'
 | 'workgroup_id'
call_expression:call_phrase
call_phrase:
   callable argument_expression_list
callable:
   'array' _disambiguate_template
 | ident
 | mat_prefix _disambiguate_template
 | type_specifier_without_ident
 | vec_prefix _disambiguate_template
case_clause:
   'case' case_selectors ':' ? compound_statement
case_selector:
   'default'
 | expression
case_selectors:
   case_selector ( ',' case_selector ) * ? ',' ?
case_selectors/0.1/0/0.0:
   ',' case_selector
component_or_swizzle_specifier:
   '.' member_ident component_or_swizzle_specifier ?
 | '.' swizzle_name component_or_swizzle_specifier ?
 | '[' expression ']' component_or_swizzle_specifier ?
compound_assignment_operator:
   '%='
 | '&='
 | '*='
 | '+='
 | '-='
 | '/='
 | '^='
 | '|='
 | _shift_left_assign
 | _shift_right_assign
compound_statement:
   attribute * ? '{' statement * ? '}'
const_assert_statement:
   'const_assert' expression
continue_statement:'continue'
continuing_compound_statement:
   attribute * ? '{' statement * ? break_if_statement ? '}'
continuing_statement:
   'continuing' continuing_compound_statement
core_lhs_expression:
   '(' lhs_expression ')'
 | ident
decimal_float_literal:
   /0[fh]/
 | /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/
 | /[0-9]+[eE][+-]?[0-9]+[fh]?/
 | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/
 | /[1-9][0-9]*[fh]/
decimal_int_literal:
   /0[iu]?/
 | /[1-9][0-9]*[iu]?/
decrement_statement:
   lhs_expression '--'
default_alone_clause:
   'default' ':' ? compound_statement
depth_texture_type:
   'texture_depth_2d'
 | 'texture_depth_2d_array'
 | 'texture_depth_cube'
 | 'texture_depth_cube_array'
 | 'texture_depth_multisampled_2d'
diagnostic_control:
   '(' severity_control_name ',' diagnostic_rule_name attrib_end
diagnostic_directive:
   'diagnostic' diagnostic_control ';'
diagnostic_rule_name:ident_pattern_token
element_count_expression:
   additive_expression
 | bitwise_expression
else_clause:
   'else' compound_statement
else_if_clause:
   'else' 'if' expression compound_statement
enable_directive:
   'enable' extension_name ';'
expression:
   bitwise_expression
 | relational_expression
 | short_circuit_and_expression '&&' relational_expression
 | short_circuit_or_expression '||' relational_expression
expression_comma_list:
   expression ( ',' expression ) * ? ',' ?
expression_comma_list/0.1/0/0.0:
   ',' expression
extension_name:'f16'
float_literal:
   decimal_float_literal
 | hex_float_literal
for_header:
   for_init ? ';' expression ? ';' for_update ?
for_init:
   func_call_statement
 | variable_statement
 | variable_updating_statement
for_statement:
   attribute * ? 'for' '(' for_header ')' compound_statement
for_update:
   func_call_statement
 | variable_updating_statement
func_call_statement:call_phrase
function_decl:
   attribute * ? function_header compound_statement
function_header:
   'fn' ident '(' param_list ? ')' ( '->' attribute * ? type_specifier )?
global_constant_decl:
   'const' optionally_typed_ident '=' expression
 | attribute * ? 'override' optionally_typed_ident ( '=' expression )?
global_decl:
   ';'
 | const_assert_statement ';'
 | function_decl
 | global_constant_decl ';'
 | global_variable_decl ';'
 | struct_decl
 | type_alias_decl ';'
global_directive:
   diagnostic_directive
 | enable_directive
global_variable_decl:
   attribute * ? variable_decl ( '=' expression )?
hex_float_literal:
   /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/
 | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
 | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/
hex_int_literal:/0[xX][0-9a-fA-F]+[iu]?/
ident:ident_pattern_token
ident_pattern_token:/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if_clause:
   'if' expression compound_statement
if_statement:
   attribute * ? if_clause else_if_clause * ? else_clause ?
increment_statement:
   lhs_expression '++'
int_literal:
   decimal_int_literal
 | hex_int_literal
interpolation_sample_name:
   'center'
 | 'centroid'
 | 'sample'
interpolation_type_name:
   'flat'
 | 'linear'
 | 'perspective'
lhs_expression:
   '&' lhs_expression
 | '*' lhs_expression
 | core_lhs_expression component_or_swizzle_specifier ?
literal:
   bool_literal
 | float_literal
 | int_literal
loop_statement:
   attribute * ? 'loop' attribute * ? '{' statement * ? continuing_statement ? '}'
mat_prefix:
   'mat2x2'
 | 'mat2x3'
 | 'mat2x4'
 | 'mat3x2'
 | 'mat3x3'
 | 'mat3x4'
 | 'mat4x2'
 | 'mat4x3'
 | 'mat4x4'
member_ident:ident_pattern_token
multiplicative_expression:
   multiplicative_expression multiplicative_operator unary_expression
 | unary_expression
multiplicative_operator:
   '%'
 | '*'
 | '/'
multisampled_texture_type:'texture_multisampled_2d'
optionally_typed_ident:
   ident ( ':' type_specifier )?
param:
   attribute * ? ident ':' type_specifier
param_list:
   param ( ',' param ) * ? ',' ?
param_list/0.1/0/0.0:
   ',' param
paren_expression:
   '(' expression ')'
primary_expression:
   'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression
 | call_expression
 | ident
 | literal
 | paren_expression
relational_expression:
   shift_expression
 | shift_expression '!=' shift_expression
 | shift_expression '==' shift_expression
 | shift_expression _greater_than shift_expression
 | shift_expression _greater_than_equal shift_expression
 | shift_expression _less_than shift_expression
 | shift_expression _less_than_equal shift_expression
return_statement:
   'return' expression ?
sampled_texture_type:
   'texture_1d'
 | 'texture_2d'
 | 'texture_2d_array'
 | 'texture_3d'
 | 'texture_cube'
 | 'texture_cube_array'
sampler_type:
   'sampler'
 | 'sampler_comparison'
severity_control_name:
   'error'
 | 'info'
 | 'off'
 | 'warning'
shift_expression:
   additive_expression
 | unary_expression _shift_left unary_expression
 | unary_expression _shift_right unary_expression
short_circuit_and_expression:
   relational_expression
 | short_circuit_and_expression '&&' relational_expression
short_circuit_or_expression:
   relational_expression
 | short_circuit_or_expression '||' relational_expression
singular_expression:
   primary_expression component_or_swizzle_specifier ?
statement:
   ';'
 | 'discard' ';'
 | break_statement ';'
 | compound_statement
 | const_assert_statement ';'
 | continue_statement ';'
 | for_statement
 | func_call_statement ';'
 | if_statement
 | loop_statement
 | return_statement ';'
 | switch_statement
 | variable_statement ';'
 | variable_updating_statement ';'
 | while_statement
storage_texture_type:
   'texture_storage_1d'
 | 'texture_storage_2d'
 | 'texture_storage_2d_array'
 | 'texture_storage_3d'
struct_body_decl:
   '{' struct_member ( ',' struct_member ) * ? ',' ? '}'
struct_body_decl/0.2/0/0.0:
   ',' struct_member
struct_decl:
   'struct' ident struct_body_decl
struct_member:
   attribute * ? member_ident ':' type_specifier
switch_body:
   attribute * ? '{' ( switch_clause * ) '}'
switch_body/0.2:
   switch_clause *
switch_clause:
   case_clause
 | default_alone_clause
switch_statement:
   attribute * ? 'switch' expression switch_body
swizzle_name:
   '/[rgba]/'
 | '/[rgba][rgba]/'
 | '/[rgba][rgba][rgba]/'
 | '/[rgba][rgba][rgba][rgba]/'
 | '/[xyzw]/'
 | '/[xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw][xyzw]/'
texel_format:
   'bgra8unorm'
 | 'r32float'
 | 'r32sint'
 | 'r32uint'
 | 'rg32float'
 | 'rg32sint'
 | 'rg32uint'
 | 'rgba16float'
 | 'rgba16sint'
 | 'rgba16uint'
 | 'rgba32float'
 | 'rgba32sint'
 | 'rgba32uint'
 | 'rgba8sint'
 | 'rgba8snorm'
 | 'rgba8uint'
 | 'rgba8unorm'
texture_and_sampler_types:
   depth_texture_type
 | multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end
 | sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end
 | sampler_type
 | storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end
translation_unit:
   global_directive * ? global_decl * ?
type_alias_decl:
   'alias' ident '=' type_specifier
type_specifier:
   ident
 | type_specifier_without_ident
type_specifier_without_ident:
   'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end
 | 'bool'
 | 'f16'
 | 'f32'
 | 'i32'
 | 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier ( ',' access_mode )? _template_args_end
 | 'u32'
 | array_type_specifier
 | mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end
 | texture_and_sampler_types
 | vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end
unary_expression:
   '!' unary_expression
 | '&' unary_expression
 | '*' unary_expression
 | '-' unary_expression
 | '~' unary_expression
 | singular_expression
variable_decl:
   'var' _disambiguate_template variable_qualifier ? optionally_typed_ident
variable_qualifier:
   _template_args_start address_space ( ',' access_mode )? _template_args_end
variable_statement:
   'const' optionally_typed_ident '=' expression
 | 'let' optionally_typed_ident '=' expression
 | variable_decl
 | variable_decl '=' expression
variable_updating_statement:
   assignment_statement
 | decrement_statement
 | increment_statement
vec_prefix:
   'vec2'
 | 'vec3'
 | 'vec4'
while_statement:
   attribute * ? 'while' expression compound_statement

=Raw rules:
translation_unit  -> ( Choice ( Seq translation_unit/0.0 translation_unit/0.1 ) )
translation_unit .reg_info.index: 598
translation_unit .first: {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' ε}
translation_unit .derives_empty: True
translation_unit .follow: {EndOfText}
global_directive  -> ( Choice diagnostic_directive enable_directive )
global_directive .reg_info.index: 208
global_directive .first: {'diagnostic' 'enable'}
global_directive .derives_empty: False
global_directive .follow: {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl  -> ( Choice ';' ( Seq global_variable_decl ';' ) ( Seq global_constant_decl ';' ) ( Seq type_alias_decl ';' ) struct_decl function_decl ( Seq const_assert_statement ';' ) )
global_decl .reg_info.index: 219
global_decl .first: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var'}
global_decl .derives_empty: False
global_decl .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
bool_literal  -> ( Choice 'true' 'false' )
bool_literal .reg_info.index: 220
bool_literal .first: {'false' 'true'}
bool_literal .derives_empty: False
bool_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal  -> ( Choice decimal_int_literal hex_int_literal )
int_literal .reg_info.index: 223
int_literal .first: {/0[iu]?/ /0[xX][0-9a-fA-F]+[iu]?/ /[1-9][0-9]*[iu]?/}
int_literal .derives_empty: False
int_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal  -> ( Choice /0[iu]?/ /[1-9][0-9]*[iu]?/ )
decimal_int_literal .reg_info.index: 224
decimal_int_literal .first: {/0[iu]?/ /[1-9][0-9]*[iu]?/}
decimal_int_literal .derives_empty: False
decimal_int_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal  -> /0[xX][0-9a-fA-F]+[iu]?/
hex_int_literal .reg_info.index: 7
hex_int_literal .first: {/0[xX][0-9a-fA-F]+[iu]?/}
hex_int_literal .derives_empty: False
hex_int_literal .follow: {}
float_literal  -> ( Choice decimal_float_literal hex_float_literal )
float_literal .reg_info.index: 227
float_literal .first: {/0[fh]/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/}
float_literal .derives_empty: False
float_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal  -> ( Choice /0[fh]/ /[1-9][0-9]*[fh]/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ )
decimal_float_literal .reg_info.index: 228
decimal_float_literal .first: {/0[fh]/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/}
decimal_float_literal .derives_empty: False
decimal_float_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal  -> ( Choice /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ )
hex_float_literal .reg_info.index: 229
hex_float_literal .first: {/0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/}
hex_float_literal .derives_empty: False
hex_float_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
diagnostic_directive  -> ( Choice ( Seq 'diagnostic' diagnostic_control ';' ) )
diagnostic_directive .reg_info.index: 548
diagnostic_directive .first: {'diagnostic'}
diagnostic_directive .derives_empty: False
diagnostic_directive .follow: {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
literal  -> ( Choice int_literal float_literal bool_literal )
literal .reg_info.index: 235
literal .first: {'false' 'true' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
literal .derives_empty: False
literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident  -> ident_pattern_token
ident .reg_info.index: 236
ident .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
ident .derives_empty: False
ident .follow: {'!=' '%' '%=' '&&' '&' '&=' '(' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' '}' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
member_ident  -> ident_pattern_token
member_ident .reg_info.index: 236
member_ident .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
member_ident .derives_empty: False
member_ident .follow: {'!=' '%' '%=' '&&' '&' '&=' '(' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' '}' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
diagnostic_rule_name  -> ident_pattern_token
diagnostic_rule_name .reg_info.index: 236
diagnostic_rule_name .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
diagnostic_rule_name .derives_empty: False
diagnostic_rule_name .follow: {'!=' '%' '%=' '&&' '&' '&=' '(' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' '}' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
attribute  -> ( Choice ( Seq '@' 'align' '(' expression attrib_end ) ( Seq '@' 'binding' '(' expression attrib_end ) ( Seq '@' 'builtin' '(' builtin_value_name attrib_end ) ( Seq '@' 'const' ) ( Seq '@' 'diagnostic' diagnostic_control ) ( Seq '@' 'group' '(' expression attrib_end ) ( Seq '@' 'id' '(' expression attrib_end ) ( Seq '@' 'interpolate' '(' interpolation_type_name attrib_end ) ( Seq '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end ) ( Seq '@' 'invariant' ) ( Seq '@' 'location' '(' expression attrib_end ) ( Seq '@' 'size' '(' expression attrib_end ) ( Seq '@' 'workgroup_size' '(' expression attrib_end ) ( Seq '@' 'workgroup_size' '(' expression ',' expression attrib_end ) ( Seq '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end ) ( Seq '@' 'vertex' ) ( Seq '@' 'fragment' ) ( Seq '@' 'compute' ) )
attribute .reg_info.index: 260
attribute .first: {'@'}
attribute .derives_empty: False
attribute .follow: {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end  -> ( Choice ( Seq attrib_end/0.0 ')' ) )
attrib_end .reg_info.index: 743
attrib_end .first: {')' ','}
attrib_end .derives_empty: False
attrib_end .follow: {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
diagnostic_control  -> ( Choice ( Seq '(' severity_control_name ',' diagnostic_rule_name attrib_end ) )
diagnostic_control .reg_info.index: 550
diagnostic_control .first: {'('}
diagnostic_control .derives_empty: False
diagnostic_control .follow: {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_specifier  -> ( Choice ( Seq 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end ) )
array_type_specifier .reg_info.index: 759
array_type_specifier .first: {'array'}
array_type_specifier .derives_empty: False
array_type_specifier .follow: {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
element_count_expression  -> ( Choice additive_expression bitwise_expression )
element_count_expression .reg_info.index: 276
element_count_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
element_count_expression .derives_empty: False
element_count_expression .follow: {/\u200B_template_args_end/}
struct_decl  -> ( Choice ( Seq 'struct' ident struct_body_decl ) )
struct_decl .reg_info.index: 552
struct_decl .first: {'struct'}
struct_decl .derives_empty: False
struct_decl .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl  -> ( Choice ( Seq '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' ) )
struct_body_decl .reg_info.index: 774
struct_body_decl .first: {'{'}
struct_body_decl .derives_empty: False
struct_body_decl .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_member  -> ( Choice ( Seq struct_member/0.0 member_ident ':' type_specifier ) )
struct_member .reg_info.index: 782
struct_member .first: {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member .derives_empty: False
struct_member .follow: {',' '}'}
texture_and_sampler_types  -> ( Choice sampler_type depth_texture_type ( Seq sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end ) ( Seq multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end ) ( Seq storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end ) )
texture_and_sampler_types .reg_info.index: 300
texture_and_sampler_types .first: {'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d'}
texture_and_sampler_types .derives_empty: False
texture_and_sampler_types .follow: {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
sampler_type  -> ( Choice 'sampler' 'sampler_comparison' )
sampler_type .reg_info.index: 301
sampler_type .first: {'sampler' 'sampler_comparison'}
sampler_type .derives_empty: False
sampler_type .follow: {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
sampled_texture_type  -> ( Choice 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' )
sampled_texture_type .reg_info.index: 302
sampled_texture_type .first: {'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array'}
sampled_texture_type .derives_empty: False
sampled_texture_type .follow: {/\u200B_disambiguate_template/}
multisampled_texture_type  -> 'texture_multisampled_2d'
multisampled_texture_type .reg_info.index: 48
multisampled_texture_type .first: {'texture_multisampled_2d'}
multisampled_texture_type .derives_empty: False
multisampled_texture_type .follow: {}
storage_texture_type  -> ( Choice 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' )
storage_texture_type .reg_info.index: 303
storage_texture_type .first: {'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d'}
storage_texture_type .derives_empty: False
storage_texture_type .follow: {/\u200B_disambiguate_template/}
depth_texture_type  -> ( Choice 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' )
depth_texture_type .reg_info.index: 304
depth_texture_type .first: {'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d'}
depth_texture_type .derives_empty: False
depth_texture_type .follow: {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
type_alias_decl  -> ( Choice ( Seq 'alias' ident '=' type_specifier ) )
type_alias_decl .reg_info.index: 555
type_alias_decl .first: {'alias'}
type_alias_decl .derives_empty: False
type_alias_decl .follow: {';'}
type_specifier  -> ( Choice ident type_specifier_without_ident )
type_specifier .reg_info.index: 307
type_specifier .first: {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_specifier .derives_empty: False
type_specifier .follow: {')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
type_specifier_without_ident  -> ( Choice 'bool' 'f32' 'f16' 'i32' 'u32' ( Seq vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end ) ( Seq mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end ) ( Seq 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end ) array_type_specifier ( Seq 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end ) texture_and_sampler_types )
type_specifier_without_ident .reg_info.index: 865
type_specifier_without_ident .first: {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
type_specifier_without_ident .derives_empty: False
type_specifier_without_ident .follow: {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
vec_prefix  -> ( Choice 'vec2' 'vec3' 'vec4' )
vec_prefix .reg_info.index: 320
vec_prefix .first: {'vec2' 'vec3' 'vec4'}
vec_prefix .derives_empty: False
vec_prefix .follow: {/\u200B_disambiguate_template/}
mat_prefix  -> ( Choice 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' )
mat_prefix .reg_info.index: 321
mat_prefix .first: {'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4'}
mat_prefix .derives_empty: False
mat_prefix .follow: {/\u200B_disambiguate_template/}
variable_statement  -> ( Choice variable_decl ( Seq variable_decl '=' expression ) ( Seq 'let' optionally_typed_ident '=' expression ) ( Seq 'const' optionally_typed_ident '=' expression ) )
variable_statement .reg_info.index: 327
variable_statement .first: {'const' 'let' 'var'}
variable_statement .derives_empty: False
variable_statement .follow: {';'}
variable_decl  -> ( Choice ( Seq 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident ) )
variable_decl .reg_info.index: 900
variable_decl .first: {'var'}
variable_decl .derives_empty: False
variable_decl .follow: {';' '='}
optionally_typed_ident  -> ( Choice ( Seq ident optionally_typed_ident/0.1 ) )
optionally_typed_ident .reg_info.index: 906
optionally_typed_ident .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
optionally_typed_ident .derives_empty: False
optionally_typed_ident .follow: {';' '='}
variable_qualifier  -> ( Choice ( Seq _template_args_start address_space variable_qualifier/0.2 _template_args_end ) )
variable_qualifier .reg_info.index: 913
variable_qualifier .first: {/\u200B_template_args_start/}
variable_qualifier .derives_empty: False
variable_qualifier .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
global_variable_decl  -> ( Choice ( Seq global_variable_decl/0.0 variable_decl global_variable_decl/0.2 ) )
global_variable_decl .reg_info.index: 920
global_variable_decl .first: {'@' 'var'}
global_variable_decl .derives_empty: False
global_variable_decl .follow: {';'}
global_constant_decl  -> ( Choice ( Seq 'const' optionally_typed_ident '=' expression ) ( Seq global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 ) )
global_constant_decl .reg_info.index: 932
global_constant_decl .first: {'@' 'const' 'override'}
global_constant_decl .derives_empty: False
global_constant_decl .follow: {';'}
primary_expression  -> ( Choice ident call_expression literal paren_expression ( Seq 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression ) )
primary_expression .reg_info.index: 344
primary_expression .first: {'(' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
primary_expression .derives_empty: False
primary_expression .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression  -> call_phrase
call_expression .reg_info.index: 345
call_expression .first: {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
call_expression .derives_empty: False
call_expression .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_phrase  -> ( Choice ( Seq callable argument_expression_list ) )
call_phrase .reg_info.index: 560
call_phrase .first: {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
call_phrase .derives_empty: False
call_phrase .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
callable  -> ( Choice ident type_specifier_without_ident ( Seq vec_prefix _disambiguate_template ) ( Seq mat_prefix _disambiguate_template ) ( Seq 'array' _disambiguate_template ) )
callable .reg_info.index: 352
callable .first: {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
callable .derives_empty: False
callable .follow: {'('}
paren_expression  -> ( Choice ( Seq '(' expression ')' ) )
paren_expression .reg_info.index: 561
paren_expression .first: {'('}
paren_expression .derives_empty: False
paren_expression .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
argument_expression_list  -> ( Choice ( Seq '(' argument_expression_list/0.1 ')' ) )
argument_expression_list .reg_info.index: 968
argument_expression_list .first: {'('}
argument_expression_list .derives_empty: False
argument_expression_list .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
expression_comma_list  -> ( Choice ( Seq expression expression_comma_list/0.1 expression_comma_list/0.2 ) )
expression_comma_list .reg_info.index: 975
expression_comma_list .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
expression_comma_list .derives_empty: False
expression_comma_list .follow: {')'}
component_or_swizzle_specifier  -> ( Choice ( Seq '[' expression ']' component_or_swizzle_specifier/0.3 ) ( Seq '.' member_ident component_or_swizzle_specifier/1.2 ) ( Seq '.' swizzle_name component_or_swizzle_specifier/2.2 ) )
component_or_swizzle_specifier .reg_info.index: 993
component_or_swizzle_specifier .first: {'.' '['}
component_or_swizzle_specifier .derives_empty: False
component_or_swizzle_specifier .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
unary_expression  -> ( Choice singular_expression ( Seq '-' unary_expression ) ( Seq '!' unary_expression ) ( Seq '~' unary_expression ) ( Seq '*' unary_expression ) ( Seq '&' unary_expression ) )
unary_expression .reg_info.index: 375
unary_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
unary_expression .derives_empty: False
unary_expression .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
singular_expression  -> ( Choice ( Seq primary_expression singular_expression/0.1 ) )
singular_expression .reg_info.index: 1014
singular_expression .first: {'(' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
singular_expression .derives_empty: False
singular_expression .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
lhs_expression  -> ( Choice ( Seq core_lhs_expression lhs_expression/0.1 ) ( Seq '*' lhs_expression ) ( Seq '&' lhs_expression ) )
lhs_expression .reg_info.index: 1025
lhs_expression .first: {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression .derives_empty: False
lhs_expression .follow: {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression  -> ( Choice ident ( Seq '(' lhs_expression ')' ) )
core_lhs_expression .reg_info.index: 385
core_lhs_expression .first: {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
core_lhs_expression .derives_empty: False
core_lhs_expression .follow: {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
multiplicative_expression  -> ( Choice unary_expression ( Seq multiplicative_expression multiplicative_operator unary_expression ) )
multiplicative_expression .reg_info.index: 389
multiplicative_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_expression .derives_empty: False
multiplicative_expression .follow: {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multiplicative_operator  -> ( Choice '*' '/' '%' )
multiplicative_operator .reg_info.index: 390
multiplicative_operator .first: {'%' '*' '/'}
multiplicative_operator .derives_empty: False
multiplicative_operator .follow: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_expression  -> ( Choice multiplicative_expression ( Seq additive_expression additive_operator multiplicative_expression ) )
additive_expression .reg_info.index: 393
additive_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_expression .derives_empty: False
additive_expression .follow: {'!=' '&&' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
additive_operator  -> ( Choice '+' '-' )
additive_operator .reg_info.index: 394
additive_operator .first: {'+' '-'}
additive_operator .derives_empty: False
additive_operator .follow: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
shift_expression  -> ( Choice additive_expression ( Seq unary_expression _shift_left unary_expression ) ( Seq unary_expression _shift_right unary_expression ) )
shift_expression .reg_info.index: 399
shift_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
shift_expression .derives_empty: False
shift_expression .follow: {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
relational_expression  -> ( Choice shift_expression ( Seq shift_expression _less_than shift_expression ) ( Seq shift_expression _greater_than shift_expression ) ( Seq shift_expression _less_than_equal shift_expression ) ( Seq shift_expression _greater_than_equal shift_expression ) ( Seq shift_expression '==' shift_expression ) ( Seq shift_expression '!=' shift_expression ) )
relational_expression .reg_info.index: 411
relational_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
relational_expression .derives_empty: False
relational_expression .follow: {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
short_circuit_and_expression  -> ( Choice relational_expression ( Seq short_circuit_and_expression '&&' relational_expression ) )
short_circuit_and_expression .reg_info.index: 415
short_circuit_and_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
short_circuit_and_expression .derives_empty: False
short_circuit_and_expression .follow: {'&&'}
short_circuit_or_expression  -> ( Choice relational_expression ( Seq short_circuit_or_expression '||' relational_expression ) )
short_circuit_or_expression .reg_info.index: 418
short_circuit_or_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
short_circuit_or_expression .derives_empty: False
short_circuit_or_expression .follow: {'||'}
binary_or_expression  -> ( Choice unary_expression ( Seq binary_or_expression '|' unary_expression ) )
binary_or_expression .reg_info.index: 421
binary_or_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
binary_or_expression .derives_empty: False
binary_or_expression .follow: {'|'}
binary_and_expression  -> ( Choice unary_expression ( Seq binary_and_expression '&' unary_expression ) )
binary_and_expression .reg_info.index: 424
binary_and_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
binary_and_expression .derives_empty: False
binary_and_expression .follow: {'&'}
binary_xor_expression  -> ( Choice unary_expression ( Seq binary_xor_expression '^' unary_expression ) )
binary_xor_expression .reg_info.index: 427
binary_xor_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
binary_xor_expression .derives_empty: False
binary_xor_expression .follow: {'^'}
bitwise_expression  -> ( Choice ( Seq binary_and_expression '&' unary_expression ) ( Seq binary_or_expression '|' unary_expression ) ( Seq binary_xor_expression '^' unary_expression ) )
bitwise_expression .reg_info.index: 428
bitwise_expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
bitwise_expression .derives_empty: False
bitwise_expression .follow: {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
expression  -> ( Choice relational_expression ( Seq short_circuit_or_expression '||' relational_expression ) ( Seq short_circuit_and_expression '&&' relational_expression ) bitwise_expression )
expression .reg_info.index: 429
expression .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
expression .derives_empty: False
expression .follow: {')' ',' ':' ';' '@' ']' '{'}
compound_statement  -> ( Choice ( Seq compound_statement/0.0 '{' compound_statement/0.2 '}' ) )
compound_statement .reg_info.index: 1134
compound_statement .first: {'@' '{'}
compound_statement .derives_empty: False
compound_statement .follow: {'&' '(' '*' ';' '@' '_' 'alias' 'array' 'atomic' 'bool' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
assignment_statement  -> ( Choice ( Seq lhs_expression assignment_statement/0.1 expression ) ( Seq '_' '=' expression ) )
assignment_statement .reg_info.index: 1145
assignment_statement .first: {'&' '(' '*' '_' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement .derives_empty: False
assignment_statement .follow: {')' ';'}
compound_assignment_operator  -> ( Choice '+=' '-=' '*=' '/=' '%=' '&=' '|=' '^=' _shift_right_assign _shift_left_assign )
compound_assignment_operator .reg_info.index: 441
compound_assignment_operator .first: {'%=' '&=' '*=' '+=' '-=' '/=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
compound_assignment_operator .derives_empty: False
compound_assignment_operator .follow: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
increment_statement  -> ( Choice ( Seq lhs_expression '++' ) )
increment_statement .reg_info.index: 566
increment_statement .first: {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement .derives_empty: False
increment_statement .follow: {')' ';'}
decrement_statement  -> ( Choice ( Seq lhs_expression '--' ) )
decrement_statement .reg_info.index: 567
decrement_statement .first: {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
decrement_statement .derives_empty: False
decrement_statement .follow: {')' ';'}
if_statement  -> ( Choice ( Seq if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 ) )
if_statement .reg_info.index: 1170
if_statement .first: {'@' 'if'}
if_statement .derives_empty: False
if_statement .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_clause  -> ( Choice ( Seq 'if' expression compound_statement ) )
if_clause .reg_info.index: 569
if_clause .first: {'if'}
if_clause .derives_empty: False
if_clause .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause  -> ( Choice ( Seq 'else' 'if' expression compound_statement ) )
else_if_clause .reg_info.index: 570
else_if_clause .first: {'else'}
else_if_clause .derives_empty: False
else_if_clause .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_clause  -> ( Choice ( Seq 'else' compound_statement ) )
else_clause .reg_info.index: 571
else_clause .first: {'else'}
else_clause .derives_empty: False
else_clause .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement  -> ( Choice ( Seq switch_statement/0.0 'switch' expression switch_body ) )
switch_statement .reg_info.index: 1189
switch_statement .first: {'@' 'switch'}
switch_statement .derives_empty: False
switch_statement .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_body  -> ( Choice ( Seq switch_body/0.0 '{' switch_body/0.2 '}' ) )
switch_body .reg_info.index: 1197
switch_body .first: {'@' '{'}
switch_body .derives_empty: False
switch_body .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_clause  -> ( Choice case_clause default_alone_clause )
switch_clause .reg_info.index: 462
switch_clause .first: {'case' 'default'}
switch_clause .derives_empty: False
switch_clause .follow: {'case' 'default' '}'}
case_clause  -> ( Choice ( Seq 'case' case_selectors case_clause/0.2 compound_statement ) )
case_clause .reg_info.index: 1207
case_clause .first: {'case'}
case_clause .derives_empty: False
case_clause .follow: {'case' 'default' '}'}
default_alone_clause  -> ( Choice ( Seq 'default' default_alone_clause/0.1 compound_statement ) )
default_alone_clause .reg_info.index: 1213
default_alone_clause .first: {'default'}
default_alone_clause .derives_empty: False
default_alone_clause .follow: {'case' 'default' '}'}
case_selectors  -> ( Choice ( Seq case_selector case_selectors/0.1 case_selectors/0.2 ) )
case_selectors .reg_info.index: 1220
case_selectors .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'default' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
case_selectors .derives_empty: False
case_selectors .follow: {':' '@' '{'}
case_selector  -> ( Choice 'default' expression )
case_selector .reg_info.index: 472
case_selector .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'default' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
case_selector .derives_empty: False
case_selector .follow: {',' ':' '@' '{'}
loop_statement  -> ( Choice ( Seq loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' ) )
loop_statement .reg_info.index: 1233
loop_statement .first: {'@' 'loop'}
loop_statement .derives_empty: False
loop_statement .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement  -> ( Choice ( Seq for_statement/0.0 'for' '(' for_header ')' compound_statement ) )
for_statement .reg_info.index: 1242
for_statement .first: {'@' 'for'}
for_statement .derives_empty: False
for_statement .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_header  -> ( Choice ( Seq for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 ) )
for_header .reg_info.index: 1253
for_header .first: {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'const' 'f16' 'f32' 'i32' 'let' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_header .derives_empty: False
for_header .follow: {')'}
for_init  -> ( Choice variable_statement variable_updating_statement func_call_statement )
for_init .reg_info.index: 487
for_init .first: {'&' '(' '*' '_' 'array' 'atomic' 'bool' 'const' 'f16' 'f32' 'i32' 'let' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_init .derives_empty: False
for_init .follow: {';'}
for_update  -> ( Choice variable_updating_statement func_call_statement )
for_update .reg_info.index: 488
for_update .first: {'&' '(' '*' '_' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_update .derives_empty: False
for_update .follow: {')'}
while_statement  -> ( Choice ( Seq while_statement/0.0 'while' expression compound_statement ) )
while_statement .reg_info.index: 1265
while_statement .first: {'@' 'while'}
while_statement .derives_empty: False
while_statement .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement  -> 'break'
break_statement .reg_info.index: 119
break_statement .first: {'break'}
break_statement .derives_empty: False
break_statement .follow: {}
break_if_statement  -> ( Choice ( Seq 'break' 'if' expression ';' ) )
break_if_statement .reg_info.index: 581
break_if_statement .first: {'break'}
break_if_statement .derives_empty: False
break_if_statement .follow: {'}'}
continue_statement  -> 'continue'
continue_statement .reg_info.index: 120
continue_statement .first: {'continue'}
continue_statement .derives_empty: False
continue_statement .follow: {}
continuing_statement  -> ( Choice ( Seq 'continuing' continuing_compound_statement ) )
continuing_statement .reg_info.index: 582
continuing_statement .first: {'continuing'}
continuing_statement .derives_empty: False
continuing_statement .follow: {'}'}
continuing_compound_statement  -> ( Choice ( Seq continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' ) )
continuing_compound_statement .reg_info.index: 1282
continuing_compound_statement .first: {'@' '{'}
continuing_compound_statement .derives_empty: False
continuing_compound_statement .follow: {'}'}
return_statement  -> ( Choice ( Seq 'return' return_statement/0.1 ) )
return_statement .reg_info.index: 1287
return_statement .first: {'return'}
return_statement .derives_empty: False
return_statement .follow: {';'}
func_call_statement  -> call_phrase
func_call_statement .reg_info.index: 345
func_call_statement .first: {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement .derives_empty: False
func_call_statement .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
const_assert_statement  -> ( Choice ( Seq 'const_assert' expression ) )
const_assert_statement .reg_info.index: 585
const_assert_statement .first: {'const_assert'}
const_assert_statement .derives_empty: False
const_assert_statement .follow: {';'}
statement  -> ( Choice ';' ( Seq return_statement ';' ) if_statement switch_statement loop_statement for_statement while_statement ( Seq func_call_statement ';' ) ( Seq variable_statement ';' ) ( Seq break_statement ';' ) ( Seq continue_statement ';' ) ( Seq 'discard' ';' ) ( Seq variable_updating_statement ';' ) compound_statement ( Seq const_assert_statement ';' ) )
statement .reg_info.index: 513
statement .first: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement .derives_empty: False
statement .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_updating_statement  -> ( Choice assignment_statement increment_statement decrement_statement )
variable_updating_statement .reg_info.index: 517
variable_updating_statement .first: {'&' '(' '*' '_' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_updating_statement .derives_empty: False
variable_updating_statement .follow: {')' ';'}
function_decl  -> ( Choice ( Seq function_decl/0.0 function_header compound_statement ) )
function_decl .reg_info.index: 1330
function_decl .first: {'@' 'fn'}
function_decl .derives_empty: False
function_decl .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_header  -> ( Choice ( Seq 'fn' ident '(' function_header/0.3 ')' function_header/0.5 ) )
function_header .reg_info.index: 1341
function_header .first: {'fn'}
function_header .derives_empty: False
function_header .follow: {'@' '{'}
param_list  -> ( Choice ( Seq param param_list/0.1 param_list/0.2 ) )
param_list .reg_info.index: 1348
param_list .first: {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list .derives_empty: False
param_list .follow: {')'}
param  -> ( Choice ( Seq param/0.0 ident ':' type_specifier ) )
param .reg_info.index: 1355
param .first: {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param .derives_empty: False
param .follow: {')' ','}
enable_directive  -> ( Choice ( Seq 'enable' extension_name ';' ) )
enable_directive .reg_info.index: 590
enable_directive .first: {'enable'}
enable_directive .derives_empty: False
enable_directive .follow: {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
ident_pattern_token  -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
ident_pattern_token .reg_info.index: 128
ident_pattern_token .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
ident_pattern_token .derives_empty: False
ident_pattern_token .follow: {}
interpolation_type_name  -> ( Choice 'perspective' 'linear' 'flat' )
interpolation_type_name .reg_info.index: 533
interpolation_type_name .first: {'flat' 'linear' 'perspective'}
interpolation_type_name .derives_empty: False
interpolation_type_name .follow: {')' ','}
interpolation_sample_name  -> ( Choice 'center' 'centroid' 'sample' )
interpolation_sample_name .reg_info.index: 534
interpolation_sample_name .first: {'center' 'centroid' 'sample'}
interpolation_sample_name .derives_empty: False
interpolation_sample_name .follow: {')' ','}
severity_control_name  -> ( Choice 'error' 'warning' 'info' 'off' )
severity_control_name .reg_info.index: 535
severity_control_name .first: {'error' 'info' 'off' 'warning'}
severity_control_name .derives_empty: False
severity_control_name .follow: {','}
builtin_value_name  -> ( Choice 'vertex_index' 'instance_index' 'position' 'front_facing' 'frag_depth' 'local_invocation_id' 'local_invocation_index' 'global_invocation_id' 'workgroup_id' 'num_workgroups' 'sample_index' 'sample_mask' )
builtin_value_name .reg_info.index: 536
builtin_value_name .first: {'frag_depth' 'front_facing' 'global_invocation_id' 'instance_index' 'local_invocation_id' 'local_invocation_index' 'num_workgroups' 'position' 'sample_index' 'sample_mask' 'vertex_index' 'workgroup_id'}
builtin_value_name .derives_empty: False
builtin_value_name .follow: {')' ','}
access_mode  -> ( Choice 'read' 'write' 'read_write' )
access_mode .reg_info.index: 537
access_mode .first: {'read' 'read_write' 'write'}
access_mode .derives_empty: False
access_mode .follow: {/\u200B_template_args_end/}
address_space  -> ( Choice 'function' 'private' 'workgroup' 'uniform' 'storage' )
address_space .reg_info.index: 538
address_space .first: {'function' 'private' 'storage' 'uniform' 'workgroup'}
address_space .derives_empty: False
address_space .follow: {',' /\u200B_template_args_end/}
texel_format  -> ( Choice 'rgba8unorm' 'rgba8snorm' 'rgba8uint' 'rgba8sint' 'rgba16uint' 'rgba16sint' 'rgba16float' 'r32uint' 'r32sint' 'r32float' 'rg32uint' 'rg32sint' 'rg32float' 'rgba32uint' 'rgba32sint' 'rgba32float' 'bgra8unorm' )
texel_format .reg_info.index: 539
texel_format .first: {'bgra8unorm' 'r32float' 'r32sint' 'r32uint' 'rg32float' 'rg32sint' 'rg32uint' 'rgba16float' 'rgba16sint' 'rgba16uint' 'rgba32float' 'rgba32sint' 'rgba32uint' 'rgba8sint' 'rgba8snorm' 'rgba8uint' 'rgba8unorm'}
texel_format .derives_empty: False
texel_format .follow: {','}
extension_name  -> 'f16'
extension_name .reg_info.index: 62
extension_name .first: {'f16'}
extension_name .derives_empty: False
extension_name .follow: {}
swizzle_name  -> ( Choice '/[rgba]/' '/[rgba][rgba]/' '/[rgba][rgba][rgba]/' '/[rgba][rgba][rgba][rgba]/' '/[xyzw]/' '/[xyzw][xyzw]/' '/[xyzw][xyzw][xyzw]/' '/[xyzw][xyzw][xyzw][xyzw]/' )
swizzle_name .reg_info.index: 540
swizzle_name .first: {'/[rgba]/' '/[rgba][rgba]/' '/[rgba][rgba][rgba]/' '/[rgba][rgba][rgba][rgba]/' '/[xyzw]/' '/[xyzw][xyzw]/' '/[xyzw][xyzw][xyzw]/' '/[xyzw][xyzw][xyzw][xyzw]/'}
swizzle_name .derives_empty: False
swizzle_name .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
_comment  -> /\/\/.*/
_comment .reg_info.index: 184
_comment .first: {/\/\/.*/}
_comment .derives_empty: False
_comment .follow: {}
_blankspace  -> /[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_blankspace .reg_info.index: 185
_blankspace .first: {/[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/}
_blankspace .derives_empty: False
_blankspace .follow: {}
_less_than  -> /\u200B_less_than/
_less_than .reg_info.index: 186
_less_than .first: {/\u200B_less_than/}
_less_than .derives_empty: False
_less_than .follow: {}
_template_args_start  -> /\u200B_template_args_start/
_template_args_start .reg_info.index: 187
_template_args_start .first: {/\u200B_template_args_start/}
_template_args_start .derives_empty: False
_template_args_start .follow: {}
_block_comment  -> /\u200B_block_comment/
_block_comment .reg_info.index: 188
_block_comment .first: {/\u200B_block_comment/}
_block_comment .derives_empty: False
_block_comment .follow: {}
_less_than_equal  -> /\u200B_less_than_equal/
_less_than_equal .reg_info.index: 189
_less_than_equal .first: {/\u200B_less_than_equal/}
_less_than_equal .derives_empty: False
_less_than_equal .follow: {}
_disambiguate_template  -> /\u200B_disambiguate_template/
_disambiguate_template .reg_info.index: 190
_disambiguate_template .first: {/\u200B_disambiguate_template/}
_disambiguate_template .derives_empty: False
_disambiguate_template .follow: {}
_shift_left_assign  -> /\u200B_shift_left_assign/
_shift_left_assign .reg_info.index: 191
_shift_left_assign .first: {/\u200B_shift_left_assign/}
_shift_left_assign .derives_empty: False
_shift_left_assign .follow: {}
_shift_left  -> /\u200B_shift_left/
_shift_left .reg_info.index: 192
_shift_left .first: {/\u200B_shift_left/}
_shift_left .derives_empty: False
_shift_left .follow: {}
_template_args_end  -> /\u200B_template_args_end/
_template_args_end .reg_info.index: 193
_template_args_end .first: {/\u200B_template_args_end/}
_template_args_end .derives_empty: False
_template_args_end .follow: {}
_greater_than_equal  -> /\u200B_greater_than_equal/
_greater_than_equal .reg_info.index: 194
_greater_than_equal .first: {/\u200B_greater_than_equal/}
_greater_than_equal .derives_empty: False
_greater_than_equal .follow: {}
_greater_than  -> /\u200B_greater_than/
_greater_than .reg_info.index: 195
_greater_than .first: {/\u200B_greater_than/}
_greater_than .derives_empty: False
_greater_than .follow: {}
_shift_right  -> /\u200B_shift_right/
_shift_right .reg_info.index: 196
_shift_right .first: {/\u200B_shift_right/}
_shift_right .derives_empty: False
_shift_right .follow: {}
_shift_right_assign  -> /\u200B_shift_right_assign/
_shift_right_assign .reg_info.index: 197
_shift_right_assign .first: {/\u200B_shift_right_assign/}
_shift_right_assign .derives_empty: False
_shift_right_assign .follow: {}
_error_sentinel  -> /\u200B_error_sentinel/
_error_sentinel .reg_info.index: 198
_error_sentinel .first: {/\u200B_error_sentinel/}
_error_sentinel .derives_empty: False
_error_sentinel .follow: {}
language  -> ( Choice ( Seq translation_unit EndOfText ) )
language .reg_info.index: 591
language .first: {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
language .derives_empty: False
language .follow: {}
translation_unit/0.0  -> ( Choice translation_unit/0.0/0 ε )
translation_unit/0.0 .reg_info.index: 1479
translation_unit/0.0 .first: {'diagnostic' 'enable' ε}
translation_unit/0.0 .derives_empty: True
translation_unit/0.0 .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.1  -> ( Choice translation_unit/0.1/0 ε )
translation_unit/0.1 .reg_info.index: 1483
translation_unit/0.1 .first: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' ε}
translation_unit/0.1 .derives_empty: True
translation_unit/0.1 .follow: {EndOfText}
attrib_end/0.0  -> ( Choice ',' ε )
attrib_end/0.0 .reg_info.index: 261
attrib_end/0.0 .first: {',' ε}
attrib_end/0.0 .derives_empty: True
attrib_end/0.0 .follow: {')' ':' '@' '{' '}'}
array_type_specifier/0.4  -> ( Choice ( Seq ',' element_count_expression ) ε )
array_type_specifier/0.4 .reg_info.index: 271
array_type_specifier/0.4 .first: {',' ε}
array_type_specifier/0.4 .derives_empty: True
array_type_specifier/0.4 .follow: {/\u200B_template_args_end/}
struct_body_decl/0.2  -> ( Choice struct_body_decl/0.2/0 ε )
struct_body_decl/0.2 .reg_info.index: 1491
struct_body_decl/0.2 .first: {',' ε}
struct_body_decl/0.2 .derives_empty: True
struct_body_decl/0.2 .follow: {',' '}'}
struct_body_decl/0.3  -> ( Choice ',' ε )
struct_body_decl/0.3 .reg_info.index: 261
struct_body_decl/0.3 .first: {',' ε}
struct_body_decl/0.3 .derives_empty: True
struct_body_decl/0.3 .follow: {')' ':' '@' '{' '}'}
struct_member/0.0  -> ( Choice struct_member/0.0/0 ε )
struct_member/0.0 .reg_info.index: 1496
struct_member/0.0 .first: {'@' ε}
struct_member/0.0 .derives_empty: True
struct_member/0.0 .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_specifier_without_ident/7.6  -> ( Choice ( Seq ',' access_mode ) ε )
type_specifier_without_ident/7.6 .reg_info.index: 314
type_specifier_without_ident/7.6 .first: {',' ε}
type_specifier_without_ident/7.6 .derives_empty: True
type_specifier_without_ident/7.6 .follow: {/\u200B_template_args_end/}
variable_decl/0.2  -> ( Choice variable_qualifier ε )
variable_decl/0.2 .reg_info.index: 329
variable_decl/0.2 .first: {/\u200B_template_args_start/ ε}
variable_decl/0.2 .derives_empty: True
variable_decl/0.2 .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
optionally_typed_ident/0.1  -> ( Choice ( Seq ':' type_specifier ) ε )
optionally_typed_ident/0.1 .reg_info.index: 332
optionally_typed_ident/0.1 .first: {':' ε}
optionally_typed_ident/0.1 .derives_empty: True
optionally_typed_ident/0.1 .follow: {';' '='}
variable_qualifier/0.2  -> ( Choice ( Seq ',' access_mode ) ε )
variable_qualifier/0.2 .reg_info.index: 314
variable_qualifier/0.2 .first: {',' ε}
variable_qualifier/0.2 .derives_empty: True
variable_qualifier/0.2 .follow: {/\u200B_template_args_end/}
global_variable_decl/0.0  -> ( Choice global_variable_decl/0.0/0 ε )
global_variable_decl/0.0 .reg_info.index: 1510
global_variable_decl/0.0 .first: {'@' ε}
global_variable_decl/0.0 .derives_empty: True
global_variable_decl/0.0 .follow: {'var'}
global_variable_decl/0.2  -> ( Choice ( Seq '=' expression ) ε )
global_variable_decl/0.2 .reg_info.index: 336
global_variable_decl/0.2 .first: {'=' ε}
global_variable_decl/0.2 .derives_empty: True
global_variable_decl/0.2 .follow: {';'}
global_constant_decl/1.0  -> ( Choice global_constant_decl/1.0/0 ε )
global_constant_decl/1.0 .reg_info.index: 1517
global_constant_decl/1.0 .first: {'@' ε}
global_constant_decl/1.0 .derives_empty: True
global_constant_decl/1.0 .follow: {'override'}
global_constant_decl/1.3  -> ( Choice ( Seq '=' expression ) ε )
global_constant_decl/1.3 .reg_info.index: 336
global_constant_decl/1.3 .first: {'=' ε}
global_constant_decl/1.3 .derives_empty: True
global_constant_decl/1.3 .follow: {';'}
argument_expression_list/0.1  -> ( Choice expression_comma_list ε )
argument_expression_list/0.1 .reg_info.index: 355
argument_expression_list/0.1 .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/ ε}
argument_expression_list/0.1 .derives_empty: True
argument_expression_list/0.1 .follow: {')'}
expression_comma_list/0.1  -> ( Choice expression_comma_list/0.1/0 ε )
expression_comma_list/0.1 .reg_info.index: 1525
expression_comma_list/0.1 .first: {',' ε}
expression_comma_list/0.1 .derives_empty: True
expression_comma_list/0.1 .follow: {')' ','}
expression_comma_list/0.2  -> ( Choice ',' ε )
expression_comma_list/0.2 .reg_info.index: 261
expression_comma_list/0.2 .first: {',' ε}
expression_comma_list/0.2 .derives_empty: True
expression_comma_list/0.2 .follow: {')' ':' '@' '{' '}'}
component_or_swizzle_specifier/0.3  -> ( Choice component_or_swizzle_specifier ε )
component_or_swizzle_specifier/0.3 .reg_info.index: 362
component_or_swizzle_specifier/0.3 .first: {'.' '[' ε}
component_or_swizzle_specifier/0.3 .derives_empty: True
component_or_swizzle_specifier/0.3 .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier/1.2  -> ( Choice component_or_swizzle_specifier ε )
component_or_swizzle_specifier/1.2 .reg_info.index: 362
component_or_swizzle_specifier/1.2 .first: {'.' '[' ε}
component_or_swizzle_specifier/1.2 .derives_empty: True
component_or_swizzle_specifier/1.2 .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier/2.2  -> ( Choice component_or_swizzle_specifier ε )
component_or_swizzle_specifier/2.2 .reg_info.index: 362
component_or_swizzle_specifier/2.2 .first: {'.' '[' ε}
component_or_swizzle_specifier/2.2 .derives_empty: True
component_or_swizzle_specifier/2.2 .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
singular_expression/0.1  -> ( Choice component_or_swizzle_specifier ε )
singular_expression/0.1 .reg_info.index: 362
singular_expression/0.1 .first: {'.' '[' ε}
singular_expression/0.1 .derives_empty: True
singular_expression/0.1 .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
lhs_expression/0.1  -> ( Choice component_or_swizzle_specifier ε )
lhs_expression/0.1 .reg_info.index: 362
lhs_expression/0.1 .first: {'.' '[' ε}
lhs_expression/0.1 .derives_empty: True
lhs_expression/0.1 .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
compound_statement/0.0  -> ( Choice compound_statement/0.0/0 ε )
compound_statement/0.0 .reg_info.index: 1535
compound_statement/0.0 .first: {'@' ε}
compound_statement/0.0 .derives_empty: True
compound_statement/0.0 .follow: {'{'}
compound_statement/0.2  -> ( Choice compound_statement/0.2/0 ε )
compound_statement/0.2 .reg_info.index: 1539
compound_statement/0.2 .first: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
compound_statement/0.2 .derives_empty: True
compound_statement/0.2 .follow: {'}'}
assignment_statement/0.1  -> ( Choice '=' compound_assignment_operator )
assignment_statement/0.1 .reg_info.index: 435
assignment_statement/0.1 .first: {'%=' '&=' '*=' '+=' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
assignment_statement/0.1 .derives_empty: False
assignment_statement/0.1 .follow: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
if_statement/0.0  -> ( Choice if_statement/0.0/0 ε )
if_statement/0.0 .reg_info.index: 1544
if_statement/0.0 .first: {'@' ε}
if_statement/0.0 .derives_empty: True
if_statement/0.0 .follow: {'if'}
if_statement/0.2  -> ( Choice if_statement/0.2/0 ε )
if_statement/0.2 .reg_info.index: 1548
if_statement/0.2 .first: {'else' ε}
if_statement/0.2 .derives_empty: True
if_statement/0.2 .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.3  -> ( Choice else_clause ε )
if_statement/0.3 .reg_info.index: 449
if_statement/0.3 .first: {'else' ε}
if_statement/0.3 .derives_empty: True
if_statement/0.3 .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0  -> ( Choice switch_statement/0.0/0 ε )
switch_statement/0.0 .reg_info.index: 1553
switch_statement/0.0 .first: {'@' ε}
switch_statement/0.0 .derives_empty: True
switch_statement/0.0 .follow: {'switch'}
switch_body/0.0  -> ( Choice switch_body/0.0/0 ε )
switch_body/0.0 .reg_info.index: 1557
switch_body/0.0 .first: {'@' ε}
switch_body/0.0 .derives_empty: True
switch_body/0.0 .follow: {'{'}
switch_body/0.2  -> ( Choice switch_body/0.2/0 )
switch_body/0.2 .reg_info.index: 1452
switch_body/0.2 .first: {'case' 'default' ε}
switch_body/0.2 .derives_empty: True
switch_body/0.2 .follow: {'}'}
case_clause/0.2  -> ( Choice ':' ε )
case_clause/0.2 .reg_info.index: 464
case_clause/0.2 .first: {':' ε}
case_clause/0.2 .derives_empty: True
case_clause/0.2 .follow: {'@' '{'}
default_alone_clause/0.1  -> ( Choice ':' ε )
default_alone_clause/0.1 .reg_info.index: 464
default_alone_clause/0.1 .first: {':' ε}
default_alone_clause/0.1 .derives_empty: True
default_alone_clause/0.1 .follow: {'@' '{'}
case_selectors/0.1  -> ( Choice case_selectors/0.1/0 ε )
case_selectors/0.1 .reg_info.index: 1563
case_selectors/0.1 .first: {',' ε}
case_selectors/0.1 .derives_empty: True
case_selectors/0.1 .follow: {',' ':' '@' '{'}
case_selectors/0.2  -> ( Choice ',' ε )
case_selectors/0.2 .reg_info.index: 261
case_selectors/0.2 .first: {',' ε}
case_selectors/0.2 .derives_empty: True
case_selectors/0.2 .follow: {')' ':' '@' '{' '}'}
loop_statement/0.0  -> ( Choice loop_statement/0.0/0 ε )
loop_statement/0.0 .reg_info.index: 1568
loop_statement/0.0 .first: {'@' ε}
loop_statement/0.0 .derives_empty: True
loop_statement/0.0 .follow: {'loop'}
loop_statement/0.2  -> ( Choice loop_statement/0.2/0 ε )
loop_statement/0.2 .reg_info.index: 1572
loop_statement/0.2 .first: {'@' ε}
loop_statement/0.2 .derives_empty: True
loop_statement/0.2 .follow: {'{'}
loop_statement/0.4  -> ( Choice loop_statement/0.4/0 ε )
loop_statement/0.4 .reg_info.index: 1576
loop_statement/0.4 .first: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
loop_statement/0.4 .derives_empty: True
loop_statement/0.4 .follow: {'continuing' '}'}
loop_statement/0.5  -> ( Choice continuing_statement ε )
loop_statement/0.5 .reg_info.index: 474
loop_statement/0.5 .first: {'continuing' ε}
loop_statement/0.5 .derives_empty: True
loop_statement/0.5 .follow: {'}'}
for_statement/0.0  -> ( Choice for_statement/0.0/0 ε )
for_statement/0.0 .reg_info.index: 1581
for_statement/0.0 .first: {'@' ε}
for_statement/0.0 .derives_empty: True
for_statement/0.0 .follow: {'for'}
for_header/0.0  -> ( Choice for_init ε )
for_header/0.0 .reg_info.index: 479
for_header/0.0 .first: {'&' '(' '*' '_' 'array' 'atomic' 'bool' 'const' 'f16' 'f32' 'i32' 'let' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
for_header/0.0 .derives_empty: True
for_header/0.0 .follow: {';'}
for_header/0.2  -> ( Choice expression ε )
for_header/0.2 .reg_info.index: 480
for_header/0.2 .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/ ε}
for_header/0.2 .derives_empty: True
for_header/0.2 .follow: {';'}
for_header/0.4  -> ( Choice for_update ε )
for_header/0.4 .reg_info.index: 482
for_header/0.4 .first: {'&' '(' '*' '_' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
for_header/0.4 .derives_empty: True
for_header/0.4 .follow: {')'}
while_statement/0.0  -> ( Choice while_statement/0.0/0 ε )
while_statement/0.0 .reg_info.index: 1588
while_statement/0.0 .first: {'@' ε}
while_statement/0.0 .derives_empty: True
while_statement/0.0 .follow: {'while'}
continuing_compound_statement/0.0  -> ( Choice continuing_compound_statement/0.0/0 ε )
continuing_compound_statement/0.0 .reg_info.index: 1592
continuing_compound_statement/0.0 .first: {'@' ε}
continuing_compound_statement/0.0 .derives_empty: True
continuing_compound_statement/0.0 .follow: {'{'}
continuing_compound_statement/0.2  -> ( Choice continuing_compound_statement/0.2/0 ε )
continuing_compound_statement/0.2 .reg_info.index: 1596
continuing_compound_statement/0.2 .first: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
continuing_compound_statement/0.2 .derives_empty: True
continuing_compound_statement/0.2 .follow: {'break' '}'}
continuing_compound_statement/0.3  -> ( Choice break_if_statement ε )
continuing_compound_statement/0.3 .reg_info.index: 494
continuing_compound_statement/0.3 .first: {'break' ε}
continuing_compound_statement/0.3 .derives_empty: True
continuing_compound_statement/0.3 .follow: {'}'}
return_statement/0.1  -> ( Choice expression ε )
return_statement/0.1 .reg_info.index: 480
return_statement/0.1 .first: {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/ ε}
return_statement/0.1 .derives_empty: True
return_statement/0.1 .follow: {';'}
function_decl/0.0  -> ( Choice function_decl/0.0/0 ε )
function_decl/0.0 .reg_info.index: 1602
function_decl/0.0 .first: {'@' ε}
function_decl/0.0 .derives_empty: True
function_decl/0.0 .follow: {'fn'}
function_header/0.3  -> ( Choice param_list ε )
function_header/0.3 .reg_info.index: 521
function_header/0.3 .first: {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
function_header/0.3 .derives_empty: True
function_header/0.3 .follow: {')'}
function_header/0.5  -> ( Choice ( Seq '->' function_header/0.5/0.1 type_specifier ) ε )
function_header/0.5 .reg_info.index: 1609
function_header/0.5 .first: {'->' ε}
function_header/0.5 .derives_empty: True
function_header/0.5 .follow: {'@' '{'}
param_list/0.1  -> ( Choice param_list/0.1/0 ε )
param_list/0.1 .reg_info.index: 1613
param_list/0.1 .first: {',' ε}
param_list/0.1 .derives_empty: True
param_list/0.1 .follow: {')' ','}
param_list/0.2  -> ( Choice ',' ε )
param_list/0.2 .reg_info.index: 261
param_list/0.2 .first: {',' ε}
param_list/0.2 .derives_empty: True
param_list/0.2 .follow: {')' ':' '@' '{' '}'}
param/0.0  -> ( Choice param/0.0/0 ε )
param/0.0 .reg_info.index: 1618
param/0.0 .first: {'@' ε}
param/0.0 .derives_empty: True
param/0.0 .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_body/0.2/0  -> ( Choice ( Seq switch_clause switch_body/0.2/0 ) ε )
switch_body/0.2/0 .reg_info.index: 1451
switch_body/0.2/0 .first: {'case' 'default' ε}
switch_body/0.2/0 .derives_empty: True
switch_body/0.2/0 .follow: {'}'}
translation_unit/0.0/0  -> ( Choice ( Seq global_directive translation_unit/0.0/0 ) ε )
translation_unit/0.0/0 .reg_info.index: 1477
translation_unit/0.0/0 .first: {'diagnostic' 'enable' ε}
translation_unit/0.0/0 .derives_empty: True
translation_unit/0.0/0 .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.1/0  -> ( Choice ( Seq global_decl translation_unit/0.1/0 ) ε )
translation_unit/0.1/0 .reg_info.index: 1481
translation_unit/0.1/0 .first: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' ε}
translation_unit/0.1/0 .derives_empty: True
translation_unit/0.1/0 .follow: {EndOfText}
struct_body_decl/0.2/0  -> ( Choice ( Seq struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 ) ε )
struct_body_decl/0.2/0 .reg_info.index: 1637
struct_body_decl/0.2/0 .first: {',' ε}
struct_body_decl/0.2/0 .derives_empty: True
struct_body_decl/0.2/0 .follow: {',' '}'}
struct_member/0.0/0  -> ( Choice ( Seq attribute struct_member/0.0/0 ) ε )
struct_member/0.0/0 .reg_info.index: 1494
struct_member/0.0/0 .first: {'@' ε}
struct_member/0.0/0 .derives_empty: True
struct_member/0.0/0 .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
global_variable_decl/0.0/0  -> ( Choice ( Seq attribute global_variable_decl/0.0/0 ) ε )
global_variable_decl/0.0/0 .reg_info.index: 1508
global_variable_decl/0.0/0 .first: {'@' ε}
global_variable_decl/0.0/0 .derives_empty: True
global_variable_decl/0.0/0 .follow: {'var'}
global_constant_decl/1.0/0  -> ( Choice ( Seq attribute global_constant_decl/1.0/0 ) ε )
global_constant_decl/1.0/0 .reg_info.index: 1515
global_constant_decl/1.0/0 .first: {'@' ε}
global_constant_decl/1.0/0 .derives_empty: True
global_constant_decl/1.0/0 .follow: {'override'}
expression_comma_list/0.1/0  -> ( Choice ( Seq expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 ) ε )
expression_comma_list/0.1/0 .reg_info.index: 1656
expression_comma_list/0.1/0 .first: {',' ε}
expression_comma_list/0.1/0 .derives_empty: True
expression_comma_list/0.1/0 .follow: {')' ','}
compound_statement/0.0/0  -> ( Choice ( Seq attribute compound_statement/0.0/0 ) ε )
compound_statement/0.0/0 .reg_info.index: 1533
compound_statement/0.0/0 .first: {'@' ε}
compound_statement/0.0/0 .derives_empty: True
compound_statement/0.0/0 .follow: {'{'}
compound_statement/0.2/0  -> ( Choice ( Seq statement compound_statement/0.2/0 ) ε )
compound_statement/0.2/0 .reg_info.index: 1537
compound_statement/0.2/0 .first: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
compound_statement/0.2/0 .derives_empty: True
compound_statement/0.2/0 .follow: {'}'}
if_statement/0.0/0  -> ( Choice ( Seq attribute if_statement/0.0/0 ) ε )
if_statement/0.0/0 .reg_info.index: 1542
if_statement/0.0/0 .first: {'@' ε}
if_statement/0.0/0 .derives_empty: True
if_statement/0.0/0 .follow: {'if'}
if_statement/0.2/0  -> ( Choice ( Seq else_if_clause if_statement/0.2/0 ) ε )
if_statement/0.2/0 .reg_info.index: 1546
if_statement/0.2/0 .first: {'else' ε}
if_statement/0.2/0 .derives_empty: True
if_statement/0.2/0 .follow: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0/0  -> ( Choice ( Seq attribute switch_statement/0.0/0 ) ε )
switch_statement/0.0/0 .reg_info.index: 1551
switch_statement/0.0/0 .first: {'@' ε}
switch_statement/0.0/0 .derives_empty: True
switch_statement/0.0/0 .follow: {'switch'}
switch_body/0.0/0  -> ( Choice ( Seq attribute switch_body/0.0/0 ) ε )
switch_body/0.0/0 .reg_info.index: 1555
switch_body/0.0/0 .first: {'@' ε}
switch_body/0.0/0 .derives_empty: True
switch_body/0.0/0 .follow: {'{'}
case_selectors/0.1/0  -> ( Choice ( Seq case_selectors/0.1/0/0.0 case_selectors/0.1/0 ) ε )
case_selectors/0.1/0 .reg_info.index: 1687
case_selectors/0.1/0 .first: {',' ε}
case_selectors/0.1/0 .derives_empty: True
case_selectors/0.1/0 .follow: {',' ':' '@' '{'}
loop_statement/0.0/0  -> ( Choice ( Seq attribute loop_statement/0.0/0 ) ε )
loop_statement/0.0/0 .reg_info.index: 1566
loop_statement/0.0/0 .first: {'@' ε}
loop_statement/0.0/0 .derives_empty: True
loop_statement/0.0/0 .follow: {'loop'}
loop_statement/0.2/0  -> ( Choice ( Seq attribute loop_statement/0.2/0 ) ε )
loop_statement/0.2/0 .reg_info.index: 1570
loop_statement/0.2/0 .first: {'@' ε}
loop_statement/0.2/0 .derives_empty: True
loop_statement/0.2/0 .follow: {'{'}
loop_statement/0.4/0  -> ( Choice ( Seq statement loop_statement/0.4/0 ) ε )
loop_statement/0.4/0 .reg_info.index: 1574
loop_statement/0.4/0 .first: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
loop_statement/0.4/0 .derives_empty: True
loop_statement/0.4/0 .follow: {'continuing' '}'}
for_statement/0.0/0  -> ( Choice ( Seq attribute for_statement/0.0/0 ) ε )
for_statement/0.0/0 .reg_info.index: 1579
for_statement/0.0/0 .first: {'@' ε}
for_statement/0.0/0 .derives_empty: True
for_statement/0.0/0 .follow: {'for'}
while_statement/0.0/0  -> ( Choice ( Seq attribute while_statement/0.0/0 ) ε )
while_statement/0.0/0 .reg_info.index: 1586
while_statement/0.0/0 .first: {'@' ε}
while_statement/0.0/0 .derives_empty: True
while_statement/0.0/0 .follow: {'while'}
continuing_compound_statement/0.0/0  -> ( Choice ( Seq attribute continuing_compound_statement/0.0/0 ) ε )
continuing_compound_statement/0.0/0 .reg_info.index: 1590
continuing_compound_statement/0.0/0 .first: {'@' ε}
continuing_compound_statement/0.0/0 .derives_empty: True
continuing_compound_statement/0.0/0 .follow: {'{'}
continuing_compound_statement/0.2/0  -> ( Choice ( Seq statement continuing_compound_statement/0.2/0 ) ε )
continuing_compound_statement/0.2/0 .reg_info.index: 1594
continuing_compound_statement/0.2/0 .first: {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ε}
continuing_compound_statement/0.2/0 .derives_empty: True
continuing_compound_statement/0.2/0 .follow: {'break' '}'}
function_decl/0.0/0  -> ( Choice ( Seq attribute function_decl/0.0/0 ) ε )
function_decl/0.0/0 .reg_info.index: 1600
function_decl/0.0/0 .first: {'@' ε}
function_decl/0.0/0 .derives_empty: True
function_decl/0.0/0 .follow: {'fn'}
function_header/0.5/0.1  -> ( Choice function_header/0.5/0.1/0 ε )
function_header/0.5/0.1 .reg_info.index: 1735
function_header/0.5/0.1 .first: {'@' ε}
function_header/0.5/0.1 .derives_empty: True
function_header/0.5/0.1 .follow: {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.1/0  -> ( Choice ( Seq param_list/0.1/0/0.0 param_list/0.1/0 ) ε )
param_list/0.1/0 .reg_info.index: 1727
param_list/0.1/0 .first: {',' ε}
param_list/0.1/0 .derives_empty: True
param_list/0.1/0 .follow: {')' ','}
param/0.0/0  -> ( Choice ( Seq attribute param/0.0/0 ) ε )
param/0.0/0 .reg_info.index: 1616
param/0.0/0 .first: {'@' ε}
param/0.0/0 .derives_empty: True
param/0.0/0 .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.2/0/0.0  -> ( Choice ( Seq ',' struct_member ) )
struct_body_decl/0.2/0/0.0 .reg_info.index: 1633
struct_body_decl/0.2/0/0.0 .first: {','}
struct_body_decl/0.2/0/0.0 .derives_empty: False
struct_body_decl/0.2/0/0.0 .follow: {',' '}'}
expression_comma_list/0.1/0/0.0  -> ( Choice ( Seq ',' expression ) )
expression_comma_list/0.1/0/0.0 .reg_info.index: 1652
expression_comma_list/0.1/0/0.0 .first: {','}
expression_comma_list/0.1/0/0.0 .derives_empty: False
expression_comma_list/0.1/0/0.0 .follow: {')' ','}
case_selectors/0.1/0/0.0  -> ( Choice ( Seq ',' case_selector ) )
case_selectors/0.1/0/0.0 .reg_info.index: 1683
case_selectors/0.1/0/0.0 .first: {','}
case_selectors/0.1/0/0.0 .derives_empty: False
case_selectors/0.1/0/0.0 .follow: {',' ':' '@' '{'}
param_list/0.1/0/0.0  -> ( Choice ( Seq ',' param ) )
param_list/0.1/0/0.0 .reg_info.index: 1723
param_list/0.1/0/0.0 .first: {','}
param_list/0.1/0/0.0 .derives_empty: False
param_list/0.1/0/0.0 .follow: {')' ','}
function_header/0.5/0.1/0  -> ( Choice ( Seq attribute function_header/0.5/0.1/0 ) ε )
function_header/0.5/0.1/0 .reg_info.index: 1733
function_header/0.5/0.1/0 .first: {'@' ε}
function_header/0.5/0.1/0 .derives_empty: True
function_header/0.5/0.1/0 .follow: {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

=LALR1 item sets:
#0
language -> · translation_unit EndOfText : {EndOfText}
diagnostic_directive -> · 'diagnostic' diagnostic_control ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
enable_directive -> · 'enable' extension_name ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
global_directive -> · diagnostic_directive : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
global_directive -> · enable_directive : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit -> · translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> · translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#1
language -> translation_unit · EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 · translation_unit/0.1 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
const_assert_statement -> · 'const_assert' expression : {';'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · const_assert_statement ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · function_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · global_constant_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · global_variable_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · type_alias_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.1 -> · translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'alias' ident '=' type_specifier : {';'}

#3
translation_unit/0.0 -> translation_unit/0.0/0 · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#4
translation_unit/0.0/0 -> global_directive · translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
diagnostic_directive -> · 'diagnostic' diagnostic_control ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
enable_directive -> · 'enable' extension_name ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
global_directive -> · diagnostic_directive : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
global_directive -> · enable_directive : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#5
global_directive -> diagnostic_directive · : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}

#6
global_directive -> enable_directive · : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}

#7
diagnostic_directive -> 'diagnostic' · diagnostic_control ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
diagnostic_control -> · '(' severity_control_name ',' diagnostic_rule_name attrib_end : {';'}

#8
enable_directive -> 'enable' · extension_name ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
extension_name -> · 'f16' : {';'}

#9
enable_directive -> 'enable' extension_name · ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}

#10
extension_name -> 'f16' · : {';'}

#11
diagnostic_directive -> 'diagnostic' diagnostic_control · ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}

#12
diagnostic_control -> '(' · severity_control_name ',' diagnostic_rule_name attrib_end : {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
severity_control_name -> · 'error' : {','}
severity_control_name -> · 'info' : {','}
severity_control_name -> · 'off' : {','}
severity_control_name -> · 'warning' : {','}

#13
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#14
translation_unit -> translation_unit/0.0 translation_unit/0.1 · : {EndOfText}

#15
translation_unit/0.1 -> translation_unit/0.1/0 · : {EndOfText}

#16
translation_unit/0.1/0 -> global_decl · translation_unit/0.1/0 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
const_assert_statement -> · 'const_assert' expression : {';'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · const_assert_statement ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · function_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · global_constant_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · global_variable_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · type_alias_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'alias' ident '=' type_specifier : {';'}

#17
global_decl -> ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#18
global_decl -> global_variable_decl · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#19
global_decl -> global_constant_decl · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#20
global_decl -> type_alias_decl · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#21
global_decl -> struct_decl · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#22
global_decl -> function_decl · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#23
global_decl -> const_assert_statement · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#24
global_variable_decl -> global_variable_decl/0.0 · variable_decl global_variable_decl/0.2 : {';'}
variable_decl -> · 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}

#25
global_constant_decl -> 'const' · optionally_typed_ident '=' expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#26
global_constant_decl -> global_constant_decl/1.0 · 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}

#27
type_alias_decl -> 'alias' · ident '=' type_specifier : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'='}

#28
struct_decl -> 'struct' · ident struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}

#29
function_decl -> function_decl/0.0 · function_header compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_header -> · 'fn' ident '(' function_header/0.3 ')' function_header/0.5 : {'@' '{'}

#30
const_assert_statement -> 'const_assert' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#31
global_variable_decl/0.0 -> global_variable_decl/0.0/0 · : {'var'}

#32
global_constant_decl/1.0 -> global_constant_decl/1.0/0 · : {'override'}

#33
function_decl/0.0 -> function_decl/0.0/0 · : {'fn'}

#34
function_decl/0.0/0 -> attribute · function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> attribute · global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> attribute · global_variable_decl/0.0/0 : {'var'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}

#35
attribute -> '@' · 'align' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'binding' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'builtin' '(' builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'diagnostic' diagnostic_control : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'group' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'id' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'location' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' · 'workgroup_size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#36
attribute -> '@' 'align' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#37
attribute -> '@' 'binding' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#38
attribute -> '@' 'builtin' · '(' builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#39
attribute -> '@' 'const' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#40
attribute -> '@' 'diagnostic' · diagnostic_control : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
diagnostic_control -> · '(' severity_control_name ',' diagnostic_rule_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#41
attribute -> '@' 'group' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#42
attribute -> '@' 'id' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#43
attribute -> '@' 'interpolate' · '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'interpolate' · '(' interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#44
attribute -> '@' 'invariant' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#45
attribute -> '@' 'location' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#46
attribute -> '@' 'size' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#47
attribute -> '@' 'workgroup_size' · '(' expression ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'workgroup_size' · '(' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'workgroup_size' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#48
attribute -> '@' 'vertex' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#49
attribute -> '@' 'fragment' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#50
attribute -> '@' 'compute' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#51
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 · : {'var'}

#52
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 · : {'override'}

#53
function_decl/0.0/0 -> attribute function_decl/0.0/0 · : {'fn'}

#54
const_assert_statement -> 'const_assert' expression · : {';'}

#55
expression -> relational_expression · : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_and_expression -> relational_expression · : {'&&'}
short_circuit_or_expression -> relational_expression · : {'||'}

#56
expression -> short_circuit_or_expression · '||' relational_expression : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression · '||' relational_expression : {'||'}

#57
expression -> short_circuit_and_expression · '&&' relational_expression : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression · '&&' relational_expression : {'&&'}

#58
expression -> bitwise_expression · : {')' ',' ':' ';' '@' ']' '{'}

#59
relational_expression -> shift_expression · '!=' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> shift_expression · '==' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> shift_expression · : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> shift_expression · _greater_than shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> shift_expression · _greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> shift_expression · _less_than shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> shift_expression · _less_than_equal shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
_greater_than -> · /\u200B_greater_than/ : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
_greater_than_equal -> · /\u200B_greater_than_equal/ : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
_less_than -> · /\u200B_less_than/ : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
_less_than_equal -> · /\u200B_less_than_equal/ : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#60
binary_and_expression -> binary_and_expression · '&' unary_expression : {'&'}
bitwise_expression -> binary_and_expression · '&' unary_expression : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}

#61
binary_or_expression -> binary_or_expression · '|' unary_expression : {'|'}
bitwise_expression -> binary_or_expression · '|' unary_expression : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}

#62
binary_xor_expression -> binary_xor_expression · '^' unary_expression : {'^'}
bitwise_expression -> binary_xor_expression · '^' unary_expression : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}

#63
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> additive_expression · : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_operator -> · '+' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_operator -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#64
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> unary_expression · _shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> unary_expression · _shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
_shift_left -> · /\u200B_shift_left/ : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
_shift_right -> · /\u200B_shift_right/ : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#65
additive_expression -> multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multiplicative_operator -> · '%' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '/' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#66
unary_expression -> singular_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#67
unary_expression -> '-' · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#68
unary_expression -> '!' · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#69
unary_expression -> '~' · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#70
unary_expression -> '*' · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#71
unary_expression -> '&' · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#72
singular_expression -> primary_expression · singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
singular_expression/0.1 -> · component_or_swizzle_specifier : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#73
callable -> ident · : {'('}
primary_expression -> ident · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#74
primary_expression -> call_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#75
primary_expression -> literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#76
primary_expression -> paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#77
primary_expression -> 'bitcast' · _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
_disambiguate_template -> · /\u200B_disambiguate_template/ : {/\u200B_template_args_start/}

#78
ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' '(' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' '}' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#79
call_expression -> callable · argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#80
literal -> int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#81
literal -> float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#82
literal -> bool_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#83
paren_expression -> '(' · expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')'}
expression -> · relational_expression : {')'}
expression -> · short_circuit_and_expression '&&' relational_expression : {')'}
expression -> · short_circuit_or_expression '||' relational_expression : {')'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ')' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ')' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ')' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#84
callable -> type_specifier_without_ident · : {'('}

#85
callable -> vec_prefix · _disambiguate_template : {'('}
type_specifier_without_ident -> vec_prefix · _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
_disambiguate_template -> · /\u200B_disambiguate_template/ : {'(' /\u200B_template_args_start/}

#86
callable -> mat_prefix · _disambiguate_template : {'('}
type_specifier_without_ident -> mat_prefix · _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
_disambiguate_template -> · /\u200B_disambiguate_template/ : {'(' /\u200B_template_args_start/}

#87
array_type_specifier -> 'array' · _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
callable -> 'array' · _disambiguate_template : {'('}
_disambiguate_template -> · /\u200B_disambiguate_template/ : {'(' /\u200B_template_args_start/}

#88
int_literal -> decimal_int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#89
int_literal -> hex_int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#90
float_literal -> decimal_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#91
float_literal -> hex_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#92
bool_literal -> 'true' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#93
bool_literal -> 'false' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#94
type_specifier_without_ident -> 'bool' · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#95
type_specifier_without_ident -> 'f32' · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#96
type_specifier_without_ident -> 'f16' · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#97
type_specifier_without_ident -> 'i32' · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#98
type_specifier_without_ident -> 'u32' · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#99
type_specifier_without_ident -> 'ptr' · _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_disambiguate_template -> · /\u200B_disambiguate_template/ : {/\u200B_template_args_start/}

#100
type_specifier_without_ident -> array_type_specifier · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#101
type_specifier_without_ident -> 'atomic' · _disambiguate_template _template_args_start type_specifier _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_disambiguate_template -> · /\u200B_disambiguate_template/ : {/\u200B_template_args_start/}

#102
type_specifier_without_ident -> texture_and_sampler_types · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#103
vec_prefix -> 'vec2' · : {/\u200B_disambiguate_template/}

#104
vec_prefix -> 'vec3' · : {/\u200B_disambiguate_template/}

#105
vec_prefix -> 'vec4' · : {/\u200B_disambiguate_template/}

#106
mat_prefix -> 'mat2x2' · : {/\u200B_disambiguate_template/}

#107
mat_prefix -> 'mat2x3' · : {/\u200B_disambiguate_template/}

#108
mat_prefix -> 'mat2x4' · : {/\u200B_disambiguate_template/}

#109
mat_prefix -> 'mat3x2' · : {/\u200B_disambiguate_template/}

#110
mat_prefix -> 'mat3x3' · : {/\u200B_disambiguate_template/}

#111
mat_prefix -> 'mat3x4' · : {/\u200B_disambiguate_template/}

#112
mat_prefix -> 'mat4x2' · : {/\u200B_disambiguate_template/}

#113
mat_prefix -> 'mat4x3' · : {/\u200B_disambiguate_template/}

#114
mat_prefix -> 'mat4x4' · : {/\u200B_disambiguate_template/}

#115
decimal_int_literal -> /0[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#116
decimal_int_literal -> /[1-9][0-9]*[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#117
hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#118
decimal_float_literal -> /0[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#119
decimal_float_literal -> /[1-9][0-9]*[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#120
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#121
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#122
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#123
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#124
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#125
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#126
texture_and_sampler_types -> sampler_type · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#127
texture_and_sampler_types -> depth_texture_type · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#128
texture_and_sampler_types -> sampled_texture_type · _disambiguate_template _template_args_start type_specifier _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_disambiguate_template -> · /\u200B_disambiguate_template/ : {/\u200B_template_args_start/}

#129
texture_and_sampler_types -> multisampled_texture_type · _disambiguate_template _template_args_start type_specifier _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_disambiguate_template -> · /\u200B_disambiguate_template/ : {/\u200B_template_args_start/}

#130
texture_and_sampler_types -> storage_texture_type · _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_disambiguate_template -> · /\u200B_disambiguate_template/ : {/\u200B_template_args_start/}

#131
sampler_type -> 'sampler' · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#132
sampler_type -> 'sampler_comparison' · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#133
depth_texture_type -> 'texture_depth_2d' · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#134
depth_texture_type -> 'texture_depth_2d_array' · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#135
depth_texture_type -> 'texture_depth_cube' · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#136
depth_texture_type -> 'texture_depth_cube_array' · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#137
depth_texture_type -> 'texture_depth_multisampled_2d' · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#138
sampled_texture_type -> 'texture_1d' · : {/\u200B_disambiguate_template/}

#139
sampled_texture_type -> 'texture_2d' · : {/\u200B_disambiguate_template/}

#140
sampled_texture_type -> 'texture_2d_array' · : {/\u200B_disambiguate_template/}

#141
sampled_texture_type -> 'texture_3d' · : {/\u200B_disambiguate_template/}

#142
sampled_texture_type -> 'texture_cube' · : {/\u200B_disambiguate_template/}

#143
sampled_texture_type -> 'texture_cube_array' · : {/\u200B_disambiguate_template/}

#144
multisampled_texture_type -> 'texture_multisampled_2d' · : {/\u200B_disambiguate_template/}

#145
storage_texture_type -> 'texture_storage_1d' · : {/\u200B_disambiguate_template/}

#146
storage_texture_type -> 'texture_storage_2d' · : {/\u200B_disambiguate_template/}

#147
storage_texture_type -> 'texture_storage_2d_array' · : {/\u200B_disambiguate_template/}

#148
storage_texture_type -> 'texture_storage_3d' · : {/\u200B_disambiguate_template/}

#149
function_decl -> function_decl/0.0 function_header · compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#150
function_header -> 'fn' · ident '(' function_header/0.3 ')' function_header/0.5 : {'@' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}

#151
struct_decl -> 'struct' ident · struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl -> · '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#152
type_alias_decl -> 'alias' ident · '=' type_specifier : {';'}

#153
global_constant_decl -> global_constant_decl/1.0 'override' · optionally_typed_ident global_constant_decl/1.3 : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {';' '='}

#154
global_constant_decl -> 'const' optionally_typed_ident · '=' expression : {';'}

#155
optionally_typed_ident -> ident · optionally_typed_ident/0.1 : {';' '='}
optionally_typed_ident/0.1 -> · ':' type_specifier : {';' '='}

#156
global_variable_decl -> global_variable_decl/0.0 variable_decl · global_variable_decl/0.2 : {';'}
global_variable_decl/0.2 -> · '=' expression : {';'}

#157
variable_decl -> 'var' · _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}
_disambiguate_template -> · /\u200B_disambiguate_template/ : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_template_args_start/}

#158
global_decl -> const_assert_statement ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#159
global_decl -> type_alias_decl ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#160
global_decl -> global_constant_decl ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#161
global_decl -> global_variable_decl ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#162
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 · : {EndOfText}

#163
diagnostic_control -> '(' severity_control_name · ',' diagnostic_rule_name attrib_end : {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#164
severity_control_name -> 'error' · : {','}

#165
severity_control_name -> 'warning' · : {','}

#166
severity_control_name -> 'info' · : {','}

#167
severity_control_name -> 'off' · : {','}

#168
diagnostic_directive -> 'diagnostic' diagnostic_control ';' · : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}

#169
enable_directive -> 'enable' extension_name ';' · : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}

#170
diagnostic_control -> '(' severity_control_name ',' · diagnostic_rule_name attrib_end : {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
diagnostic_rule_name -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' ','}

#171
variable_decl -> 'var' _disambiguate_template · variable_decl/0.2 optionally_typed_ident : {';' '='}
_template_args_start -> · /\u200B_template_args_start/ : {'function' 'private' 'storage' 'uniform' 'workgroup'}
variable_decl/0.2 -> · variable_qualifier : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier -> · _template_args_start address_space variable_qualifier/0.2 _template_args_end : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#172
_disambiguate_template -> /\u200B_disambiguate_template/ · : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_template_args_start/}

#173
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 · : {';'}

#174
global_variable_decl/0.2 -> '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#175
optionally_typed_ident -> ident optionally_typed_ident/0.1 · : {';' '='}

#176
optionally_typed_ident/0.1 -> ':' · type_specifier : {';' '='}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {';' '='}
depth_texture_type -> · 'texture_depth_2d' : {';' '='}
depth_texture_type -> · 'texture_depth_2d_array' : {';' '='}
depth_texture_type -> · 'texture_depth_cube' : {';' '='}
depth_texture_type -> · 'texture_depth_cube_array' : {';' '='}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';' '='}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {';' '='}
sampler_type -> · 'sampler_comparison' : {';' '='}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {';' '='}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {';' '='}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {';' '='}
texture_and_sampler_types -> · sampler_type : {';' '='}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {';' '='}
type_specifier -> · ident : {';' '='}
type_specifier -> · type_specifier_without_ident : {';' '='}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {';' '='}
type_specifier_without_ident -> · 'bool' : {';' '='}
type_specifier_without_ident -> · 'f16' : {';' '='}
type_specifier_without_ident -> · 'f32' : {';' '='}
type_specifier_without_ident -> · 'i32' : {';' '='}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {';' '='}
type_specifier_without_ident -> · 'u32' : {';' '='}
type_specifier_without_ident -> · array_type_specifier : {';' '='}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {';' '='}
type_specifier_without_ident -> · texture_and_sampler_types : {';' '='}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {';' '='}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#177
global_constant_decl -> 'const' optionally_typed_ident '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#178
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident · global_constant_decl/1.3 : {';'}
global_constant_decl/1.3 -> · '=' expression : {';'}

#179
type_alias_decl -> 'alias' ident '=' · type_specifier : {';'}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {';'}
depth_texture_type -> · 'texture_depth_2d' : {';'}
depth_texture_type -> · 'texture_depth_2d_array' : {';'}
depth_texture_type -> · 'texture_depth_cube' : {';'}
depth_texture_type -> · 'texture_depth_cube_array' : {';'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';'}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {';'}
sampler_type -> · 'sampler_comparison' : {';'}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {';'}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {';'}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {';'}
texture_and_sampler_types -> · sampler_type : {';'}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {';'}
type_specifier -> · ident : {';'}
type_specifier -> · type_specifier_without_ident : {';'}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {';'}
type_specifier_without_ident -> · 'bool' : {';'}
type_specifier_without_ident -> · 'f16' : {';'}
type_specifier_without_ident -> · 'f32' : {';'}
type_specifier_without_ident -> · 'i32' : {';'}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {';'}
type_specifier_without_ident -> · 'u32' : {';'}
type_specifier_without_ident -> · array_type_specifier : {';'}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {';'}
type_specifier_without_ident -> · texture_and_sampler_types : {';'}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {';'}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#180
struct_decl -> 'struct' ident struct_body_decl · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#181
struct_body_decl -> '{' · struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {',' '}'}
struct_member/0.0 -> · struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#182
function_header -> 'fn' ident · '(' function_header/0.3 ')' function_header/0.5 : {'@' '{'}

#183
function_decl -> function_decl/0.0 function_header compound_statement · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#184
compound_statement -> compound_statement/0.0 · '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'alias' 'array' 'atomic' 'bool' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#185
compound_statement/0.0 -> compound_statement/0.0/0 · : {'{'}

#186
compound_statement/0.0/0 -> attribute · compound_statement/0.0/0 : {'{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#187
texture_and_sampler_types -> storage_texture_type _disambiguate_template · _template_args_start texel_format ',' access_mode _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_template_args_start -> · /\u200B_template_args_start/ : {'bgra8unorm' 'r32float' 'r32sint' 'r32uint' 'rg32float' 'rg32sint' 'rg32uint' 'rgba16float' 'rgba16sint' 'rgba16uint' 'rgba32float' 'rgba32sint' 'rgba32uint' 'rgba8sint' 'rgba8snorm' 'rgba8uint' 'rgba8unorm'}

#188
texture_and_sampler_types -> multisampled_texture_type _disambiguate_template · _template_args_start type_specifier _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_template_args_start -> · /\u200B_template_args_start/ : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#189
texture_and_sampler_types -> sampled_texture_type _disambiguate_template · _template_args_start type_specifier _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_template_args_start -> · /\u200B_template_args_start/ : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#190
type_specifier_without_ident -> 'atomic' _disambiguate_template · _template_args_start type_specifier _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_template_args_start -> · /\u200B_template_args_start/ : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#191
type_specifier_without_ident -> 'ptr' _disambiguate_template · _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_template_args_start -> · /\u200B_template_args_start/ : {'function' 'private' 'storage' 'uniform' 'workgroup'}

#192
array_type_specifier -> 'array' _disambiguate_template · _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
callable -> 'array' _disambiguate_template · : {'('}
_template_args_start -> · /\u200B_template_args_start/ : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#193
callable -> mat_prefix _disambiguate_template · : {'('}
type_specifier_without_ident -> mat_prefix _disambiguate_template · _template_args_start type_specifier _template_args_end : {'('}
_template_args_start -> · /\u200B_template_args_start/ : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#194
callable -> vec_prefix _disambiguate_template · : {'('}
type_specifier_without_ident -> vec_prefix _disambiguate_template · _template_args_start type_specifier _template_args_end : {'('}
_template_args_start -> · /\u200B_template_args_start/ : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#195
paren_expression -> '(' expression · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#196
call_expression -> callable argument_expression_list · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#197
argument_expression_list -> '(' · argument_expression_list/0.1 ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
argument_expression_list/0.1 -> · expression_comma_list : {')'}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
expression_comma_list -> · expression expression_comma_list/0.1 expression_comma_list/0.2 : {')'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#198
primary_expression -> 'bitcast' _disambiguate_template · _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
_template_args_start -> · /\u200B_template_args_start/ : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#199
singular_expression -> primary_expression singular_expression/0.1 · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#200
singular_expression/0.1 -> component_or_swizzle_specifier · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#201
component_or_swizzle_specifier -> '[' · expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '==' ']' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '==' ']' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {']'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {']'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {']'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {']'}
expression -> · relational_expression : {']'}
expression -> · short_circuit_and_expression '&&' relational_expression : {']'}
expression -> · short_circuit_or_expression '||' relational_expression : {']'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' ']' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' ']' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ']' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '==' ']' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' '==' ']' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' '==' ']' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#202
component_or_swizzle_specifier -> '.' · member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> '.' · swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
swizzle_name -> · '/[rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
swizzle_name -> · '/[rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
swizzle_name -> · '/[rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
swizzle_name -> · '/[rgba][rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
swizzle_name -> · '/[xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
swizzle_name -> · '/[xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
swizzle_name -> · '/[xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
swizzle_name -> · '/[xyzw][xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#203
unary_expression -> '&' unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#204
unary_expression -> '*' unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#205
unary_expression -> '~' unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#206
unary_expression -> '!' unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#207
unary_expression -> '-' unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#208
multiplicative_expression -> multiplicative_expression multiplicative_operator · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> · call_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> · literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#209
multiplicative_operator -> '*' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#210
multiplicative_operator -> '/' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#211
multiplicative_operator -> '%' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#212
shift_expression -> unary_expression _shift_left · unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
call_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
int_literal -> · decimal_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
int_literal -> · hex_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
primary_expression -> · call_expression : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
primary_expression -> · literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
unary_expression -> · '&' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
unary_expression -> · '*' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
unary_expression -> · '-' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
unary_expression -> · '~' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#213
shift_expression -> unary_expression _shift_right · unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
call_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
int_literal -> · decimal_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
int_literal -> · hex_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
primary_expression -> · call_expression : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
primary_expression -> · literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
unary_expression -> · '&' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
unary_expression -> · '*' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
unary_expression -> · '-' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
unary_expression -> · '~' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#214
_shift_left -> /\u200B_shift_left/ · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#215
_shift_right -> /\u200B_shift_right/ · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#216
additive_expression -> additive_expression additive_operator · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> · call_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> · literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#217
additive_operator -> '+' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#218
additive_operator -> '-' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#219
binary_xor_expression -> binary_xor_expression '^' · unary_expression : {'^'}
bitwise_expression -> binary_xor_expression '^' · unary_expression : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
call_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
int_literal -> · hex_int_literal : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
literal -> · bool_literal : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
literal -> · float_literal : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
literal -> · int_literal : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
primary_expression -> · call_expression : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
primary_expression -> · ident : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
primary_expression -> · literal : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '@' ']' '^' '{' /\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {')' ',' ':' ';' '@' ']' '^' '{' /\u200B_template_args_end/}
unary_expression -> · '&' unary_expression : {')' ',' ':' ';' '@' ']' '^' '{' /\u200B_template_args_end/}
unary_expression -> · '*' unary_expression : {')' ',' ':' ';' '@' ']' '^' '{' /\u200B_template_args_end/}
unary_expression -> · '-' unary_expression : {')' ',' ':' ';' '@' ']' '^' '{' /\u200B_template_args_end/}
unary_expression -> · '~' unary_expression : {')' ',' ':' ';' '@' ']' '^' '{' /\u200B_template_args_end/}
unary_expression -> · singular_expression : {')' ',' ':' ';' '@' ']' '^' '{' /\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#220
binary_or_expression -> binary_or_expression '|' · unary_expression : {'|'}
bitwise_expression -> binary_or_expression '|' · unary_expression : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
call_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
int_literal -> · hex_int_literal : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
literal -> · bool_literal : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
literal -> · float_literal : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
literal -> · int_literal : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
primary_expression -> · call_expression : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
primary_expression -> · ident : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
primary_expression -> · literal : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '@' ']' '{' '|' /\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {')' ',' ':' ';' '@' ']' '{' '|' /\u200B_template_args_end/}
unary_expression -> · '&' unary_expression : {')' ',' ':' ';' '@' ']' '{' '|' /\u200B_template_args_end/}
unary_expression -> · '*' unary_expression : {')' ',' ':' ';' '@' ']' '{' '|' /\u200B_template_args_end/}
unary_expression -> · '-' unary_expression : {')' ',' ':' ';' '@' ']' '{' '|' /\u200B_template_args_end/}
unary_expression -> · '~' unary_expression : {')' ',' ':' ';' '@' ']' '{' '|' /\u200B_template_args_end/}
unary_expression -> · singular_expression : {')' ',' ':' ';' '@' ']' '{' '|' /\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#221
binary_and_expression -> binary_and_expression '&' · unary_expression : {'&'}
bitwise_expression -> binary_and_expression '&' · unary_expression : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
bool_literal -> · 'true' : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
call_expression -> · callable argument_expression_list : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
decimal_int_literal -> · /0[iu]?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
float_literal -> · hex_float_literal : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'&' '(' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
int_literal -> · decimal_int_literal : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
int_literal -> · hex_int_literal : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
literal -> · bool_literal : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
literal -> · float_literal : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
literal -> · int_literal : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
primary_expression -> · call_expression : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
primary_expression -> · ident : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
primary_expression -> · literal : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
primary_expression -> · paren_expression : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'&' ')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'&' ')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
unary_expression -> · '&' unary_expression : {'&' ')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
unary_expression -> · '*' unary_expression : {'&' ')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
unary_expression -> · '-' unary_expression : {'&' ')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
unary_expression -> · '~' unary_expression : {'&' ')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
unary_expression -> · singular_expression : {'&' ')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#222
relational_expression -> shift_expression _less_than · shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression _shift_left unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression _shift_right unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#223
relational_expression -> shift_expression _greater_than · shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression _shift_left unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression _shift_right unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#224
relational_expression -> shift_expression _less_than_equal · shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression _shift_left unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression _shift_right unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#225
relational_expression -> shift_expression _greater_than_equal · shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression _shift_left unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression _shift_right unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#226
relational_expression -> shift_expression '==' · shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression _shift_left unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression _shift_right unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#227
relational_expression -> shift_expression '!=' · shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||'}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression _shift_left unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> · unary_expression _shift_right unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#228
_less_than -> /\u200B_less_than/ · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#229
_greater_than -> /\u200B_greater_than/ · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#230
_less_than_equal -> /\u200B_less_than_equal/ · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#231
_greater_than_equal -> /\u200B_greater_than_equal/ · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#232
expression -> short_circuit_and_expression '&&' · relational_expression : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression '&&' · relational_expression : {'&&'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> · shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#233
expression -> short_circuit_or_expression '||' · relational_expression : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression '||' · relational_expression : {'||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
bool_literal -> · 'false' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> · shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#234
attribute -> '@' 'workgroup_size' '(' · expression ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'workgroup_size' '(' · expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'workgroup_size' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#235
attribute -> '@' 'size' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#236
attribute -> '@' 'location' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#237
attribute -> '@' 'interpolate' '(' · interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'interpolate' '(' · interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
interpolation_type_name -> · 'flat' : {')' ','}
interpolation_type_name -> · 'linear' : {')' ','}
interpolation_type_name -> · 'perspective' : {')' ','}

#238
attribute -> '@' 'id' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#239
attribute -> '@' 'group' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#240
attribute -> '@' 'diagnostic' diagnostic_control · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#241
attribute -> '@' 'builtin' '(' · builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
builtin_value_name -> · 'frag_depth' : {')' ','}
builtin_value_name -> · 'front_facing' : {')' ','}
builtin_value_name -> · 'global_invocation_id' : {')' ','}
builtin_value_name -> · 'instance_index' : {')' ','}
builtin_value_name -> · 'local_invocation_id' : {')' ','}
builtin_value_name -> · 'local_invocation_index' : {')' ','}
builtin_value_name -> · 'num_workgroups' : {')' ','}
builtin_value_name -> · 'position' : {')' ','}
builtin_value_name -> · 'sample_index' : {')' ','}
builtin_value_name -> · 'sample_mask' : {')' ','}
builtin_value_name -> · 'vertex_index' : {')' ','}
builtin_value_name -> · 'workgroup_id' : {')' ','}

#242
attribute -> '@' 'binding' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#243
attribute -> '@' 'align' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#244
attribute -> '@' 'align' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#245
attribute -> '@' 'binding' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#246
attribute -> '@' 'builtin' '(' builtin_value_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#247
builtin_value_name -> 'vertex_index' · : {')' ','}

#248
builtin_value_name -> 'instance_index' · : {')' ','}

#249
builtin_value_name -> 'position' · : {')' ','}

#250
builtin_value_name -> 'front_facing' · : {')' ','}

#251
builtin_value_name -> 'frag_depth' · : {')' ','}

#252
builtin_value_name -> 'local_invocation_id' · : {')' ','}

#253
builtin_value_name -> 'local_invocation_index' · : {')' ','}

#254
builtin_value_name -> 'global_invocation_id' · : {')' ','}

#255
builtin_value_name -> 'workgroup_id' · : {')' ','}

#256
builtin_value_name -> 'num_workgroups' · : {')' ','}

#257
builtin_value_name -> 'sample_index' · : {')' ','}

#258
builtin_value_name -> 'sample_mask' · : {')' ','}

#259
attribute -> '@' 'group' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#260
attribute -> '@' 'id' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#261
attribute -> '@' 'interpolate' '(' interpolation_type_name · ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'interpolate' '(' interpolation_type_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#262
interpolation_type_name -> 'perspective' · : {')' ','}

#263
interpolation_type_name -> 'linear' · : {')' ','}

#264
interpolation_type_name -> 'flat' · : {')' ','}

#265
attribute -> '@' 'location' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#266
attribute -> '@' 'size' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#267
attribute -> '@' 'workgroup_size' '(' expression · ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'workgroup_size' '(' expression · ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'workgroup_size' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#268
expression -> short_circuit_or_expression '||' relational_expression · : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression '||' relational_expression · : {'||'}

#269
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> unary_expression · _shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> unary_expression · _shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
_shift_left -> · /\u200B_shift_left/ : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
_shift_right -> · /\u200B_shift_right/ : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#270
expression -> short_circuit_and_expression '&&' relational_expression · : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression '&&' relational_expression · : {'&&'}

#271
relational_expression -> shift_expression '!=' shift_expression · : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}

#272
relational_expression -> shift_expression '==' shift_expression · : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}

#273
relational_expression -> shift_expression _greater_than_equal shift_expression · : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}

#274
relational_expression -> shift_expression _less_than_equal shift_expression · : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}

#275
relational_expression -> shift_expression _greater_than shift_expression · : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}

#276
relational_expression -> shift_expression _less_than shift_expression · : {'&&' ')' ',' ':' ';' '@' ']' '{' '||'}

#277
binary_and_expression -> binary_and_expression '&' unary_expression · : {'&'}
bitwise_expression -> binary_and_expression '&' unary_expression · : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}

#278
binary_or_expression -> binary_or_expression '|' unary_expression · : {'|'}
bitwise_expression -> binary_or_expression '|' unary_expression · : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}

#279
binary_xor_expression -> binary_xor_expression '^' unary_expression · : {'^'}
bitwise_expression -> binary_xor_expression '^' unary_expression · : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}

#280
additive_expression -> additive_expression additive_operator multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multiplicative_operator -> · '%' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '/' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#281
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}

#282
shift_expression -> unary_expression _shift_right unary_expression · : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}

#283
shift_expression -> unary_expression _shift_left unary_expression · : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}

#284
multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}

#285
component_or_swizzle_specifier -> '.' member_ident · component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier/1.2 -> · component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#286
component_or_swizzle_specifier -> '.' swizzle_name · component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier/2.2 -> · component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#287
member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#288
swizzle_name -> '/[rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#289
swizzle_name -> '/[rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#290
swizzle_name -> '/[rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#291
swizzle_name -> '/[rgba][rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#292
swizzle_name -> '/[xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#293
swizzle_name -> '/[xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#294
swizzle_name -> '/[xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#295
swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#296
component_or_swizzle_specifier -> '[' expression · ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#297
primary_expression -> 'bitcast' _disambiguate_template _template_args_start · type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d_array' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_cube' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_cube_array' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {/\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {/\u200B_template_args_end/}
sampler_type -> · 'sampler_comparison' : {/\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {/\u200B_template_args_end/}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
texture_and_sampler_types -> · sampler_type : {/\u200B_template_args_end/}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {/\u200B_template_args_end/}
type_specifier -> · ident : {/\u200B_template_args_end/}
type_specifier -> · type_specifier_without_ident : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'bool' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'f16' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'f32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'i32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'u32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · array_type_specifier : {/\u200B_template_args_end/}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · texture_and_sampler_types : {/\u200B_template_args_end/}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#298
_template_args_start -> /\u200B_template_args_start/ · : {'array' 'atomic' 'bgra8unorm' 'bool' 'f16' 'f32' 'function' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'private' 'ptr' 'r32float' 'r32sint' 'r32uint' 'rg32float' 'rg32sint' 'rg32uint' 'rgba16float' 'rgba16sint' 'rgba16uint' 'rgba32float' 'rgba32sint' 'rgba32uint' 'rgba8sint' 'rgba8snorm' 'rgba8uint' 'rgba8unorm' 'sampler' 'sampler_comparison' 'storage' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'uniform' 'vec2' 'vec3' 'vec4' 'workgroup' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#299
argument_expression_list -> '(' argument_expression_list/0.1 · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#300
argument_expression_list/0.1 -> expression_comma_list · : {')'}

#301
expression_comma_list -> expression · expression_comma_list/0.1 expression_comma_list/0.2 : {')'}
expression_comma_list/0.1 -> · expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {')' ','}

#302
paren_expression -> '(' expression ')' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#303
type_specifier_without_ident -> vec_prefix _disambiguate_template _template_args_start · type_specifier _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d_array' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_cube' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_cube_array' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {/\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {/\u200B_template_args_end/}
sampler_type -> · 'sampler_comparison' : {/\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {/\u200B_template_args_end/}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
texture_and_sampler_types -> · sampler_type : {/\u200B_template_args_end/}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {/\u200B_template_args_end/}
type_specifier -> · ident : {/\u200B_template_args_end/}
type_specifier -> · type_specifier_without_ident : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'bool' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'f16' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'f32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'i32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'u32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · array_type_specifier : {/\u200B_template_args_end/}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · texture_and_sampler_types : {/\u200B_template_args_end/}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#304
type_specifier_without_ident -> mat_prefix _disambiguate_template _template_args_start · type_specifier _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d_array' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_cube' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_cube_array' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {/\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {/\u200B_template_args_end/}
sampler_type -> · 'sampler_comparison' : {/\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {/\u200B_template_args_end/}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
texture_and_sampler_types -> · sampler_type : {/\u200B_template_args_end/}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {/\u200B_template_args_end/}
type_specifier -> · ident : {/\u200B_template_args_end/}
type_specifier -> · type_specifier_without_ident : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'bool' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'f16' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'f32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'i32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'u32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · array_type_specifier : {/\u200B_template_args_end/}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · texture_and_sampler_types : {/\u200B_template_args_end/}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#305
array_type_specifier -> 'array' _disambiguate_template _template_args_start · type_specifier array_type_specifier/0.4 _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {',' /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {',' /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d_array' : {',' /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_cube' : {',' /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_cube_array' : {',' /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' /\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' /\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {',' /\u200B_template_args_end/}
sampler_type -> · 'sampler_comparison' : {',' /\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {',' /\u200B_template_args_end/}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {',' /\u200B_template_args_end/}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {',' /\u200B_template_args_end/}
texture_and_sampler_types -> · sampler_type : {',' /\u200B_template_args_end/}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {',' /\u200B_template_args_end/}
type_specifier -> · ident : {',' /\u200B_template_args_end/}
type_specifier -> · type_specifier_without_ident : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · 'bool' : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · 'f16' : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · 'f32' : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · 'i32' : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · 'u32' : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · array_type_specifier : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · texture_and_sampler_types : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {',' /\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#306
type_specifier_without_ident -> 'ptr' _disambiguate_template _template_args_start · address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
address_space -> · 'function' : {','}
address_space -> · 'private' : {','}
address_space -> · 'storage' : {','}
address_space -> · 'uniform' : {','}
address_space -> · 'workgroup' : {','}

#307
type_specifier_without_ident -> 'atomic' _disambiguate_template _template_args_start · type_specifier _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d_array' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_cube' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_cube_array' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {/\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {/\u200B_template_args_end/}
sampler_type -> · 'sampler_comparison' : {/\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {/\u200B_template_args_end/}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
texture_and_sampler_types -> · sampler_type : {/\u200B_template_args_end/}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {/\u200B_template_args_end/}
type_specifier -> · ident : {/\u200B_template_args_end/}
type_specifier -> · type_specifier_without_ident : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'bool' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'f16' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'f32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'i32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'u32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · array_type_specifier : {/\u200B_template_args_end/}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · texture_and_sampler_types : {/\u200B_template_args_end/}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#308
texture_and_sampler_types -> sampled_texture_type _disambiguate_template _template_args_start · type_specifier _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d_array' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_cube' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_cube_array' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {/\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {/\u200B_template_args_end/}
sampler_type -> · 'sampler_comparison' : {/\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {/\u200B_template_args_end/}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
texture_and_sampler_types -> · sampler_type : {/\u200B_template_args_end/}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {/\u200B_template_args_end/}
type_specifier -> · ident : {/\u200B_template_args_end/}
type_specifier -> · type_specifier_without_ident : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'bool' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'f16' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'f32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'i32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'u32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · array_type_specifier : {/\u200B_template_args_end/}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · texture_and_sampler_types : {/\u200B_template_args_end/}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#309
texture_and_sampler_types -> multisampled_texture_type _disambiguate_template _template_args_start · type_specifier _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d_array' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_cube' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_cube_array' : {/\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {/\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {/\u200B_template_args_end/}
sampler_type -> · 'sampler_comparison' : {/\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {/\u200B_template_args_end/}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
texture_and_sampler_types -> · sampler_type : {/\u200B_template_args_end/}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {/\u200B_template_args_end/}
type_specifier -> · ident : {/\u200B_template_args_end/}
type_specifier -> · type_specifier_without_ident : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'bool' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'f16' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'f32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'i32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · 'u32' : {/\u200B_template_args_end/}
type_specifier_without_ident -> · array_type_specifier : {/\u200B_template_args_end/}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
type_specifier_without_ident -> · texture_and_sampler_types : {/\u200B_template_args_end/}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {/\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#310
texture_and_sampler_types -> storage_texture_type _disambiguate_template _template_args_start · texel_format ',' access_mode _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
texel_format -> · 'bgra8unorm' : {','}
texel_format -> · 'r32float' : {','}
texel_format -> · 'r32sint' : {','}
texel_format -> · 'r32uint' : {','}
texel_format -> · 'rg32float' : {','}
texel_format -> · 'rg32sint' : {','}
texel_format -> · 'rg32uint' : {','}
texel_format -> · 'rgba16float' : {','}
texel_format -> · 'rgba16sint' : {','}
texel_format -> · 'rgba16uint' : {','}
texel_format -> · 'rgba32float' : {','}
texel_format -> · 'rgba32sint' : {','}
texel_format -> · 'rgba32uint' : {','}
texel_format -> · 'rgba8sint' : {','}
texel_format -> · 'rgba8snorm' : {','}
texel_format -> · 'rgba8uint' : {','}
texel_format -> · 'rgba8unorm' : {','}

#311
compound_statement/0.0/0 -> attribute compound_statement/0.0/0 · : {'{'}

#312
compound_statement -> compound_statement/0.0 '{' · compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'alias' 'array' 'atomic' 'bool' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'compute' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'const' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'fragment' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'invariant' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'vertex' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> · 'break' : {';'}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}
compound_statement/0.2 -> · compound_statement/0.2/0 : {'}'}
compound_statement/0.2/0 -> · statement compound_statement/0.2/0 : {'}'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> · for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {'for'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> · if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {'if'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> · loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {'loop'}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> · switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {'switch'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
variable_decl -> · 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> · while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {'while'}

#313
function_header -> 'fn' ident '(' · function_header/0.3 ')' function_header/0.5 : {'@' '{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.3 -> · param_list : {')'}
param -> · param/0.0 ident ':' type_specifier : {')' ','}
param/0.0 -> · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list -> · param param_list/0.1 param_list/0.2 : {')'}

#314
struct_body_decl -> '{' struct_member · struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl/0.2 -> · struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {',' '}'}

#315
struct_member -> struct_member/0.0 · member_ident ':' type_specifier : {',' '}'}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}

#316
struct_member/0.0 -> struct_member/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#317
struct_member/0.0/0 -> attribute · struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#318
type_alias_decl -> 'alias' ident '=' type_specifier · : {';'}

#319
type_specifier -> ident · : {')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#320
type_specifier -> type_specifier_without_ident · : {')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#321
type_specifier_without_ident -> vec_prefix · _disambiguate_template _template_args_start type_specifier _template_args_end : {')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_disambiguate_template -> · /\u200B_disambiguate_template/ : {/\u200B_template_args_start/}

#322
type_specifier_without_ident -> mat_prefix · _disambiguate_template _template_args_start type_specifier _template_args_end : {')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_disambiguate_template -> · /\u200B_disambiguate_template/ : {/\u200B_template_args_start/}

#323
array_type_specifier -> 'array' · _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_disambiguate_template -> · /\u200B_disambiguate_template/ : {/\u200B_template_args_start/}

#324
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 · : {';'}

#325
global_constant_decl/1.3 -> '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#326
global_constant_decl -> 'const' optionally_typed_ident '=' expression · : {';'}

#327
optionally_typed_ident/0.1 -> ':' type_specifier · : {';' '='}

#328
global_variable_decl/0.2 -> '=' expression · : {';'}

#329
variable_decl -> 'var' _disambiguate_template variable_decl/0.2 · optionally_typed_ident : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {';' '='}

#330
variable_decl/0.2 -> variable_qualifier · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#331
variable_qualifier -> _template_args_start · address_space variable_qualifier/0.2 _template_args_end : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
address_space -> · 'function' : {',' /\u200B_template_args_end/}
address_space -> · 'private' : {',' /\u200B_template_args_end/}
address_space -> · 'storage' : {',' /\u200B_template_args_end/}
address_space -> · 'uniform' : {',' /\u200B_template_args_end/}
address_space -> · 'workgroup' : {',' /\u200B_template_args_end/}

#332
diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name · attrib_end : {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#333
diagnostic_rule_name -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {')' ','}

#334
diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name attrib_end · : {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#335
attrib_end -> attrib_end/0.0 · ')' : {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#336
attrib_end/0.0 -> ',' · : {')'}

#337
variable_qualifier -> _template_args_start address_space · variable_qualifier/0.2 _template_args_end : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier/0.2 -> · ',' access_mode : {/\u200B_template_args_end/}

#338
address_space -> 'function' · : {',' /\u200B_template_args_end/}

#339
address_space -> 'private' · : {',' /\u200B_template_args_end/}

#340
address_space -> 'workgroup' · : {',' /\u200B_template_args_end/}

#341
address_space -> 'uniform' · : {',' /\u200B_template_args_end/}

#342
address_space -> 'storage' · : {',' /\u200B_template_args_end/}

#343
variable_decl -> 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident · : {';' '='}

#344
global_constant_decl/1.3 -> '=' expression · : {';'}

#345
array_type_specifier -> 'array' _disambiguate_template · _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_template_args_start -> · /\u200B_template_args_start/ : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#346
type_specifier_without_ident -> mat_prefix _disambiguate_template · _template_args_start type_specifier _template_args_end : {')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_template_args_start -> · /\u200B_template_args_start/ : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#347
type_specifier_without_ident -> vec_prefix _disambiguate_template · _template_args_start type_specifier _template_args_end : {')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_template_args_start -> · /\u200B_template_args_start/ : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#348
struct_member/0.0/0 -> attribute struct_member/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#349
struct_member -> struct_member/0.0 member_ident · ':' type_specifier : {',' '}'}

#350
struct_body_decl -> '{' struct_member struct_body_decl/0.2 · struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl/0.3 -> · ',' : {'}'}

#351
struct_body_decl/0.2 -> struct_body_decl/0.2/0 · : {',' '}'}

#352
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 · struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {',' '}'}

#353
struct_body_decl/0.2/0/0.0 -> ',' · struct_member : {',' '}'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {',' '}'}
struct_member/0.0 -> · struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#354
function_header -> 'fn' ident '(' function_header/0.3 · ')' function_header/0.5 : {'@' '{'}

#355
function_header/0.3 -> param_list · : {')'}

#356
param_list -> param · param_list/0.1 param_list/0.2 : {')'}
param_list/0.1 -> · param_list/0.1/0 : {')' ','}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {')' ','}
param_list/0.1/0/0.0 -> · ',' param : {')' ','}

#357
param -> param/0.0 · ident ':' type_specifier : {')' ','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}

#358
param/0.0 -> param/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#359
param/0.0/0 -> attribute · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#360
compound_statement -> compound_statement/0.0 '{' compound_statement/0.2 · '}' : {'&' '(' '*' ';' '@' '_' 'alias' 'array' 'atomic' 'bool' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#361
compound_statement/0.2 -> compound_statement/0.2/0 · : {'}'}

#362
compound_statement/0.2/0 -> statement · compound_statement/0.2/0 : {'}'}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'compute' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'const' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'fragment' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'invariant' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'vertex' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> · 'break' : {';'}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}
compound_statement/0.2/0 -> · statement compound_statement/0.2/0 : {'}'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> · for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {'for'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> · if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {'if'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> · loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {'loop'}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> · switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {'switch'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
variable_decl -> · 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> · while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {'while'}

#363
statement -> ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#364
statement -> return_statement · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#365
statement -> if_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#366
statement -> switch_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#367
statement -> loop_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#368
statement -> for_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#369
statement -> while_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#370
statement -> func_call_statement · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#371
statement -> variable_statement · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#372
statement -> break_statement · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#373
statement -> continue_statement · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#374
statement -> 'discard' · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#375
statement -> variable_updating_statement · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#376
statement -> compound_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#377
statement -> const_assert_statement · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#378
return_statement -> 'return' · return_statement/0.1 : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
return_statement/0.1 -> · expression : {';'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#379
if_statement -> if_statement/0.0 · if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#380
switch_statement -> switch_statement/0.0 · 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#381
loop_statement -> loop_statement/0.0 · 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#382
for_statement -> for_statement/0.0 · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#383
while_statement -> while_statement/0.0 · 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#384
func_call_statement -> callable · argument_expression_list : {')' ';'}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {')' ';'}

#385
variable_statement -> variable_decl · '=' expression : {';'}
variable_statement -> variable_decl · : {';'}

#386
variable_statement -> 'let' · optionally_typed_ident '=' expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#387
variable_statement -> 'const' · optionally_typed_ident '=' expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#388
break_statement -> 'break' · : {';'}

#389
continue_statement -> 'continue' · : {';'}

#390
variable_updating_statement -> assignment_statement · : {')' ';'}

#391
variable_updating_statement -> increment_statement · : {')' ';'}

#392
variable_updating_statement -> decrement_statement · : {')' ';'}

#393
if_statement/0.0 -> if_statement/0.0/0 · : {'if'}

#394
switch_statement/0.0 -> switch_statement/0.0/0 · : {'switch'}

#395
loop_statement/0.0 -> loop_statement/0.0/0 · : {'loop'}

#396
for_statement/0.0 -> for_statement/0.0/0 · : {'for'}

#397
while_statement/0.0 -> while_statement/0.0/0 · : {'while'}

#398
callable -> ident · : {'('}
core_lhs_expression -> ident · : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#399
assignment_statement -> lhs_expression · assignment_statement/0.1 expression : {')' ';'}
decrement_statement -> lhs_expression · '--' : {')' ';'}
increment_statement -> lhs_expression · '++' : {')' ';'}
_shift_left_assign -> · /\u200B_shift_left_assign/ : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
_shift_right_assign -> · /\u200B_shift_right_assign/ : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
assignment_statement/0.1 -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
assignment_statement/0.1 -> · compound_assignment_operator : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '%=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '&=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '*=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '+=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '-=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '/=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '^=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '|=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · _shift_left_assign : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · _shift_right_assign : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#400
assignment_statement -> '_' · '=' expression : {')' ';'}

#401
compound_statement/0.0/0 -> attribute · compound_statement/0.0/0 : {'{'}
for_statement/0.0/0 -> attribute · for_statement/0.0/0 : {'for'}
if_statement/0.0/0 -> attribute · if_statement/0.0/0 : {'if'}
loop_statement/0.0/0 -> attribute · loop_statement/0.0/0 : {'loop'}
switch_statement/0.0/0 -> attribute · switch_statement/0.0/0 : {'switch'}
while_statement/0.0/0 -> attribute · while_statement/0.0/0 : {'while'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'compute' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'const' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'fragment' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'invariant' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'vertex' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {'for'}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {'if'}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {'loop'}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {'switch'}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {'while'}

#402
lhs_expression -> core_lhs_expression · lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression/0.1 -> · component_or_swizzle_specifier : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#403
lhs_expression -> '*' · lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> · ident : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#404
lhs_expression -> '&' · lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> · ident : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#405
core_lhs_expression -> '(' · lhs_expression ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> · '(' lhs_expression ')' : {')' '.' '['}
core_lhs_expression -> · ident : {')' '.' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' '.' '['}
lhs_expression -> · '&' lhs_expression : {')'}
lhs_expression -> · '*' lhs_expression : {')'}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {')'}

#406
texture_and_sampler_types -> storage_texture_type _disambiguate_template _template_args_start texel_format · ',' access_mode _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#407
texel_format -> 'rgba8unorm' · : {','}

#408
texel_format -> 'rgba8snorm' · : {','}

#409
texel_format -> 'rgba8uint' · : {','}

#410
texel_format -> 'rgba8sint' · : {','}

#411
texel_format -> 'rgba16uint' · : {','}

#412
texel_format -> 'rgba16sint' · : {','}

#413
texel_format -> 'rgba16float' · : {','}

#414
texel_format -> 'r32uint' · : {','}

#415
texel_format -> 'r32sint' · : {','}

#416
texel_format -> 'r32float' · : {','}

#417
texel_format -> 'rg32uint' · : {','}

#418
texel_format -> 'rg32sint' · : {','}

#419
texel_format -> 'rg32float' · : {','}

#420
texel_format -> 'rgba32uint' · : {','}

#421
texel_format -> 'rgba32sint' · : {','}

#422
texel_format -> 'rgba32float' · : {','}

#423
texel_format -> 'bgra8unorm' · : {','}

#424
texture_and_sampler_types -> multisampled_texture_type _disambiguate_template _template_args_start type_specifier · _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_template_args_end -> · /\u200B_template_args_end/ : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#425
texture_and_sampler_types -> sampled_texture_type _disambiguate_template _template_args_start type_specifier · _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_template_args_end -> · /\u200B_template_args_end/ : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#426
type_specifier_without_ident -> 'atomic' _disambiguate_template _template_args_start type_specifier · _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_template_args_end -> · /\u200B_template_args_end/ : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#427
type_specifier_without_ident -> 'ptr' _disambiguate_template _template_args_start address_space · ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#428
array_type_specifier -> 'array' _disambiguate_template _template_args_start type_specifier · array_type_specifier/0.4 _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
array_type_specifier/0.4 -> · ',' element_count_expression : {/\u200B_template_args_end/}

#429
type_specifier_without_ident -> mat_prefix _disambiguate_template _template_args_start type_specifier · _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_template_args_end -> · /\u200B_template_args_end/ : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#430
type_specifier_without_ident -> vec_prefix _disambiguate_template _template_args_start type_specifier · _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_template_args_end -> · /\u200B_template_args_end/ : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#431
expression_comma_list -> expression expression_comma_list/0.1 · expression_comma_list/0.2 : {')'}
expression_comma_list/0.2 -> · ',' : {')'}

#432
expression_comma_list/0.1 -> expression_comma_list/0.1/0 · : {')' ','}

#433
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 · expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {')' ','}

#434
expression_comma_list/0.1/0/0.0 -> ',' · expression : {')' ','}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#435
argument_expression_list -> '(' argument_expression_list/0.1 ')' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#436
primary_expression -> 'bitcast' _disambiguate_template _template_args_start type_specifier · _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
_template_args_end -> · /\u200B_template_args_end/ : {'('}

#437
component_or_swizzle_specifier -> '[' expression ']' · component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier/0.3 -> · component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#438
component_or_swizzle_specifier -> '.' swizzle_name component_or_swizzle_specifier/2.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#439
component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#440
component_or_swizzle_specifier -> '.' member_ident component_or_swizzle_specifier/1.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#441
component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#442
attribute -> '@' 'workgroup_size' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#443
attrib_end/0.0 -> ',' · : {')'}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#444
attribute -> '@' 'size' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#445
attribute -> '@' 'location' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#446
attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#447
attrib_end/0.0 -> ',' · : {')'}
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' · interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
interpolation_sample_name -> · 'center' : {')' ','}
interpolation_sample_name -> · 'centroid' : {')' ','}
interpolation_sample_name -> · 'sample' : {')' ','}

#448
attribute -> '@' 'id' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#449
attribute -> '@' 'group' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#450
attribute -> '@' 'builtin' '(' builtin_value_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#451
attribute -> '@' 'binding' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#452
attribute -> '@' 'align' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#453
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#454
interpolation_sample_name -> 'center' · : {')' ','}

#455
interpolation_sample_name -> 'centroid' · : {')' ','}

#456
interpolation_sample_name -> 'sample' · : {')' ','}

#457
attribute -> '@' 'workgroup_size' '(' expression ',' expression · ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' 'workgroup_size' '(' expression ',' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#458
component_or_swizzle_specifier -> '[' expression ']' component_or_swizzle_specifier/0.3 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#459
component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#460
primary_expression -> 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#461
_template_args_end -> /\u200B_template_args_end/ · : {'(' ')' ',' ';' '=' '@' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_template_args_end/}

#462
expression_comma_list/0.1/0/0.0 -> ',' expression · : {')' ','}

#463
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 · : {')' ','}

#464
expression_comma_list -> expression expression_comma_list/0.1 expression_comma_list/0.2 · : {')'}

#465
expression_comma_list/0.2 -> ',' · : {')'}

#466
type_specifier_without_ident -> vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#467
type_specifier_without_ident -> mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#468
array_type_specifier -> 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 · _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_template_args_end -> · /\u200B_template_args_end/ : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#469
array_type_specifier/0.4 -> ',' · element_count_expression : {/\u200B_template_args_end/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-' /\u200B_template_args_end/}
additive_expression -> · multiplicative_expression : {'+' '-' /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {/\u200B_template_args_end/}
bitwise_expression -> · binary_or_expression '|' unary_expression : {/\u200B_template_args_end/}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {/\u200B_template_args_end/}
bool_literal -> · 'false' : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
bool_literal -> · 'true' : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
call_expression -> · callable argument_expression_list : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
decimal_int_literal -> · /0[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
element_count_expression -> · additive_expression : {/\u200B_template_args_end/}
element_count_expression -> · bitwise_expression : {/\u200B_template_args_end/}
float_literal -> · decimal_float_literal : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
float_literal -> · hex_float_literal : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&' '(' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
int_literal -> · decimal_int_literal : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
int_literal -> · hex_int_literal : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
literal -> · bool_literal : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
literal -> · float_literal : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
literal -> · int_literal : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/' /\u200B_template_args_end/}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/' /\u200B_template_args_end/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
primary_expression -> · call_expression : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
primary_expression -> · ident : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
primary_expression -> · literal : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
primary_expression -> · paren_expression : {'%' '&' '*' '+' '-' '.' '/' '[' '^' '|' /\u200B_template_args_end/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&' '*' '+' '-' '/' '^' '|' /\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'%' '&' '*' '+' '-' '/' '^' '|' /\u200B_template_args_end/}
unary_expression -> · '&' unary_expression : {'%' '&' '*' '+' '-' '/' '^' '|' /\u200B_template_args_end/}
unary_expression -> · '*' unary_expression : {'%' '&' '*' '+' '-' '/' '^' '|' /\u200B_template_args_end/}
unary_expression -> · '-' unary_expression : {'%' '&' '*' '+' '-' '/' '^' '|' /\u200B_template_args_end/}
unary_expression -> · '~' unary_expression : {'%' '&' '*' '+' '-' '/' '^' '|' /\u200B_template_args_end/}
unary_expression -> · singular_expression : {'%' '&' '*' '+' '-' '/' '^' '|' /\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#470
type_specifier_without_ident -> 'ptr' _disambiguate_template _template_args_start address_space ',' · type_specifier type_specifier_without_ident/7.6 _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {',' /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d' : {',' /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_2d_array' : {',' /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_cube' : {',' /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_cube_array' : {',' /\u200B_template_args_end/}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' /\u200B_template_args_end/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' /\u200B_template_args_end/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {',' /\u200B_template_args_end/}
sampler_type -> · 'sampler_comparison' : {',' /\u200B_template_args_end/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {',' /\u200B_template_args_end/}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {',' /\u200B_template_args_end/}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {',' /\u200B_template_args_end/}
texture_and_sampler_types -> · sampler_type : {',' /\u200B_template_args_end/}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {',' /\u200B_template_args_end/}
type_specifier -> · ident : {',' /\u200B_template_args_end/}
type_specifier -> · type_specifier_without_ident : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · 'bool' : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · 'f16' : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · 'f32' : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · 'i32' : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · 'u32' : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · array_type_specifier : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · texture_and_sampler_types : {',' /\u200B_template_args_end/}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {',' /\u200B_template_args_end/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#471
type_specifier_without_ident -> 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#472
texture_and_sampler_types -> sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#473
texture_and_sampler_types -> multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#474
texture_and_sampler_types -> storage_texture_type _disambiguate_template _template_args_start texel_format ',' · access_mode _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
access_mode -> · 'read' : {/\u200B_template_args_end/}
access_mode -> · 'read_write' : {/\u200B_template_args_end/}
access_mode -> · 'write' : {/\u200B_template_args_end/}

#475
core_lhs_expression -> '(' lhs_expression · ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#476
core_lhs_expression -> ident · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#477
lhs_expression -> '&' lhs_expression · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#478
lhs_expression -> '*' lhs_expression · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#479
lhs_expression -> core_lhs_expression lhs_expression/0.1 · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#480
lhs_expression/0.1 -> component_or_swizzle_specifier · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#481
if_statement/0.0/0 -> attribute if_statement/0.0/0 · : {'if'}

#482
switch_statement/0.0/0 -> attribute switch_statement/0.0/0 · : {'switch'}

#483
loop_statement/0.0/0 -> attribute loop_statement/0.0/0 · : {'loop'}

#484
for_statement/0.0/0 -> attribute for_statement/0.0/0 · : {'for'}

#485
while_statement/0.0/0 -> attribute while_statement/0.0/0 · : {'while'}

#486
assignment_statement -> '_' '=' · expression : {')' ';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ';'}
expression -> · relational_expression : {')' ';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ';'}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ')' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ')' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ')' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#487
assignment_statement -> lhs_expression assignment_statement/0.1 · expression : {')' ';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ';'}
expression -> · relational_expression : {')' ';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ';'}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ')' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ')' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ')' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#488
increment_statement -> lhs_expression '++' · : {')' ';'}

#489
decrement_statement -> lhs_expression '--' · : {')' ';'}

#490
assignment_statement/0.1 -> '=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#491
assignment_statement/0.1 -> compound_assignment_operator · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#492
compound_assignment_operator -> '+=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#493
compound_assignment_operator -> '-=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#494
compound_assignment_operator -> '*=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#495
compound_assignment_operator -> '/=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#496
compound_assignment_operator -> '%=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#497
compound_assignment_operator -> '&=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#498
compound_assignment_operator -> '|=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#499
compound_assignment_operator -> '^=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#500
compound_assignment_operator -> _shift_right_assign · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#501
compound_assignment_operator -> _shift_left_assign · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#502
_shift_right_assign -> /\u200B_shift_right_assign/ · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#503
_shift_left_assign -> /\u200B_shift_left_assign/ · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#504
variable_statement -> 'const' optionally_typed_ident · '=' expression : {';'}

#505
variable_statement -> 'let' optionally_typed_ident · '=' expression : {';'}

#506
variable_statement -> variable_decl '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#507
func_call_statement -> callable argument_expression_list · : {')' ';'}

#508
while_statement -> while_statement/0.0 'while' · expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'@' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'@' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'@' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'@' '{'}
expression -> · relational_expression : {'@' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'@' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'@' '{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' '@' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#509
for_statement -> for_statement/0.0 'for' · '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#510
loop_statement -> loop_statement/0.0 'loop' · loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
loop_statement/0.2 -> · loop_statement/0.2/0 : {'{'}
loop_statement/0.2/0 -> · attribute loop_statement/0.2/0 : {'{'}

#511
switch_statement -> switch_statement/0.0 'switch' · expression switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'@' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'@' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'@' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'@' '{'}
expression -> · relational_expression : {'@' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'@' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'@' '{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' '@' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#512
if_statement -> if_statement/0.0 if_clause · if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.2 -> · if_statement/0.2/0 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.2/0 -> · else_if_clause if_statement/0.2/0 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#513
if_clause -> 'if' · expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'@' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'@' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'@' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'@' '{'}
expression -> · relational_expression : {'@' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'@' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'@' '{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' '@' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#514
return_statement -> 'return' return_statement/0.1 · : {';'}

#515
return_statement/0.1 -> expression · : {';'}

#516
statement -> const_assert_statement ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#517
statement -> variable_updating_statement ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#518
statement -> 'discard' ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#519
statement -> continue_statement ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#520
statement -> break_statement ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#521
statement -> variable_statement ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#522
statement -> func_call_statement ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#523
statement -> return_statement ';' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#524
compound_statement/0.2/0 -> statement compound_statement/0.2/0 · : {'}'}

#525
compound_statement -> compound_statement/0.0 '{' compound_statement/0.2 '}' · : {'&' '(' '*' ';' '@' '_' 'alias' 'array' 'atomic' 'bool' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#526
param/0.0/0 -> attribute param/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#527
param -> param/0.0 ident · ':' type_specifier : {')' ','}

#528
param_list -> param param_list/0.1 · param_list/0.2 : {')'}
param_list/0.2 -> · ',' : {')'}

#529
param_list/0.1 -> param_list/0.1/0 · : {')' ','}

#530
param_list/0.1/0 -> param_list/0.1/0/0.0 · param_list/0.1/0 : {')' ','}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {')' ','}
param_list/0.1/0/0.0 -> · ',' param : {')' ','}

#531
param_list/0.1/0/0.0 -> ',' · param : {')' ','}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param -> · param/0.0 ident ':' type_specifier : {')' ','}
param/0.0 -> · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#532
function_header -> 'fn' ident '(' function_header/0.3 ')' · function_header/0.5 : {'@' '{'}
function_header/0.5 -> · '->' function_header/0.5/0.1 type_specifier : {'@' '{'}

#533
struct_body_decl/0.2/0/0.0 -> ',' struct_member · : {',' '}'}

#534
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 · : {',' '}'}

#535
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 · '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#536
struct_body_decl/0.3 -> ',' · : {'}'}

#537
struct_member -> struct_member/0.0 member_ident ':' · type_specifier : {',' '}'}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {',' '}'}
depth_texture_type -> · 'texture_depth_2d' : {',' '}'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '}'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '}'}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {',' '}'}
sampler_type -> · 'sampler_comparison' : {',' '}'}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {',' '}'}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {',' '}'}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {',' '}'}
texture_and_sampler_types -> · sampler_type : {',' '}'}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {',' '}'}
type_specifier -> · ident : {',' '}'}
type_specifier -> · type_specifier_without_ident : {',' '}'}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {',' '}'}
type_specifier_without_ident -> · 'bool' : {',' '}'}
type_specifier_without_ident -> · 'f16' : {',' '}'}
type_specifier_without_ident -> · 'f32' : {',' '}'}
type_specifier_without_ident -> · 'i32' : {',' '}'}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {',' '}'}
type_specifier_without_ident -> · 'u32' : {',' '}'}
type_specifier_without_ident -> · array_type_specifier : {',' '}'}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {',' '}'}
type_specifier_without_ident -> · texture_and_sampler_types : {',' '}'}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {',' '}'}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#538
variable_qualifier -> _template_args_start address_space variable_qualifier/0.2 · _template_args_end : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
_template_args_end -> · /\u200B_template_args_end/ : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#539
variable_qualifier/0.2 -> ',' · access_mode : {/\u200B_template_args_end/}
access_mode -> · 'read' : {/\u200B_template_args_end/}
access_mode -> · 'read_write' : {/\u200B_template_args_end/}
access_mode -> · 'write' : {/\u200B_template_args_end/}

#540
attrib_end -> attrib_end/0.0 ')' · : {';' '@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#541
variable_qualifier/0.2 -> ',' access_mode · : {/\u200B_template_args_end/}

#542
access_mode -> 'read' · : {/\u200B_template_args_end/}

#543
access_mode -> 'write' · : {/\u200B_template_args_end/}

#544
access_mode -> 'read_write' · : {/\u200B_template_args_end/}

#545
variable_qualifier -> _template_args_start address_space variable_qualifier/0.2 _template_args_end · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#546
struct_member -> struct_member/0.0 member_ident ':' type_specifier · : {',' '}'}

#547
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#548
function_header -> 'fn' ident '(' function_header/0.3 ')' function_header/0.5 · : {'@' '{'}

#549
function_header/0.5 -> '->' · function_header/0.5/0.1 type_specifier : {'@' '{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.5/0.1 -> · function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#550
param_list/0.1/0/0.0 -> ',' param · : {')' ','}

#551
param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 · : {')' ','}

#552
param_list -> param param_list/0.1 param_list/0.2 · : {')'}

#553
param_list/0.2 -> ',' · : {')'}

#554
param -> param/0.0 ident ':' · type_specifier : {')' ','}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {')' ','}
depth_texture_type -> · 'texture_depth_2d' : {')' ','}
depth_texture_type -> · 'texture_depth_2d_array' : {')' ','}
depth_texture_type -> · 'texture_depth_cube' : {')' ','}
depth_texture_type -> · 'texture_depth_cube_array' : {')' ','}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {')' ','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' ','}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {')' ','}
sampler_type -> · 'sampler_comparison' : {')' ','}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {')' ','}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {')' ','}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {')' ','}
texture_and_sampler_types -> · sampler_type : {')' ','}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {')' ','}
type_specifier -> · ident : {')' ','}
type_specifier -> · type_specifier_without_ident : {')' ','}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {')' ','}
type_specifier_without_ident -> · 'bool' : {')' ','}
type_specifier_without_ident -> · 'f16' : {')' ','}
type_specifier_without_ident -> · 'f32' : {')' ','}
type_specifier_without_ident -> · 'i32' : {')' ','}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {')' ','}
type_specifier_without_ident -> · 'u32' : {')' ','}
type_specifier_without_ident -> · array_type_specifier : {')' ','}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {')' ','}
type_specifier_without_ident -> · texture_and_sampler_types : {')' ','}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {')' ','}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#555
if_clause -> 'if' expression · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#556
if_statement -> if_statement/0.0 if_clause if_statement/0.2 · if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_clause -> · 'else' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.3 -> · else_clause : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#557
if_statement/0.2 -> if_statement/0.2/0 · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#558
if_statement/0.2/0 -> else_if_clause · if_statement/0.2/0 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.2/0 -> · else_if_clause if_statement/0.2/0 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#559
else_if_clause -> 'else' · 'if' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#560
switch_statement -> switch_statement/0.0 'switch' expression · switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
switch_body -> · switch_body/0.0 '{' switch_body/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_body/0.0 -> · switch_body/0.0/0 : {'{'}
switch_body/0.0/0 -> · attribute switch_body/0.0/0 : {'{'}

#561
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 · '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#562
loop_statement/0.2 -> loop_statement/0.2/0 · : {'{'}

#563
loop_statement/0.2/0 -> attribute · loop_statement/0.2/0 : {'{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
loop_statement/0.2/0 -> · attribute loop_statement/0.2/0 : {'{'}

#564
for_statement -> for_statement/0.0 'for' '(' · for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_header -> · for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 : {')'}
for_header/0.0 -> · for_init : {';'}
for_init -> · func_call_statement : {';'}
for_init -> · variable_statement : {';'}
for_init -> · variable_updating_statement : {';'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
variable_decl -> · 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#565
while_statement -> while_statement/0.0 'while' expression · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#566
variable_statement -> variable_decl '=' expression · : {';'}

#567
variable_statement -> 'let' optionally_typed_ident '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#568
variable_statement -> 'const' optionally_typed_ident '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#569
assignment_statement -> lhs_expression assignment_statement/0.1 expression · : {')' ';'}

#570
assignment_statement -> '_' '=' expression · : {')' ';'}

#571
core_lhs_expression -> '(' lhs_expression ')' · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#572
texture_and_sampler_types -> storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode · _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_template_args_end -> · /\u200B_template_args_end/ : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#573
type_specifier_without_ident -> 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier · type_specifier_without_ident/7.6 _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
type_specifier_without_ident/7.6 -> · ',' access_mode : {/\u200B_template_args_end/}

#574
array_type_specifier/0.4 -> ',' element_count_expression · : {/\u200B_template_args_end/}

#575
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'+' '-' /\u200B_template_args_end/}
element_count_expression -> additive_expression · : {/\u200B_template_args_end/}
additive_operator -> · '+' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_operator -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#576
element_count_expression -> bitwise_expression · : {/\u200B_template_args_end/}

#577
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'%' '*' '+' '-' '/' /\u200B_template_args_end/}

#578
array_type_specifier -> 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#579
primary_expression -> 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#580
attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#581
attrib_end/0.0 -> ',' · : {')'}
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#582
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#583
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · ',' : {')'}

#584
type_specifier_without_ident -> 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 · _template_args_end : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}
_template_args_end -> · /\u200B_template_args_end/ : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#585
type_specifier_without_ident/7.6 -> ',' · access_mode : {/\u200B_template_args_end/}
access_mode -> · 'read' : {/\u200B_template_args_end/}
access_mode -> · 'read_write' : {/\u200B_template_args_end/}
access_mode -> · 'write' : {/\u200B_template_args_end/}

#586
texture_and_sampler_types -> storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#587
variable_statement -> 'const' optionally_typed_ident '=' expression · : {';'}

#588
variable_statement -> 'let' optionally_typed_ident '=' expression · : {';'}

#589
while_statement -> while_statement/0.0 'while' expression compound_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#590
for_statement -> for_statement/0.0 'for' '(' for_header · ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#591
for_header -> for_header/0.0 · ';' for_header/0.2 ';' for_header/0.4 : {')'}

#592
for_header/0.0 -> for_init · : {';'}

#593
for_init -> variable_statement · : {';'}

#594
for_init -> variable_updating_statement · : {';'}

#595
for_init -> func_call_statement · : {';'}

#596
loop_statement/0.2/0 -> attribute loop_statement/0.2/0 · : {'{'}

#597
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' · loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'compute' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'const' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'fragment' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'invariant' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'vertex' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> · 'break' : {';'}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> · for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {'for'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> · if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {'if'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> · loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {'loop'}
loop_statement/0.4 -> · loop_statement/0.4/0 : {'continuing' '}'}
loop_statement/0.4/0 -> · statement loop_statement/0.4/0 : {'continuing' '}'}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> · switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {'switch'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
variable_decl -> · 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> · while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {'while'}

#598
switch_statement -> switch_statement/0.0 'switch' expression switch_body · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#599
switch_body -> switch_body/0.0 · '{' switch_body/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#600
switch_body/0.0 -> switch_body/0.0/0 · : {'{'}

#601
switch_body/0.0/0 -> attribute · switch_body/0.0/0 : {'{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
switch_body/0.0/0 -> · attribute switch_body/0.0/0 : {'{'}

#602
else_if_clause -> 'else' 'if' · expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'@' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'@' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'@' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'@' '{'}
expression -> · relational_expression : {'@' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'@' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'@' '{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' '@' '{' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' '@' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#603
if_statement/0.2/0 -> else_if_clause if_statement/0.2/0 · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#604
if_statement -> if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#605
if_statement/0.3 -> else_clause · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#606
else_clause -> 'else' · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#607
if_clause -> 'if' expression compound_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#608
param -> param/0.0 ident ':' type_specifier · : {')' ','}

#609
function_header/0.5 -> '->' function_header/0.5/0.1 · type_specifier : {'@' '{'}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'@' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'@' '{'}
depth_texture_type -> · 'texture_depth_2d_array' : {'@' '{'}
depth_texture_type -> · 'texture_depth_cube' : {'@' '{'}
depth_texture_type -> · 'texture_depth_cube_array' : {'@' '{'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'@' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'@' '{'}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'@' '{'}
sampler_type -> · 'sampler_comparison' : {'@' '{'}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'@' '{'}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'@' '{'}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'@' '{'}
texture_and_sampler_types -> · sampler_type : {'@' '{'}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'@' '{'}
type_specifier -> · ident : {'@' '{'}
type_specifier -> · type_specifier_without_ident : {'@' '{'}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'@' '{'}
type_specifier_without_ident -> · 'bool' : {'@' '{'}
type_specifier_without_ident -> · 'f16' : {'@' '{'}
type_specifier_without_ident -> · 'f32' : {'@' '{'}
type_specifier_without_ident -> · 'i32' : {'@' '{'}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'@' '{'}
type_specifier_without_ident -> · 'u32' : {'@' '{'}
type_specifier_without_ident -> · array_type_specifier : {'@' '{'}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'@' '{'}
type_specifier_without_ident -> · texture_and_sampler_types : {'@' '{'}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'@' '{'}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#610
function_header/0.5/0.1 -> function_header/0.5/0.1/0 · : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#611
function_header/0.5/0.1/0 -> attribute · function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#612
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 · : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#613
function_header/0.5 -> '->' function_header/0.5/0.1 type_specifier · : {'@' '{'}

#614
else_clause -> 'else' compound_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#615
else_if_clause -> 'else' 'if' expression · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#616
switch_body/0.0/0 -> attribute switch_body/0.0/0 · : {'{'}

#617
switch_body -> switch_body/0.0 '{' · switch_body/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
switch_body/0.2 -> · switch_body/0.2/0 : {'}'}
switch_body/0.2/0 -> · switch_clause switch_body/0.2/0 : {'}'}
switch_clause -> · case_clause : {'case' 'default' '}'}
switch_clause -> · default_alone_clause : {'case' 'default' '}'}

#618
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 · loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_statement -> · 'continuing' continuing_compound_statement : {'}'}
loop_statement/0.5 -> · continuing_statement : {'}'}

#619
loop_statement/0.4 -> loop_statement/0.4/0 · : {'continuing' '}'}

#620
loop_statement/0.4/0 -> statement · loop_statement/0.4/0 : {'continuing' '}'}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'compute' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'const' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'fragment' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'invariant' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'vertex' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> · 'break' : {';'}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> · for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {'for'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> · if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {'if'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> · loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {'loop'}
loop_statement/0.4/0 -> · statement loop_statement/0.4/0 : {'continuing' '}'}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> · switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {'switch'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
variable_decl -> · 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> · while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {'while'}

#621
for_header -> for_header/0.0 ';' · for_header/0.2 ';' for_header/0.4 : {')'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
for_header/0.2 -> · expression : {';'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#622
for_statement -> for_statement/0.0 'for' '(' for_header ')' · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#623
type_specifier_without_ident/7.6 -> ',' access_mode · : {/\u200B_template_args_end/}

#624
type_specifier_without_ident -> 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end · : {'(' ')' ',' ';' '=' '@' '{' '}' /\u200B_template_args_end/}

#625
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#626
for_statement -> for_statement/0.0 'for' '(' for_header ')' compound_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#627
for_header -> for_header/0.0 ';' for_header/0.2 · ';' for_header/0.4 : {')'}

#628
for_header/0.2 -> expression · : {';'}

#629
loop_statement/0.4/0 -> statement loop_statement/0.4/0 · : {'continuing' '}'}

#630
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 · '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#631
loop_statement/0.5 -> continuing_statement · : {'}'}

#632
continuing_statement -> 'continuing' · continuing_compound_statement : {'}'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
continuing_compound_statement -> · continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' : {'}'}
continuing_compound_statement/0.0 -> · continuing_compound_statement/0.0/0 : {'{'}
continuing_compound_statement/0.0/0 -> · attribute continuing_compound_statement/0.0/0 : {'{'}

#633
switch_body -> switch_body/0.0 '{' switch_body/0.2 · '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#634
switch_body/0.2 -> switch_body/0.2/0 · : {'}'}

#635
switch_body/0.2/0 -> switch_clause · switch_body/0.2/0 : {'}'}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
switch_body/0.2/0 -> · switch_clause switch_body/0.2/0 : {'}'}
switch_clause -> · case_clause : {'case' 'default' '}'}
switch_clause -> · default_alone_clause : {'case' 'default' '}'}

#636
switch_clause -> case_clause · : {'case' 'default' '}'}

#637
switch_clause -> default_alone_clause · : {'case' 'default' '}'}

#638
case_clause -> 'case' · case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {',' ':' '@' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {',' ':' '@' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {',' ':' '@' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
case_selector -> · 'default' : {',' ':' '@' '{'}
case_selector -> · expression : {',' ':' '@' '{'}
case_selectors -> · case_selector case_selectors/0.1 case_selectors/0.2 : {':' '@' '{'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '@' '{'}
expression -> · relational_expression : {',' ':' '@' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {',' ':' '@' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {',' ':' '@' '{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ',' ':' '@' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ',' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ',' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#639
default_alone_clause -> 'default' · default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
default_alone_clause/0.1 -> · ':' : {'@' '{'}

#640
else_if_clause -> 'else' 'if' expression compound_statement · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#641
default_alone_clause -> 'default' default_alone_clause/0.1 · compound_statement : {'case' 'default' '}'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'case' 'default' '}'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#642
default_alone_clause/0.1 -> ':' · : {'@' '{'}

#643
case_clause -> 'case' case_selectors · case_clause/0.2 compound_statement : {'case' 'default' '}'}
case_clause/0.2 -> · ':' : {'@' '{'}

#644
case_selectors -> case_selector · case_selectors/0.1 case_selectors/0.2 : {':' '@' '{'}
case_selectors/0.1 -> · case_selectors/0.1/0 : {',' ':' '@' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '@' '{'}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {',' ':' '@' '{'}

#645
case_selector -> 'default' · : {',' ':' '@' '{'}

#646
case_selector -> expression · : {',' ':' '@' '{'}

#647
switch_body/0.2/0 -> switch_clause switch_body/0.2/0 · : {'}'}

#648
switch_body -> switch_body/0.0 '{' switch_body/0.2 '}' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#649
continuing_statement -> 'continuing' continuing_compound_statement · : {'}'}

#650
continuing_compound_statement -> continuing_compound_statement/0.0 · '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' : {'}'}

#651
continuing_compound_statement/0.0 -> continuing_compound_statement/0.0/0 · : {'{'}

#652
continuing_compound_statement/0.0/0 -> attribute · continuing_compound_statement/0.0/0 : {'{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
continuing_compound_statement/0.0/0 -> · attribute continuing_compound_statement/0.0/0 : {'{'}

#653
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' · : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#654
for_header -> for_header/0.0 ';' for_header/0.2 ';' · for_header/0.4 : {')'}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
assignment_statement -> · '_' '=' expression : {')'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {')'}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
decrement_statement -> · lhs_expression '--' : {')'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_header/0.4 -> · for_update : {')'}
for_update -> · func_call_statement : {')'}
for_update -> · variable_updating_statement : {')'}
func_call_statement -> · callable argument_expression_list : {')'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
increment_statement -> · lhs_expression '++' : {')'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
variable_updating_statement -> · assignment_statement : {')'}
variable_updating_statement -> · decrement_statement : {')'}
variable_updating_statement -> · increment_statement : {')'}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#655
for_header -> for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 · : {')'}

#656
for_header/0.4 -> for_update · : {')'}

#657
for_update -> variable_updating_statement · : {')'}

#658
for_update -> func_call_statement · : {')'}

#659
continuing_compound_statement/0.0/0 -> attribute continuing_compound_statement/0.0/0 · : {'{'}

#660
continuing_compound_statement -> continuing_compound_statement/0.0 '{' · continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' : {'}'}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'compute' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'const' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'fragment' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'invariant' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'vertex' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> · 'break' : {';'}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.2 -> · continuing_compound_statement/0.2/0 : {'break' '}'}
continuing_compound_statement/0.2/0 -> · statement continuing_compound_statement/0.2/0 : {'break' '}'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> · for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {'for'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> · if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {'if'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> · loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {'loop'}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> · switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {'switch'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
variable_decl -> · 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> · while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {'while'}

#661
case_selectors -> case_selector case_selectors/0.1 · case_selectors/0.2 : {':' '@' '{'}
case_selectors/0.2 -> · ',' : {':' '@' '{'}

#662
case_selectors/0.1 -> case_selectors/0.1/0 · : {',' ':' '@' '{'}

#663
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 · case_selectors/0.1/0 : {',' ':' '@' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '@' '{'}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {',' ':' '@' '{'}

#664
case_selectors/0.1/0/0.0 -> ',' · case_selector : {',' ':' '@' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {',' ':' '@' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {',' ':' '@' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {',' ':' '@' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
case_selector -> · 'default' : {',' ':' '@' '{'}
case_selector -> · expression : {',' ':' '@' '{'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '@' '{'}
expression -> · relational_expression : {',' ':' '@' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {',' ':' '@' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {',' ':' '@' '{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ',' ':' '@' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ',' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ',' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#665
case_clause -> 'case' case_selectors case_clause/0.2 · compound_statement : {'case' 'default' '}'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' '{'}
attribute -> · '@' 'compute' : {'@' '{'}
attribute -> · '@' 'const' : {'@' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> · '@' 'fragment' : {'@' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' '{'}
attribute -> · '@' 'invariant' : {'@' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' '{'}
attribute -> · '@' 'vertex' : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' '{'}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'case' 'default' '}'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}

#666
case_clause/0.2 -> ':' · : {'@' '{'}

#667
default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement · : {'case' 'default' '}'}

#668
case_clause -> 'case' case_selectors case_clause/0.2 compound_statement · : {'case' 'default' '}'}

#669
case_selectors/0.1/0/0.0 -> ',' case_selector · : {',' ':' '@' '{'}

#670
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 · : {',' ':' '@' '{'}

#671
case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 · : {':' '@' '{'}

#672
case_selectors/0.2 -> ',' · : {':' '@' '{'}

#673
continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 · continuing_compound_statement/0.3 '}' : {'}'}
break_if_statement -> · 'break' 'if' expression ';' : {'}'}
continuing_compound_statement/0.3 -> · break_if_statement : {'}'}

#674
continuing_compound_statement/0.2 -> continuing_compound_statement/0.2/0 · : {'break' '}'}

#675
continuing_compound_statement/0.2/0 -> statement · continuing_compound_statement/0.2/0 : {'break' '}'}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'compute' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'const' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'fragment' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'invariant' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'vertex' : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> · 'break' : {';'}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> · compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {'{'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.2/0 -> · statement continuing_compound_statement/0.2/0 : {'break' '}'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> · for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {'for'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> · if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {'if'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> · loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {'loop'}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> · switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {'switch'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
variable_decl -> · 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> · while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {'while'}

#676
continuing_compound_statement/0.2/0 -> statement continuing_compound_statement/0.2/0 · : {'break' '}'}

#677
continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 · '}' : {'}'}

#678
continuing_compound_statement/0.3 -> break_if_statement · : {'}'}

#679
break_if_statement -> 'break' · 'if' expression ';' : {'}'}

#680
break_if_statement -> 'break' 'if' · expression ';' : {'}'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
array_type_specifier -> · 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
callable -> · 'array' _disambiguate_template : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix _disambiguate_template : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix _disambiguate_template : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
mat_prefix -> · 'mat2x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat2x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat3x4' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x2' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x3' : {/\u200B_disambiguate_template/}
mat_prefix -> · 'mat4x4' : {/\u200B_disambiguate_template/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {/\u200B_disambiguate_template/}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_2d_array' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_3d' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube' : {/\u200B_disambiguate_template/}
sampled_texture_type -> · 'texture_cube_array' : {/\u200B_disambiguate_template/}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> · unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
storage_texture_type -> · 'texture_storage_1d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_2d_array' : {/\u200B_disambiguate_template/}
storage_texture_type -> · 'texture_storage_3d' : {/\u200B_disambiguate_template/}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end : {'('}
type_specifier_without_ident -> · 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
vec_prefix -> · 'vec2' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec3' : {/\u200B_disambiguate_template/}
vec_prefix -> · 'vec4' : {/\u200B_disambiguate_template/}

#681
continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' · : {'}'}

#682
break_if_statement -> 'break' 'if' expression · ';' : {'}'}

#683
break_if_statement -> 'break' 'if' expression ';' · : {'}'}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 ·
r#1 global_directive -> diagnostic_directive ·
r#2 global_directive -> enable_directive ·
r#3 extension_name -> 'f16' ·
r#4 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 ·
r#5 translation_unit -> translation_unit/0.0 translation_unit/0.1 ·
r#6 translation_unit/0.1 -> translation_unit/0.1/0 ·
r#7 global_decl -> ';' ·
r#8 global_decl -> struct_decl ·
r#9 global_decl -> function_decl ·
r#10 global_variable_decl/0.0 -> global_variable_decl/0.0/0 ·
r#11 global_constant_decl/1.0 -> global_constant_decl/1.0/0 ·
r#12 function_decl/0.0 -> function_decl/0.0/0 ·
r#13 attribute -> '@' 'const' ·
r#14 attribute -> '@' 'invariant' ·
r#15 attribute -> '@' 'vertex' ·
r#16 attribute -> '@' 'fragment' ·
r#17 attribute -> '@' 'compute' ·
r#18 global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 ·
r#19 global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 ·
r#20 function_decl/0.0/0 -> attribute function_decl/0.0/0 ·
r#21 const_assert_statement -> 'const_assert' expression ·
r#22 expression -> relational_expression ·
r#23 short_circuit_or_expression -> relational_expression ·
r#24 short_circuit_and_expression -> relational_expression ·
r#25 expression -> bitwise_expression ·
r#26 relational_expression -> shift_expression ·
r#27 shift_expression -> additive_expression ·
r#28 binary_and_expression -> unary_expression ·
r#29 binary_or_expression -> unary_expression ·
r#30 binary_xor_expression -> unary_expression ·
r#31 multiplicative_expression -> unary_expression ·
r#32 additive_expression -> multiplicative_expression ·
r#33 unary_expression -> singular_expression ·
r#34 primary_expression -> ident ·
r#35 callable -> ident ·
r#36 primary_expression -> call_expression ·
r#37 primary_expression -> literal ·
r#38 primary_expression -> paren_expression ·
r#39 ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#40 literal -> int_literal ·
r#41 literal -> float_literal ·
r#42 literal -> bool_literal ·
r#43 callable -> type_specifier_without_ident ·
r#44 int_literal -> decimal_int_literal ·
r#45 int_literal -> hex_int_literal ·
r#46 float_literal -> decimal_float_literal ·
r#47 float_literal -> hex_float_literal ·
r#48 bool_literal -> 'true' ·
r#49 bool_literal -> 'false' ·
r#50 type_specifier_without_ident -> 'bool' ·
r#51 type_specifier_without_ident -> 'f32' ·
r#52 type_specifier_without_ident -> 'f16' ·
r#53 type_specifier_without_ident -> 'i32' ·
r#54 type_specifier_without_ident -> 'u32' ·
r#55 type_specifier_without_ident -> array_type_specifier ·
r#56 type_specifier_without_ident -> texture_and_sampler_types ·
r#57 vec_prefix -> 'vec2' ·
r#58 vec_prefix -> 'vec3' ·
r#59 vec_prefix -> 'vec4' ·
r#60 mat_prefix -> 'mat2x2' ·
r#61 mat_prefix -> 'mat2x3' ·
r#62 mat_prefix -> 'mat2x4' ·
r#63 mat_prefix -> 'mat3x2' ·
r#64 mat_prefix -> 'mat3x3' ·
r#65 mat_prefix -> 'mat3x4' ·
r#66 mat_prefix -> 'mat4x2' ·
r#67 mat_prefix -> 'mat4x3' ·
r#68 mat_prefix -> 'mat4x4' ·
r#69 decimal_int_literal -> /0[iu]?/ ·
r#70 decimal_int_literal -> /[1-9][0-9]*[iu]?/ ·
r#71 hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ ·
r#72 decimal_float_literal -> /0[fh]/ ·
r#73 decimal_float_literal -> /[1-9][0-9]*[fh]/ ·
r#74 decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ ·
r#75 decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ ·
r#76 decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ ·
r#77 hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ ·
r#78 hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ ·
r#79 hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ ·
r#80 texture_and_sampler_types -> sampler_type ·
r#81 texture_and_sampler_types -> depth_texture_type ·
r#82 sampler_type -> 'sampler' ·
r#83 sampler_type -> 'sampler_comparison' ·
r#84 depth_texture_type -> 'texture_depth_2d' ·
r#85 depth_texture_type -> 'texture_depth_2d_array' ·
r#86 depth_texture_type -> 'texture_depth_cube' ·
r#87 depth_texture_type -> 'texture_depth_cube_array' ·
r#88 depth_texture_type -> 'texture_depth_multisampled_2d' ·
r#89 sampled_texture_type -> 'texture_1d' ·
r#90 sampled_texture_type -> 'texture_2d' ·
r#91 sampled_texture_type -> 'texture_2d_array' ·
r#92 sampled_texture_type -> 'texture_3d' ·
r#93 sampled_texture_type -> 'texture_cube' ·
r#94 sampled_texture_type -> 'texture_cube_array' ·
r#95 multisampled_texture_type -> 'texture_multisampled_2d' ·
r#96 storage_texture_type -> 'texture_storage_1d' ·
r#97 storage_texture_type -> 'texture_storage_2d' ·
r#98 storage_texture_type -> 'texture_storage_2d_array' ·
r#99 storage_texture_type -> 'texture_storage_3d' ·
r#100 global_decl -> const_assert_statement ';' ·
r#101 global_decl -> type_alias_decl ';' ·
r#102 global_decl -> global_constant_decl ';' ·
r#103 global_decl -> global_variable_decl ';' ·
r#104 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 ·
r#105 severity_control_name -> 'error' ·
r#106 severity_control_name -> 'warning' ·
r#107 severity_control_name -> 'info' ·
r#108 severity_control_name -> 'off' ·
r#109 diagnostic_directive -> 'diagnostic' diagnostic_control ';' ·
r#110 enable_directive -> 'enable' extension_name ';' ·
r#111 _disambiguate_template -> /\u200B_disambiguate_template/ ·
r#112 global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 ·
r#113 optionally_typed_ident -> ident optionally_typed_ident/0.1 ·
r#114 struct_decl -> 'struct' ident struct_body_decl ·
r#115 function_decl -> function_decl/0.0 function_header compound_statement ·
r#116 compound_statement/0.0 -> compound_statement/0.0/0 ·
r#117 callable -> 'array' _disambiguate_template ·
r#118 callable -> mat_prefix _disambiguate_template ·
r#119 callable -> vec_prefix _disambiguate_template ·
r#120 call_expression -> callable argument_expression_list ·
r#121 singular_expression -> primary_expression singular_expression/0.1 ·
r#122 singular_expression/0.1 -> component_or_swizzle_specifier ·
r#123 unary_expression -> '&' unary_expression ·
r#124 unary_expression -> '*' unary_expression ·
r#125 unary_expression -> '~' unary_expression ·
r#126 unary_expression -> '!' unary_expression ·
r#127 unary_expression -> '-' unary_expression ·
r#128 multiplicative_operator -> '*' ·
r#129 multiplicative_operator -> '/' ·
r#130 multiplicative_operator -> '%' ·
r#131 _shift_left -> /\u200B_shift_left/ ·
r#132 _shift_right -> /\u200B_shift_right/ ·
r#133 additive_operator -> '+' ·
r#134 additive_operator -> '-' ·
r#135 _less_than -> /\u200B_less_than/ ·
r#136 _greater_than -> /\u200B_greater_than/ ·
r#137 _less_than_equal -> /\u200B_less_than_equal/ ·
r#138 _greater_than_equal -> /\u200B_greater_than_equal/ ·
r#139 attribute -> '@' 'diagnostic' diagnostic_control ·
r#140 builtin_value_name -> 'vertex_index' ·
r#141 builtin_value_name -> 'instance_index' ·
r#142 builtin_value_name -> 'position' ·
r#143 builtin_value_name -> 'front_facing' ·
r#144 builtin_value_name -> 'frag_depth' ·
r#145 builtin_value_name -> 'local_invocation_id' ·
r#146 builtin_value_name -> 'local_invocation_index' ·
r#147 builtin_value_name -> 'global_invocation_id' ·
r#148 builtin_value_name -> 'workgroup_id' ·
r#149 builtin_value_name -> 'num_workgroups' ·
r#150 builtin_value_name -> 'sample_index' ·
r#151 builtin_value_name -> 'sample_mask' ·
r#152 interpolation_type_name -> 'perspective' ·
r#153 interpolation_type_name -> 'linear' ·
r#154 interpolation_type_name -> 'flat' ·
r#155 expression -> short_circuit_or_expression '||' relational_expression ·
r#156 short_circuit_or_expression -> short_circuit_or_expression '||' relational_expression ·
r#157 expression -> short_circuit_and_expression '&&' relational_expression ·
r#158 short_circuit_and_expression -> short_circuit_and_expression '&&' relational_expression ·
r#159 relational_expression -> shift_expression '!=' shift_expression ·
r#160 relational_expression -> shift_expression '==' shift_expression ·
r#161 relational_expression -> shift_expression _greater_than_equal shift_expression ·
r#162 relational_expression -> shift_expression _less_than_equal shift_expression ·
r#163 relational_expression -> shift_expression _greater_than shift_expression ·
r#164 relational_expression -> shift_expression _less_than shift_expression ·
r#165 bitwise_expression -> binary_and_expression '&' unary_expression ·
r#166 binary_and_expression -> binary_and_expression '&' unary_expression ·
r#167 bitwise_expression -> binary_or_expression '|' unary_expression ·
r#168 binary_or_expression -> binary_or_expression '|' unary_expression ·
r#169 bitwise_expression -> binary_xor_expression '^' unary_expression ·
r#170 binary_xor_expression -> binary_xor_expression '^' unary_expression ·
r#171 additive_expression -> additive_expression additive_operator multiplicative_expression ·
r#172 shift_expression -> unary_expression _shift_right unary_expression ·
r#173 shift_expression -> unary_expression _shift_left unary_expression ·
r#174 multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression ·
r#175 member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#176 swizzle_name -> '/[rgba]/' ·
r#177 swizzle_name -> '/[rgba][rgba]/' ·
r#178 swizzle_name -> '/[rgba][rgba][rgba]/' ·
r#179 swizzle_name -> '/[rgba][rgba][rgba][rgba]/' ·
r#180 swizzle_name -> '/[xyzw]/' ·
r#181 swizzle_name -> '/[xyzw][xyzw]/' ·
r#182 swizzle_name -> '/[xyzw][xyzw][xyzw]/' ·
r#183 swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' ·
r#184 _template_args_start -> /\u200B_template_args_start/ ·
r#185 argument_expression_list/0.1 -> expression_comma_list ·
r#186 paren_expression -> '(' expression ')' ·
r#187 compound_statement/0.0/0 -> attribute compound_statement/0.0/0 ·
r#188 struct_member/0.0 -> struct_member/0.0/0 ·
r#189 type_alias_decl -> 'alias' ident '=' type_specifier ·
r#190 type_specifier -> ident ·
r#191 type_specifier -> type_specifier_without_ident ·
r#192 global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 ·
r#193 global_constant_decl -> 'const' optionally_typed_ident '=' expression ·
r#194 optionally_typed_ident/0.1 -> ':' type_specifier ·
r#195 global_variable_decl/0.2 -> '=' expression ·
r#196 variable_decl/0.2 -> variable_qualifier ·
r#197 diagnostic_rule_name -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#198 diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name attrib_end ·
r#199 attrib_end/0.0 -> ',' ·
r#200 address_space -> 'function' ·
r#201 address_space -> 'private' ·
r#202 address_space -> 'workgroup' ·
r#203 address_space -> 'uniform' ·
r#204 address_space -> 'storage' ·
r#205 variable_decl -> 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident ·
r#206 global_constant_decl/1.3 -> '=' expression ·
r#207 struct_member/0.0/0 -> attribute struct_member/0.0/0 ·
r#208 struct_body_decl/0.2 -> struct_body_decl/0.2/0 ·
r#209 function_header/0.3 -> param_list ·
r#210 param/0.0 -> param/0.0/0 ·
r#211 compound_statement/0.2 -> compound_statement/0.2/0 ·
r#212 statement -> ';' ·
r#213 statement -> if_statement ·
r#214 statement -> switch_statement ·
r#215 statement -> loop_statement ·
r#216 statement -> for_statement ·
r#217 statement -> while_statement ·
r#218 statement -> compound_statement ·
r#219 variable_statement -> variable_decl ·
r#220 break_statement -> 'break' ·
r#221 continue_statement -> 'continue' ·
r#222 variable_updating_statement -> assignment_statement ·
r#223 variable_updating_statement -> increment_statement ·
r#224 variable_updating_statement -> decrement_statement ·
r#225 if_statement/0.0 -> if_statement/0.0/0 ·
r#226 switch_statement/0.0 -> switch_statement/0.0/0 ·
r#227 loop_statement/0.0 -> loop_statement/0.0/0 ·
r#228 for_statement/0.0 -> for_statement/0.0/0 ·
r#229 while_statement/0.0 -> while_statement/0.0/0 ·
r#230 core_lhs_expression -> ident ·
r#231 texel_format -> 'rgba8unorm' ·
r#232 texel_format -> 'rgba8snorm' ·
r#233 texel_format -> 'rgba8uint' ·
r#234 texel_format -> 'rgba8sint' ·
r#235 texel_format -> 'rgba16uint' ·
r#236 texel_format -> 'rgba16sint' ·
r#237 texel_format -> 'rgba16float' ·
r#238 texel_format -> 'r32uint' ·
r#239 texel_format -> 'r32sint' ·
r#240 texel_format -> 'r32float' ·
r#241 texel_format -> 'rg32uint' ·
r#242 texel_format -> 'rg32sint' ·
r#243 texel_format -> 'rg32float' ·
r#244 texel_format -> 'rgba32uint' ·
r#245 texel_format -> 'rgba32sint' ·
r#246 texel_format -> 'rgba32float' ·
r#247 texel_format -> 'bgra8unorm' ·
r#248 expression_comma_list/0.1 -> expression_comma_list/0.1/0 ·
r#249 argument_expression_list -> '(' argument_expression_list/0.1 ')' ·
r#250 component_or_swizzle_specifier -> '.' swizzle_name component_or_swizzle_specifier/2.2 ·
r#251 component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier ·
r#252 component_or_swizzle_specifier -> '.' member_ident component_or_swizzle_specifier/1.2 ·
r#253 component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier ·
r#254 attribute -> '@' 'workgroup_size' '(' expression attrib_end ·
r#255 attribute -> '@' 'size' '(' expression attrib_end ·
r#256 attribute -> '@' 'location' '(' expression attrib_end ·
r#257 attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end ·
r#258 attribute -> '@' 'id' '(' expression attrib_end ·
r#259 attribute -> '@' 'group' '(' expression attrib_end ·
r#260 attribute -> '@' 'builtin' '(' builtin_value_name attrib_end ·
r#261 attribute -> '@' 'binding' '(' expression attrib_end ·
r#262 attribute -> '@' 'align' '(' expression attrib_end ·
r#263 interpolation_sample_name -> 'center' ·
r#264 interpolation_sample_name -> 'centroid' ·
r#265 interpolation_sample_name -> 'sample' ·
r#266 component_or_swizzle_specifier -> '[' expression ']' component_or_swizzle_specifier/0.3 ·
r#267 component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier ·
r#268 _template_args_end -> /\u200B_template_args_end/ ·
r#269 expression_comma_list/0.1/0/0.0 -> ',' expression ·
r#270 expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 ·
r#271 expression_comma_list -> expression expression_comma_list/0.1 expression_comma_list/0.2 ·
r#272 expression_comma_list/0.2 -> ',' ·
r#273 type_specifier_without_ident -> vec_prefix _disambiguate_template _template_args_start type_specifier _template_args_end ·
r#274 type_specifier_without_ident -> mat_prefix _disambiguate_template _template_args_start type_specifier _template_args_end ·
r#275 type_specifier_without_ident -> 'atomic' _disambiguate_template _template_args_start type_specifier _template_args_end ·
r#276 texture_and_sampler_types -> sampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end ·
r#277 texture_and_sampler_types -> multisampled_texture_type _disambiguate_template _template_args_start type_specifier _template_args_end ·
r#278 lhs_expression -> '&' lhs_expression ·
r#279 lhs_expression -> '*' lhs_expression ·
r#280 lhs_expression -> core_lhs_expression lhs_expression/0.1 ·
r#281 lhs_expression/0.1 -> component_or_swizzle_specifier ·
r#282 if_statement/0.0/0 -> attribute if_statement/0.0/0 ·
r#283 switch_statement/0.0/0 -> attribute switch_statement/0.0/0 ·
r#284 loop_statement/0.0/0 -> attribute loop_statement/0.0/0 ·
r#285 for_statement/0.0/0 -> attribute for_statement/0.0/0 ·
r#286 while_statement/0.0/0 -> attribute while_statement/0.0/0 ·
r#287 increment_statement -> lhs_expression '++' ·
r#288 decrement_statement -> lhs_expression '--' ·
r#289 assignment_statement/0.1 -> '=' ·
r#290 assignment_statement/0.1 -> compound_assignment_operator ·
r#291 compound_assignment_operator -> '+=' ·
r#292 compound_assignment_operator -> '-=' ·
r#293 compound_assignment_operator -> '*=' ·
r#294 compound_assignment_operator -> '/=' ·
r#295 compound_assignment_operator -> '%=' ·
r#296 compound_assignment_operator -> '&=' ·
r#297 compound_assignment_operator -> '|=' ·
r#298 compound_assignment_operator -> '^=' ·
r#299 compound_assignment_operator -> _shift_right_assign ·
r#300 compound_assignment_operator -> _shift_left_assign ·
r#301 _shift_right_assign -> /\u200B_shift_right_assign/ ·
r#302 _shift_left_assign -> /\u200B_shift_left_assign/ ·
r#303 func_call_statement -> callable argument_expression_list ·
r#304 return_statement -> 'return' return_statement/0.1 ·
r#305 return_statement/0.1 -> expression ·
r#306 statement -> const_assert_statement ';' ·
r#307 statement -> variable_updating_statement ';' ·
r#308 statement -> 'discard' ';' ·
r#309 statement -> continue_statement ';' ·
r#310 statement -> break_statement ';' ·
r#311 statement -> variable_statement ';' ·
r#312 statement -> func_call_statement ';' ·
r#313 statement -> return_statement ';' ·
r#314 compound_statement/0.2/0 -> statement compound_statement/0.2/0 ·
r#315 compound_statement -> compound_statement/0.0 '{' compound_statement/0.2 '}' ·
r#316 param/0.0/0 -> attribute param/0.0/0 ·
r#317 param_list/0.1 -> param_list/0.1/0 ·
r#318 struct_body_decl/0.2/0/0.0 -> ',' struct_member ·
r#319 struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 ·
r#320 struct_body_decl/0.3 -> ',' ·
r#321 attrib_end -> attrib_end/0.0 ')' ·
r#322 variable_qualifier/0.2 -> ',' access_mode ·
r#323 access_mode -> 'read' ·
r#324 access_mode -> 'write' ·
r#325 access_mode -> 'read_write' ·
r#326 variable_qualifier -> _template_args_start address_space variable_qualifier/0.2 _template_args_end ·
r#327 struct_member -> struct_member/0.0 member_ident ':' type_specifier ·
r#328 struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' ·
r#329 function_header -> 'fn' ident '(' function_header/0.3 ')' function_header/0.5 ·
r#330 param_list/0.1/0/0.0 -> ',' param ·
r#331 param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 ·
r#332 param_list -> param param_list/0.1 param_list/0.2 ·
r#333 param_list/0.2 -> ',' ·
r#334 if_statement/0.2 -> if_statement/0.2/0 ·
r#335 loop_statement/0.2 -> loop_statement/0.2/0 ·
r#336 variable_statement -> variable_decl '=' expression ·
r#337 assignment_statement -> lhs_expression assignment_statement/0.1 expression ·
r#338 assignment_statement -> '_' '=' expression ·
r#339 core_lhs_expression -> '(' lhs_expression ')' ·
r#340 array_type_specifier/0.4 -> ',' element_count_expression ·
r#341 element_count_expression -> additive_expression ·
r#342 element_count_expression -> bitwise_expression ·
r#343 array_type_specifier -> 'array' _disambiguate_template _template_args_start type_specifier array_type_specifier/0.4 _template_args_end ·
r#344 primary_expression -> 'bitcast' _disambiguate_template _template_args_start type_specifier _template_args_end paren_expression ·
r#345 attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end ·
r#346 attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end ·
r#347 texture_and_sampler_types -> storage_texture_type _disambiguate_template _template_args_start texel_format ',' access_mode _template_args_end ·
r#348 variable_statement -> 'const' optionally_typed_ident '=' expression ·
r#349 variable_statement -> 'let' optionally_typed_ident '=' expression ·
r#350 while_statement -> while_statement/0.0 'while' expression compound_statement ·
r#351 for_header/0.0 -> for_init ·
r#352 for_init -> variable_statement ·
r#353 for_init -> variable_updating_statement ·
r#354 for_init -> func_call_statement ·
r#355 loop_statement/0.2/0 -> attribute loop_statement/0.2/0 ·
r#356 switch_statement -> switch_statement/0.0 'switch' expression switch_body ·
r#357 switch_body/0.0 -> switch_body/0.0/0 ·
r#358 if_statement/0.2/0 -> else_if_clause if_statement/0.2/0 ·
r#359 if_statement -> if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 ·
r#360 if_statement/0.3 -> else_clause ·
r#361 if_clause -> 'if' expression compound_statement ·
r#362 param -> param/0.0 ident ':' type_specifier ·
r#363 function_header/0.5/0.1 -> function_header/0.5/0.1/0 ·
r#364 function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 ·
r#365 function_header/0.5 -> '->' function_header/0.5/0.1 type_specifier ·
r#366 else_clause -> 'else' compound_statement ·
r#367 switch_body/0.0/0 -> attribute switch_body/0.0/0 ·
r#368 loop_statement/0.4 -> loop_statement/0.4/0 ·
r#369 type_specifier_without_ident/7.6 -> ',' access_mode ·
r#370 type_specifier_without_ident -> 'ptr' _disambiguate_template _template_args_start address_space ',' type_specifier type_specifier_without_ident/7.6 _template_args_end ·
r#371 attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end ·
r#372 for_statement -> for_statement/0.0 'for' '(' for_header ')' compound_statement ·
r#373 for_header/0.2 -> expression ·
r#374 loop_statement/0.4/0 -> statement loop_statement/0.4/0 ·
r#375 loop_statement/0.5 -> continuing_statement ·
r#376 switch_body/0.2 -> switch_body/0.2/0 ·
r#377 switch_clause -> case_clause ·
r#378 switch_clause -> default_alone_clause ·
r#379 else_if_clause -> 'else' 'if' expression compound_statement ·
r#380 default_alone_clause/0.1 -> ':' ·
r#381 case_selector -> 'default' ·
r#382 case_selector -> expression ·
r#383 switch_body/0.2/0 -> switch_clause switch_body/0.2/0 ·
r#384 switch_body -> switch_body/0.0 '{' switch_body/0.2 '}' ·
r#385 continuing_statement -> 'continuing' continuing_compound_statement ·
r#386 continuing_compound_statement/0.0 -> continuing_compound_statement/0.0/0 ·
r#387 loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' ·
r#388 for_header -> for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 ·
r#389 for_header/0.4 -> for_update ·
r#390 for_update -> variable_updating_statement ·
r#391 for_update -> func_call_statement ·
r#392 continuing_compound_statement/0.0/0 -> attribute continuing_compound_statement/0.0/0 ·
r#393 case_selectors/0.1 -> case_selectors/0.1/0 ·
r#394 case_clause/0.2 -> ':' ·
r#395 default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement ·
r#396 case_clause -> 'case' case_selectors case_clause/0.2 compound_statement ·
r#397 case_selectors/0.1/0/0.0 -> ',' case_selector ·
r#398 case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 ·
r#399 case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 ·
r#400 case_selectors/0.2 -> ',' ·
r#401 continuing_compound_statement/0.2 -> continuing_compound_statement/0.2/0 ·
r#402 continuing_compound_statement/0.2/0 -> statement continuing_compound_statement/0.2/0 ·
r#403 continuing_compound_statement/0.3 -> break_if_statement ·
r#404 continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' ·
r#405 break_if_statement -> 'break' 'if' expression ';' ·

=Action:
[#0 'diagnostic']: s#7
[#0 'enable']: s#8
[#1 EndOfText]: acc
[#2 ';']: s#17
[#2 '@']: s#35
[#2 'alias']: s#27
[#2 'const']: s#25
[#2 'const_assert']: s#30
[#2 'struct']: s#28
[#3 ';']: r#0
[#3 '@']: r#0
[#3 'alias']: r#0
[#3 'const']: r#0
[#3 'const_assert']: r#0
[#3 'fn']: r#0
[#3 'override']: r#0
[#3 'struct']: r#0
[#3 'var']: r#0
[#3 EndOfText]: r#0
[#4 'diagnostic']: s#7
[#4 'enable']: s#8
[#5 ';']: r#1
[#5 '@']: r#1
[#5 'alias']: r#1
[#5 'const']: r#1
[#5 'const_assert']: r#1
[#5 'diagnostic']: r#1
[#5 'enable']: r#1
[#5 'fn']: r#1
[#5 'override']: r#1
[#5 'struct']: r#1
[#5 'var']: r#1
[#5 EndOfText]: r#1
[#6 ';']: r#2
[#6 '@']: r#2
[#6 'alias']: r#2
[#6 'const']: r#2
[#6 'const_assert']: r#2
[#6 'diagnostic']: r#2
[#6 'enable']: r#2
[#6 'fn']: r#2
[#6 'override']: r#2
[#6 'struct']: r#2
[#6 'var']: r#2
[#6 EndOfText]: r#2
[#7 '(']: s#12
[#8 'f16']: s#10
[#9 ';']: s#169
[#10 ';']: r#3
[#11 ';']: s#168
[#12 'error']: s#164
[#12 'info']: s#166
[#12 'off']: s#167
[#12 'warning']: s#165
[#13 ';']: r#4
[#13 '@']: r#4
[#13 'alias']: r#4
[#13 'const']: r#4
[#13 'const_assert']: r#4
[#13 'fn']: r#4
[#13 'override']: r#4
[#13 'struct']: r#4
[#13 'var']: r#4
[#13 EndOfText]: r#4
[#14 EndOfText]: r#5
[#15 EndOfText]: r#6
[#16 ';']: s#17
[#16 '@']: s#35
[#16 'alias']: s#27
[#16 'const']: s#25
[#16 'const_assert']: s#30
[#16 'struct']: s#28
[#17 ';']: r#7
[#17 '@']: r#7
[#17 'alias']: r#7
[#17 'const']: r#7
[#17 'const_assert']: r#7
[#17 'fn']: r#7
[#17 'override']: r#7
[#17 'struct']: r#7
[#17 'var']: r#7
[#17 EndOfText]: r#7
[#18 ';']: s#161
[#19 ';']: s#160
[#20 ';']: s#159
[#21 ';']: r#8
[#21 '@']: r#8
[#21 'alias']: r#8
[#21 'const']: r#8
[#21 'const_assert']: r#8
[#21 'fn']: r#8
[#21 'override']: r#8
[#21 'struct']: r#8
[#21 'var']: r#8
[#21 EndOfText]: r#8
[#22 ';']: r#9
[#22 '@']: r#9
[#22 'alias']: r#9
[#22 'const']: r#9
[#22 'const_assert']: r#9
[#22 'fn']: r#9
[#22 'override']: r#9
[#22 'struct']: r#9
[#22 'var']: r#9
[#22 EndOfText]: r#9
[#23 ';']: s#158
[#24 'var']: s#157
[#25 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#26 'override']: s#153
[#27 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#28 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#29 'fn']: s#150
[#30 '!']: s#68
[#30 '&']: s#71
[#30 '(']: s#83
[#30 '*']: s#70
[#30 '-']: s#67
[#30 'array']: s#87
[#30 'atomic']: s#101
[#30 'bitcast']: s#77
[#30 'bool']: s#94
[#30 'f16']: s#96
[#30 'f32']: s#95
[#30 'false']: s#93
[#30 'i32']: s#97
[#30 'mat2x2']: s#106
[#30 'mat2x3']: s#107
[#30 'mat2x4']: s#108
[#30 'mat3x2']: s#109
[#30 'mat3x3']: s#110
[#30 'mat3x4']: s#111
[#30 'mat4x2']: s#112
[#30 'mat4x3']: s#113
[#30 'mat4x4']: s#114
[#30 'ptr']: s#99
[#30 'sampler']: s#131
[#30 'sampler_comparison']: s#132
[#30 'texture_1d']: s#138
[#30 'texture_2d']: s#139
[#30 'texture_2d_array']: s#140
[#30 'texture_3d']: s#141
[#30 'texture_cube']: s#142
[#30 'texture_cube_array']: s#143
[#30 'texture_depth_2d']: s#133
[#30 'texture_depth_2d_array']: s#134
[#30 'texture_depth_cube']: s#135
[#30 'texture_depth_cube_array']: s#136
[#30 'texture_depth_multisampled_2d']: s#137
[#30 'texture_multisampled_2d']: s#144
[#30 'texture_storage_1d']: s#145
[#30 'texture_storage_2d']: s#146
[#30 'texture_storage_2d_array']: s#147
[#30 'texture_storage_3d']: s#148
[#30 'true']: s#92
[#30 'u32']: s#98
[#30 'vec2']: s#103
[#30 'vec3']: s#104
[#30 'vec4']: s#105
[#30 '~']: s#69
[#30 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#30 /0[fh]/]: s#118
[#30 /0[iu]?/]: s#115
[#30 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#30 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#30 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#30 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#30 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#30 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#30 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#30 /[1-9][0-9]*[fh]/]: s#119
[#30 /[1-9][0-9]*[iu]?/]: s#116
[#31 'var']: r#10
[#32 'override']: r#11
[#33 'fn']: r#12
[#34 '@']: s#35
[#35 'align']: s#36
[#35 'binding']: s#37
[#35 'builtin']: s#38
[#35 'compute']: s#50
[#35 'const']: s#39
[#35 'diagnostic']: s#40
[#35 'fragment']: s#49
[#35 'group']: s#41
[#35 'id']: s#42
[#35 'interpolate']: s#43
[#35 'invariant']: s#44
[#35 'location']: s#45
[#35 'size']: s#46
[#35 'vertex']: s#48
[#35 'workgroup_size']: s#47
[#36 '(']: s#243
[#37 '(']: s#242
[#38 '(']: s#241
[#39 '@']: r#13
[#39 'array']: r#13
[#39 'atomic']: r#13
[#39 'bool']: r#13
[#39 'f16']: r#13
[#39 'f32']: r#13
[#39 'fn']: r#13
[#39 'for']: r#13
[#39 'i32']: r#13
[#39 'if']: r#13
[#39 'loop']: r#13
[#39 'mat2x2']: r#13
[#39 'mat2x3']: r#13
[#39 'mat2x4']: r#13
[#39 'mat3x2']: r#13
[#39 'mat3x3']: r#13
[#39 'mat3x4']: r#13
[#39 'mat4x2']: r#13
[#39 'mat4x3']: r#13
[#39 'mat4x4']: r#13
[#39 'override']: r#13
[#39 'ptr']: r#13
[#39 'sampler']: r#13
[#39 'sampler_comparison']: r#13
[#39 'switch']: r#13
[#39 'texture_1d']: r#13
[#39 'texture_2d']: r#13
[#39 'texture_2d_array']: r#13
[#39 'texture_3d']: r#13
[#39 'texture_cube']: r#13
[#39 'texture_cube_array']: r#13
[#39 'texture_depth_2d']: r#13
[#39 'texture_depth_2d_array']: r#13
[#39 'texture_depth_cube']: r#13
[#39 'texture_depth_cube_array']: r#13
[#39 'texture_depth_multisampled_2d']: r#13
[#39 'texture_multisampled_2d']: r#13
[#39 'texture_storage_1d']: r#13
[#39 'texture_storage_2d']: r#13
[#39 'texture_storage_2d_array']: r#13
[#39 'texture_storage_3d']: r#13
[#39 'u32']: r#13
[#39 'var']: r#13
[#39 'vec2']: r#13
[#39 'vec3']: r#13
[#39 'vec4']: r#13
[#39 'while']: r#13
[#39 '{']: r#13
[#39 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#13
[#40 '(']: s#12
[#41 '(']: s#239
[#42 '(']: s#238
[#43 '(']: s#237
[#44 '@']: r#14
[#44 'array']: r#14
[#44 'atomic']: r#14
[#44 'bool']: r#14
[#44 'f16']: r#14
[#44 'f32']: r#14
[#44 'fn']: r#14
[#44 'for']: r#14
[#44 'i32']: r#14
[#44 'if']: r#14
[#44 'loop']: r#14
[#44 'mat2x2']: r#14
[#44 'mat2x3']: r#14
[#44 'mat2x4']: r#14
[#44 'mat3x2']: r#14
[#44 'mat3x3']: r#14
[#44 'mat3x4']: r#14
[#44 'mat4x2']: r#14
[#44 'mat4x3']: r#14
[#44 'mat4x4']: r#14
[#44 'override']: r#14
[#44 'ptr']: r#14
[#44 'sampler']: r#14
[#44 'sampler_comparison']: r#14
[#44 'switch']: r#14
[#44 'texture_1d']: r#14
[#44 'texture_2d']: r#14
[#44 'texture_2d_array']: r#14
[#44 'texture_3d']: r#14
[#44 'texture_cube']: r#14
[#44 'texture_cube_array']: r#14
[#44 'texture_depth_2d']: r#14
[#44 'texture_depth_2d_array']: r#14
[#44 'texture_depth_cube']: r#14
[#44 'texture_depth_cube_array']: r#14
[#44 'texture_depth_multisampled_2d']: r#14
[#44 'texture_multisampled_2d']: r#14
[#44 'texture_storage_1d']: r#14
[#44 'texture_storage_2d']: r#14
[#44 'texture_storage_2d_array']: r#14
[#44 'texture_storage_3d']: r#14
[#44 'u32']: r#14
[#44 'var']: r#14
[#44 'vec2']: r#14
[#44 'vec3']: r#14
[#44 'vec4']: r#14
[#44 'while']: r#14
[#44 '{']: r#14
[#44 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#14
[#45 '(']: s#236
[#46 '(']: s#235
[#47 '(']: s#234
[#48 '@']: r#15
[#48 'array']: r#15
[#48 'atomic']: r#15
[#48 'bool']: r#15
[#48 'f16']: r#15
[#48 'f32']: r#15
[#48 'fn']: r#15
[#48 'for']: r#15
[#48 'i32']: r#15
[#48 'if']: r#15
[#48 'loop']: r#15
[#48 'mat2x2']: r#15
[#48 'mat2x3']: r#15
[#48 'mat2x4']: r#15
[#48 'mat3x2']: r#15
[#48 'mat3x3']: r#15
[#48 'mat3x4']: r#15
[#48 'mat4x2']: r#15
[#48 'mat4x3']: r#15
[#48 'mat4x4']: r#15
[#48 'override']: r#15
[#48 'ptr']: r#15
[#48 'sampler']: r#15
[#48 'sampler_comparison']: r#15
[#48 'switch']: r#15
[#48 'texture_1d']: r#15
[#48 'texture_2d']: r#15
[#48 'texture_2d_array']: r#15
[#48 'texture_3d']: r#15
[#48 'texture_cube']: r#15
[#48 'texture_cube_array']: r#15
[#48 'texture_depth_2d']: r#15
[#48 'texture_depth_2d_array']: r#15
[#48 'texture_depth_cube']: r#15
[#48 'texture_depth_cube_array']: r#15
[#48 'texture_depth_multisampled_2d']: r#15
[#48 'texture_multisampled_2d']: r#15
[#48 'texture_storage_1d']: r#15
[#48 'texture_storage_2d']: r#15
[#48 'texture_storage_2d_array']: r#15
[#48 'texture_storage_3d']: r#15
[#48 'u32']: r#15
[#48 'var']: r#15
[#48 'vec2']: r#15
[#48 'vec3']: r#15
[#48 'vec4']: r#15
[#48 'while']: r#15
[#48 '{']: r#15
[#48 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#15
[#49 '@']: r#16
[#49 'array']: r#16
[#49 'atomic']: r#16
[#49 'bool']: r#16
[#49 'f16']: r#16
[#49 'f32']: r#16
[#49 'fn']: r#16
[#49 'for']: r#16
[#49 'i32']: r#16
[#49 'if']: r#16
[#49 'loop']: r#16
[#49 'mat2x2']: r#16
[#49 'mat2x3']: r#16
[#49 'mat2x4']: r#16
[#49 'mat3x2']: r#16
[#49 'mat3x3']: r#16
[#49 'mat3x4']: r#16
[#49 'mat4x2']: r#16
[#49 'mat4x3']: r#16
[#49 'mat4x4']: r#16
[#49 'override']: r#16
[#49 'ptr']: r#16
[#49 'sampler']: r#16
[#49 'sampler_comparison']: r#16
[#49 'switch']: r#16
[#49 'texture_1d']: r#16
[#49 'texture_2d']: r#16
[#49 'texture_2d_array']: r#16
[#49 'texture_3d']: r#16
[#49 'texture_cube']: r#16
[#49 'texture_cube_array']: r#16
[#49 'texture_depth_2d']: r#16
[#49 'texture_depth_2d_array']: r#16
[#49 'texture_depth_cube']: r#16
[#49 'texture_depth_cube_array']: r#16
[#49 'texture_depth_multisampled_2d']: r#16
[#49 'texture_multisampled_2d']: r#16
[#49 'texture_storage_1d']: r#16
[#49 'texture_storage_2d']: r#16
[#49 'texture_storage_2d_array']: r#16
[#49 'texture_storage_3d']: r#16
[#49 'u32']: r#16
[#49 'var']: r#16
[#49 'vec2']: r#16
[#49 'vec3']: r#16
[#49 'vec4']: r#16
[#49 'while']: r#16
[#49 '{']: r#16
[#49 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#16
[#50 '@']: r#17
[#50 'array']: r#17
[#50 'atomic']: r#17
[#50 'bool']: r#17
[#50 'f16']: r#17
[#50 'f32']: r#17
[#50 'fn']: r#17
[#50 'for']: r#17
[#50 'i32']: r#17
[#50 'if']: r#17
[#50 'loop']: r#17
[#50 'mat2x2']: r#17
[#50 'mat2x3']: r#17
[#50 'mat2x4']: r#17
[#50 'mat3x2']: r#17
[#50 'mat3x3']: r#17
[#50 'mat3x4']: r#17
[#50 'mat4x2']: r#17
[#50 'mat4x3']: r#17
[#50 'mat4x4']: r#17
[#50 'override']: r#17
[#50 'ptr']: r#17
[#50 'sampler']: r#17
[#50 'sampler_comparison']: r#17
[#50 'switch']: r#17
[#50 'texture_1d']: r#17
[#50 'texture_2d']: r#17
[#50 'texture_2d_array']: r#17
[#50 'texture_3d']: r#17
[#50 'texture_cube']: r#17
[#50 'texture_cube_array']: r#17
[#50 'texture_depth_2d']: r#17
[#50 'texture_depth_2d_array']: r#17
[#50 'texture_depth_cube']: r#17
[#50 'texture_depth_cube_array']: r#17
[#50 'texture_depth_multisampled_2d']: r#17
[#50 'texture_multisampled_2d']: r#17
[#50 'texture_storage_1d']: r#17
[#50 'texture_storage_2d']: r#17
[#50 'texture_storage_2d_array']: r#17
[#50 'texture_storage_3d']: r#17
[#50 'u32']: r#17
[#50 'var']: r#17
[#50 'vec2']: r#17
[#50 'vec3']: r#17
[#50 'vec4']: r#17
[#50 'while']: r#17
[#50 '{']: r#17
[#50 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#17
[#51 'var']: r#18
[#52 'override']: r#19
[#53 'fn']: r#20
[#54 ';']: r#21
[#55 '&&']: r#24
[#55 ')']: r#22
[#55 ',']: r#22
[#55 ':']: r#22
[#55 ';']: r#22
[#55 '@']: r#22
[#55 ']']: r#22
[#55 '{']: r#22
[#55 '||']: r#23
[#56 '||']: s#233
[#57 '&&']: s#232
[#58 ')']: r#25
[#58 ',']: r#25
[#58 ':']: r#25
[#58 ';']: r#25
[#58 '@']: r#25
[#58 ']']: r#25
[#58 '{']: r#25
[#59 '!=']: s#227
[#59 '&&']: r#26
[#59 ')']: r#26
[#59 ',']: r#26
[#59 ':']: r#26
[#59 ';']: r#26
[#59 '==']: s#226
[#59 '@']: r#26
[#59 ']']: r#26
[#59 '{']: r#26
[#59 '||']: r#26
[#59 /\u200B_greater_than/]: s#229
[#59 /\u200B_greater_than_equal/]: s#231
[#59 /\u200B_less_than/]: s#228
[#59 /\u200B_less_than_equal/]: s#230
[#60 '&']: s#221
[#61 '|']: s#220
[#62 '^']: s#219
[#63 '!=']: r#27
[#63 '&&']: r#27
[#63 ')']: r#27
[#63 '+']: s#217
[#63 ',']: r#27
[#63 '-']: s#218
[#63 ':']: r#27
[#63 ';']: r#27
[#63 '==']: r#27
[#63 '@']: r#27
[#63 ']']: r#27
[#63 '{']: r#27
[#63 '||']: r#27
[#63 /\u200B_greater_than/]: r#27
[#63 /\u200B_greater_than_equal/]: r#27
[#63 /\u200B_less_than/]: r#27
[#63 /\u200B_less_than_equal/]: r#27
[#64 '!=']: r#31
[#64 '%']: r#31
[#64 '&&']: r#31
[#64 '&']: r#28
[#64 ')']: r#31
[#64 '*']: r#31
[#64 '+']: r#31
[#64 ',']: r#31
[#64 '-']: r#31
[#64 '/']: r#31
[#64 ':']: r#31
[#64 ';']: r#31
[#64 '==']: r#31
[#64 '@']: r#31
[#64 ']']: r#31
[#64 '^']: r#30
[#64 '{']: r#31
[#64 '|']: r#29
[#64 '||']: r#31
[#64 /\u200B_greater_than/]: r#31
[#64 /\u200B_greater_than_equal/]: r#31
[#64 /\u200B_less_than/]: r#31
[#64 /\u200B_less_than_equal/]: r#31
[#64 /\u200B_shift_left/]: s#214
[#64 /\u200B_shift_right/]: s#215
[#65 '!=']: r#32
[#65 '%']: s#211
[#65 '&&']: r#32
[#65 ')']: r#32
[#65 '*']: s#209
[#65 '+']: r#32
[#65 ',']: r#32
[#65 '-']: r#32
[#65 '/']: s#210
[#65 ':']: r#32
[#65 ';']: r#32
[#65 '==']: r#32
[#65 '@']: r#32
[#65 ']']: r#32
[#65 '{']: r#32
[#65 '||']: r#32
[#65 /\u200B_greater_than/]: r#32
[#65 /\u200B_greater_than_equal/]: r#32
[#65 /\u200B_less_than/]: r#32
[#65 /\u200B_less_than_equal/]: r#32
[#65 /\u200B_template_args_end/]: r#32
[#66 '!=']: r#33
[#66 '%']: r#33
[#66 '&&']: r#33
[#66 '&']: r#33
[#66 ')']: r#33
[#66 '*']: r#33
[#66 '+']: r#33
[#66 ',']: r#33
[#66 '-']: r#33
[#66 '/']: r#33
[#66 ':']: r#33
[#66 ';']: r#33
[#66 '==']: r#33
[#66 '@']: r#33
[#66 ']']: r#33
[#66 '^']: r#33
[#66 '{']: r#33
[#66 '|']: r#33
[#66 '||']: r#33
[#66 /\u200B_greater_than/]: r#33
[#66 /\u200B_greater_than_equal/]: r#33
[#66 /\u200B_less_than/]: r#33
[#66 /\u200B_less_than_equal/]: r#33
[#66 /\u200B_shift_left/]: r#33
[#66 /\u200B_shift_right/]: r#33
[#66 /\u200B_template_args_end/]: r#33
[#67 '!']: s#68
[#67 '&']: s#71
[#67 '(']: s#83
[#67 '*']: s#70
[#67 '-']: s#67
[#67 'array']: s#87
[#67 'atomic']: s#101
[#67 'bitcast']: s#77
[#67 'bool']: s#94
[#67 'f16']: s#96
[#67 'f32']: s#95
[#67 'false']: s#93
[#67 'i32']: s#97
[#67 'mat2x2']: s#106
[#67 'mat2x3']: s#107
[#67 'mat2x4']: s#108
[#67 'mat3x2']: s#109
[#67 'mat3x3']: s#110
[#67 'mat3x4']: s#111
[#67 'mat4x2']: s#112
[#67 'mat4x3']: s#113
[#67 'mat4x4']: s#114
[#67 'ptr']: s#99
[#67 'sampler']: s#131
[#67 'sampler_comparison']: s#132
[#67 'texture_1d']: s#138
[#67 'texture_2d']: s#139
[#67 'texture_2d_array']: s#140
[#67 'texture_3d']: s#141
[#67 'texture_cube']: s#142
[#67 'texture_cube_array']: s#143
[#67 'texture_depth_2d']: s#133
[#67 'texture_depth_2d_array']: s#134
[#67 'texture_depth_cube']: s#135
[#67 'texture_depth_cube_array']: s#136
[#67 'texture_depth_multisampled_2d']: s#137
[#67 'texture_multisampled_2d']: s#144
[#67 'texture_storage_1d']: s#145
[#67 'texture_storage_2d']: s#146
[#67 'texture_storage_2d_array']: s#147
[#67 'texture_storage_3d']: s#148
[#67 'true']: s#92
[#67 'u32']: s#98
[#67 'vec2']: s#103
[#67 'vec3']: s#104
[#67 'vec4']: s#105
[#67 '~']: s#69
[#67 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#67 /0[fh]/]: s#118
[#67 /0[iu]?/]: s#115
[#67 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#67 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#67 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#67 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#67 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#67 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#67 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#67 /[1-9][0-9]*[fh]/]: s#119
[#67 /[1-9][0-9]*[iu]?/]: s#116
[#68 '!']: s#68
[#68 '&']: s#71
[#68 '(']: s#83
[#68 '*']: s#70
[#68 '-']: s#67
[#68 'array']: s#87
[#68 'atomic']: s#101
[#68 'bitcast']: s#77
[#68 'bool']: s#94
[#68 'f16']: s#96
[#68 'f32']: s#95
[#68 'false']: s#93
[#68 'i32']: s#97
[#68 'mat2x2']: s#106
[#68 'mat2x3']: s#107
[#68 'mat2x4']: s#108
[#68 'mat3x2']: s#109
[#68 'mat3x3']: s#110
[#68 'mat3x4']: s#111
[#68 'mat4x2']: s#112
[#68 'mat4x3']: s#113
[#68 'mat4x4']: s#114
[#68 'ptr']: s#99
[#68 'sampler']: s#131
[#68 'sampler_comparison']: s#132
[#68 'texture_1d']: s#138
[#68 'texture_2d']: s#139
[#68 'texture_2d_array']: s#140
[#68 'texture_3d']: s#141
[#68 'texture_cube']: s#142
[#68 'texture_cube_array']: s#143
[#68 'texture_depth_2d']: s#133
[#68 'texture_depth_2d_array']: s#134
[#68 'texture_depth_cube']: s#135
[#68 'texture_depth_cube_array']: s#136
[#68 'texture_depth_multisampled_2d']: s#137
[#68 'texture_multisampled_2d']: s#144
[#68 'texture_storage_1d']: s#145
[#68 'texture_storage_2d']: s#146
[#68 'texture_storage_2d_array']: s#147
[#68 'texture_storage_3d']: s#148
[#68 'true']: s#92
[#68 'u32']: s#98
[#68 'vec2']: s#103
[#68 'vec3']: s#104
[#68 'vec4']: s#105
[#68 '~']: s#69
[#68 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#68 /0[fh]/]: s#118
[#68 /0[iu]?/]: s#115
[#68 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#68 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#68 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#68 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#68 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#68 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#68 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#68 /[1-9][0-9]*[fh]/]: s#119
[#68 /[1-9][0-9]*[iu]?/]: s#116
[#69 '!']: s#68
[#69 '&']: s#71
[#69 '(']: s#83
[#69 '*']: s#70
[#69 '-']: s#67
[#69 'array']: s#87
[#69 'atomic']: s#101
[#69 'bitcast']: s#77
[#69 'bool']: s#94
[#69 'f16']: s#96
[#69 'f32']: s#95
[#69 'false']: s#93
[#69 'i32']: s#97
[#69 'mat2x2']: s#106
[#69 'mat2x3']: s#107
[#69 'mat2x4']: s#108
[#69 'mat3x2']: s#109
[#69 'mat3x3']: s#110
[#69 'mat3x4']: s#111
[#69 'mat4x2']: s#112
[#69 'mat4x3']: s#113
[#69 'mat4x4']: s#114
[#69 'ptr']: s#99
[#69 'sampler']: s#131
[#69 'sampler_comparison']: s#132
[#69 'texture_1d']: s#138
[#69 'texture_2d']: s#139
[#69 'texture_2d_array']: s#140
[#69 'texture_3d']: s#141
[#69 'texture_cube']: s#142
[#69 'texture_cube_array']: s#143
[#69 'texture_depth_2d']: s#133
[#69 'texture_depth_2d_array']: s#134
[#69 'texture_depth_cube']: s#135
[#69 'texture_depth_cube_array']: s#136
[#69 'texture_depth_multisampled_2d']: s#137
[#69 'texture_multisampled_2d']: s#144
[#69 'texture_storage_1d']: s#145
[#69 'texture_storage_2d']: s#146
[#69 'texture_storage_2d_array']: s#147
[#69 'texture_storage_3d']: s#148
[#69 'true']: s#92
[#69 'u32']: s#98
[#69 'vec2']: s#103
[#69 'vec3']: s#104
[#69 'vec4']: s#105
[#69 '~']: s#69
[#69 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#69 /0[fh]/]: s#118
[#69 /0[iu]?/]: s#115
[#69 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#69 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#69 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#69 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#69 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#69 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#69 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#69 /[1-9][0-9]*[fh]/]: s#119
[#69 /[1-9][0-9]*[iu]?/]: s#116
[#70 '!']: s#68
[#70 '&']: s#71
[#70 '(']: s#83
[#70 '*']: s#70
[#70 '-']: s#67
[#70 'array']: s#87
[#70 'atomic']: s#101
[#70 'bitcast']: s#77
[#70 'bool']: s#94
[#70 'f16']: s#96
[#70 'f32']: s#95
[#70 'false']: s#93
[#70 'i32']: s#97
[#70 'mat2x2']: s#106
[#70 'mat2x3']: s#107
[#70 'mat2x4']: s#108
[#70 'mat3x2']: s#109
[#70 'mat3x3']: s#110
[#70 'mat3x4']: s#111
[#70 'mat4x2']: s#112
[#70 'mat4x3']: s#113
[#70 'mat4x4']: s#114
[#70 'ptr']: s#99
[#70 'sampler']: s#131
[#70 'sampler_comparison']: s#132
[#70 'texture_1d']: s#138
[#70 'texture_2d']: s#139
[#70 'texture_2d_array']: s#140
[#70 'texture_3d']: s#141
[#70 'texture_cube']: s#142
[#70 'texture_cube_array']: s#143
[#70 'texture_depth_2d']: s#133
[#70 'texture_depth_2d_array']: s#134
[#70 'texture_depth_cube']: s#135
[#70 'texture_depth_cube_array']: s#136
[#70 'texture_depth_multisampled_2d']: s#137
[#70 'texture_multisampled_2d']: s#144
[#70 'texture_storage_1d']: s#145
[#70 'texture_storage_2d']: s#146
[#70 'texture_storage_2d_array']: s#147
[#70 'texture_storage_3d']: s#148
[#70 'true']: s#92
[#70 'u32']: s#98
[#70 'vec2']: s#103
[#70 'vec3']: s#104
[#70 'vec4']: s#105
[#70 '~']: s#69
[#70 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#70 /0[fh]/]: s#118
[#70 /0[iu]?/]: s#115
[#70 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#70 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#70 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#70 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#70 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#70 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#70 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#70 /[1-9][0-9]*[fh]/]: s#119
[#70 /[1-9][0-9]*[iu]?/]: s#116
[#71 '!']: s#68
[#71 '&']: s#71
[#71 '(']: s#83
[#71 '*']: s#70
[#71 '-']: s#67
[#71 'array']: s#87
[#71 'atomic']: s#101
[#71 'bitcast']: s#77
[#71 'bool']: s#94
[#71 'f16']: s#96
[#71 'f32']: s#95
[#71 'false']: s#93
[#71 'i32']: s#97
[#71 'mat2x2']: s#106
[#71 'mat2x3']: s#107
[#71 'mat2x4']: s#108
[#71 'mat3x2']: s#109
[#71 'mat3x3']: s#110
[#71 'mat3x4']: s#111
[#71 'mat4x2']: s#112
[#71 'mat4x3']: s#113
[#71 'mat4x4']: s#114
[#71 'ptr']: s#99
[#71 'sampler']: s#131
[#71 'sampler_comparison']: s#132
[#71 'texture_1d']: s#138
[#71 'texture_2d']: s#139
[#71 'texture_2d_array']: s#140
[#71 'texture_3d']: s#141
[#71 'texture_cube']: s#142
[#71 'texture_cube_array']: s#143
[#71 'texture_depth_2d']: s#133
[#71 'texture_depth_2d_array']: s#134
[#71 'texture_depth_cube']: s#135
[#71 'texture_depth_cube_array']: s#136
[#71 'texture_depth_multisampled_2d']: s#137
[#71 'texture_multisampled_2d']: s#144
[#71 'texture_storage_1d']: s#145
[#71 'texture_storage_2d']: s#146
[#71 'texture_storage_2d_array']: s#147
[#71 'texture_storage_3d']: s#148
[#71 'true']: s#92
[#71 'u32']: s#98
[#71 'vec2']: s#103
[#71 'vec3']: s#104
[#71 'vec4']: s#105
[#71 '~']: s#69
[#71 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#71 /0[fh]/]: s#118
[#71 /0[iu]?/]: s#115
[#71 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#71 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#71 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#71 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#71 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#71 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#71 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#71 /[1-9][0-9]*[fh]/]: s#119
[#71 /[1-9][0-9]*[iu]?/]: s#116
[#72 '.']: s#202
[#72 '[']: s#201
[#73 '!=']: r#34
[#73 '%']: r#34
[#73 '&&']: r#34
[#73 '&']: r#34
[#73 '(']: r#35
[#73 ')']: r#34
[#73 '*']: r#34
[#73 '+']: r#34
[#73 ',']: r#34
[#73 '-']: r#34
[#73 '.']: r#34
[#73 '/']: r#34
[#73 ':']: r#34
[#73 ';']: r#34
[#73 '==']: r#34
[#73 '@']: r#34
[#73 '[']: r#34
[#73 ']']: r#34
[#73 '^']: r#34
[#73 '{']: r#34
[#73 '|']: r#34
[#73 '||']: r#34
[#73 /\u200B_greater_than/]: r#34
[#73 /\u200B_greater_than_equal/]: r#34
[#73 /\u200B_less_than/]: r#34
[#73 /\u200B_less_than_equal/]: r#34
[#73 /\u200B_shift_left/]: r#34
[#73 /\u200B_shift_right/]: r#34
[#73 /\u200B_template_args_end/]: r#34
[#74 '!=']: r#36
[#74 '%']: r#36
[#74 '&&']: r#36
[#74 '&']: r#36
[#74 ')']: r#36
[#74 '*']: r#36
[#74 '+']: r#36
[#74 ',']: r#36
[#74 '-']: r#36
[#74 '.']: r#36
[#74 '/']: r#36
[#74 ':']: r#36
[#74 ';']: r#36
[#74 '==']: r#36
[#74 '@']: r#36
[#74 '[']: r#36
[#74 ']']: r#36
[#74 '^']: r#36
[#74 '{']: r#36
[#74 '|']: r#36
[#74 '||']: r#36
[#74 /\u200B_greater_than/]: r#36
[#74 /\u200B_greater_than_equal/]: r#36
[#74 /\u200B_less_than/]: r#36
[#74 /\u200B_less_than_equal/]: r#36
[#74 /\u200B_shift_left/]: r#36
[#74 /\u200B_shift_right/]: r#36
[#74 /\u200B_template_args_end/]: r#36
[#75 '!=']: r#37
[#75 '%']: r#37
[#75 '&&']: r#37
[#75 '&']: r#37
[#75 ')']: r#37
[#75 '*']: r#37
[#75 '+']: r#37
[#75 ',']: r#37
[#75 '-']: r#37
[#75 '.']: r#37
[#75 '/']: r#37
[#75 ':']: r#37
[#75 ';']: r#37
[#75 '==']: r#37
[#75 '@']: r#37
[#75 '[']: r#37
[#75 ']']: r#37
[#75 '^']: r#37
[#75 '{']: r#37
[#75 '|']: r#37
[#75 '||']: r#37
[#75 /\u200B_greater_than/]: r#37
[#75 /\u200B_greater_than_equal/]: r#37
[#75 /\u200B_less_than/]: r#37
[#75 /\u200B_less_than_equal/]: r#37
[#75 /\u200B_shift_left/]: r#37
[#75 /\u200B_shift_right/]: r#37
[#75 /\u200B_template_args_end/]: r#37
[#76 '!=']: r#38
[#76 '%']: r#38
[#76 '&&']: r#38
[#76 '&']: r#38
[#76 ')']: r#38
[#76 '*']: r#38
[#76 '+']: r#38
[#76 ',']: r#38
[#76 '-']: r#38
[#76 '.']: r#38
[#76 '/']: r#38
[#76 ':']: r#38
[#76 ';']: r#38
[#76 '==']: r#38
[#76 '@']: r#38
[#76 '[']: r#38
[#76 ']']: r#38
[#76 '^']: r#38
[#76 '{']: r#38
[#76 '|']: r#38
[#76 '||']: r#38
[#76 /\u200B_greater_than/]: r#38
[#76 /\u200B_greater_than_equal/]: r#38
[#76 /\u200B_less_than/]: r#38
[#76 /\u200B_less_than_equal/]: r#38
[#76 /\u200B_shift_left/]: r#38
[#76 /\u200B_shift_right/]: r#38
[#76 /\u200B_template_args_end/]: r#38
[#77 /\u200B_disambiguate_template/]: s#172
[#78 '!=']: r#39
[#78 '%']: r#39
[#78 '%=']: r#39
[#78 '&&']: r#39
[#78 '&']: r#39
[#78 '&=']: r#39
[#78 '(']: r#39
[#78 ')']: r#39
[#78 '*']: r#39
[#78 '*=']: r#39
[#78 '+']: r#39
[#78 '++']: r#39
[#78 '+=']: r#39
[#78 ',']: r#39
[#78 '-']: r#39
[#78 '--']: r#39
[#78 '-=']: r#39
[#78 '.']: r#39
[#78 '/']: r#39
[#78 '/=']: r#39
[#78 ':']: r#39
[#78 ';']: r#39
[#78 '=']: r#39
[#78 '==']: r#39
[#78 '@']: r#39
[#78 '[']: r#39
[#78 ']']: r#39
[#78 '^']: r#39
[#78 '^=']: r#39
[#78 '{']: r#39
[#78 '|']: r#39
[#78 '|=']: r#39
[#78 '||']: r#39
[#78 '}']: r#39
[#78 /\u200B_greater_than/]: r#39
[#78 /\u200B_greater_than_equal/]: r#39
[#78 /\u200B_less_than/]: r#39
[#78 /\u200B_less_than_equal/]: r#39
[#78 /\u200B_shift_left/]: r#39
[#78 /\u200B_shift_left_assign/]: r#39
[#78 /\u200B_shift_right/]: r#39
[#78 /\u200B_shift_right_assign/]: r#39
[#78 /\u200B_template_args_end/]: r#39
[#79 '(']: s#197
[#80 '!=']: r#40
[#80 '%']: r#40
[#80 '&&']: r#40
[#80 '&']: r#40
[#80 ')']: r#40
[#80 '*']: r#40
[#80 '+']: r#40
[#80 ',']: r#40
[#80 '-']: r#40
[#80 '.']: r#40
[#80 '/']: r#40
[#80 ':']: r#40
[#80 ';']: r#40
[#80 '==']: r#40
[#80 '@']: r#40
[#80 '[']: r#40
[#80 ']']: r#40
[#80 '^']: r#40
[#80 '{']: r#40
[#80 '|']: r#40
[#80 '||']: r#40
[#80 /\u200B_greater_than/]: r#40
[#80 /\u200B_greater_than_equal/]: r#40
[#80 /\u200B_less_than/]: r#40
[#80 /\u200B_less_than_equal/]: r#40
[#80 /\u200B_shift_left/]: r#40
[#80 /\u200B_shift_right/]: r#40
[#80 /\u200B_template_args_end/]: r#40
[#81 '!=']: r#41
[#81 '%']: r#41
[#81 '&&']: r#41
[#81 '&']: r#41
[#81 ')']: r#41
[#81 '*']: r#41
[#81 '+']: r#41
[#81 ',']: r#41
[#81 '-']: r#41
[#81 '.']: r#41
[#81 '/']: r#41
[#81 ':']: r#41
[#81 ';']: r#41
[#81 '==']: r#41
[#81 '@']: r#41
[#81 '[']: r#41
[#81 ']']: r#41
[#81 '^']: r#41
[#81 '{']: r#41
[#81 '|']: r#41
[#81 '||']: r#41
[#81 /\u200B_greater_than/]: r#41
[#81 /\u200B_greater_than_equal/]: r#41
[#81 /\u200B_less_than/]: r#41
[#81 /\u200B_less_than_equal/]: r#41
[#81 /\u200B_shift_left/]: r#41
[#81 /\u200B_shift_right/]: r#41
[#81 /\u200B_template_args_end/]: r#41
[#82 '!=']: r#42
[#82 '%']: r#42
[#82 '&&']: r#42
[#82 '&']: r#42
[#82 ')']: r#42
[#82 '*']: r#42
[#82 '+']: r#42
[#82 ',']: r#42
[#82 '-']: r#42
[#82 '.']: r#42
[#82 '/']: r#42
[#82 ':']: r#42
[#82 ';']: r#42
[#82 '==']: r#42
[#82 '@']: r#42
[#82 '[']: r#42
[#82 ']']: r#42
[#82 '^']: r#42
[#82 '{']: r#42
[#82 '|']: r#42
[#82 '||']: r#42
[#82 /\u200B_greater_than/]: r#42
[#82 /\u200B_greater_than_equal/]: r#42
[#82 /\u200B_less_than/]: r#42
[#82 /\u200B_less_than_equal/]: r#42
[#82 /\u200B_shift_left/]: r#42
[#82 /\u200B_shift_right/]: r#42
[#82 /\u200B_template_args_end/]: r#42
[#83 '!']: s#68
[#83 '&']: s#71
[#83 '(']: s#83
[#83 '*']: s#70
[#83 '-']: s#67
[#83 'array']: s#87
[#83 'atomic']: s#101
[#83 'bitcast']: s#77
[#83 'bool']: s#94
[#83 'f16']: s#96
[#83 'f32']: s#95
[#83 'false']: s#93
[#83 'i32']: s#97
[#83 'mat2x2']: s#106
[#83 'mat2x3']: s#107
[#83 'mat2x4']: s#108
[#83 'mat3x2']: s#109
[#83 'mat3x3']: s#110
[#83 'mat3x4']: s#111
[#83 'mat4x2']: s#112
[#83 'mat4x3']: s#113
[#83 'mat4x4']: s#114
[#83 'ptr']: s#99
[#83 'sampler']: s#131
[#83 'sampler_comparison']: s#132
[#83 'texture_1d']: s#138
[#83 'texture_2d']: s#139
[#83 'texture_2d_array']: s#140
[#83 'texture_3d']: s#141
[#83 'texture_cube']: s#142
[#83 'texture_cube_array']: s#143
[#83 'texture_depth_2d']: s#133
[#83 'texture_depth_2d_array']: s#134
[#83 'texture_depth_cube']: s#135
[#83 'texture_depth_cube_array']: s#136
[#83 'texture_depth_multisampled_2d']: s#137
[#83 'texture_multisampled_2d']: s#144
[#83 'texture_storage_1d']: s#145
[#83 'texture_storage_2d']: s#146
[#83 'texture_storage_2d_array']: s#147
[#83 'texture_storage_3d']: s#148
[#83 'true']: s#92
[#83 'u32']: s#98
[#83 'vec2']: s#103
[#83 'vec3']: s#104
[#83 'vec4']: s#105
[#83 '~']: s#69
[#83 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#83 /0[fh]/]: s#118
[#83 /0[iu]?/]: s#115
[#83 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#83 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#83 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#83 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#83 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#83 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#83 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#83 /[1-9][0-9]*[fh]/]: s#119
[#83 /[1-9][0-9]*[iu]?/]: s#116
[#84 '(']: r#43
[#85 /\u200B_disambiguate_template/]: s#172
[#86 /\u200B_disambiguate_template/]: s#172
[#87 /\u200B_disambiguate_template/]: s#172
[#88 '!=']: r#44
[#88 '%']: r#44
[#88 '&&']: r#44
[#88 '&']: r#44
[#88 ')']: r#44
[#88 '*']: r#44
[#88 '+']: r#44
[#88 ',']: r#44
[#88 '-']: r#44
[#88 '.']: r#44
[#88 '/']: r#44
[#88 ':']: r#44
[#88 ';']: r#44
[#88 '==']: r#44
[#88 '@']: r#44
[#88 '[']: r#44
[#88 ']']: r#44
[#88 '^']: r#44
[#88 '{']: r#44
[#88 '|']: r#44
[#88 '||']: r#44
[#88 /\u200B_greater_than/]: r#44
[#88 /\u200B_greater_than_equal/]: r#44
[#88 /\u200B_less_than/]: r#44
[#88 /\u200B_less_than_equal/]: r#44
[#88 /\u200B_shift_left/]: r#44
[#88 /\u200B_shift_right/]: r#44
[#88 /\u200B_template_args_end/]: r#44
[#89 '!=']: r#45
[#89 '%']: r#45
[#89 '&&']: r#45
[#89 '&']: r#45
[#89 ')']: r#45
[#89 '*']: r#45
[#89 '+']: r#45
[#89 ',']: r#45
[#89 '-']: r#45
[#89 '.']: r#45
[#89 '/']: r#45
[#89 ':']: r#45
[#89 ';']: r#45
[#89 '==']: r#45
[#89 '@']: r#45
[#89 '[']: r#45
[#89 ']']: r#45
[#89 '^']: r#45
[#89 '{']: r#45
[#89 '|']: r#45
[#89 '||']: r#45
[#89 /\u200B_greater_than/]: r#45
[#89 /\u200B_greater_than_equal/]: r#45
[#89 /\u200B_less_than/]: r#45
[#89 /\u200B_less_than_equal/]: r#45
[#89 /\u200B_shift_left/]: r#45
[#89 /\u200B_shift_right/]: r#45
[#89 /\u200B_template_args_end/]: r#45
[#90 '!=']: r#46
[#90 '%']: r#46
[#90 '&&']: r#46
[#90 '&']: r#46
[#90 ')']: r#46
[#90 '*']: r#46
[#90 '+']: r#46
[#90 ',']: r#46
[#90 '-']: r#46
[#90 '.']: r#46
[#90 '/']: r#46
[#90 ':']: r#46
[#90 ';']: r#46
[#90 '==']: r#46
[#90 '@']: r#46
[#90 '[']: r#46
[#90 ']']: r#46
[#90 '^']: r#46
[#90 '{']: r#46
[#90 '|']: r#46
[#90 '||']: r#46
[#90 /\u200B_greater_than/]: r#46
[#90 /\u200B_greater_than_equal/]: r#46
[#90 /\u200B_less_than/]: r#46
[#90 /\u200B_less_than_equal/]: r#46
[#90 /\u200B_shift_left/]: r#46
[#90 /\u200B_shift_right/]: r#46
[#90 /\u200B_template_args_end/]: r#46
[#91 '!=']: r#47
[#91 '%']: r#47
[#91 '&&']: r#47
[#91 '&']: r#47
[#91 ')']: r#47
[#91 '*']: r#47
[#91 '+']: r#47
[#91 ',']: r#47
[#91 '-']: r#47
[#91 '.']: r#47
[#91 '/']: r#47
[#91 ':']: r#47
[#91 ';']: r#47
[#91 '==']: r#47
[#91 '@']: r#47
[#91 '[']: r#47
[#91 ']']: r#47
[#91 '^']: r#47
[#91 '{']: r#47
[#91 '|']: r#47
[#91 '||']: r#47
[#91 /\u200B_greater_than/]: r#47
[#91 /\u200B_greater_than_equal/]: r#47
[#91 /\u200B_less_than/]: r#47
[#91 /\u200B_less_than_equal/]: r#47
[#91 /\u200B_shift_left/]: r#47
[#91 /\u200B_shift_right/]: r#47
[#91 /\u200B_template_args_end/]: r#47
[#92 '!=']: r#48
[#92 '%']: r#48
[#92 '&&']: r#48
[#92 '&']: r#48
[#92 ')']: r#48
[#92 '*']: r#48
[#92 '+']: r#48
[#92 ',']: r#48
[#92 '-']: r#48
[#92 '.']: r#48
[#92 '/']: r#48
[#92 ':']: r#48
[#92 ';']: r#48
[#92 '==']: r#48
[#92 '@']: r#48
[#92 '[']: r#48
[#92 ']']: r#48
[#92 '^']: r#48
[#92 '{']: r#48
[#92 '|']: r#48
[#92 '||']: r#48
[#92 /\u200B_greater_than/]: r#48
[#92 /\u200B_greater_than_equal/]: r#48
[#92 /\u200B_less_than/]: r#48
[#92 /\u200B_less_than_equal/]: r#48
[#92 /\u200B_shift_left/]: r#48
[#92 /\u200B_shift_right/]: r#48
[#92 /\u200B_template_args_end/]: r#48
[#93 '!=']: r#49
[#93 '%']: r#49
[#93 '&&']: r#49
[#93 '&']: r#49
[#93 ')']: r#49
[#93 '*']: r#49
[#93 '+']: r#49
[#93 ',']: r#49
[#93 '-']: r#49
[#93 '.']: r#49
[#93 '/']: r#49
[#93 ':']: r#49
[#93 ';']: r#49
[#93 '==']: r#49
[#93 '@']: r#49
[#93 '[']: r#49
[#93 ']']: r#49
[#93 '^']: r#49
[#93 '{']: r#49
[#93 '|']: r#49
[#93 '||']: r#49
[#93 /\u200B_greater_than/]: r#49
[#93 /\u200B_greater_than_equal/]: r#49
[#93 /\u200B_less_than/]: r#49
[#93 /\u200B_less_than_equal/]: r#49
[#93 /\u200B_shift_left/]: r#49
[#93 /\u200B_shift_right/]: r#49
[#93 /\u200B_template_args_end/]: r#49
[#94 '(']: r#50
[#94 ')']: r#50
[#94 ',']: r#50
[#94 ';']: r#50
[#94 '=']: r#50
[#94 '@']: r#50
[#94 '{']: r#50
[#94 '}']: r#50
[#94 /\u200B_template_args_end/]: r#50
[#95 '(']: r#51
[#95 ')']: r#51
[#95 ',']: r#51
[#95 ';']: r#51
[#95 '=']: r#51
[#95 '@']: r#51
[#95 '{']: r#51
[#95 '}']: r#51
[#95 /\u200B_template_args_end/]: r#51
[#96 '(']: r#52
[#96 ')']: r#52
[#96 ',']: r#52
[#96 ';']: r#52
[#96 '=']: r#52
[#96 '@']: r#52
[#96 '{']: r#52
[#96 '}']: r#52
[#96 /\u200B_template_args_end/]: r#52
[#97 '(']: r#53
[#97 ')']: r#53
[#97 ',']: r#53
[#97 ';']: r#53
[#97 '=']: r#53
[#97 '@']: r#53
[#97 '{']: r#53
[#97 '}']: r#53
[#97 /\u200B_template_args_end/]: r#53
[#98 '(']: r#54
[#98 ')']: r#54
[#98 ',']: r#54
[#98 ';']: r#54
[#98 '=']: r#54
[#98 '@']: r#54
[#98 '{']: r#54
[#98 '}']: r#54
[#98 /\u200B_template_args_end/]: r#54
[#99 /\u200B_disambiguate_template/]: s#172
[#100 '(']: r#55
[#100 ')']: r#55
[#100 ',']: r#55
[#100 ';']: r#55
[#100 '=']: r#55
[#100 '@']: r#55
[#100 '{']: r#55
[#100 '}']: r#55
[#100 /\u200B_template_args_end/]: r#55
[#101 /\u200B_disambiguate_template/]: s#172
[#102 '(']: r#56
[#102 ')']: r#56
[#102 ',']: r#56
[#102 ';']: r#56
[#102 '=']: r#56
[#102 '@']: r#56
[#102 '{']: r#56
[#102 '}']: r#56
[#102 /\u200B_template_args_end/]: r#56
[#103 /\u200B_disambiguate_template/]: r#57
[#104 /\u200B_disambiguate_template/]: r#58
[#105 /\u200B_disambiguate_template/]: r#59
[#106 /\u200B_disambiguate_template/]: r#60
[#107 /\u200B_disambiguate_template/]: r#61
[#108 /\u200B_disambiguate_template/]: r#62
[#109 /\u200B_disambiguate_template/]: r#63
[#110 /\u200B_disambiguate_template/]: r#64
[#111 /\u200B_disambiguate_template/]: r#65
[#112 /\u200B_disambiguate_template/]: r#66
[#113 /\u200B_disambiguate_template/]: r#67
[#114 /\u200B_disambiguate_template/]: r#68
[#115 '!=']: r#69
[#115 '%']: r#69
[#115 '&&']: r#69
[#115 '&']: r#69
[#115 ')']: r#69
[#115 '*']: r#69
[#115 '+']: r#69
[#115 ',']: r#69
[#115 '-']: r#69
[#115 '.']: r#69
[#115 '/']: r#69
[#115 ':']: r#69
[#115 ';']: r#69
[#115 '==']: r#69
[#115 '@']: r#69
[#115 '[']: r#69
[#115 ']']: r#69
[#115 '^']: r#69
[#115 '{']: r#69
[#115 '|']: r#69
[#115 '||']: r#69
[#115 /\u200B_greater_than/]: r#69
[#115 /\u200B_greater_than_equal/]: r#69
[#115 /\u200B_less_than/]: r#69
[#115 /\u200B_less_than_equal/]: r#69
[#115 /\u200B_shift_left/]: r#69
[#115 /\u200B_shift_right/]: r#69
[#115 /\u200B_template_args_end/]: r#69
[#116 '!=']: r#70
[#116 '%']: r#70
[#116 '&&']: r#70
[#116 '&']: r#70
[#116 ')']: r#70
[#116 '*']: r#70
[#116 '+']: r#70
[#116 ',']: r#70
[#116 '-']: r#70
[#116 '.']: r#70
[#116 '/']: r#70
[#116 ':']: r#70
[#116 ';']: r#70
[#116 '==']: r#70
[#116 '@']: r#70
[#116 '[']: r#70
[#116 ']']: r#70
[#116 '^']: r#70
[#116 '{']: r#70
[#116 '|']: r#70
[#116 '||']: r#70
[#116 /\u200B_greater_than/]: r#70
[#116 /\u200B_greater_than_equal/]: r#70
[#116 /\u200B_less_than/]: r#70
[#116 /\u200B_less_than_equal/]: r#70
[#116 /\u200B_shift_left/]: r#70
[#116 /\u200B_shift_right/]: r#70
[#116 /\u200B_template_args_end/]: r#70
[#117 '!=']: r#71
[#117 '%']: r#71
[#117 '&&']: r#71
[#117 '&']: r#71
[#117 ')']: r#71
[#117 '*']: r#71
[#117 '+']: r#71
[#117 ',']: r#71
[#117 '-']: r#71
[#117 '.']: r#71
[#117 '/']: r#71
[#117 ':']: r#71
[#117 ';']: r#71
[#117 '==']: r#71
[#117 '@']: r#71
[#117 '[']: r#71
[#117 ']']: r#71
[#117 '^']: r#71
[#117 '{']: r#71
[#117 '|']: r#71
[#117 '||']: r#71
[#117 /\u200B_greater_than/]: r#71
[#117 /\u200B_greater_than_equal/]: r#71
[#117 /\u200B_less_than/]: r#71
[#117 /\u200B_less_than_equal/]: r#71
[#117 /\u200B_shift_left/]: r#71
[#117 /\u200B_shift_right/]: r#71
[#117 /\u200B_template_args_end/]: r#71
[#118 '!=']: r#72
[#118 '%']: r#72
[#118 '&&']: r#72
[#118 '&']: r#72
[#118 ')']: r#72
[#118 '*']: r#72
[#118 '+']: r#72
[#118 ',']: r#72
[#118 '-']: r#72
[#118 '.']: r#72
[#118 '/']: r#72
[#118 ':']: r#72
[#118 ';']: r#72
[#118 '==']: r#72
[#118 '@']: r#72
[#118 '[']: r#72
[#118 ']']: r#72
[#118 '^']: r#72
[#118 '{']: r#72
[#118 '|']: r#72
[#118 '||']: r#72
[#118 /\u200B_greater_than/]: r#72
[#118 /\u200B_greater_than_equal/]: r#72
[#118 /\u200B_less_than/]: r#72
[#118 /\u200B_less_than_equal/]: r#72
[#118 /\u200B_shift_left/]: r#72
[#118 /\u200B_shift_right/]: r#72
[#118 /\u200B_template_args_end/]: r#72
[#119 '!=']: r#73
[#119 '%']: r#73
[#119 '&&']: r#73
[#119 '&']: r#73
[#119 ')']: r#73
[#119 '*']: r#73
[#119 '+']: r#73
[#119 ',']: r#73
[#119 '-']: r#73
[#119 '.']: r#73
[#119 '/']: r#73
[#119 ':']: r#73
[#119 ';']: r#73
[#119 '==']: r#73
[#119 '@']: r#73
[#119 '[']: r#73
[#119 ']']: r#73
[#119 '^']: r#73
[#119 '{']: r#73
[#119 '|']: r#73
[#119 '||']: r#73
[#119 /\u200B_greater_than/]: r#73
[#119 /\u200B_greater_than_equal/]: r#73
[#119 /\u200B_less_than/]: r#73
[#119 /\u200B_less_than_equal/]: r#73
[#119 /\u200B_shift_left/]: r#73
[#119 /\u200B_shift_right/]: r#73
[#119 /\u200B_template_args_end/]: r#73
[#120 '!=']: r#74
[#120 '%']: r#74
[#120 '&&']: r#74
[#120 '&']: r#74
[#120 ')']: r#74
[#120 '*']: r#74
[#120 '+']: r#74
[#120 ',']: r#74
[#120 '-']: r#74
[#120 '.']: r#74
[#120 '/']: r#74
[#120 ':']: r#74
[#120 ';']: r#74
[#120 '==']: r#74
[#120 '@']: r#74
[#120 '[']: r#74
[#120 ']']: r#74
[#120 '^']: r#74
[#120 '{']: r#74
[#120 '|']: r#74
[#120 '||']: r#74
[#120 /\u200B_greater_than/]: r#74
[#120 /\u200B_greater_than_equal/]: r#74
[#120 /\u200B_less_than/]: r#74
[#120 /\u200B_less_than_equal/]: r#74
[#120 /\u200B_shift_left/]: r#74
[#120 /\u200B_shift_right/]: r#74
[#120 /\u200B_template_args_end/]: r#74
[#121 '!=']: r#75
[#121 '%']: r#75
[#121 '&&']: r#75
[#121 '&']: r#75
[#121 ')']: r#75
[#121 '*']: r#75
[#121 '+']: r#75
[#121 ',']: r#75
[#121 '-']: r#75
[#121 '.']: r#75
[#121 '/']: r#75
[#121 ':']: r#75
[#121 ';']: r#75
[#121 '==']: r#75
[#121 '@']: r#75
[#121 '[']: r#75
[#121 ']']: r#75
[#121 '^']: r#75
[#121 '{']: r#75
[#121 '|']: r#75
[#121 '||']: r#75
[#121 /\u200B_greater_than/]: r#75
[#121 /\u200B_greater_than_equal/]: r#75
[#121 /\u200B_less_than/]: r#75
[#121 /\u200B_less_than_equal/]: r#75
[#121 /\u200B_shift_left/]: r#75
[#121 /\u200B_shift_right/]: r#75
[#121 /\u200B_template_args_end/]: r#75
[#122 '!=']: r#76
[#122 '%']: r#76
[#122 '&&']: r#76
[#122 '&']: r#76
[#122 ')']: r#76
[#122 '*']: r#76
[#122 '+']: r#76
[#122 ',']: r#76
[#122 '-']: r#76
[#122 '.']: r#76
[#122 '/']: r#76
[#122 ':']: r#76
[#122 ';']: r#76
[#122 '==']: r#76
[#122 '@']: r#76
[#122 '[']: r#76
[#122 ']']: r#76
[#122 '^']: r#76
[#122 '{']: r#76
[#122 '|']: r#76
[#122 '||']: r#76
[#122 /\u200B_greater_than/]: r#76
[#122 /\u200B_greater_than_equal/]: r#76
[#122 /\u200B_less_than/]: r#76
[#122 /\u200B_less_than_equal/]: r#76
[#122 /\u200B_shift_left/]: r#76
[#122 /\u200B_shift_right/]: r#76
[#122 /\u200B_template_args_end/]: r#76
[#123 '!=']: r#77
[#123 '%']: r#77
[#123 '&&']: r#77
[#123 '&']: r#77
[#123 ')']: r#77
[#123 '*']: r#77
[#123 '+']: r#77
[#123 ',']: r#77
[#123 '-']: r#77
[#123 '.']: r#77
[#123 '/']: r#77
[#123 ':']: r#77
[#123 ';']: r#77
[#123 '==']: r#77
[#123 '@']: r#77
[#123 '[']: r#77
[#123 ']']: r#77
[#123 '^']: r#77
[#123 '{']: r#77
[#123 '|']: r#77
[#123 '||']: r#77
[#123 /\u200B_greater_than/]: r#77
[#123 /\u200B_greater_than_equal/]: r#77
[#123 /\u200B_less_than/]: r#77
[#123 /\u200B_less_than_equal/]: r#77
[#123 /\u200B_shift_left/]: r#77
[#123 /\u200B_shift_right/]: r#77
[#123 /\u200B_template_args_end/]: r#77
[#124 '!=']: r#78
[#124 '%']: r#78
[#124 '&&']: r#78
[#124 '&']: r#78
[#124 ')']: r#78
[#124 '*']: r#78
[#124 '+']: r#78
[#124 ',']: r#78
[#124 '-']: r#78
[#124 '.']: r#78
[#124 '/']: r#78
[#124 ':']: r#78
[#124 ';']: r#78
[#124 '==']: r#78
[#124 '@']: r#78
[#124 '[']: r#78
[#124 ']']: r#78
[#124 '^']: r#78
[#124 '{']: r#78
[#124 '|']: r#78
[#124 '||']: r#78
[#124 /\u200B_greater_than/]: r#78
[#124 /\u200B_greater_than_equal/]: r#78
[#124 /\u200B_less_than/]: r#78
[#124 /\u200B_less_than_equal/]: r#78
[#124 /\u200B_shift_left/]: r#78
[#124 /\u200B_shift_right/]: r#78
[#124 /\u200B_template_args_end/]: r#78
[#125 '!=']: r#79
[#125 '%']: r#79
[#125 '&&']: r#79
[#125 '&']: r#79
[#125 ')']: r#79
[#125 '*']: r#79
[#125 '+']: r#79
[#125 ',']: r#79
[#125 '-']: r#79
[#125 '.']: r#79
[#125 '/']: r#79
[#125 ':']: r#79
[#125 ';']: r#79
[#125 '==']: r#79
[#125 '@']: r#79
[#125 '[']: r#79
[#125 ']']: r#79
[#125 '^']: r#79
[#125 '{']: r#79
[#125 '|']: r#79
[#125 '||']: r#79
[#125 /\u200B_greater_than/]: r#79
[#125 /\u200B_greater_than_equal/]: r#79
[#125 /\u200B_less_than/]: r#79
[#125 /\u200B_less_than_equal/]: r#79
[#125 /\u200B_shift_left/]: r#79
[#125 /\u200B_shift_right/]: r#79
[#125 /\u200B_template_args_end/]: r#79
[#126 '(']: r#80
[#126 ')']: r#80
[#126 ',']: r#80
[#126 ';']: r#80
[#126 '=']: r#80
[#126 '@']: r#80
[#126 '{']: r#80
[#126 '}']: r#80
[#126 /\u200B_template_args_end/]: r#80
[#127 '(']: r#81
[#127 ')']: r#81
[#127 ',']: r#81
[#127 ';']: r#81
[#127 '=']: r#81
[#127 '@']: r#81
[#127 '{']: r#81
[#127 '}']: r#81
[#127 /\u200B_template_args_end/]: r#81
[#128 /\u200B_disambiguate_template/]: s#172
[#129 /\u200B_disambiguate_template/]: s#172
[#130 /\u200B_disambiguate_template/]: s#172
[#131 '(']: r#82
[#131 ')']: r#82
[#131 ',']: r#82
[#131 ';']: r#82
[#131 '=']: r#82
[#131 '@']: r#82
[#131 '{']: r#82
[#131 '}']: r#82
[#131 /\u200B_template_args_end/]: r#82
[#132 '(']: r#83
[#132 ')']: r#83
[#132 ',']: r#83
[#132 ';']: r#83
[#132 '=']: r#83
[#132 '@']: r#83
[#132 '{']: r#83
[#132 '}']: r#83
[#132 /\u200B_template_args_end/]: r#83
[#133 '(']: r#84
[#133 ')']: r#84
[#133 ',']: r#84
[#133 ';']: r#84
[#133 '=']: r#84
[#133 '@']: r#84
[#133 '{']: r#84
[#133 '}']: r#84
[#133 /\u200B_template_args_end/]: r#84
[#134 '(']: r#85
[#134 ')']: r#85
[#134 ',']: r#85
[#134 ';']: r#85
[#134 '=']: r#85
[#134 '@']: r#85
[#134 '{']: r#85
[#134 '}']: r#85
[#134 /\u200B_template_args_end/]: r#85
[#135 '(']: r#86
[#135 ')']: r#86
[#135 ',']: r#86
[#135 ';']: r#86
[#135 '=']: r#86
[#135 '@']: r#86
[#135 '{']: r#86
[#135 '}']: r#86
[#135 /\u200B_template_args_end/]: r#86
[#136 '(']: r#87
[#136 ')']: r#87
[#136 ',']: r#87
[#136 ';']: r#87
[#136 '=']: r#87
[#136 '@']: r#87
[#136 '{']: r#87
[#136 '}']: r#87
[#136 /\u200B_template_args_end/]: r#87
[#137 '(']: r#88
[#137 ')']: r#88
[#137 ',']: r#88
[#137 ';']: r#88
[#137 '=']: r#88
[#137 '@']: r#88
[#137 '{']: r#88
[#137 '}']: r#88
[#137 /\u200B_template_args_end/]: r#88
[#138 /\u200B_disambiguate_template/]: r#89
[#139 /\u200B_disambiguate_template/]: r#90
[#140 /\u200B_disambiguate_template/]: r#91
[#141 /\u200B_disambiguate_template/]: r#92
[#142 /\u200B_disambiguate_template/]: r#93
[#143 /\u200B_disambiguate_template/]: r#94
[#144 /\u200B_disambiguate_template/]: r#95
[#145 /\u200B_disambiguate_template/]: r#96
[#146 /\u200B_disambiguate_template/]: r#97
[#147 /\u200B_disambiguate_template/]: r#98
[#148 /\u200B_disambiguate_template/]: r#99
[#149 '@']: s#35
[#150 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#151 '{']: s#181
[#152 '=']: s#179
[#153 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#154 '=']: s#177
[#155 ':']: s#176
[#156 '=']: s#174
[#157 /\u200B_disambiguate_template/]: s#172
[#158 ';']: r#100
[#158 '@']: r#100
[#158 'alias']: r#100
[#158 'const']: r#100
[#158 'const_assert']: r#100
[#158 'fn']: r#100
[#158 'override']: r#100
[#158 'struct']: r#100
[#158 'var']: r#100
[#158 EndOfText]: r#100
[#159 ';']: r#101
[#159 '@']: r#101
[#159 'alias']: r#101
[#159 'const']: r#101
[#159 'const_assert']: r#101
[#159 'fn']: r#101
[#159 'override']: r#101
[#159 'struct']: r#101
[#159 'var']: r#101
[#159 EndOfText]: r#101
[#160 ';']: r#102
[#160 '@']: r#102
[#160 'alias']: r#102
[#160 'const']: r#102
[#160 'const_assert']: r#102
[#160 'fn']: r#102
[#160 'override']: r#102
[#160 'struct']: r#102
[#160 'var']: r#102
[#160 EndOfText]: r#102
[#161 ';']: r#103
[#161 '@']: r#103
[#161 'alias']: r#103
[#161 'const']: r#103
[#161 'const_assert']: r#103
[#161 'fn']: r#103
[#161 'override']: r#103
[#161 'struct']: r#103
[#161 'var']: r#103
[#161 EndOfText]: r#103
[#162 EndOfText]: r#104
[#163 ',']: s#170
[#164 ',']: r#105
[#165 ',']: r#106
[#166 ',']: r#107
[#167 ',']: r#108
[#168 ';']: r#109
[#168 '@']: r#109
[#168 'alias']: r#109
[#168 'const']: r#109
[#168 'const_assert']: r#109
[#168 'diagnostic']: r#109
[#168 'enable']: r#109
[#168 'fn']: r#109
[#168 'override']: r#109
[#168 'struct']: r#109
[#168 'var']: r#109
[#168 EndOfText]: r#109
[#169 ';']: r#110
[#169 '@']: r#110
[#169 'alias']: r#110
[#169 'const']: r#110
[#169 'const_assert']: r#110
[#169 'diagnostic']: r#110
[#169 'enable']: r#110
[#169 'fn']: r#110
[#169 'override']: r#110
[#169 'struct']: r#110
[#169 'var']: r#110
[#169 EndOfText]: r#110
[#170 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#333
[#171 /\u200B_template_args_start/]: s#298
[#172 '(']: r#111
[#172 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#111
[#172 /\u200B_template_args_start/]: r#111
[#173 ';']: r#112
[#174 '!']: s#68
[#174 '&']: s#71
[#174 '(']: s#83
[#174 '*']: s#70
[#174 '-']: s#67
[#174 'array']: s#87
[#174 'atomic']: s#101
[#174 'bitcast']: s#77
[#174 'bool']: s#94
[#174 'f16']: s#96
[#174 'f32']: s#95
[#174 'false']: s#93
[#174 'i32']: s#97
[#174 'mat2x2']: s#106
[#174 'mat2x3']: s#107
[#174 'mat2x4']: s#108
[#174 'mat3x2']: s#109
[#174 'mat3x3']: s#110
[#174 'mat3x4']: s#111
[#174 'mat4x2']: s#112
[#174 'mat4x3']: s#113
[#174 'mat4x4']: s#114
[#174 'ptr']: s#99
[#174 'sampler']: s#131
[#174 'sampler_comparison']: s#132
[#174 'texture_1d']: s#138
[#174 'texture_2d']: s#139
[#174 'texture_2d_array']: s#140
[#174 'texture_3d']: s#141
[#174 'texture_cube']: s#142
[#174 'texture_cube_array']: s#143
[#174 'texture_depth_2d']: s#133
[#174 'texture_depth_2d_array']: s#134
[#174 'texture_depth_cube']: s#135
[#174 'texture_depth_cube_array']: s#136
[#174 'texture_depth_multisampled_2d']: s#137
[#174 'texture_multisampled_2d']: s#144
[#174 'texture_storage_1d']: s#145
[#174 'texture_storage_2d']: s#146
[#174 'texture_storage_2d_array']: s#147
[#174 'texture_storage_3d']: s#148
[#174 'true']: s#92
[#174 'u32']: s#98
[#174 'vec2']: s#103
[#174 'vec3']: s#104
[#174 'vec4']: s#105
[#174 '~']: s#69
[#174 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#174 /0[fh]/]: s#118
[#174 /0[iu]?/]: s#115
[#174 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#174 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#174 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#174 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#174 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#174 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#174 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#174 /[1-9][0-9]*[fh]/]: s#119
[#174 /[1-9][0-9]*[iu]?/]: s#116
[#175 ';']: r#113
[#175 '=']: r#113
[#176 'array']: s#323
[#176 'atomic']: s#101
[#176 'bool']: s#94
[#176 'f16']: s#96
[#176 'f32']: s#95
[#176 'i32']: s#97
[#176 'mat2x2']: s#106
[#176 'mat2x3']: s#107
[#176 'mat2x4']: s#108
[#176 'mat3x2']: s#109
[#176 'mat3x3']: s#110
[#176 'mat3x4']: s#111
[#176 'mat4x2']: s#112
[#176 'mat4x3']: s#113
[#176 'mat4x4']: s#114
[#176 'ptr']: s#99
[#176 'sampler']: s#131
[#176 'sampler_comparison']: s#132
[#176 'texture_1d']: s#138
[#176 'texture_2d']: s#139
[#176 'texture_2d_array']: s#140
[#176 'texture_3d']: s#141
[#176 'texture_cube']: s#142
[#176 'texture_cube_array']: s#143
[#176 'texture_depth_2d']: s#133
[#176 'texture_depth_2d_array']: s#134
[#176 'texture_depth_cube']: s#135
[#176 'texture_depth_cube_array']: s#136
[#176 'texture_depth_multisampled_2d']: s#137
[#176 'texture_multisampled_2d']: s#144
[#176 'texture_storage_1d']: s#145
[#176 'texture_storage_2d']: s#146
[#176 'texture_storage_2d_array']: s#147
[#176 'texture_storage_3d']: s#148
[#176 'u32']: s#98
[#176 'vec2']: s#103
[#176 'vec3']: s#104
[#176 'vec4']: s#105
[#176 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#177 '!']: s#68
[#177 '&']: s#71
[#177 '(']: s#83
[#177 '*']: s#70
[#177 '-']: s#67
[#177 'array']: s#87
[#177 'atomic']: s#101
[#177 'bitcast']: s#77
[#177 'bool']: s#94
[#177 'f16']: s#96
[#177 'f32']: s#95
[#177 'false']: s#93
[#177 'i32']: s#97
[#177 'mat2x2']: s#106
[#177 'mat2x3']: s#107
[#177 'mat2x4']: s#108
[#177 'mat3x2']: s#109
[#177 'mat3x3']: s#110
[#177 'mat3x4']: s#111
[#177 'mat4x2']: s#112
[#177 'mat4x3']: s#113
[#177 'mat4x4']: s#114
[#177 'ptr']: s#99
[#177 'sampler']: s#131
[#177 'sampler_comparison']: s#132
[#177 'texture_1d']: s#138
[#177 'texture_2d']: s#139
[#177 'texture_2d_array']: s#140
[#177 'texture_3d']: s#141
[#177 'texture_cube']: s#142
[#177 'texture_cube_array']: s#143
[#177 'texture_depth_2d']: s#133
[#177 'texture_depth_2d_array']: s#134
[#177 'texture_depth_cube']: s#135
[#177 'texture_depth_cube_array']: s#136
[#177 'texture_depth_multisampled_2d']: s#137
[#177 'texture_multisampled_2d']: s#144
[#177 'texture_storage_1d']: s#145
[#177 'texture_storage_2d']: s#146
[#177 'texture_storage_2d_array']: s#147
[#177 'texture_storage_3d']: s#148
[#177 'true']: s#92
[#177 'u32']: s#98
[#177 'vec2']: s#103
[#177 'vec3']: s#104
[#177 'vec4']: s#105
[#177 '~']: s#69
[#177 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#177 /0[fh]/]: s#118
[#177 /0[iu]?/]: s#115
[#177 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#177 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#177 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#177 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#177 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#177 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#177 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#177 /[1-9][0-9]*[fh]/]: s#119
[#177 /[1-9][0-9]*[iu]?/]: s#116
[#178 '=']: s#325
[#179 'array']: s#323
[#179 'atomic']: s#101
[#179 'bool']: s#94
[#179 'f16']: s#96
[#179 'f32']: s#95
[#179 'i32']: s#97
[#179 'mat2x2']: s#106
[#179 'mat2x3']: s#107
[#179 'mat2x4']: s#108
[#179 'mat3x2']: s#109
[#179 'mat3x3']: s#110
[#179 'mat3x4']: s#111
[#179 'mat4x2']: s#112
[#179 'mat4x3']: s#113
[#179 'mat4x4']: s#114
[#179 'ptr']: s#99
[#179 'sampler']: s#131
[#179 'sampler_comparison']: s#132
[#179 'texture_1d']: s#138
[#179 'texture_2d']: s#139
[#179 'texture_2d_array']: s#140
[#179 'texture_3d']: s#141
[#179 'texture_cube']: s#142
[#179 'texture_cube_array']: s#143
[#179 'texture_depth_2d']: s#133
[#179 'texture_depth_2d_array']: s#134
[#179 'texture_depth_cube']: s#135
[#179 'texture_depth_cube_array']: s#136
[#179 'texture_depth_multisampled_2d']: s#137
[#179 'texture_multisampled_2d']: s#144
[#179 'texture_storage_1d']: s#145
[#179 'texture_storage_2d']: s#146
[#179 'texture_storage_2d_array']: s#147
[#179 'texture_storage_3d']: s#148
[#179 'u32']: s#98
[#179 'vec2']: s#103
[#179 'vec3']: s#104
[#179 'vec4']: s#105
[#179 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#180 ';']: r#114
[#180 '@']: r#114
[#180 'alias']: r#114
[#180 'const']: r#114
[#180 'const_assert']: r#114
[#180 'fn']: r#114
[#180 'override']: r#114
[#180 'struct']: r#114
[#180 'var']: r#114
[#180 EndOfText]: r#114
[#181 '@']: s#35
[#182 '(']: s#313
[#183 ';']: r#115
[#183 '@']: r#115
[#183 'alias']: r#115
[#183 'const']: r#115
[#183 'const_assert']: r#115
[#183 'fn']: r#115
[#183 'override']: r#115
[#183 'struct']: r#115
[#183 'var']: r#115
[#183 EndOfText]: r#115
[#184 '{']: s#312
[#185 '{']: r#116
[#186 '@']: s#35
[#187 /\u200B_template_args_start/]: s#298
[#188 /\u200B_template_args_start/]: s#298
[#189 /\u200B_template_args_start/]: s#298
[#190 /\u200B_template_args_start/]: s#298
[#191 /\u200B_template_args_start/]: s#298
[#192 '(']: r#117
[#192 /\u200B_template_args_start/]: s#298
[#193 '(']: r#118
[#193 /\u200B_template_args_start/]: s#298
[#194 '(']: r#119
[#194 /\u200B_template_args_start/]: s#298
[#195 ')']: s#302
[#196 '!=']: r#120
[#196 '%']: r#120
[#196 '&&']: r#120
[#196 '&']: r#120
[#196 ')']: r#120
[#196 '*']: r#120
[#196 '+']: r#120
[#196 ',']: r#120
[#196 '-']: r#120
[#196 '.']: r#120
[#196 '/']: r#120
[#196 ':']: r#120
[#196 ';']: r#120
[#196 '==']: r#120
[#196 '@']: r#120
[#196 '[']: r#120
[#196 ']']: r#120
[#196 '^']: r#120
[#196 '{']: r#120
[#196 '|']: r#120
[#196 '||']: r#120
[#196 /\u200B_greater_than/]: r#120
[#196 /\u200B_greater_than_equal/]: r#120
[#196 /\u200B_less_than/]: r#120
[#196 /\u200B_less_than_equal/]: r#120
[#196 /\u200B_shift_left/]: r#120
[#196 /\u200B_shift_right/]: r#120
[#196 /\u200B_template_args_end/]: r#120
[#197 '!']: s#68
[#197 '&']: s#71
[#197 '(']: s#83
[#197 '*']: s#70
[#197 '-']: s#67
[#197 'array']: s#87
[#197 'atomic']: s#101
[#197 'bitcast']: s#77
[#197 'bool']: s#94
[#197 'f16']: s#96
[#197 'f32']: s#95
[#197 'false']: s#93
[#197 'i32']: s#97
[#197 'mat2x2']: s#106
[#197 'mat2x3']: s#107
[#197 'mat2x4']: s#108
[#197 'mat3x2']: s#109
[#197 'mat3x3']: s#110
[#197 'mat3x4']: s#111
[#197 'mat4x2']: s#112
[#197 'mat4x3']: s#113
[#197 'mat4x4']: s#114
[#197 'ptr']: s#99
[#197 'sampler']: s#131
[#197 'sampler_comparison']: s#132
[#197 'texture_1d']: s#138
[#197 'texture_2d']: s#139
[#197 'texture_2d_array']: s#140
[#197 'texture_3d']: s#141
[#197 'texture_cube']: s#142
[#197 'texture_cube_array']: s#143
[#197 'texture_depth_2d']: s#133
[#197 'texture_depth_2d_array']: s#134
[#197 'texture_depth_cube']: s#135
[#197 'texture_depth_cube_array']: s#136
[#197 'texture_depth_multisampled_2d']: s#137
[#197 'texture_multisampled_2d']: s#144
[#197 'texture_storage_1d']: s#145
[#197 'texture_storage_2d']: s#146
[#197 'texture_storage_2d_array']: s#147
[#197 'texture_storage_3d']: s#148
[#197 'true']: s#92
[#197 'u32']: s#98
[#197 'vec2']: s#103
[#197 'vec3']: s#104
[#197 'vec4']: s#105
[#197 '~']: s#69
[#197 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#197 /0[fh]/]: s#118
[#197 /0[iu]?/]: s#115
[#197 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#197 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#197 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#197 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#197 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#197 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#197 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#197 /[1-9][0-9]*[fh]/]: s#119
[#197 /[1-9][0-9]*[iu]?/]: s#116
[#198 /\u200B_template_args_start/]: s#298
[#199 '!=']: r#121
[#199 '%']: r#121
[#199 '&&']: r#121
[#199 '&']: r#121
[#199 ')']: r#121
[#199 '*']: r#121
[#199 '+']: r#121
[#199 ',']: r#121
[#199 '-']: r#121
[#199 '/']: r#121
[#199 ':']: r#121
[#199 ';']: r#121
[#199 '==']: r#121
[#199 '@']: r#121
[#199 ']']: r#121
[#199 '^']: r#121
[#199 '{']: r#121
[#199 '|']: r#121
[#199 '||']: r#121
[#199 /\u200B_greater_than/]: r#121
[#199 /\u200B_greater_than_equal/]: r#121
[#199 /\u200B_less_than/]: r#121
[#199 /\u200B_less_than_equal/]: r#121
[#199 /\u200B_shift_left/]: r#121
[#199 /\u200B_shift_right/]: r#121
[#199 /\u200B_template_args_end/]: r#121
[#200 '!=']: r#122
[#200 '%']: r#122
[#200 '&&']: r#122
[#200 '&']: r#122
[#200 ')']: r#122
[#200 '*']: r#122
[#200 '+']: r#122
[#200 ',']: r#122
[#200 '-']: r#122
[#200 '/']: r#122
[#200 ':']: r#122
[#200 ';']: r#122
[#200 '==']: r#122
[#200 '@']: r#122
[#200 ']']: r#122
[#200 '^']: r#122
[#200 '{']: r#122
[#200 '|']: r#122
[#200 '||']: r#122
[#200 /\u200B_greater_than/]: r#122
[#200 /\u200B_greater_than_equal/]: r#122
[#200 /\u200B_less_than/]: r#122
[#200 /\u200B_less_than_equal/]: r#122
[#200 /\u200B_shift_left/]: r#122
[#200 /\u200B_shift_right/]: r#122
[#200 /\u200B_template_args_end/]: r#122
[#201 '!']: s#68
[#201 '&']: s#71
[#201 '(']: s#83
[#201 '*']: s#70
[#201 '-']: s#67
[#201 'array']: s#87
[#201 'atomic']: s#101
[#201 'bitcast']: s#77
[#201 'bool']: s#94
[#201 'f16']: s#96
[#201 'f32']: s#95
[#201 'false']: s#93
[#201 'i32']: s#97
[#201 'mat2x2']: s#106
[#201 'mat2x3']: s#107
[#201 'mat2x4']: s#108
[#201 'mat3x2']: s#109
[#201 'mat3x3']: s#110
[#201 'mat3x4']: s#111
[#201 'mat4x2']: s#112
[#201 'mat4x3']: s#113
[#201 'mat4x4']: s#114
[#201 'ptr']: s#99
[#201 'sampler']: s#131
[#201 'sampler_comparison']: s#132
[#201 'texture_1d']: s#138
[#201 'texture_2d']: s#139
[#201 'texture_2d_array']: s#140
[#201 'texture_3d']: s#141
[#201 'texture_cube']: s#142
[#201 'texture_cube_array']: s#143
[#201 'texture_depth_2d']: s#133
[#201 'texture_depth_2d_array']: s#134
[#201 'texture_depth_cube']: s#135
[#201 'texture_depth_cube_array']: s#136
[#201 'texture_depth_multisampled_2d']: s#137
[#201 'texture_multisampled_2d']: s#144
[#201 'texture_storage_1d']: s#145
[#201 'texture_storage_2d']: s#146
[#201 'texture_storage_2d_array']: s#147
[#201 'texture_storage_3d']: s#148
[#201 'true']: s#92
[#201 'u32']: s#98
[#201 'vec2']: s#103
[#201 'vec3']: s#104
[#201 'vec4']: s#105
[#201 '~']: s#69
[#201 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#201 /0[fh]/]: s#118
[#201 /0[iu]?/]: s#115
[#201 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#201 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#201 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#201 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#201 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#201 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#201 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#201 /[1-9][0-9]*[fh]/]: s#119
[#201 /[1-9][0-9]*[iu]?/]: s#116
[#202 '/[rgba]/']: s#288
[#202 '/[rgba][rgba]/']: s#289
[#202 '/[rgba][rgba][rgba]/']: s#290
[#202 '/[rgba][rgba][rgba][rgba]/']: s#291
[#202 '/[xyzw]/']: s#292
[#202 '/[xyzw][xyzw]/']: s#293
[#202 '/[xyzw][xyzw][xyzw]/']: s#294
[#202 '/[xyzw][xyzw][xyzw][xyzw]/']: s#295
[#202 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#287
[#203 '!=']: r#123
[#203 '%']: r#123
[#203 '&&']: r#123
[#203 '&']: r#123
[#203 ')']: r#123
[#203 '*']: r#123
[#203 '+']: r#123
[#203 ',']: r#123
[#203 '-']: r#123
[#203 '/']: r#123
[#203 ':']: r#123
[#203 ';']: r#123
[#203 '==']: r#123
[#203 '@']: r#123
[#203 ']']: r#123
[#203 '^']: r#123
[#203 '{']: r#123
[#203 '|']: r#123
[#203 '||']: r#123
[#203 /\u200B_greater_than/]: r#123
[#203 /\u200B_greater_than_equal/]: r#123
[#203 /\u200B_less_than/]: r#123
[#203 /\u200B_less_than_equal/]: r#123
[#203 /\u200B_shift_left/]: r#123
[#203 /\u200B_shift_right/]: r#123
[#203 /\u200B_template_args_end/]: r#123
[#204 '!=']: r#124
[#204 '%']: r#124
[#204 '&&']: r#124
[#204 '&']: r#124
[#204 ')']: r#124
[#204 '*']: r#124
[#204 '+']: r#124
[#204 ',']: r#124
[#204 '-']: r#124
[#204 '/']: r#124
[#204 ':']: r#124
[#204 ';']: r#124
[#204 '==']: r#124
[#204 '@']: r#124
[#204 ']']: r#124
[#204 '^']: r#124
[#204 '{']: r#124
[#204 '|']: r#124
[#204 '||']: r#124
[#204 /\u200B_greater_than/]: r#124
[#204 /\u200B_greater_than_equal/]: r#124
[#204 /\u200B_less_than/]: r#124
[#204 /\u200B_less_than_equal/]: r#124
[#204 /\u200B_shift_left/]: r#124
[#204 /\u200B_shift_right/]: r#124
[#204 /\u200B_template_args_end/]: r#124
[#205 '!=']: r#125
[#205 '%']: r#125
[#205 '&&']: r#125
[#205 '&']: r#125
[#205 ')']: r#125
[#205 '*']: r#125
[#205 '+']: r#125
[#205 ',']: r#125
[#205 '-']: r#125
[#205 '/']: r#125
[#205 ':']: r#125
[#205 ';']: r#125
[#205 '==']: r#125
[#205 '@']: r#125
[#205 ']']: r#125
[#205 '^']: r#125
[#205 '{']: r#125
[#205 '|']: r#125
[#205 '||']: r#125
[#205 /\u200B_greater_than/]: r#125
[#205 /\u200B_greater_than_equal/]: r#125
[#205 /\u200B_less_than/]: r#125
[#205 /\u200B_less_than_equal/]: r#125
[#205 /\u200B_shift_left/]: r#125
[#205 /\u200B_shift_right/]: r#125
[#205 /\u200B_template_args_end/]: r#125
[#206 '!=']: r#126
[#206 '%']: r#126
[#206 '&&']: r#126
[#206 '&']: r#126
[#206 ')']: r#126
[#206 '*']: r#126
[#206 '+']: r#126
[#206 ',']: r#126
[#206 '-']: r#126
[#206 '/']: r#126
[#206 ':']: r#126
[#206 ';']: r#126
[#206 '==']: r#126
[#206 '@']: r#126
[#206 ']']: r#126
[#206 '^']: r#126
[#206 '{']: r#126
[#206 '|']: r#126
[#206 '||']: r#126
[#206 /\u200B_greater_than/]: r#126
[#206 /\u200B_greater_than_equal/]: r#126
[#206 /\u200B_less_than/]: r#126
[#206 /\u200B_less_than_equal/]: r#126
[#206 /\u200B_shift_left/]: r#126
[#206 /\u200B_shift_right/]: r#126
[#206 /\u200B_template_args_end/]: r#126
[#207 '!=']: r#127
[#207 '%']: r#127
[#207 '&&']: r#127
[#207 '&']: r#127
[#207 ')']: r#127
[#207 '*']: r#127
[#207 '+']: r#127
[#207 ',']: r#127
[#207 '-']: r#127
[#207 '/']: r#127
[#207 ':']: r#127
[#207 ';']: r#127
[#207 '==']: r#127
[#207 '@']: r#127
[#207 ']']: r#127
[#207 '^']: r#127
[#207 '{']: r#127
[#207 '|']: r#127
[#207 '||']: r#127
[#207 /\u200B_greater_than/]: r#127
[#207 /\u200B_greater_than_equal/]: r#127
[#207 /\u200B_less_than/]: r#127
[#207 /\u200B_less_than_equal/]: r#127
[#207 /\u200B_shift_left/]: r#127
[#207 /\u200B_shift_right/]: r#127
[#207 /\u200B_template_args_end/]: r#127
[#208 '!']: s#68
[#208 '&']: s#71
[#208 '(']: s#83
[#208 '*']: s#70
[#208 '-']: s#67
[#208 'array']: s#87
[#208 'atomic']: s#101
[#208 'bitcast']: s#77
[#208 'bool']: s#94
[#208 'f16']: s#96
[#208 'f32']: s#95
[#208 'false']: s#93
[#208 'i32']: s#97
[#208 'mat2x2']: s#106
[#208 'mat2x3']: s#107
[#208 'mat2x4']: s#108
[#208 'mat3x2']: s#109
[#208 'mat3x3']: s#110
[#208 'mat3x4']: s#111
[#208 'mat4x2']: s#112
[#208 'mat4x3']: s#113
[#208 'mat4x4']: s#114
[#208 'ptr']: s#99
[#208 'sampler']: s#131
[#208 'sampler_comparison']: s#132
[#208 'texture_1d']: s#138
[#208 'texture_2d']: s#139
[#208 'texture_2d_array']: s#140
[#208 'texture_3d']: s#141
[#208 'texture_cube']: s#142
[#208 'texture_cube_array']: s#143
[#208 'texture_depth_2d']: s#133
[#208 'texture_depth_2d_array']: s#134
[#208 'texture_depth_cube']: s#135
[#208 'texture_depth_cube_array']: s#136
[#208 'texture_depth_multisampled_2d']: s#137
[#208 'texture_multisampled_2d']: s#144
[#208 'texture_storage_1d']: s#145
[#208 'texture_storage_2d']: s#146
[#208 'texture_storage_2d_array']: s#147
[#208 'texture_storage_3d']: s#148
[#208 'true']: s#92
[#208 'u32']: s#98
[#208 'vec2']: s#103
[#208 'vec3']: s#104
[#208 'vec4']: s#105
[#208 '~']: s#69
[#208 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#208 /0[fh]/]: s#118
[#208 /0[iu]?/]: s#115
[#208 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#208 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#208 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#208 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#208 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#208 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#208 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#208 /[1-9][0-9]*[fh]/]: s#119
[#208 /[1-9][0-9]*[iu]?/]: s#116
[#209 '!']: r#128
[#209 '&']: r#128
[#209 '(']: r#128
[#209 '*']: r#128
[#209 '-']: r#128
[#209 'array']: r#128
[#209 'atomic']: r#128
[#209 'bitcast']: r#128
[#209 'bool']: r#128
[#209 'f16']: r#128
[#209 'f32']: r#128
[#209 'false']: r#128
[#209 'i32']: r#128
[#209 'mat2x2']: r#128
[#209 'mat2x3']: r#128
[#209 'mat2x4']: r#128
[#209 'mat3x2']: r#128
[#209 'mat3x3']: r#128
[#209 'mat3x4']: r#128
[#209 'mat4x2']: r#128
[#209 'mat4x3']: r#128
[#209 'mat4x4']: r#128
[#209 'ptr']: r#128
[#209 'sampler']: r#128
[#209 'sampler_comparison']: r#128
[#209 'texture_1d']: r#128
[#209 'texture_2d']: r#128
[#209 'texture_2d_array']: r#128
[#209 'texture_3d']: r#128
[#209 'texture_cube']: r#128
[#209 'texture_cube_array']: r#128
[#209 'texture_depth_2d']: r#128
[#209 'texture_depth_2d_array']: r#128
[#209 'texture_depth_cube']: r#128
[#209 'texture_depth_cube_array']: r#128
[#209 'texture_depth_multisampled_2d']: r#128
[#209 'texture_multisampled_2d']: r#128
[#209 'texture_storage_1d']: r#128
[#209 'texture_storage_2d']: r#128
[#209 'texture_storage_2d_array']: r#128
[#209 'texture_storage_3d']: r#128
[#209 'true']: r#128
[#209 'u32']: r#128
[#209 'vec2']: r#128
[#209 'vec3']: r#128
[#209 'vec4']: r#128
[#209 '~']: r#128
[#209 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#128
[#209 /0[fh]/]: r#128
[#209 /0[iu]?/]: r#128
[#209 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#128
[#209 /0[xX][0-9a-fA-F]+[iu]?/]: r#128
[#209 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#128
[#209 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#128
[#209 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#128
[#209 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#128
[#209 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#128
[#209 /[1-9][0-9]*[fh]/]: r#128
[#209 /[1-9][0-9]*[iu]?/]: r#128
[#210 '!']: r#129
[#210 '&']: r#129
[#210 '(']: r#129
[#210 '*']: r#129
[#210 '-']: r#129
[#210 'array']: r#129
[#210 'atomic']: r#129
[#210 'bitcast']: r#129
[#210 'bool']: r#129
[#210 'f16']: r#129
[#210 'f32']: r#129
[#210 'false']: r#129
[#210 'i32']: r#129
[#210 'mat2x2']: r#129
[#210 'mat2x3']: r#129
[#210 'mat2x4']: r#129
[#210 'mat3x2']: r#129
[#210 'mat3x3']: r#129
[#210 'mat3x4']: r#129
[#210 'mat4x2']: r#129
[#210 'mat4x3']: r#129
[#210 'mat4x4']: r#129
[#210 'ptr']: r#129
[#210 'sampler']: r#129
[#210 'sampler_comparison']: r#129
[#210 'texture_1d']: r#129
[#210 'texture_2d']: r#129
[#210 'texture_2d_array']: r#129
[#210 'texture_3d']: r#129
[#210 'texture_cube']: r#129
[#210 'texture_cube_array']: r#129
[#210 'texture_depth_2d']: r#129
[#210 'texture_depth_2d_array']: r#129
[#210 'texture_depth_cube']: r#129
[#210 'texture_depth_cube_array']: r#129
[#210 'texture_depth_multisampled_2d']: r#129
[#210 'texture_multisampled_2d']: r#129
[#210 'texture_storage_1d']: r#129
[#210 'texture_storage_2d']: r#129
[#210 'texture_storage_2d_array']: r#129
[#210 'texture_storage_3d']: r#129
[#210 'true']: r#129
[#210 'u32']: r#129
[#210 'vec2']: r#129
[#210 'vec3']: r#129
[#210 'vec4']: r#129
[#210 '~']: r#129
[#210 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#129
[#210 /0[fh]/]: r#129
[#210 /0[iu]?/]: r#129
[#210 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#129
[#210 /0[xX][0-9a-fA-F]+[iu]?/]: r#129
[#210 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#129
[#210 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#129
[#210 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#129
[#210 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#129
[#210 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#129
[#210 /[1-9][0-9]*[fh]/]: r#129
[#210 /[1-9][0-9]*[iu]?/]: r#129
[#211 '!']: r#130
[#211 '&']: r#130
[#211 '(']: r#130
[#211 '*']: r#130
[#211 '-']: r#130
[#211 'array']: r#130
[#211 'atomic']: r#130
[#211 'bitcast']: r#130
[#211 'bool']: r#130
[#211 'f16']: r#130
[#211 'f32']: r#130
[#211 'false']: r#130
[#211 'i32']: r#130
[#211 'mat2x2']: r#130
[#211 'mat2x3']: r#130
[#211 'mat2x4']: r#130
[#211 'mat3x2']: r#130
[#211 'mat3x3']: r#130
[#211 'mat3x4']: r#130
[#211 'mat4x2']: r#130
[#211 'mat4x3']: r#130
[#211 'mat4x4']: r#130
[#211 'ptr']: r#130
[#211 'sampler']: r#130
[#211 'sampler_comparison']: r#130
[#211 'texture_1d']: r#130
[#211 'texture_2d']: r#130
[#211 'texture_2d_array']: r#130
[#211 'texture_3d']: r#130
[#211 'texture_cube']: r#130
[#211 'texture_cube_array']: r#130
[#211 'texture_depth_2d']: r#130
[#211 'texture_depth_2d_array']: r#130
[#211 'texture_depth_cube']: r#130
[#211 'texture_depth_cube_array']: r#130
[#211 'texture_depth_multisampled_2d']: r#130
[#211 'texture_multisampled_2d']: r#130
[#211 'texture_storage_1d']: r#130
[#211 'texture_storage_2d']: r#130
[#211 'texture_storage_2d_array']: r#130
[#211 'texture_storage_3d']: r#130
[#211 'true']: r#130
[#211 'u32']: r#130
[#211 'vec2']: r#130
[#211 'vec3']: r#130
[#211 'vec4']: r#130
[#211 '~']: r#130
[#211 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#130
[#211 /0[fh]/]: r#130
[#211 /0[iu]?/]: r#130
[#211 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#130
[#211 /0[xX][0-9a-fA-F]+[iu]?/]: r#130
[#211 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#130
[#211 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#130
[#211 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#130
[#211 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#130
[#211 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#130
[#211 /[1-9][0-9]*[fh]/]: r#130
[#211 /[1-9][0-9]*[iu]?/]: r#130
[#212 '!']: s#68
[#212 '&']: s#71
[#212 '(']: s#83
[#212 '*']: s#70
[#212 '-']: s#67
[#212 'array']: s#87
[#212 'atomic']: s#101
[#212 'bitcast']: s#77
[#212 'bool']: s#94
[#212 'f16']: s#96
[#212 'f32']: s#95
[#212 'false']: s#93
[#212 'i32']: s#97
[#212 'mat2x2']: s#106
[#212 'mat2x3']: s#107
[#212 'mat2x4']: s#108
[#212 'mat3x2']: s#109
[#212 'mat3x3']: s#110
[#212 'mat3x4']: s#111
[#212 'mat4x2']: s#112
[#212 'mat4x3']: s#113
[#212 'mat4x4']: s#114
[#212 'ptr']: s#99
[#212 'sampler']: s#131
[#212 'sampler_comparison']: s#132
[#212 'texture_1d']: s#138
[#212 'texture_2d']: s#139
[#212 'texture_2d_array']: s#140
[#212 'texture_3d']: s#141
[#212 'texture_cube']: s#142
[#212 'texture_cube_array']: s#143
[#212 'texture_depth_2d']: s#133
[#212 'texture_depth_2d_array']: s#134
[#212 'texture_depth_cube']: s#135
[#212 'texture_depth_cube_array']: s#136
[#212 'texture_depth_multisampled_2d']: s#137
[#212 'texture_multisampled_2d']: s#144
[#212 'texture_storage_1d']: s#145
[#212 'texture_storage_2d']: s#146
[#212 'texture_storage_2d_array']: s#147
[#212 'texture_storage_3d']: s#148
[#212 'true']: s#92
[#212 'u32']: s#98
[#212 'vec2']: s#103
[#212 'vec3']: s#104
[#212 'vec4']: s#105
[#212 '~']: s#69
[#212 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#212 /0[fh]/]: s#118
[#212 /0[iu]?/]: s#115
[#212 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#212 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#212 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#212 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#212 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#212 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#212 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#212 /[1-9][0-9]*[fh]/]: s#119
[#212 /[1-9][0-9]*[iu]?/]: s#116
[#213 '!']: s#68
[#213 '&']: s#71
[#213 '(']: s#83
[#213 '*']: s#70
[#213 '-']: s#67
[#213 'array']: s#87
[#213 'atomic']: s#101
[#213 'bitcast']: s#77
[#213 'bool']: s#94
[#213 'f16']: s#96
[#213 'f32']: s#95
[#213 'false']: s#93
[#213 'i32']: s#97
[#213 'mat2x2']: s#106
[#213 'mat2x3']: s#107
[#213 'mat2x4']: s#108
[#213 'mat3x2']: s#109
[#213 'mat3x3']: s#110
[#213 'mat3x4']: s#111
[#213 'mat4x2']: s#112
[#213 'mat4x3']: s#113
[#213 'mat4x4']: s#114
[#213 'ptr']: s#99
[#213 'sampler']: s#131
[#213 'sampler_comparison']: s#132
[#213 'texture_1d']: s#138
[#213 'texture_2d']: s#139
[#213 'texture_2d_array']: s#140
[#213 'texture_3d']: s#141
[#213 'texture_cube']: s#142
[#213 'texture_cube_array']: s#143
[#213 'texture_depth_2d']: s#133
[#213 'texture_depth_2d_array']: s#134
[#213 'texture_depth_cube']: s#135
[#213 'texture_depth_cube_array']: s#136
[#213 'texture_depth_multisampled_2d']: s#137
[#213 'texture_multisampled_2d']: s#144
[#213 'texture_storage_1d']: s#145
[#213 'texture_storage_2d']: s#146
[#213 'texture_storage_2d_array']: s#147
[#213 'texture_storage_3d']: s#148
[#213 'true']: s#92
[#213 'u32']: s#98
[#213 'vec2']: s#103
[#213 'vec3']: s#104
[#213 'vec4']: s#105
[#213 '~']: s#69
[#213 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#213 /0[fh]/]: s#118
[#213 /0[iu]?/]: s#115
[#213 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#213 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#213 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#213 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#213 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#213 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#213 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#213 /[1-9][0-9]*[fh]/]: s#119
[#213 /[1-9][0-9]*[iu]?/]: s#116
[#214 '!']: r#131
[#214 '&']: r#131
[#214 '(']: r#131
[#214 '*']: r#131
[#214 '-']: r#131
[#214 'array']: r#131
[#214 'atomic']: r#131
[#214 'bitcast']: r#131
[#214 'bool']: r#131
[#214 'f16']: r#131
[#214 'f32']: r#131
[#214 'false']: r#131
[#214 'i32']: r#131
[#214 'mat2x2']: r#131
[#214 'mat2x3']: r#131
[#214 'mat2x4']: r#131
[#214 'mat3x2']: r#131
[#214 'mat3x3']: r#131
[#214 'mat3x4']: r#131
[#214 'mat4x2']: r#131
[#214 'mat4x3']: r#131
[#214 'mat4x4']: r#131
[#214 'ptr']: r#131
[#214 'sampler']: r#131
[#214 'sampler_comparison']: r#131
[#214 'texture_1d']: r#131
[#214 'texture_2d']: r#131
[#214 'texture_2d_array']: r#131
[#214 'texture_3d']: r#131
[#214 'texture_cube']: r#131
[#214 'texture_cube_array']: r#131
[#214 'texture_depth_2d']: r#131
[#214 'texture_depth_2d_array']: r#131
[#214 'texture_depth_cube']: r#131
[#214 'texture_depth_cube_array']: r#131
[#214 'texture_depth_multisampled_2d']: r#131
[#214 'texture_multisampled_2d']: r#131
[#214 'texture_storage_1d']: r#131
[#214 'texture_storage_2d']: r#131
[#214 'texture_storage_2d_array']: r#131
[#214 'texture_storage_3d']: r#131
[#214 'true']: r#131
[#214 'u32']: r#131
[#214 'vec2']: r#131
[#214 'vec3']: r#131
[#214 'vec4']: r#131
[#214 '~']: r#131
[#214 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#131
[#214 /0[fh]/]: r#131
[#214 /0[iu]?/]: r#131
[#214 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#131
[#214 /0[xX][0-9a-fA-F]+[iu]?/]: r#131
[#214 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#131
[#214 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#131
[#214 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#131
[#214 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#131
[#214 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#131
[#214 /[1-9][0-9]*[fh]/]: r#131
[#214 /[1-9][0-9]*[iu]?/]: r#131
[#215 '!']: r#132
[#215 '&']: r#132
[#215 '(']: r#132
[#215 '*']: r#132
[#215 '-']: r#132
[#215 'array']: r#132
[#215 'atomic']: r#132
[#215 'bitcast']: r#132
[#215 'bool']: r#132
[#215 'f16']: r#132
[#215 'f32']: r#132
[#215 'false']: r#132
[#215 'i32']: r#132
[#215 'mat2x2']: r#132
[#215 'mat2x3']: r#132
[#215 'mat2x4']: r#132
[#215 'mat3x2']: r#132
[#215 'mat3x3']: r#132
[#215 'mat3x4']: r#132
[#215 'mat4x2']: r#132
[#215 'mat4x3']: r#132
[#215 'mat4x4']: r#132
[#215 'ptr']: r#132
[#215 'sampler']: r#132
[#215 'sampler_comparison']: r#132
[#215 'texture_1d']: r#132
[#215 'texture_2d']: r#132
[#215 'texture_2d_array']: r#132
[#215 'texture_3d']: r#132
[#215 'texture_cube']: r#132
[#215 'texture_cube_array']: r#132
[#215 'texture_depth_2d']: r#132
[#215 'texture_depth_2d_array']: r#132
[#215 'texture_depth_cube']: r#132
[#215 'texture_depth_cube_array']: r#132
[#215 'texture_depth_multisampled_2d']: r#132
[#215 'texture_multisampled_2d']: r#132
[#215 'texture_storage_1d']: r#132
[#215 'texture_storage_2d']: r#132
[#215 'texture_storage_2d_array']: r#132
[#215 'texture_storage_3d']: r#132
[#215 'true']: r#132
[#215 'u32']: r#132
[#215 'vec2']: r#132
[#215 'vec3']: r#132
[#215 'vec4']: r#132
[#215 '~']: r#132
[#215 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#132
[#215 /0[fh]/]: r#132
[#215 /0[iu]?/]: r#132
[#215 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#132
[#215 /0[xX][0-9a-fA-F]+[iu]?/]: r#132
[#215 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#132
[#215 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#132
[#215 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#132
[#215 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#132
[#215 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#132
[#215 /[1-9][0-9]*[fh]/]: r#132
[#215 /[1-9][0-9]*[iu]?/]: r#132
[#216 '!']: s#68
[#216 '&']: s#71
[#216 '(']: s#83
[#216 '*']: s#70
[#216 '-']: s#67
[#216 'array']: s#87
[#216 'atomic']: s#101
[#216 'bitcast']: s#77
[#216 'bool']: s#94
[#216 'f16']: s#96
[#216 'f32']: s#95
[#216 'false']: s#93
[#216 'i32']: s#97
[#216 'mat2x2']: s#106
[#216 'mat2x3']: s#107
[#216 'mat2x4']: s#108
[#216 'mat3x2']: s#109
[#216 'mat3x3']: s#110
[#216 'mat3x4']: s#111
[#216 'mat4x2']: s#112
[#216 'mat4x3']: s#113
[#216 'mat4x4']: s#114
[#216 'ptr']: s#99
[#216 'sampler']: s#131
[#216 'sampler_comparison']: s#132
[#216 'texture_1d']: s#138
[#216 'texture_2d']: s#139
[#216 'texture_2d_array']: s#140
[#216 'texture_3d']: s#141
[#216 'texture_cube']: s#142
[#216 'texture_cube_array']: s#143
[#216 'texture_depth_2d']: s#133
[#216 'texture_depth_2d_array']: s#134
[#216 'texture_depth_cube']: s#135
[#216 'texture_depth_cube_array']: s#136
[#216 'texture_depth_multisampled_2d']: s#137
[#216 'texture_multisampled_2d']: s#144
[#216 'texture_storage_1d']: s#145
[#216 'texture_storage_2d']: s#146
[#216 'texture_storage_2d_array']: s#147
[#216 'texture_storage_3d']: s#148
[#216 'true']: s#92
[#216 'u32']: s#98
[#216 'vec2']: s#103
[#216 'vec3']: s#104
[#216 'vec4']: s#105
[#216 '~']: s#69
[#216 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#216 /0[fh]/]: s#118
[#216 /0[iu]?/]: s#115
[#216 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#216 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#216 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#216 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#216 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#216 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#216 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#216 /[1-9][0-9]*[fh]/]: s#119
[#216 /[1-9][0-9]*[iu]?/]: s#116
[#217 '!']: r#133
[#217 '&']: r#133
[#217 '(']: r#133
[#217 '*']: r#133
[#217 '-']: r#133
[#217 'array']: r#133
[#217 'atomic']: r#133
[#217 'bitcast']: r#133
[#217 'bool']: r#133
[#217 'f16']: r#133
[#217 'f32']: r#133
[#217 'false']: r#133
[#217 'i32']: r#133
[#217 'mat2x2']: r#133
[#217 'mat2x3']: r#133
[#217 'mat2x4']: r#133
[#217 'mat3x2']: r#133
[#217 'mat3x3']: r#133
[#217 'mat3x4']: r#133
[#217 'mat4x2']: r#133
[#217 'mat4x3']: r#133
[#217 'mat4x4']: r#133
[#217 'ptr']: r#133
[#217 'sampler']: r#133
[#217 'sampler_comparison']: r#133
[#217 'texture_1d']: r#133
[#217 'texture_2d']: r#133
[#217 'texture_2d_array']: r#133
[#217 'texture_3d']: r#133
[#217 'texture_cube']: r#133
[#217 'texture_cube_array']: r#133
[#217 'texture_depth_2d']: r#133
[#217 'texture_depth_2d_array']: r#133
[#217 'texture_depth_cube']: r#133
[#217 'texture_depth_cube_array']: r#133
[#217 'texture_depth_multisampled_2d']: r#133
[#217 'texture_multisampled_2d']: r#133
[#217 'texture_storage_1d']: r#133
[#217 'texture_storage_2d']: r#133
[#217 'texture_storage_2d_array']: r#133
[#217 'texture_storage_3d']: r#133
[#217 'true']: r#133
[#217 'u32']: r#133
[#217 'vec2']: r#133
[#217 'vec3']: r#133
[#217 'vec4']: r#133
[#217 '~']: r#133
[#217 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#133
[#217 /0[fh]/]: r#133
[#217 /0[iu]?/]: r#133
[#217 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#133
[#217 /0[xX][0-9a-fA-F]+[iu]?/]: r#133
[#217 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#133
[#217 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#133
[#217 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#133
[#217 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#133
[#217 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#133
[#217 /[1-9][0-9]*[fh]/]: r#133
[#217 /[1-9][0-9]*[iu]?/]: r#133
[#218 '!']: r#134
[#218 '&']: r#134
[#218 '(']: r#134
[#218 '*']: r#134
[#218 '-']: r#134
[#218 'array']: r#134
[#218 'atomic']: r#134
[#218 'bitcast']: r#134
[#218 'bool']: r#134
[#218 'f16']: r#134
[#218 'f32']: r#134
[#218 'false']: r#134
[#218 'i32']: r#134
[#218 'mat2x2']: r#134
[#218 'mat2x3']: r#134
[#218 'mat2x4']: r#134
[#218 'mat3x2']: r#134
[#218 'mat3x3']: r#134
[#218 'mat3x4']: r#134
[#218 'mat4x2']: r#134
[#218 'mat4x3']: r#134
[#218 'mat4x4']: r#134
[#218 'ptr']: r#134
[#218 'sampler']: r#134
[#218 'sampler_comparison']: r#134
[#218 'texture_1d']: r#134
[#218 'texture_2d']: r#134
[#218 'texture_2d_array']: r#134
[#218 'texture_3d']: r#134
[#218 'texture_cube']: r#134
[#218 'texture_cube_array']: r#134
[#218 'texture_depth_2d']: r#134
[#218 'texture_depth_2d_array']: r#134
[#218 'texture_depth_cube']: r#134
[#218 'texture_depth_cube_array']: r#134
[#218 'texture_depth_multisampled_2d']: r#134
[#218 'texture_multisampled_2d']: r#134
[#218 'texture_storage_1d']: r#134
[#218 'texture_storage_2d']: r#134
[#218 'texture_storage_2d_array']: r#134
[#218 'texture_storage_3d']: r#134
[#218 'true']: r#134
[#218 'u32']: r#134
[#218 'vec2']: r#134
[#218 'vec3']: r#134
[#218 'vec4']: r#134
[#218 '~']: r#134
[#218 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#134
[#218 /0[fh]/]: r#134
[#218 /0[iu]?/]: r#134
[#218 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#134
[#218 /0[xX][0-9a-fA-F]+[iu]?/]: r#134
[#218 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#134
[#218 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#134
[#218 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#134
[#218 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#134
[#218 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#134
[#218 /[1-9][0-9]*[fh]/]: r#134
[#218 /[1-9][0-9]*[iu]?/]: r#134
[#219 '!']: s#68
[#219 '&']: s#71
[#219 '(']: s#83
[#219 '*']: s#70
[#219 '-']: s#67
[#219 'array']: s#87
[#219 'atomic']: s#101
[#219 'bitcast']: s#77
[#219 'bool']: s#94
[#219 'f16']: s#96
[#219 'f32']: s#95
[#219 'false']: s#93
[#219 'i32']: s#97
[#219 'mat2x2']: s#106
[#219 'mat2x3']: s#107
[#219 'mat2x4']: s#108
[#219 'mat3x2']: s#109
[#219 'mat3x3']: s#110
[#219 'mat3x4']: s#111
[#219 'mat4x2']: s#112
[#219 'mat4x3']: s#113
[#219 'mat4x4']: s#114
[#219 'ptr']: s#99
[#219 'sampler']: s#131
[#219 'sampler_comparison']: s#132
[#219 'texture_1d']: s#138
[#219 'texture_2d']: s#139
[#219 'texture_2d_array']: s#140
[#219 'texture_3d']: s#141
[#219 'texture_cube']: s#142
[#219 'texture_cube_array']: s#143
[#219 'texture_depth_2d']: s#133
[#219 'texture_depth_2d_array']: s#134
[#219 'texture_depth_cube']: s#135
[#219 'texture_depth_cube_array']: s#136
[#219 'texture_depth_multisampled_2d']: s#137
[#219 'texture_multisampled_2d']: s#144
[#219 'texture_storage_1d']: s#145
[#219 'texture_storage_2d']: s#146
[#219 'texture_storage_2d_array']: s#147
[#219 'texture_storage_3d']: s#148
[#219 'true']: s#92
[#219 'u32']: s#98
[#219 'vec2']: s#103
[#219 'vec3']: s#104
[#219 'vec4']: s#105
[#219 '~']: s#69
[#219 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#219 /0[fh]/]: s#118
[#219 /0[iu]?/]: s#115
[#219 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#219 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#219 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#219 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#219 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#219 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#219 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#219 /[1-9][0-9]*[fh]/]: s#119
[#219 /[1-9][0-9]*[iu]?/]: s#116
[#220 '!']: s#68
[#220 '&']: s#71
[#220 '(']: s#83
[#220 '*']: s#70
[#220 '-']: s#67
[#220 'array']: s#87
[#220 'atomic']: s#101
[#220 'bitcast']: s#77
[#220 'bool']: s#94
[#220 'f16']: s#96
[#220 'f32']: s#95
[#220 'false']: s#93
[#220 'i32']: s#97
[#220 'mat2x2']: s#106
[#220 'mat2x3']: s#107
[#220 'mat2x4']: s#108
[#220 'mat3x2']: s#109
[#220 'mat3x3']: s#110
[#220 'mat3x4']: s#111
[#220 'mat4x2']: s#112
[#220 'mat4x3']: s#113
[#220 'mat4x4']: s#114
[#220 'ptr']: s#99
[#220 'sampler']: s#131
[#220 'sampler_comparison']: s#132
[#220 'texture_1d']: s#138
[#220 'texture_2d']: s#139
[#220 'texture_2d_array']: s#140
[#220 'texture_3d']: s#141
[#220 'texture_cube']: s#142
[#220 'texture_cube_array']: s#143
[#220 'texture_depth_2d']: s#133
[#220 'texture_depth_2d_array']: s#134
[#220 'texture_depth_cube']: s#135
[#220 'texture_depth_cube_array']: s#136
[#220 'texture_depth_multisampled_2d']: s#137
[#220 'texture_multisampled_2d']: s#144
[#220 'texture_storage_1d']: s#145
[#220 'texture_storage_2d']: s#146
[#220 'texture_storage_2d_array']: s#147
[#220 'texture_storage_3d']: s#148
[#220 'true']: s#92
[#220 'u32']: s#98
[#220 'vec2']: s#103
[#220 'vec3']: s#104
[#220 'vec4']: s#105
[#220 '~']: s#69
[#220 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#220 /0[fh]/]: s#118
[#220 /0[iu]?/]: s#115
[#220 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#220 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#220 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#220 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#220 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#220 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#220 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#220 /[1-9][0-9]*[fh]/]: s#119
[#220 /[1-9][0-9]*[iu]?/]: s#116
[#221 '!']: s#68
[#221 '&']: s#71
[#221 '(']: s#83
[#221 '*']: s#70
[#221 '-']: s#67
[#221 'array']: s#87
[#221 'atomic']: s#101
[#221 'bitcast']: s#77
[#221 'bool']: s#94
[#221 'f16']: s#96
[#221 'f32']: s#95
[#221 'false']: s#93
[#221 'i32']: s#97
[#221 'mat2x2']: s#106
[#221 'mat2x3']: s#107
[#221 'mat2x4']: s#108
[#221 'mat3x2']: s#109
[#221 'mat3x3']: s#110
[#221 'mat3x4']: s#111
[#221 'mat4x2']: s#112
[#221 'mat4x3']: s#113
[#221 'mat4x4']: s#114
[#221 'ptr']: s#99
[#221 'sampler']: s#131
[#221 'sampler_comparison']: s#132
[#221 'texture_1d']: s#138
[#221 'texture_2d']: s#139
[#221 'texture_2d_array']: s#140
[#221 'texture_3d']: s#141
[#221 'texture_cube']: s#142
[#221 'texture_cube_array']: s#143
[#221 'texture_depth_2d']: s#133
[#221 'texture_depth_2d_array']: s#134
[#221 'texture_depth_cube']: s#135
[#221 'texture_depth_cube_array']: s#136
[#221 'texture_depth_multisampled_2d']: s#137
[#221 'texture_multisampled_2d']: s#144
[#221 'texture_storage_1d']: s#145
[#221 'texture_storage_2d']: s#146
[#221 'texture_storage_2d_array']: s#147
[#221 'texture_storage_3d']: s#148
[#221 'true']: s#92
[#221 'u32']: s#98
[#221 'vec2']: s#103
[#221 'vec3']: s#104
[#221 'vec4']: s#105
[#221 '~']: s#69
[#221 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#221 /0[fh]/]: s#118
[#221 /0[iu]?/]: s#115
[#221 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#221 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#221 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#221 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#221 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#221 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#221 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#221 /[1-9][0-9]*[fh]/]: s#119
[#221 /[1-9][0-9]*[iu]?/]: s#116
[#222 '!']: s#68
[#222 '&']: s#71
[#222 '(']: s#83
[#222 '*']: s#70
[#222 '-']: s#67
[#222 'array']: s#87
[#222 'atomic']: s#101
[#222 'bitcast']: s#77
[#222 'bool']: s#94
[#222 'f16']: s#96
[#222 'f32']: s#95
[#222 'false']: s#93
[#222 'i32']: s#97
[#222 'mat2x2']: s#106
[#222 'mat2x3']: s#107
[#222 'mat2x4']: s#108
[#222 'mat3x2']: s#109
[#222 'mat3x3']: s#110
[#222 'mat3x4']: s#111
[#222 'mat4x2']: s#112
[#222 'mat4x3']: s#113
[#222 'mat4x4']: s#114
[#222 'ptr']: s#99
[#222 'sampler']: s#131
[#222 'sampler_comparison']: s#132
[#222 'texture_1d']: s#138
[#222 'texture_2d']: s#139
[#222 'texture_2d_array']: s#140
[#222 'texture_3d']: s#141
[#222 'texture_cube']: s#142
[#222 'texture_cube_array']: s#143
[#222 'texture_depth_2d']: s#133
[#222 'texture_depth_2d_array']: s#134
[#222 'texture_depth_cube']: s#135
[#222 'texture_depth_cube_array']: s#136
[#222 'texture_depth_multisampled_2d']: s#137
[#222 'texture_multisampled_2d']: s#144
[#222 'texture_storage_1d']: s#145
[#222 'texture_storage_2d']: s#146
[#222 'texture_storage_2d_array']: s#147
[#222 'texture_storage_3d']: s#148
[#222 'true']: s#92
[#222 'u32']: s#98
[#222 'vec2']: s#103
[#222 'vec3']: s#104
[#222 'vec4']: s#105
[#222 '~']: s#69
[#222 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#222 /0[fh]/]: s#118
[#222 /0[iu]?/]: s#115
[#222 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#222 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#222 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#222 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#222 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#222 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#222 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#222 /[1-9][0-9]*[fh]/]: s#119
[#222 /[1-9][0-9]*[iu]?/]: s#116
[#223 '!']: s#68
[#223 '&']: s#71
[#223 '(']: s#83
[#223 '*']: s#70
[#223 '-']: s#67
[#223 'array']: s#87
[#223 'atomic']: s#101
[#223 'bitcast']: s#77
[#223 'bool']: s#94
[#223 'f16']: s#96
[#223 'f32']: s#95
[#223 'false']: s#93
[#223 'i32']: s#97
[#223 'mat2x2']: s#106
[#223 'mat2x3']: s#107
[#223 'mat2x4']: s#108
[#223 'mat3x2']: s#109
[#223 'mat3x3']: s#110
[#223 'mat3x4']: s#111
[#223 'mat4x2']: s#112
[#223 'mat4x3']: s#113
[#223 'mat4x4']: s#114
[#223 'ptr']: s#99
[#223 'sampler']: s#131
[#223 'sampler_comparison']: s#132
[#223 'texture_1d']: s#138
[#223 'texture_2d']: s#139
[#223 'texture_2d_array']: s#140
[#223 'texture_3d']: s#141
[#223 'texture_cube']: s#142
[#223 'texture_cube_array']: s#143
[#223 'texture_depth_2d']: s#133
[#223 'texture_depth_2d_array']: s#134
[#223 'texture_depth_cube']: s#135
[#223 'texture_depth_cube_array']: s#136
[#223 'texture_depth_multisampled_2d']: s#137
[#223 'texture_multisampled_2d']: s#144
[#223 'texture_storage_1d']: s#145
[#223 'texture_storage_2d']: s#146
[#223 'texture_storage_2d_array']: s#147
[#223 'texture_storage_3d']: s#148
[#223 'true']: s#92
[#223 'u32']: s#98
[#223 'vec2']: s#103
[#223 'vec3']: s#104
[#223 'vec4']: s#105
[#223 '~']: s#69
[#223 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#223 /0[fh]/]: s#118
[#223 /0[iu]?/]: s#115
[#223 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#223 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#223 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#223 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#223 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#223 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#223 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#223 /[1-9][0-9]*[fh]/]: s#119
[#223 /[1-9][0-9]*[iu]?/]: s#116
[#224 '!']: s#68
[#224 '&']: s#71
[#224 '(']: s#83
[#224 '*']: s#70
[#224 '-']: s#67
[#224 'array']: s#87
[#224 'atomic']: s#101
[#224 'bitcast']: s#77
[#224 'bool']: s#94
[#224 'f16']: s#96
[#224 'f32']: s#95
[#224 'false']: s#93
[#224 'i32']: s#97
[#224 'mat2x2']: s#106
[#224 'mat2x3']: s#107
[#224 'mat2x4']: s#108
[#224 'mat3x2']: s#109
[#224 'mat3x3']: s#110
[#224 'mat3x4']: s#111
[#224 'mat4x2']: s#112
[#224 'mat4x3']: s#113
[#224 'mat4x4']: s#114
[#224 'ptr']: s#99
[#224 'sampler']: s#131
[#224 'sampler_comparison']: s#132
[#224 'texture_1d']: s#138
[#224 'texture_2d']: s#139
[#224 'texture_2d_array']: s#140
[#224 'texture_3d']: s#141
[#224 'texture_cube']: s#142
[#224 'texture_cube_array']: s#143
[#224 'texture_depth_2d']: s#133
[#224 'texture_depth_2d_array']: s#134
[#224 'texture_depth_cube']: s#135
[#224 'texture_depth_cube_array']: s#136
[#224 'texture_depth_multisampled_2d']: s#137
[#224 'texture_multisampled_2d']: s#144
[#224 'texture_storage_1d']: s#145
[#224 'texture_storage_2d']: s#146
[#224 'texture_storage_2d_array']: s#147
[#224 'texture_storage_3d']: s#148
[#224 'true']: s#92
[#224 'u32']: s#98
[#224 'vec2']: s#103
[#224 'vec3']: s#104
[#224 'vec4']: s#105
[#224 '~']: s#69
[#224 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#224 /0[fh]/]: s#118
[#224 /0[iu]?/]: s#115
[#224 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#224 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#224 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#224 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#224 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#224 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#224 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#224 /[1-9][0-9]*[fh]/]: s#119
[#224 /[1-9][0-9]*[iu]?/]: s#116
[#225 '!']: s#68
[#225 '&']: s#71
[#225 '(']: s#83
[#225 '*']: s#70
[#225 '-']: s#67
[#225 'array']: s#87
[#225 'atomic']: s#101
[#225 'bitcast']: s#77
[#225 'bool']: s#94
[#225 'f16']: s#96
[#225 'f32']: s#95
[#225 'false']: s#93
[#225 'i32']: s#97
[#225 'mat2x2']: s#106
[#225 'mat2x3']: s#107
[#225 'mat2x4']: s#108
[#225 'mat3x2']: s#109
[#225 'mat3x3']: s#110
[#225 'mat3x4']: s#111
[#225 'mat4x2']: s#112
[#225 'mat4x3']: s#113
[#225 'mat4x4']: s#114
[#225 'ptr']: s#99
[#225 'sampler']: s#131
[#225 'sampler_comparison']: s#132
[#225 'texture_1d']: s#138
[#225 'texture_2d']: s#139
[#225 'texture_2d_array']: s#140
[#225 'texture_3d']: s#141
[#225 'texture_cube']: s#142
[#225 'texture_cube_array']: s#143
[#225 'texture_depth_2d']: s#133
[#225 'texture_depth_2d_array']: s#134
[#225 'texture_depth_cube']: s#135
[#225 'texture_depth_cube_array']: s#136
[#225 'texture_depth_multisampled_2d']: s#137
[#225 'texture_multisampled_2d']: s#144
[#225 'texture_storage_1d']: s#145
[#225 'texture_storage_2d']: s#146
[#225 'texture_storage_2d_array']: s#147
[#225 'texture_storage_3d']: s#148
[#225 'true']: s#92
[#225 'u32']: s#98
[#225 'vec2']: s#103
[#225 'vec3']: s#104
[#225 'vec4']: s#105
[#225 '~']: s#69
[#225 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#225 /0[fh]/]: s#118
[#225 /0[iu]?/]: s#115
[#225 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#225 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#225 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#225 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#225 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#225 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#225 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#225 /[1-9][0-9]*[fh]/]: s#119
[#225 /[1-9][0-9]*[iu]?/]: s#116
[#226 '!']: s#68
[#226 '&']: s#71
[#226 '(']: s#83
[#226 '*']: s#70
[#226 '-']: s#67
[#226 'array']: s#87
[#226 'atomic']: s#101
[#226 'bitcast']: s#77
[#226 'bool']: s#94
[#226 'f16']: s#96
[#226 'f32']: s#95
[#226 'false']: s#93
[#226 'i32']: s#97
[#226 'mat2x2']: s#106
[#226 'mat2x3']: s#107
[#226 'mat2x4']: s#108
[#226 'mat3x2']: s#109
[#226 'mat3x3']: s#110
[#226 'mat3x4']: s#111
[#226 'mat4x2']: s#112
[#226 'mat4x3']: s#113
[#226 'mat4x4']: s#114
[#226 'ptr']: s#99
[#226 'sampler']: s#131
[#226 'sampler_comparison']: s#132
[#226 'texture_1d']: s#138
[#226 'texture_2d']: s#139
[#226 'texture_2d_array']: s#140
[#226 'texture_3d']: s#141
[#226 'texture_cube']: s#142
[#226 'texture_cube_array']: s#143
[#226 'texture_depth_2d']: s#133
[#226 'texture_depth_2d_array']: s#134
[#226 'texture_depth_cube']: s#135
[#226 'texture_depth_cube_array']: s#136
[#226 'texture_depth_multisampled_2d']: s#137
[#226 'texture_multisampled_2d']: s#144
[#226 'texture_storage_1d']: s#145
[#226 'texture_storage_2d']: s#146
[#226 'texture_storage_2d_array']: s#147
[#226 'texture_storage_3d']: s#148
[#226 'true']: s#92
[#226 'u32']: s#98
[#226 'vec2']: s#103
[#226 'vec3']: s#104
[#226 'vec4']: s#105
[#226 '~']: s#69
[#226 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#226 /0[fh]/]: s#118
[#226 /0[iu]?/]: s#115
[#226 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#226 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#226 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#226 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#226 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#226 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#226 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#226 /[1-9][0-9]*[fh]/]: s#119
[#226 /[1-9][0-9]*[iu]?/]: s#116
[#227 '!']: s#68
[#227 '&']: s#71
[#227 '(']: s#83
[#227 '*']: s#70
[#227 '-']: s#67
[#227 'array']: s#87
[#227 'atomic']: s#101
[#227 'bitcast']: s#77
[#227 'bool']: s#94
[#227 'f16']: s#96
[#227 'f32']: s#95
[#227 'false']: s#93
[#227 'i32']: s#97
[#227 'mat2x2']: s#106
[#227 'mat2x3']: s#107
[#227 'mat2x4']: s#108
[#227 'mat3x2']: s#109
[#227 'mat3x3']: s#110
[#227 'mat3x4']: s#111
[#227 'mat4x2']: s#112
[#227 'mat4x3']: s#113
[#227 'mat4x4']: s#114
[#227 'ptr']: s#99
[#227 'sampler']: s#131
[#227 'sampler_comparison']: s#132
[#227 'texture_1d']: s#138
[#227 'texture_2d']: s#139
[#227 'texture_2d_array']: s#140
[#227 'texture_3d']: s#141
[#227 'texture_cube']: s#142
[#227 'texture_cube_array']: s#143
[#227 'texture_depth_2d']: s#133
[#227 'texture_depth_2d_array']: s#134
[#227 'texture_depth_cube']: s#135
[#227 'texture_depth_cube_array']: s#136
[#227 'texture_depth_multisampled_2d']: s#137
[#227 'texture_multisampled_2d']: s#144
[#227 'texture_storage_1d']: s#145
[#227 'texture_storage_2d']: s#146
[#227 'texture_storage_2d_array']: s#147
[#227 'texture_storage_3d']: s#148
[#227 'true']: s#92
[#227 'u32']: s#98
[#227 'vec2']: s#103
[#227 'vec3']: s#104
[#227 'vec4']: s#105
[#227 '~']: s#69
[#227 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#227 /0[fh]/]: s#118
[#227 /0[iu]?/]: s#115
[#227 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#227 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#227 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#227 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#227 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#227 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#227 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#227 /[1-9][0-9]*[fh]/]: s#119
[#227 /[1-9][0-9]*[iu]?/]: s#116
[#228 '!']: r#135
[#228 '&']: r#135
[#228 '(']: r#135
[#228 '*']: r#135
[#228 '-']: r#135
[#228 'array']: r#135
[#228 'atomic']: r#135
[#228 'bitcast']: r#135
[#228 'bool']: r#135
[#228 'f16']: r#135
[#228 'f32']: r#135
[#228 'false']: r#135
[#228 'i32']: r#135
[#228 'mat2x2']: r#135
[#228 'mat2x3']: r#135
[#228 'mat2x4']: r#135
[#228 'mat3x2']: r#135
[#228 'mat3x3']: r#135
[#228 'mat3x4']: r#135
[#228 'mat4x2']: r#135
[#228 'mat4x3']: r#135
[#228 'mat4x4']: r#135
[#228 'ptr']: r#135
[#228 'sampler']: r#135
[#228 'sampler_comparison']: r#135
[#228 'texture_1d']: r#135
[#228 'texture_2d']: r#135
[#228 'texture_2d_array']: r#135
[#228 'texture_3d']: r#135
[#228 'texture_cube']: r#135
[#228 'texture_cube_array']: r#135
[#228 'texture_depth_2d']: r#135
[#228 'texture_depth_2d_array']: r#135
[#228 'texture_depth_cube']: r#135
[#228 'texture_depth_cube_array']: r#135
[#228 'texture_depth_multisampled_2d']: r#135
[#228 'texture_multisampled_2d']: r#135
[#228 'texture_storage_1d']: r#135
[#228 'texture_storage_2d']: r#135
[#228 'texture_storage_2d_array']: r#135
[#228 'texture_storage_3d']: r#135
[#228 'true']: r#135
[#228 'u32']: r#135
[#228 'vec2']: r#135
[#228 'vec3']: r#135
[#228 'vec4']: r#135
[#228 '~']: r#135
[#228 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#135
[#228 /0[fh]/]: r#135
[#228 /0[iu]?/]: r#135
[#228 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#135
[#228 /0[xX][0-9a-fA-F]+[iu]?/]: r#135
[#228 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#135
[#228 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#135
[#228 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#135
[#228 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#135
[#228 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#135
[#228 /[1-9][0-9]*[fh]/]: r#135
[#228 /[1-9][0-9]*[iu]?/]: r#135
[#229 '!']: r#136
[#229 '&']: r#136
[#229 '(']: r#136
[#229 '*']: r#136
[#229 '-']: r#136
[#229 'array']: r#136
[#229 'atomic']: r#136
[#229 'bitcast']: r#136
[#229 'bool']: r#136
[#229 'f16']: r#136
[#229 'f32']: r#136
[#229 'false']: r#136
[#229 'i32']: r#136
[#229 'mat2x2']: r#136
[#229 'mat2x3']: r#136
[#229 'mat2x4']: r#136
[#229 'mat3x2']: r#136
[#229 'mat3x3']: r#136
[#229 'mat3x4']: r#136
[#229 'mat4x2']: r#136
[#229 'mat4x3']: r#136
[#229 'mat4x4']: r#136
[#229 'ptr']: r#136
[#229 'sampler']: r#136
[#229 'sampler_comparison']: r#136
[#229 'texture_1d']: r#136
[#229 'texture_2d']: r#136
[#229 'texture_2d_array']: r#136
[#229 'texture_3d']: r#136
[#229 'texture_cube']: r#136
[#229 'texture_cube_array']: r#136
[#229 'texture_depth_2d']: r#136
[#229 'texture_depth_2d_array']: r#136
[#229 'texture_depth_cube']: r#136
[#229 'texture_depth_cube_array']: r#136
[#229 'texture_depth_multisampled_2d']: r#136
[#229 'texture_multisampled_2d']: r#136
[#229 'texture_storage_1d']: r#136
[#229 'texture_storage_2d']: r#136
[#229 'texture_storage_2d_array']: r#136
[#229 'texture_storage_3d']: r#136
[#229 'true']: r#136
[#229 'u32']: r#136
[#229 'vec2']: r#136
[#229 'vec3']: r#136
[#229 'vec4']: r#136
[#229 '~']: r#136
[#229 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#136
[#229 /0[fh]/]: r#136
[#229 /0[iu]?/]: r#136
[#229 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#136
[#229 /0[xX][0-9a-fA-F]+[iu]?/]: r#136
[#229 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#136
[#229 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#136
[#229 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#136
[#229 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#136
[#229 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#136
[#229 /[1-9][0-9]*[fh]/]: r#136
[#229 /[1-9][0-9]*[iu]?/]: r#136
[#230 '!']: r#137
[#230 '&']: r#137
[#230 '(']: r#137
[#230 '*']: r#137
[#230 '-']: r#137
[#230 'array']: r#137
[#230 'atomic']: r#137
[#230 'bitcast']: r#137
[#230 'bool']: r#137
[#230 'f16']: r#137
[#230 'f32']: r#137
[#230 'false']: r#137
[#230 'i32']: r#137
[#230 'mat2x2']: r#137
[#230 'mat2x3']: r#137
[#230 'mat2x4']: r#137
[#230 'mat3x2']: r#137
[#230 'mat3x3']: r#137
[#230 'mat3x4']: r#137
[#230 'mat4x2']: r#137
[#230 'mat4x3']: r#137
[#230 'mat4x4']: r#137
[#230 'ptr']: r#137
[#230 'sampler']: r#137
[#230 'sampler_comparison']: r#137
[#230 'texture_1d']: r#137
[#230 'texture_2d']: r#137
[#230 'texture_2d_array']: r#137
[#230 'texture_3d']: r#137
[#230 'texture_cube']: r#137
[#230 'texture_cube_array']: r#137
[#230 'texture_depth_2d']: r#137
[#230 'texture_depth_2d_array']: r#137
[#230 'texture_depth_cube']: r#137
[#230 'texture_depth_cube_array']: r#137
[#230 'texture_depth_multisampled_2d']: r#137
[#230 'texture_multisampled_2d']: r#137
[#230 'texture_storage_1d']: r#137
[#230 'texture_storage_2d']: r#137
[#230 'texture_storage_2d_array']: r#137
[#230 'texture_storage_3d']: r#137
[#230 'true']: r#137
[#230 'u32']: r#137
[#230 'vec2']: r#137
[#230 'vec3']: r#137
[#230 'vec4']: r#137
[#230 '~']: r#137
[#230 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#137
[#230 /0[fh]/]: r#137
[#230 /0[iu]?/]: r#137
[#230 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#137
[#230 /0[xX][0-9a-fA-F]+[iu]?/]: r#137
[#230 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#137
[#230 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#137
[#230 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#137
[#230 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#137
[#230 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#137
[#230 /[1-9][0-9]*[fh]/]: r#137
[#230 /[1-9][0-9]*[iu]?/]: r#137
[#231 '!']: r#138
[#231 '&']: r#138
[#231 '(']: r#138
[#231 '*']: r#138
[#231 '-']: r#138
[#231 'array']: r#138
[#231 'atomic']: r#138
[#231 'bitcast']: r#138
[#231 'bool']: r#138
[#231 'f16']: r#138
[#231 'f32']: r#138
[#231 'false']: r#138
[#231 'i32']: r#138
[#231 'mat2x2']: r#138
[#231 'mat2x3']: r#138
[#231 'mat2x4']: r#138
[#231 'mat3x2']: r#138
[#231 'mat3x3']: r#138
[#231 'mat3x4']: r#138
[#231 'mat4x2']: r#138
[#231 'mat4x3']: r#138
[#231 'mat4x4']: r#138
[#231 'ptr']: r#138
[#231 'sampler']: r#138
[#231 'sampler_comparison']: r#138
[#231 'texture_1d']: r#138
[#231 'texture_2d']: r#138
[#231 'texture_2d_array']: r#138
[#231 'texture_3d']: r#138
[#231 'texture_cube']: r#138
[#231 'texture_cube_array']: r#138
[#231 'texture_depth_2d']: r#138
[#231 'texture_depth_2d_array']: r#138
[#231 'texture_depth_cube']: r#138
[#231 'texture_depth_cube_array']: r#138
[#231 'texture_depth_multisampled_2d']: r#138
[#231 'texture_multisampled_2d']: r#138
[#231 'texture_storage_1d']: r#138
[#231 'texture_storage_2d']: r#138
[#231 'texture_storage_2d_array']: r#138
[#231 'texture_storage_3d']: r#138
[#231 'true']: r#138
[#231 'u32']: r#138
[#231 'vec2']: r#138
[#231 'vec3']: r#138
[#231 'vec4']: r#138
[#231 '~']: r#138
[#231 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#138
[#231 /0[fh]/]: r#138
[#231 /0[iu]?/]: r#138
[#231 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#138
[#231 /0[xX][0-9a-fA-F]+[iu]?/]: r#138
[#231 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#138
[#231 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#138
[#231 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#138
[#231 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#138
[#231 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#138
[#231 /[1-9][0-9]*[fh]/]: r#138
[#231 /[1-9][0-9]*[iu]?/]: r#138
[#232 '!']: s#68
[#232 '&']: s#71
[#232 '(']: s#83
[#232 '*']: s#70
[#232 '-']: s#67
[#232 'array']: s#87
[#232 'atomic']: s#101
[#232 'bitcast']: s#77
[#232 'bool']: s#94
[#232 'f16']: s#96
[#232 'f32']: s#95
[#232 'false']: s#93
[#232 'i32']: s#97
[#232 'mat2x2']: s#106
[#232 'mat2x3']: s#107
[#232 'mat2x4']: s#108
[#232 'mat3x2']: s#109
[#232 'mat3x3']: s#110
[#232 'mat3x4']: s#111
[#232 'mat4x2']: s#112
[#232 'mat4x3']: s#113
[#232 'mat4x4']: s#114
[#232 'ptr']: s#99
[#232 'sampler']: s#131
[#232 'sampler_comparison']: s#132
[#232 'texture_1d']: s#138
[#232 'texture_2d']: s#139
[#232 'texture_2d_array']: s#140
[#232 'texture_3d']: s#141
[#232 'texture_cube']: s#142
[#232 'texture_cube_array']: s#143
[#232 'texture_depth_2d']: s#133
[#232 'texture_depth_2d_array']: s#134
[#232 'texture_depth_cube']: s#135
[#232 'texture_depth_cube_array']: s#136
[#232 'texture_depth_multisampled_2d']: s#137
[#232 'texture_multisampled_2d']: s#144
[#232 'texture_storage_1d']: s#145
[#232 'texture_storage_2d']: s#146
[#232 'texture_storage_2d_array']: s#147
[#232 'texture_storage_3d']: s#148
[#232 'true']: s#92
[#232 'u32']: s#98
[#232 'vec2']: s#103
[#232 'vec3']: s#104
[#232 'vec4']: s#105
[#232 '~']: s#69
[#232 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#232 /0[fh]/]: s#118
[#232 /0[iu]?/]: s#115
[#232 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#232 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#232 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#232 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#232 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#232 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#232 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#232 /[1-9][0-9]*[fh]/]: s#119
[#232 /[1-9][0-9]*[iu]?/]: s#116
[#233 '!']: s#68
[#233 '&']: s#71
[#233 '(']: s#83
[#233 '*']: s#70
[#233 '-']: s#67
[#233 'array']: s#87
[#233 'atomic']: s#101
[#233 'bitcast']: s#77
[#233 'bool']: s#94
[#233 'f16']: s#96
[#233 'f32']: s#95
[#233 'false']: s#93
[#233 'i32']: s#97
[#233 'mat2x2']: s#106
[#233 'mat2x3']: s#107
[#233 'mat2x4']: s#108
[#233 'mat3x2']: s#109
[#233 'mat3x3']: s#110
[#233 'mat3x4']: s#111
[#233 'mat4x2']: s#112
[#233 'mat4x3']: s#113
[#233 'mat4x4']: s#114
[#233 'ptr']: s#99
[#233 'sampler']: s#131
[#233 'sampler_comparison']: s#132
[#233 'texture_1d']: s#138
[#233 'texture_2d']: s#139
[#233 'texture_2d_array']: s#140
[#233 'texture_3d']: s#141
[#233 'texture_cube']: s#142
[#233 'texture_cube_array']: s#143
[#233 'texture_depth_2d']: s#133
[#233 'texture_depth_2d_array']: s#134
[#233 'texture_depth_cube']: s#135
[#233 'texture_depth_cube_array']: s#136
[#233 'texture_depth_multisampled_2d']: s#137
[#233 'texture_multisampled_2d']: s#144
[#233 'texture_storage_1d']: s#145
[#233 'texture_storage_2d']: s#146
[#233 'texture_storage_2d_array']: s#147
[#233 'texture_storage_3d']: s#148
[#233 'true']: s#92
[#233 'u32']: s#98
[#233 'vec2']: s#103
[#233 'vec3']: s#104
[#233 'vec4']: s#105
[#233 '~']: s#69
[#233 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#233 /0[fh]/]: s#118
[#233 /0[iu]?/]: s#115
[#233 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#233 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#233 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#233 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#233 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#233 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#233 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#233 /[1-9][0-9]*[fh]/]: s#119
[#233 /[1-9][0-9]*[iu]?/]: s#116
[#234 '!']: s#68
[#234 '&']: s#71
[#234 '(']: s#83
[#234 '*']: s#70
[#234 '-']: s#67
[#234 'array']: s#87
[#234 'atomic']: s#101
[#234 'bitcast']: s#77
[#234 'bool']: s#94
[#234 'f16']: s#96
[#234 'f32']: s#95
[#234 'false']: s#93
[#234 'i32']: s#97
[#234 'mat2x2']: s#106
[#234 'mat2x3']: s#107
[#234 'mat2x4']: s#108
[#234 'mat3x2']: s#109
[#234 'mat3x3']: s#110
[#234 'mat3x4']: s#111
[#234 'mat4x2']: s#112
[#234 'mat4x3']: s#113
[#234 'mat4x4']: s#114
[#234 'ptr']: s#99
[#234 'sampler']: s#131
[#234 'sampler_comparison']: s#132
[#234 'texture_1d']: s#138
[#234 'texture_2d']: s#139
[#234 'texture_2d_array']: s#140
[#234 'texture_3d']: s#141
[#234 'texture_cube']: s#142
[#234 'texture_cube_array']: s#143
[#234 'texture_depth_2d']: s#133
[#234 'texture_depth_2d_array']: s#134
[#234 'texture_depth_cube']: s#135
[#234 'texture_depth_cube_array']: s#136
[#234 'texture_depth_multisampled_2d']: s#137
[#234 'texture_multisampled_2d']: s#144
[#234 'texture_storage_1d']: s#145
[#234 'texture_storage_2d']: s#146
[#234 'texture_storage_2d_array']: s#147
[#234 'texture_storage_3d']: s#148
[#234 'true']: s#92
[#234 'u32']: s#98
[#234 'vec2']: s#103
[#234 'vec3']: s#104
[#234 'vec4']: s#105
[#234 '~']: s#69
[#234 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#234 /0[fh]/]: s#118
[#234 /0[iu]?/]: s#115
[#234 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#234 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#234 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#234 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#234 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#234 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#234 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#234 /[1-9][0-9]*[fh]/]: s#119
[#234 /[1-9][0-9]*[iu]?/]: s#116
[#235 '!']: s#68
[#235 '&']: s#71
[#235 '(']: s#83
[#235 '*']: s#70
[#235 '-']: s#67
[#235 'array']: s#87
[#235 'atomic']: s#101
[#235 'bitcast']: s#77
[#235 'bool']: s#94
[#235 'f16']: s#96
[#235 'f32']: s#95
[#235 'false']: s#93
[#235 'i32']: s#97
[#235 'mat2x2']: s#106
[#235 'mat2x3']: s#107
[#235 'mat2x4']: s#108
[#235 'mat3x2']: s#109
[#235 'mat3x3']: s#110
[#235 'mat3x4']: s#111
[#235 'mat4x2']: s#112
[#235 'mat4x3']: s#113
[#235 'mat4x4']: s#114
[#235 'ptr']: s#99
[#235 'sampler']: s#131
[#235 'sampler_comparison']: s#132
[#235 'texture_1d']: s#138
[#235 'texture_2d']: s#139
[#235 'texture_2d_array']: s#140
[#235 'texture_3d']: s#141
[#235 'texture_cube']: s#142
[#235 'texture_cube_array']: s#143
[#235 'texture_depth_2d']: s#133
[#235 'texture_depth_2d_array']: s#134
[#235 'texture_depth_cube']: s#135
[#235 'texture_depth_cube_array']: s#136
[#235 'texture_depth_multisampled_2d']: s#137
[#235 'texture_multisampled_2d']: s#144
[#235 'texture_storage_1d']: s#145
[#235 'texture_storage_2d']: s#146
[#235 'texture_storage_2d_array']: s#147
[#235 'texture_storage_3d']: s#148
[#235 'true']: s#92
[#235 'u32']: s#98
[#235 'vec2']: s#103
[#235 'vec3']: s#104
[#235 'vec4']: s#105
[#235 '~']: s#69
[#235 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#235 /0[fh]/]: s#118
[#235 /0[iu]?/]: s#115
[#235 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#235 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#235 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#235 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#235 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#235 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#235 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#235 /[1-9][0-9]*[fh]/]: s#119
[#235 /[1-9][0-9]*[iu]?/]: s#116
[#236 '!']: s#68
[#236 '&']: s#71
[#236 '(']: s#83
[#236 '*']: s#70
[#236 '-']: s#67
[#236 'array']: s#87
[#236 'atomic']: s#101
[#236 'bitcast']: s#77
[#236 'bool']: s#94
[#236 'f16']: s#96
[#236 'f32']: s#95
[#236 'false']: s#93
[#236 'i32']: s#97
[#236 'mat2x2']: s#106
[#236 'mat2x3']: s#107
[#236 'mat2x4']: s#108
[#236 'mat3x2']: s#109
[#236 'mat3x3']: s#110
[#236 'mat3x4']: s#111
[#236 'mat4x2']: s#112
[#236 'mat4x3']: s#113
[#236 'mat4x4']: s#114
[#236 'ptr']: s#99
[#236 'sampler']: s#131
[#236 'sampler_comparison']: s#132
[#236 'texture_1d']: s#138
[#236 'texture_2d']: s#139
[#236 'texture_2d_array']: s#140
[#236 'texture_3d']: s#141
[#236 'texture_cube']: s#142
[#236 'texture_cube_array']: s#143
[#236 'texture_depth_2d']: s#133
[#236 'texture_depth_2d_array']: s#134
[#236 'texture_depth_cube']: s#135
[#236 'texture_depth_cube_array']: s#136
[#236 'texture_depth_multisampled_2d']: s#137
[#236 'texture_multisampled_2d']: s#144
[#236 'texture_storage_1d']: s#145
[#236 'texture_storage_2d']: s#146
[#236 'texture_storage_2d_array']: s#147
[#236 'texture_storage_3d']: s#148
[#236 'true']: s#92
[#236 'u32']: s#98
[#236 'vec2']: s#103
[#236 'vec3']: s#104
[#236 'vec4']: s#105
[#236 '~']: s#69
[#236 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#236 /0[fh]/]: s#118
[#236 /0[iu]?/]: s#115
[#236 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#236 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#236 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#236 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#236 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#236 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#236 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#236 /[1-9][0-9]*[fh]/]: s#119
[#236 /[1-9][0-9]*[iu]?/]: s#116
[#237 'flat']: s#264
[#237 'linear']: s#263
[#237 'perspective']: s#262
[#238 '!']: s#68
[#238 '&']: s#71
[#238 '(']: s#83
[#238 '*']: s#70
[#238 '-']: s#67
[#238 'array']: s#87
[#238 'atomic']: s#101
[#238 'bitcast']: s#77
[#238 'bool']: s#94
[#238 'f16']: s#96
[#238 'f32']: s#95
[#238 'false']: s#93
[#238 'i32']: s#97
[#238 'mat2x2']: s#106
[#238 'mat2x3']: s#107
[#238 'mat2x4']: s#108
[#238 'mat3x2']: s#109
[#238 'mat3x3']: s#110
[#238 'mat3x4']: s#111
[#238 'mat4x2']: s#112
[#238 'mat4x3']: s#113
[#238 'mat4x4']: s#114
[#238 'ptr']: s#99
[#238 'sampler']: s#131
[#238 'sampler_comparison']: s#132
[#238 'texture_1d']: s#138
[#238 'texture_2d']: s#139
[#238 'texture_2d_array']: s#140
[#238 'texture_3d']: s#141
[#238 'texture_cube']: s#142
[#238 'texture_cube_array']: s#143
[#238 'texture_depth_2d']: s#133
[#238 'texture_depth_2d_array']: s#134
[#238 'texture_depth_cube']: s#135
[#238 'texture_depth_cube_array']: s#136
[#238 'texture_depth_multisampled_2d']: s#137
[#238 'texture_multisampled_2d']: s#144
[#238 'texture_storage_1d']: s#145
[#238 'texture_storage_2d']: s#146
[#238 'texture_storage_2d_array']: s#147
[#238 'texture_storage_3d']: s#148
[#238 'true']: s#92
[#238 'u32']: s#98
[#238 'vec2']: s#103
[#238 'vec3']: s#104
[#238 'vec4']: s#105
[#238 '~']: s#69
[#238 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#238 /0[fh]/]: s#118
[#238 /0[iu]?/]: s#115
[#238 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#238 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#238 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#238 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#238 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#238 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#238 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#238 /[1-9][0-9]*[fh]/]: s#119
[#238 /[1-9][0-9]*[iu]?/]: s#116
[#239 '!']: s#68
[#239 '&']: s#71
[#239 '(']: s#83
[#239 '*']: s#70
[#239 '-']: s#67
[#239 'array']: s#87
[#239 'atomic']: s#101
[#239 'bitcast']: s#77
[#239 'bool']: s#94
[#239 'f16']: s#96
[#239 'f32']: s#95
[#239 'false']: s#93
[#239 'i32']: s#97
[#239 'mat2x2']: s#106
[#239 'mat2x3']: s#107
[#239 'mat2x4']: s#108
[#239 'mat3x2']: s#109
[#239 'mat3x3']: s#110
[#239 'mat3x4']: s#111
[#239 'mat4x2']: s#112
[#239 'mat4x3']: s#113
[#239 'mat4x4']: s#114
[#239 'ptr']: s#99
[#239 'sampler']: s#131
[#239 'sampler_comparison']: s#132
[#239 'texture_1d']: s#138
[#239 'texture_2d']: s#139
[#239 'texture_2d_array']: s#140
[#239 'texture_3d']: s#141
[#239 'texture_cube']: s#142
[#239 'texture_cube_array']: s#143
[#239 'texture_depth_2d']: s#133
[#239 'texture_depth_2d_array']: s#134
[#239 'texture_depth_cube']: s#135
[#239 'texture_depth_cube_array']: s#136
[#239 'texture_depth_multisampled_2d']: s#137
[#239 'texture_multisampled_2d']: s#144
[#239 'texture_storage_1d']: s#145
[#239 'texture_storage_2d']: s#146
[#239 'texture_storage_2d_array']: s#147
[#239 'texture_storage_3d']: s#148
[#239 'true']: s#92
[#239 'u32']: s#98
[#239 'vec2']: s#103
[#239 'vec3']: s#104
[#239 'vec4']: s#105
[#239 '~']: s#69
[#239 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#239 /0[fh]/]: s#118
[#239 /0[iu]?/]: s#115
[#239 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#239 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#239 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#239 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#239 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#239 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#239 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#239 /[1-9][0-9]*[fh]/]: s#119
[#239 /[1-9][0-9]*[iu]?/]: s#116
[#240 '@']: r#139
[#240 'array']: r#139
[#240 'atomic']: r#139
[#240 'bool']: r#139
[#240 'f16']: r#139
[#240 'f32']: r#139
[#240 'fn']: r#139
[#240 'for']: r#139
[#240 'i32']: r#139
[#240 'if']: r#139
[#240 'loop']: r#139
[#240 'mat2x2']: r#139
[#240 'mat2x3']: r#139
[#240 'mat2x4']: r#139
[#240 'mat3x2']: r#139
[#240 'mat3x3']: r#139
[#240 'mat3x4']: r#139
[#240 'mat4x2']: r#139
[#240 'mat4x3']: r#139
[#240 'mat4x4']: r#139
[#240 'override']: r#139
[#240 'ptr']: r#139
[#240 'sampler']: r#139
[#240 'sampler_comparison']: r#139
[#240 'switch']: r#139
[#240 'texture_1d']: r#139
[#240 'texture_2d']: r#139
[#240 'texture_2d_array']: r#139
[#240 'texture_3d']: r#139
[#240 'texture_cube']: r#139
[#240 'texture_cube_array']: r#139
[#240 'texture_depth_2d']: r#139
[#240 'texture_depth_2d_array']: r#139
[#240 'texture_depth_cube']: r#139
[#240 'texture_depth_cube_array']: r#139
[#240 'texture_depth_multisampled_2d']: r#139
[#240 'texture_multisampled_2d']: r#139
[#240 'texture_storage_1d']: r#139
[#240 'texture_storage_2d']: r#139
[#240 'texture_storage_2d_array']: r#139
[#240 'texture_storage_3d']: r#139
[#240 'u32']: r#139
[#240 'var']: r#139
[#240 'vec2']: r#139
[#240 'vec3']: r#139
[#240 'vec4']: r#139
[#240 'while']: r#139
[#240 '{']: r#139
[#240 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#139
[#241 'frag_depth']: s#251
[#241 'front_facing']: s#250
[#241 'global_invocation_id']: s#254
[#241 'instance_index']: s#248
[#241 'local_invocation_id']: s#252
[#241 'local_invocation_index']: s#253
[#241 'num_workgroups']: s#256
[#241 'position']: s#249
[#241 'sample_index']: s#257
[#241 'sample_mask']: s#258
[#241 'vertex_index']: s#247
[#241 'workgroup_id']: s#255
[#242 '!']: s#68
[#242 '&']: s#71
[#242 '(']: s#83
[#242 '*']: s#70
[#242 '-']: s#67
[#242 'array']: s#87
[#242 'atomic']: s#101
[#242 'bitcast']: s#77
[#242 'bool']: s#94
[#242 'f16']: s#96
[#242 'f32']: s#95
[#242 'false']: s#93
[#242 'i32']: s#97
[#242 'mat2x2']: s#106
[#242 'mat2x3']: s#107
[#242 'mat2x4']: s#108
[#242 'mat3x2']: s#109
[#242 'mat3x3']: s#110
[#242 'mat3x4']: s#111
[#242 'mat4x2']: s#112
[#242 'mat4x3']: s#113
[#242 'mat4x4']: s#114
[#242 'ptr']: s#99
[#242 'sampler']: s#131
[#242 'sampler_comparison']: s#132
[#242 'texture_1d']: s#138
[#242 'texture_2d']: s#139
[#242 'texture_2d_array']: s#140
[#242 'texture_3d']: s#141
[#242 'texture_cube']: s#142
[#242 'texture_cube_array']: s#143
[#242 'texture_depth_2d']: s#133
[#242 'texture_depth_2d_array']: s#134
[#242 'texture_depth_cube']: s#135
[#242 'texture_depth_cube_array']: s#136
[#242 'texture_depth_multisampled_2d']: s#137
[#242 'texture_multisampled_2d']: s#144
[#242 'texture_storage_1d']: s#145
[#242 'texture_storage_2d']: s#146
[#242 'texture_storage_2d_array']: s#147
[#242 'texture_storage_3d']: s#148
[#242 'true']: s#92
[#242 'u32']: s#98
[#242 'vec2']: s#103
[#242 'vec3']: s#104
[#242 'vec4']: s#105
[#242 '~']: s#69
[#242 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#242 /0[fh]/]: s#118
[#242 /0[iu]?/]: s#115
[#242 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#242 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#242 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#242 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#242 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#242 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#242 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#242 /[1-9][0-9]*[fh]/]: s#119
[#242 /[1-9][0-9]*[iu]?/]: s#116
[#243 '!']: s#68
[#243 '&']: s#71
[#243 '(']: s#83
[#243 '*']: s#70
[#243 '-']: s#67
[#243 'array']: s#87
[#243 'atomic']: s#101
[#243 'bitcast']: s#77
[#243 'bool']: s#94
[#243 'f16']: s#96
[#243 'f32']: s#95
[#243 'false']: s#93
[#243 'i32']: s#97
[#243 'mat2x2']: s#106
[#243 'mat2x3']: s#107
[#243 'mat2x4']: s#108
[#243 'mat3x2']: s#109
[#243 'mat3x3']: s#110
[#243 'mat3x4']: s#111
[#243 'mat4x2']: s#112
[#243 'mat4x3']: s#113
[#243 'mat4x4']: s#114
[#243 'ptr']: s#99
[#243 'sampler']: s#131
[#243 'sampler_comparison']: s#132
[#243 'texture_1d']: s#138
[#243 'texture_2d']: s#139
[#243 'texture_2d_array']: s#140
[#243 'texture_3d']: s#141
[#243 'texture_cube']: s#142
[#243 'texture_cube_array']: s#143
[#243 'texture_depth_2d']: s#133
[#243 'texture_depth_2d_array']: s#134
[#243 'texture_depth_cube']: s#135
[#243 'texture_depth_cube_array']: s#136
[#243 'texture_depth_multisampled_2d']: s#137
[#243 'texture_multisampled_2d']: s#144
[#243 'texture_storage_1d']: s#145
[#243 'texture_storage_2d']: s#146
[#243 'texture_storage_2d_array']: s#147
[#243 'texture_storage_3d']: s#148
[#243 'true']: s#92
[#243 'u32']: s#98
[#243 'vec2']: s#103
[#243 'vec3']: s#104
[#243 'vec4']: s#105
[#243 '~']: s#69
[#243 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#243 /0[fh]/]: s#118
[#243 /0[iu]?/]: s#115
[#243 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#243 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#243 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#243 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#243 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#243 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#243 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#243 /[1-9][0-9]*[fh]/]: s#119
[#243 /[1-9][0-9]*[iu]?/]: s#116
[#244 ',']: s#336
[#245 ',']: s#336
[#246 ',']: s#336
[#247 ')']: r#140
[#247 ',']: r#140
[#248 ')']: r#141
[#248 ',']: r#141
[#249 ')']: r#142
[#249 ',']: r#142
[#250 ')']: r#143
[#250 ',']: r#143
[#251 ')']: r#144
[#251 ',']: r#144
[#252 ')']: r#145
[#252 ',']: r#145
[#253 ')']: r#146
[#253 ',']: r#146
[#254 ')']: r#147
[#254 ',']: r#147
[#255 ')']: r#148
[#255 ',']: r#148
[#256 ')']: r#149
[#256 ',']: r#149
[#257 ')']: r#150
[#257 ',']: r#150
[#258 ')']: r#151
[#258 ',']: r#151
[#259 ',']: s#336
[#260 ',']: s#336
[#261 ',']: s#447
[#262 ')']: r#152
[#262 ',']: r#152
[#263 ')']: r#153
[#263 ',']: r#153
[#264 ')']: r#154
[#264 ',']: r#154
[#265 ',']: s#336
[#266 ',']: s#336
[#267 ',']: s#443
[#268 ')']: r#155
[#268 ',']: r#155
[#268 ':']: r#155
[#268 ';']: r#155
[#268 '@']: r#155
[#268 ']']: r#155
[#268 '{']: r#155
[#268 '||']: r#156
[#269 '!=']: r#31
[#269 '%']: r#31
[#269 '&&']: r#31
[#269 ')']: r#31
[#269 '*']: r#31
[#269 '+']: r#31
[#269 ',']: r#31
[#269 '-']: r#31
[#269 '/']: r#31
[#269 ':']: r#31
[#269 ';']: r#31
[#269 '==']: r#31
[#269 '@']: r#31
[#269 ']']: r#31
[#269 '{']: r#31
[#269 '||']: r#31
[#269 /\u200B_greater_than/]: r#31
[#269 /\u200B_greater_than_equal/]: r#31
[#269 /\u200B_less_than/]: r#31
[#269 /\u200B_less_than_equal/]: r#31
[#269 /\u200B_shift_left/]: s#214
[#269 /\u200B_shift_right/]: s#215
[#270 '&&']: r#158
[#270 ')']: r#157
[#270 ',']: r#157
[#270 ':']: r#157
[#270 ';']: r#157
[#270 '@']: r#157
[#270 ']']: r#157
[#270 '{']: r#157
[#271 '&&']: r#159
[#271 ')']: r#159
[#271 ',']: r#159
[#271 ':']: r#159
[#271 ';']: r#159
[#271 '@']: r#159
[#271 ']']: r#159
[#271 '{']: r#159
[#271 '||']: r#159
[#272 '&&']: r#160
[#272 ')']: r#160
[#272 ',']: r#160
[#272 ':']: r#160
[#272 ';']: r#160
[#272 '@']: r#160
[#272 ']']: r#160
[#272 '{']: r#160
[#272 '||']: r#160
[#273 '&&']: r#161
[#273 ')']: r#161
[#273 ',']: r#161
[#273 ':']: r#161
[#273 ';']: r#161
[#273 '@']: r#161
[#273 ']']: r#161
[#273 '{']: r#161
[#273 '||']: r#161
[#274 '&&']: r#162
[#274 ')']: r#162
[#274 ',']: r#162
[#274 ':']: r#162
[#274 ';']: r#162
[#274 '@']: r#162
[#274 ']']: r#162
[#274 '{']: r#162
[#274 '||']: r#162
[#275 '&&']: r#163
[#275 ')']: r#163
[#275 ',']: r#163
[#275 ':']: r#163
[#275 ';']: r#163
[#275 '@']: r#163
[#275 ']']: r#163
[#275 '{']: r#163
[#275 '||']: r#163
[#276 '&&']: r#164
[#276 ')']: r#164
[#276 ',']: r#164
[#276 ':']: r#164
[#276 ';']: r#164
[#276 '@']: r#164
[#276 ']']: r#164
[#276 '{']: r#164
[#276 '||']: r#164
[#277 '&']: r#166
[#277 ')']: r#165
[#277 ',']: r#165
[#277 ':']: r#165
[#277 ';']: r#165
[#277 '@']: r#165
[#277 ']']: r#165
[#277 '{']: r#165
[#277 /\u200B_template_args_end/]: r#165
[#278 ')']: r#167
[#278 ',']: r#167
[#278 ':']: r#167
[#278 ';']: r#167
[#278 '@']: r#167
[#278 ']']: r#167
[#278 '{']: r#167
[#278 '|']: r#168
[#278 /\u200B_template_args_end/]: r#167
[#279 ')']: r#169
[#279 ',']: r#169
[#279 ':']: r#169
[#279 ';']: r#169
[#279 '@']: r#169
[#279 ']']: r#169
[#279 '^']: r#170
[#279 '{']: r#169
[#279 /\u200B_template_args_end/]: r#169
[#280 '!=']: r#171
[#280 '%']: s#211
[#280 '&&']: r#171
[#280 ')']: r#171
[#280 '*']: s#209
[#280 '+']: r#171
[#280 ',']: r#171
[#280 '-']: r#171
[#280 '/']: s#210
[#280 ':']: r#171
[#280 ';']: r#171
[#280 '==']: r#171
[#280 '@']: r#171
[#280 ']']: r#171
[#280 '{']: r#171
[#280 '||']: r#171
[#280 /\u200B_greater_than/]: r#171
[#280 /\u200B_greater_than_equal/]: r#171
[#280 /\u200B_less_than/]: r#171
[#280 /\u200B_less_than_equal/]: r#171
[#280 /\u200B_template_args_end/]: r#171
[#281 '!=']: r#31
[#281 '%']: r#31
[#281 '&&']: r#31
[#281 ')']: r#31
[#281 '*']: r#31
[#281 '+']: r#31
[#281 ',']: r#31
[#281 '-']: r#31
[#281 '/']: r#31
[#281 ':']: r#31
[#281 ';']: r#31
[#281 '==']: r#31
[#281 '@']: r#31
[#281 ']']: r#31
[#281 '{']: r#31
[#281 '||']: r#31
[#281 /\u200B_greater_than/]: r#31
[#281 /\u200B_greater_than_equal/]: r#31
[#281 /\u200B_less_than/]: r#31
[#281 /\u200B_less_than_equal/]: r#31
[#281 /\u200B_template_args_end/]: r#31
[#282 '!=']: r#172
[#282 '&&']: r#172
[#282 ')']: r#172
[#282 ',']: r#172
[#282 ':']: r#172
[#282 ';']: r#172
[#282 '==']: r#172
[#282 '@']: r#172
[#282 ']']: r#172
[#282 '{']: r#172
[#282 '||']: r#172
[#282 /\u200B_greater_than/]: r#172
[#282 /\u200B_greater_than_equal/]: r#172
[#282 /\u200B_less_than/]: r#172
[#282 /\u200B_less_than_equal/]: r#172
[#283 '!=']: r#173
[#283 '&&']: r#173
[#283 ')']: r#173
[#283 ',']: r#173
[#283 ':']: r#173
[#283 ';']: r#173
[#283 '==']: r#173
[#283 '@']: r#173
[#283 ']']: r#173
[#283 '{']: r#173
[#283 '||']: r#173
[#283 /\u200B_greater_than/]: r#173
[#283 /\u200B_greater_than_equal/]: r#173
[#283 /\u200B_less_than/]: r#173
[#283 /\u200B_less_than_equal/]: r#173
[#284 '!=']: r#174
[#284 '%']: r#174
[#284 '&&']: r#174
[#284 ')']: r#174
[#284 '*']: r#174
[#284 '+']: r#174
[#284 ',']: r#174
[#284 '-']: r#174
[#284 '/']: r#174
[#284 ':']: r#174
[#284 ';']: r#174
[#284 '==']: r#174
[#284 '@']: r#174
[#284 ']']: r#174
[#284 '{']: r#174
[#284 '||']: r#174
[#284 /\u200B_greater_than/]: r#174
[#284 /\u200B_greater_than_equal/]: r#174
[#284 /\u200B_less_than/]: r#174
[#284 /\u200B_less_than_equal/]: r#174
[#284 /\u200B_template_args_end/]: r#174
[#285 '.']: s#202
[#285 '[']: s#201
[#286 '.']: s#202
[#286 '[']: s#201
[#287 '!=']: r#175
[#287 '%']: r#175
[#287 '%=']: r#175
[#287 '&&']: r#175
[#287 '&']: r#175
[#287 '&=']: r#175
[#287 ')']: r#175
[#287 '*']: r#175
[#287 '*=']: r#175
[#287 '+']: r#175
[#287 '++']: r#175
[#287 '+=']: r#175
[#287 ',']: r#175
[#287 '-']: r#175
[#287 '--']: r#175
[#287 '-=']: r#175
[#287 '.']: r#175
[#287 '/']: r#175
[#287 '/=']: r#175
[#287 ':']: r#175
[#287 ';']: r#175
[#287 '=']: r#175
[#287 '==']: r#175
[#287 '@']: r#175
[#287 '[']: r#175
[#287 ']']: r#175
[#287 '^']: r#175
[#287 '^=']: r#175
[#287 '{']: r#175
[#287 '|']: r#175
[#287 '|=']: r#175
[#287 '||']: r#175
[#287 /\u200B_greater_than/]: r#175
[#287 /\u200B_greater_than_equal/]: r#175
[#287 /\u200B_less_than/]: r#175
[#287 /\u200B_less_than_equal/]: r#175
[#287 /\u200B_shift_left/]: r#175
[#287 /\u200B_shift_left_assign/]: r#175
[#287 /\u200B_shift_right/]: r#175
[#287 /\u200B_shift_right_assign/]: r#175
[#287 /\u200B_template_args_end/]: r#175
[#288 '!=']: r#176
[#288 '%']: r#176
[#288 '%=']: r#176
[#288 '&&']: r#176
[#288 '&']: r#176
[#288 '&=']: r#176
[#288 ')']: r#176
[#288 '*']: r#176
[#288 '*=']: r#176
[#288 '+']: r#176
[#288 '++']: r#176
[#288 '+=']: r#176
[#288 ',']: r#176
[#288 '-']: r#176
[#288 '--']: r#176
[#288 '-=']: r#176
[#288 '.']: r#176
[#288 '/']: r#176
[#288 '/=']: r#176
[#288 ':']: r#176
[#288 ';']: r#176
[#288 '=']: r#176
[#288 '==']: r#176
[#288 '@']: r#176
[#288 '[']: r#176
[#288 ']']: r#176
[#288 '^']: r#176
[#288 '^=']: r#176
[#288 '{']: r#176
[#288 '|']: r#176
[#288 '|=']: r#176
[#288 '||']: r#176
[#288 /\u200B_greater_than/]: r#176
[#288 /\u200B_greater_than_equal/]: r#176
[#288 /\u200B_less_than/]: r#176
[#288 /\u200B_less_than_equal/]: r#176
[#288 /\u200B_shift_left/]: r#176
[#288 /\u200B_shift_left_assign/]: r#176
[#288 /\u200B_shift_right/]: r#176
[#288 /\u200B_shift_right_assign/]: r#176
[#288 /\u200B_template_args_end/]: r#176
[#289 '!=']: r#177
[#289 '%']: r#177
[#289 '%=']: r#177
[#289 '&&']: r#177
[#289 '&']: r#177
[#289 '&=']: r#177
[#289 ')']: r#177
[#289 '*']: r#177
[#289 '*=']: r#177
[#289 '+']: r#177
[#289 '++']: r#177
[#289 '+=']: r#177
[#289 ',']: r#177
[#289 '-']: r#177
[#289 '--']: r#177
[#289 '-=']: r#177
[#289 '.']: r#177
[#289 '/']: r#177
[#289 '/=']: r#177
[#289 ':']: r#177
[#289 ';']: r#177
[#289 '=']: r#177
[#289 '==']: r#177
[#289 '@']: r#177
[#289 '[']: r#177
[#289 ']']: r#177
[#289 '^']: r#177
[#289 '^=']: r#177
[#289 '{']: r#177
[#289 '|']: r#177
[#289 '|=']: r#177
[#289 '||']: r#177
[#289 /\u200B_greater_than/]: r#177
[#289 /\u200B_greater_than_equal/]: r#177
[#289 /\u200B_less_than/]: r#177
[#289 /\u200B_less_than_equal/]: r#177
[#289 /\u200B_shift_left/]: r#177
[#289 /\u200B_shift_left_assign/]: r#177
[#289 /\u200B_shift_right/]: r#177
[#289 /\u200B_shift_right_assign/]: r#177
[#289 /\u200B_template_args_end/]: r#177
[#290 '!=']: r#178
[#290 '%']: r#178
[#290 '%=']: r#178
[#290 '&&']: r#178
[#290 '&']: r#178
[#290 '&=']: r#178
[#290 ')']: r#178
[#290 '*']: r#178
[#290 '*=']: r#178
[#290 '+']: r#178
[#290 '++']: r#178
[#290 '+=']: r#178
[#290 ',']: r#178
[#290 '-']: r#178
[#290 '--']: r#178
[#290 '-=']: r#178
[#290 '.']: r#178
[#290 '/']: r#178
[#290 '/=']: r#178
[#290 ':']: r#178
[#290 ';']: r#178
[#290 '=']: r#178
[#290 '==']: r#178
[#290 '@']: r#178
[#290 '[']: r#178
[#290 ']']: r#178
[#290 '^']: r#178
[#290 '^=']: r#178
[#290 '{']: r#178
[#290 '|']: r#178
[#290 '|=']: r#178
[#290 '||']: r#178
[#290 /\u200B_greater_than/]: r#178
[#290 /\u200B_greater_than_equal/]: r#178
[#290 /\u200B_less_than/]: r#178
[#290 /\u200B_less_than_equal/]: r#178
[#290 /\u200B_shift_left/]: r#178
[#290 /\u200B_shift_left_assign/]: r#178
[#290 /\u200B_shift_right/]: r#178
[#290 /\u200B_shift_right_assign/]: r#178
[#290 /\u200B_template_args_end/]: r#178
[#291 '!=']: r#179
[#291 '%']: r#179
[#291 '%=']: r#179
[#291 '&&']: r#179
[#291 '&']: r#179
[#291 '&=']: r#179
[#291 ')']: r#179
[#291 '*']: r#179
[#291 '*=']: r#179
[#291 '+']: r#179
[#291 '++']: r#179
[#291 '+=']: r#179
[#291 ',']: r#179
[#291 '-']: r#179
[#291 '--']: r#179
[#291 '-=']: r#179
[#291 '.']: r#179
[#291 '/']: r#179
[#291 '/=']: r#179
[#291 ':']: r#179
[#291 ';']: r#179
[#291 '=']: r#179
[#291 '==']: r#179
[#291 '@']: r#179
[#291 '[']: r#179
[#291 ']']: r#179
[#291 '^']: r#179
[#291 '^=']: r#179
[#291 '{']: r#179
[#291 '|']: r#179
[#291 '|=']: r#179
[#291 '||']: r#179
[#291 /\u200B_greater_than/]: r#179
[#291 /\u200B_greater_than_equal/]: r#179
[#291 /\u200B_less_than/]: r#179
[#291 /\u200B_less_than_equal/]: r#179
[#291 /\u200B_shift_left/]: r#179
[#291 /\u200B_shift_left_assign/]: r#179
[#291 /\u200B_shift_right/]: r#179
[#291 /\u200B_shift_right_assign/]: r#179
[#291 /\u200B_template_args_end/]: r#179
[#292 '!=']: r#180
[#292 '%']: r#180
[#292 '%=']: r#180
[#292 '&&']: r#180
[#292 '&']: r#180
[#292 '&=']: r#180
[#292 ')']: r#180
[#292 '*']: r#180
[#292 '*=']: r#180
[#292 '+']: r#180
[#292 '++']: r#180
[#292 '+=']: r#180
[#292 ',']: r#180
[#292 '-']: r#180
[#292 '--']: r#180
[#292 '-=']: r#180
[#292 '.']: r#180
[#292 '/']: r#180
[#292 '/=']: r#180
[#292 ':']: r#180
[#292 ';']: r#180
[#292 '=']: r#180
[#292 '==']: r#180
[#292 '@']: r#180
[#292 '[']: r#180
[#292 ']']: r#180
[#292 '^']: r#180
[#292 '^=']: r#180
[#292 '{']: r#180
[#292 '|']: r#180
[#292 '|=']: r#180
[#292 '||']: r#180
[#292 /\u200B_greater_than/]: r#180
[#292 /\u200B_greater_than_equal/]: r#180
[#292 /\u200B_less_than/]: r#180
[#292 /\u200B_less_than_equal/]: r#180
[#292 /\u200B_shift_left/]: r#180
[#292 /\u200B_shift_left_assign/]: r#180
[#292 /\u200B_shift_right/]: r#180
[#292 /\u200B_shift_right_assign/]: r#180
[#292 /\u200B_template_args_end/]: r#180
[#293 '!=']: r#181
[#293 '%']: r#181
[#293 '%=']: r#181
[#293 '&&']: r#181
[#293 '&']: r#181
[#293 '&=']: r#181
[#293 ')']: r#181
[#293 '*']: r#181
[#293 '*=']: r#181
[#293 '+']: r#181
[#293 '++']: r#181
[#293 '+=']: r#181
[#293 ',']: r#181
[#293 '-']: r#181
[#293 '--']: r#181
[#293 '-=']: r#181
[#293 '.']: r#181
[#293 '/']: r#181
[#293 '/=']: r#181
[#293 ':']: r#181
[#293 ';']: r#181
[#293 '=']: r#181
[#293 '==']: r#181
[#293 '@']: r#181
[#293 '[']: r#181
[#293 ']']: r#181
[#293 '^']: r#181
[#293 '^=']: r#181
[#293 '{']: r#181
[#293 '|']: r#181
[#293 '|=']: r#181
[#293 '||']: r#181
[#293 /\u200B_greater_than/]: r#181
[#293 /\u200B_greater_than_equal/]: r#181
[#293 /\u200B_less_than/]: r#181
[#293 /\u200B_less_than_equal/]: r#181
[#293 /\u200B_shift_left/]: r#181
[#293 /\u200B_shift_left_assign/]: r#181
[#293 /\u200B_shift_right/]: r#181
[#293 /\u200B_shift_right_assign/]: r#181
[#293 /\u200B_template_args_end/]: r#181
[#294 '!=']: r#182
[#294 '%']: r#182
[#294 '%=']: r#182
[#294 '&&']: r#182
[#294 '&']: r#182
[#294 '&=']: r#182
[#294 ')']: r#182
[#294 '*']: r#182
[#294 '*=']: r#182
[#294 '+']: r#182
[#294 '++']: r#182
[#294 '+=']: r#182
[#294 ',']: r#182
[#294 '-']: r#182
[#294 '--']: r#182
[#294 '-=']: r#182
[#294 '.']: r#182
[#294 '/']: r#182
[#294 '/=']: r#182
[#294 ':']: r#182
[#294 ';']: r#182
[#294 '=']: r#182
[#294 '==']: r#182
[#294 '@']: r#182
[#294 '[']: r#182
[#294 ']']: r#182
[#294 '^']: r#182
[#294 '^=']: r#182
[#294 '{']: r#182
[#294 '|']: r#182
[#294 '|=']: r#182
[#294 '||']: r#182
[#294 /\u200B_greater_than/]: r#182
[#294 /\u200B_greater_than_equal/]: r#182
[#294 /\u200B_less_than/]: r#182
[#294 /\u200B_less_than_equal/]: r#182
[#294 /\u200B_shift_left/]: r#182
[#294 /\u200B_shift_left_assign/]: r#182
[#294 /\u200B_shift_right/]: r#182
[#294 /\u200B_shift_right_assign/]: r#182
[#294 /\u200B_template_args_end/]: r#182
[#295 '!=']: r#183
[#295 '%']: r#183
[#295 '%=']: r#183
[#295 '&&']: r#183
[#295 '&']: r#183
[#295 '&=']: r#183
[#295 ')']: r#183
[#295 '*']: r#183
[#295 '*=']: r#183
[#295 '+']: r#183
[#295 '++']: r#183
[#295 '+=']: r#183
[#295 ',']: r#183
[#295 '-']: r#183
[#295 '--']: r#183
[#295 '-=']: r#183
[#295 '.']: r#183
[#295 '/']: r#183
[#295 '/=']: r#183
[#295 ':']: r#183
[#295 ';']: r#183
[#295 '=']: r#183
[#295 '==']: r#183
[#295 '@']: r#183
[#295 '[']: r#183
[#295 ']']: r#183
[#295 '^']: r#183
[#295 '^=']: r#183
[#295 '{']: r#183
[#295 '|']: r#183
[#295 '|=']: r#183
[#295 '||']: r#183
[#295 /\u200B_greater_than/]: r#183
[#295 /\u200B_greater_than_equal/]: r#183
[#295 /\u200B_less_than/]: r#183
[#295 /\u200B_less_than_equal/]: r#183
[#295 /\u200B_shift_left/]: r#183
[#295 /\u200B_shift_left_assign/]: r#183
[#295 /\u200B_shift_right/]: r#183
[#295 /\u200B_shift_right_assign/]: r#183
[#295 /\u200B_template_args_end/]: r#183
[#296 ']']: s#437
[#297 'array']: s#323
[#297 'atomic']: s#101
[#297 'bool']: s#94
[#297 'f16']: s#96
[#297 'f32']: s#95
[#297 'i32']: s#97
[#297 'mat2x2']: s#106
[#297 'mat2x3']: s#107
[#297 'mat2x4']: s#108
[#297 'mat3x2']: s#109
[#297 'mat3x3']: s#110
[#297 'mat3x4']: s#111
[#297 'mat4x2']: s#112
[#297 'mat4x3']: s#113
[#297 'mat4x4']: s#114
[#297 'ptr']: s#99
[#297 'sampler']: s#131
[#297 'sampler_comparison']: s#132
[#297 'texture_1d']: s#138
[#297 'texture_2d']: s#139
[#297 'texture_2d_array']: s#140
[#297 'texture_3d']: s#141
[#297 'texture_cube']: s#142
[#297 'texture_cube_array']: s#143
[#297 'texture_depth_2d']: s#133
[#297 'texture_depth_2d_array']: s#134
[#297 'texture_depth_cube']: s#135
[#297 'texture_depth_cube_array']: s#136
[#297 'texture_depth_multisampled_2d']: s#137
[#297 'texture_multisampled_2d']: s#144
[#297 'texture_storage_1d']: s#145
[#297 'texture_storage_2d']: s#146
[#297 'texture_storage_2d_array']: s#147
[#297 'texture_storage_3d']: s#148
[#297 'u32']: s#98
[#297 'vec2']: s#103
[#297 'vec3']: s#104
[#297 'vec4']: s#105
[#297 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#298 'array']: r#184
[#298 'atomic']: r#184
[#298 'bgra8unorm']: r#184
[#298 'bool']: r#184
[#298 'f16']: r#184
[#298 'f32']: r#184
[#298 'function']: r#184
[#298 'i32']: r#184
[#298 'mat2x2']: r#184
[#298 'mat2x3']: r#184
[#298 'mat2x4']: r#184
[#298 'mat3x2']: r#184
[#298 'mat3x3']: r#184
[#298 'mat3x4']: r#184
[#298 'mat4x2']: r#184
[#298 'mat4x3']: r#184
[#298 'mat4x4']: r#184
[#298 'private']: r#184
[#298 'ptr']: r#184
[#298 'r32float']: r#184
[#298 'r32sint']: r#184
[#298 'r32uint']: r#184
[#298 'rg32float']: r#184
[#298 'rg32sint']: r#184
[#298 'rg32uint']: r#184
[#298 'rgba16float']: r#184
[#298 'rgba16sint']: r#184
[#298 'rgba16uint']: r#184
[#298 'rgba32float']: r#184
[#298 'rgba32sint']: r#184
[#298 'rgba32uint']: r#184
[#298 'rgba8sint']: r#184
[#298 'rgba8snorm']: r#184
[#298 'rgba8uint']: r#184
[#298 'rgba8unorm']: r#184
[#298 'sampler']: r#184
[#298 'sampler_comparison']: r#184
[#298 'storage']: r#184
[#298 'texture_1d']: r#184
[#298 'texture_2d']: r#184
[#298 'texture_2d_array']: r#184
[#298 'texture_3d']: r#184
[#298 'texture_cube']: r#184
[#298 'texture_cube_array']: r#184
[#298 'texture_depth_2d']: r#184
[#298 'texture_depth_2d_array']: r#184
[#298 'texture_depth_cube']: r#184
[#298 'texture_depth_cube_array']: r#184
[#298 'texture_depth_multisampled_2d']: r#184
[#298 'texture_multisampled_2d']: r#184
[#298 'texture_storage_1d']: r#184
[#298 'texture_storage_2d']: r#184
[#298 'texture_storage_2d_array']: r#184
[#298 'texture_storage_3d']: r#184
[#298 'u32']: r#184
[#298 'uniform']: r#184
[#298 'vec2']: r#184
[#298 'vec3']: r#184
[#298 'vec4']: r#184
[#298 'workgroup']: r#184
[#298 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#184
[#299 ')']: s#435
[#300 ')']: r#185
[#301 ',']: s#434
[#302 '!=']: r#186
[#302 '%']: r#186
[#302 '&&']: r#186
[#302 '&']: r#186
[#302 ')']: r#186
[#302 '*']: r#186
[#302 '+']: r#186
[#302 ',']: r#186
[#302 '-']: r#186
[#302 '.']: r#186
[#302 '/']: r#186
[#302 ':']: r#186
[#302 ';']: r#186
[#302 '==']: r#186
[#302 '@']: r#186
[#302 '[']: r#186
[#302 ']']: r#186
[#302 '^']: r#186
[#302 '{']: r#186
[#302 '|']: r#186
[#302 '||']: r#186
[#302 /\u200B_greater_than/]: r#186
[#302 /\u200B_greater_than_equal/]: r#186
[#302 /\u200B_less_than/]: r#186
[#302 /\u200B_less_than_equal/]: r#186
[#302 /\u200B_shift_left/]: r#186
[#302 /\u200B_shift_right/]: r#186
[#302 /\u200B_template_args_end/]: r#186
[#303 'array']: s#323
[#303 'atomic']: s#101
[#303 'bool']: s#94
[#303 'f16']: s#96
[#303 'f32']: s#95
[#303 'i32']: s#97
[#303 'mat2x2']: s#106
[#303 'mat2x3']: s#107
[#303 'mat2x4']: s#108
[#303 'mat3x2']: s#109
[#303 'mat3x3']: s#110
[#303 'mat3x4']: s#111
[#303 'mat4x2']: s#112
[#303 'mat4x3']: s#113
[#303 'mat4x4']: s#114
[#303 'ptr']: s#99
[#303 'sampler']: s#131
[#303 'sampler_comparison']: s#132
[#303 'texture_1d']: s#138
[#303 'texture_2d']: s#139
[#303 'texture_2d_array']: s#140
[#303 'texture_3d']: s#141
[#303 'texture_cube']: s#142
[#303 'texture_cube_array']: s#143
[#303 'texture_depth_2d']: s#133
[#303 'texture_depth_2d_array']: s#134
[#303 'texture_depth_cube']: s#135
[#303 'texture_depth_cube_array']: s#136
[#303 'texture_depth_multisampled_2d']: s#137
[#303 'texture_multisampled_2d']: s#144
[#303 'texture_storage_1d']: s#145
[#303 'texture_storage_2d']: s#146
[#303 'texture_storage_2d_array']: s#147
[#303 'texture_storage_3d']: s#148
[#303 'u32']: s#98
[#303 'vec2']: s#103
[#303 'vec3']: s#104
[#303 'vec4']: s#105
[#303 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#304 'array']: s#323
[#304 'atomic']: s#101
[#304 'bool']: s#94
[#304 'f16']: s#96
[#304 'f32']: s#95
[#304 'i32']: s#97
[#304 'mat2x2']: s#106
[#304 'mat2x3']: s#107
[#304 'mat2x4']: s#108
[#304 'mat3x2']: s#109
[#304 'mat3x3']: s#110
[#304 'mat3x4']: s#111
[#304 'mat4x2']: s#112
[#304 'mat4x3']: s#113
[#304 'mat4x4']: s#114
[#304 'ptr']: s#99
[#304 'sampler']: s#131
[#304 'sampler_comparison']: s#132
[#304 'texture_1d']: s#138
[#304 'texture_2d']: s#139
[#304 'texture_2d_array']: s#140
[#304 'texture_3d']: s#141
[#304 'texture_cube']: s#142
[#304 'texture_cube_array']: s#143
[#304 'texture_depth_2d']: s#133
[#304 'texture_depth_2d_array']: s#134
[#304 'texture_depth_cube']: s#135
[#304 'texture_depth_cube_array']: s#136
[#304 'texture_depth_multisampled_2d']: s#137
[#304 'texture_multisampled_2d']: s#144
[#304 'texture_storage_1d']: s#145
[#304 'texture_storage_2d']: s#146
[#304 'texture_storage_2d_array']: s#147
[#304 'texture_storage_3d']: s#148
[#304 'u32']: s#98
[#304 'vec2']: s#103
[#304 'vec3']: s#104
[#304 'vec4']: s#105
[#304 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#305 'array']: s#323
[#305 'atomic']: s#101
[#305 'bool']: s#94
[#305 'f16']: s#96
[#305 'f32']: s#95
[#305 'i32']: s#97
[#305 'mat2x2']: s#106
[#305 'mat2x3']: s#107
[#305 'mat2x4']: s#108
[#305 'mat3x2']: s#109
[#305 'mat3x3']: s#110
[#305 'mat3x4']: s#111
[#305 'mat4x2']: s#112
[#305 'mat4x3']: s#113
[#305 'mat4x4']: s#114
[#305 'ptr']: s#99
[#305 'sampler']: s#131
[#305 'sampler_comparison']: s#132
[#305 'texture_1d']: s#138
[#305 'texture_2d']: s#139
[#305 'texture_2d_array']: s#140
[#305 'texture_3d']: s#141
[#305 'texture_cube']: s#142
[#305 'texture_cube_array']: s#143
[#305 'texture_depth_2d']: s#133
[#305 'texture_depth_2d_array']: s#134
[#305 'texture_depth_cube']: s#135
[#305 'texture_depth_cube_array']: s#136
[#305 'texture_depth_multisampled_2d']: s#137
[#305 'texture_multisampled_2d']: s#144
[#305 'texture_storage_1d']: s#145
[#305 'texture_storage_2d']: s#146
[#305 'texture_storage_2d_array']: s#147
[#305 'texture_storage_3d']: s#148
[#305 'u32']: s#98
[#305 'vec2']: s#103
[#305 'vec3']: s#104
[#305 'vec4']: s#105
[#305 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#306 'function']: s#338
[#306 'private']: s#339
[#306 'storage']: s#342
[#306 'uniform']: s#341
[#306 'workgroup']: s#340
[#307 'array']: s#323
[#307 'atomic']: s#101
[#307 'bool']: s#94
[#307 'f16']: s#96
[#307 'f32']: s#95
[#307 'i32']: s#97
[#307 'mat2x2']: s#106
[#307 'mat2x3']: s#107
[#307 'mat2x4']: s#108
[#307 'mat3x2']: s#109
[#307 'mat3x3']: s#110
[#307 'mat3x4']: s#111
[#307 'mat4x2']: s#112
[#307 'mat4x3']: s#113
[#307 'mat4x4']: s#114
[#307 'ptr']: s#99
[#307 'sampler']: s#131
[#307 'sampler_comparison']: s#132
[#307 'texture_1d']: s#138
[#307 'texture_2d']: s#139
[#307 'texture_2d_array']: s#140
[#307 'texture_3d']: s#141
[#307 'texture_cube']: s#142
[#307 'texture_cube_array']: s#143
[#307 'texture_depth_2d']: s#133
[#307 'texture_depth_2d_array']: s#134
[#307 'texture_depth_cube']: s#135
[#307 'texture_depth_cube_array']: s#136
[#307 'texture_depth_multisampled_2d']: s#137
[#307 'texture_multisampled_2d']: s#144
[#307 'texture_storage_1d']: s#145
[#307 'texture_storage_2d']: s#146
[#307 'texture_storage_2d_array']: s#147
[#307 'texture_storage_3d']: s#148
[#307 'u32']: s#98
[#307 'vec2']: s#103
[#307 'vec3']: s#104
[#307 'vec4']: s#105
[#307 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#308 'array']: s#323
[#308 'atomic']: s#101
[#308 'bool']: s#94
[#308 'f16']: s#96
[#308 'f32']: s#95
[#308 'i32']: s#97
[#308 'mat2x2']: s#106
[#308 'mat2x3']: s#107
[#308 'mat2x4']: s#108
[#308 'mat3x2']: s#109
[#308 'mat3x3']: s#110
[#308 'mat3x4']: s#111
[#308 'mat4x2']: s#112
[#308 'mat4x3']: s#113
[#308 'mat4x4']: s#114
[#308 'ptr']: s#99
[#308 'sampler']: s#131
[#308 'sampler_comparison']: s#132
[#308 'texture_1d']: s#138
[#308 'texture_2d']: s#139
[#308 'texture_2d_array']: s#140
[#308 'texture_3d']: s#141
[#308 'texture_cube']: s#142
[#308 'texture_cube_array']: s#143
[#308 'texture_depth_2d']: s#133
[#308 'texture_depth_2d_array']: s#134
[#308 'texture_depth_cube']: s#135
[#308 'texture_depth_cube_array']: s#136
[#308 'texture_depth_multisampled_2d']: s#137
[#308 'texture_multisampled_2d']: s#144
[#308 'texture_storage_1d']: s#145
[#308 'texture_storage_2d']: s#146
[#308 'texture_storage_2d_array']: s#147
[#308 'texture_storage_3d']: s#148
[#308 'u32']: s#98
[#308 'vec2']: s#103
[#308 'vec3']: s#104
[#308 'vec4']: s#105
[#308 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#309 'array']: s#323
[#309 'atomic']: s#101
[#309 'bool']: s#94
[#309 'f16']: s#96
[#309 'f32']: s#95
[#309 'i32']: s#97
[#309 'mat2x2']: s#106
[#309 'mat2x3']: s#107
[#309 'mat2x4']: s#108
[#309 'mat3x2']: s#109
[#309 'mat3x3']: s#110
[#309 'mat3x4']: s#111
[#309 'mat4x2']: s#112
[#309 'mat4x3']: s#113
[#309 'mat4x4']: s#114
[#309 'ptr']: s#99
[#309 'sampler']: s#131
[#309 'sampler_comparison']: s#132
[#309 'texture_1d']: s#138
[#309 'texture_2d']: s#139
[#309 'texture_2d_array']: s#140
[#309 'texture_3d']: s#141
[#309 'texture_cube']: s#142
[#309 'texture_cube_array']: s#143
[#309 'texture_depth_2d']: s#133
[#309 'texture_depth_2d_array']: s#134
[#309 'texture_depth_cube']: s#135
[#309 'texture_depth_cube_array']: s#136
[#309 'texture_depth_multisampled_2d']: s#137
[#309 'texture_multisampled_2d']: s#144
[#309 'texture_storage_1d']: s#145
[#309 'texture_storage_2d']: s#146
[#309 'texture_storage_2d_array']: s#147
[#309 'texture_storage_3d']: s#148
[#309 'u32']: s#98
[#309 'vec2']: s#103
[#309 'vec3']: s#104
[#309 'vec4']: s#105
[#309 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#310 'bgra8unorm']: s#423
[#310 'r32float']: s#416
[#310 'r32sint']: s#415
[#310 'r32uint']: s#414
[#310 'rg32float']: s#419
[#310 'rg32sint']: s#418
[#310 'rg32uint']: s#417
[#310 'rgba16float']: s#413
[#310 'rgba16sint']: s#412
[#310 'rgba16uint']: s#411
[#310 'rgba32float']: s#422
[#310 'rgba32sint']: s#421
[#310 'rgba32uint']: s#420
[#310 'rgba8sint']: s#410
[#310 'rgba8snorm']: s#408
[#310 'rgba8uint']: s#409
[#310 'rgba8unorm']: s#407
[#311 '{']: r#187
[#312 '&']: s#404
[#312 '(']: s#405
[#312 '*']: s#403
[#312 ';']: s#363
[#312 '@']: s#35
[#312 '_']: s#400
[#312 'array']: s#87
[#312 'atomic']: s#101
[#312 'bool']: s#94
[#312 'break']: s#388
[#312 'const']: s#387
[#312 'const_assert']: s#30
[#312 'continue']: s#389
[#312 'discard']: s#374
[#312 'f16']: s#96
[#312 'f32']: s#95
[#312 'i32']: s#97
[#312 'let']: s#386
[#312 'mat2x2']: s#106
[#312 'mat2x3']: s#107
[#312 'mat2x4']: s#108
[#312 'mat3x2']: s#109
[#312 'mat3x3']: s#110
[#312 'mat3x4']: s#111
[#312 'mat4x2']: s#112
[#312 'mat4x3']: s#113
[#312 'mat4x4']: s#114
[#312 'ptr']: s#99
[#312 'return']: s#378
[#312 'sampler']: s#131
[#312 'sampler_comparison']: s#132
[#312 'texture_1d']: s#138
[#312 'texture_2d']: s#139
[#312 'texture_2d_array']: s#140
[#312 'texture_3d']: s#141
[#312 'texture_cube']: s#142
[#312 'texture_cube_array']: s#143
[#312 'texture_depth_2d']: s#133
[#312 'texture_depth_2d_array']: s#134
[#312 'texture_depth_cube']: s#135
[#312 'texture_depth_cube_array']: s#136
[#312 'texture_depth_multisampled_2d']: s#137
[#312 'texture_multisampled_2d']: s#144
[#312 'texture_storage_1d']: s#145
[#312 'texture_storage_2d']: s#146
[#312 'texture_storage_2d_array']: s#147
[#312 'texture_storage_3d']: s#148
[#312 'u32']: s#98
[#312 'var']: s#157
[#312 'vec2']: s#103
[#312 'vec3']: s#104
[#312 'vec4']: s#105
[#312 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#313 '@']: s#35
[#314 ',']: s#353
[#315 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#287
[#316 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#188
[#317 '@']: s#35
[#318 ';']: r#189
[#319 ')']: r#190
[#319 ',']: r#190
[#319 ';']: r#190
[#319 '=']: r#190
[#319 '@']: r#190
[#319 '{']: r#190
[#319 '}']: r#190
[#319 /\u200B_template_args_end/]: r#190
[#320 ')']: r#191
[#320 ',']: r#191
[#320 ';']: r#191
[#320 '=']: r#191
[#320 '@']: r#191
[#320 '{']: r#191
[#320 '}']: r#191
[#320 /\u200B_template_args_end/]: r#191
[#321 /\u200B_disambiguate_template/]: s#172
[#322 /\u200B_disambiguate_template/]: s#172
[#323 /\u200B_disambiguate_template/]: s#172
[#324 ';']: r#192
[#325 '!']: s#68
[#325 '&']: s#71
[#325 '(']: s#83
[#325 '*']: s#70
[#325 '-']: s#67
[#325 'array']: s#87
[#325 'atomic']: s#101
[#325 'bitcast']: s#77
[#325 'bool']: s#94
[#325 'f16']: s#96
[#325 'f32']: s#95
[#325 'false']: s#93
[#325 'i32']: s#97
[#325 'mat2x2']: s#106
[#325 'mat2x3']: s#107
[#325 'mat2x4']: s#108
[#325 'mat3x2']: s#109
[#325 'mat3x3']: s#110
[#325 'mat3x4']: s#111
[#325 'mat4x2']: s#112
[#325 'mat4x3']: s#113
[#325 'mat4x4']: s#114
[#325 'ptr']: s#99
[#325 'sampler']: s#131
[#325 'sampler_comparison']: s#132
[#325 'texture_1d']: s#138
[#325 'texture_2d']: s#139
[#325 'texture_2d_array']: s#140
[#325 'texture_3d']: s#141
[#325 'texture_cube']: s#142
[#325 'texture_cube_array']: s#143
[#325 'texture_depth_2d']: s#133
[#325 'texture_depth_2d_array']: s#134
[#325 'texture_depth_cube']: s#135
[#325 'texture_depth_cube_array']: s#136
[#325 'texture_depth_multisampled_2d']: s#137
[#325 'texture_multisampled_2d']: s#144
[#325 'texture_storage_1d']: s#145
[#325 'texture_storage_2d']: s#146
[#325 'texture_storage_2d_array']: s#147
[#325 'texture_storage_3d']: s#148
[#325 'true']: s#92
[#325 'u32']: s#98
[#325 'vec2']: s#103
[#325 'vec3']: s#104
[#325 'vec4']: s#105
[#325 '~']: s#69
[#325 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#325 /0[fh]/]: s#118
[#325 /0[iu]?/]: s#115
[#325 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#325 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#325 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#325 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#325 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#325 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#325 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#325 /[1-9][0-9]*[fh]/]: s#119
[#325 /[1-9][0-9]*[iu]?/]: s#116
[#326 ';']: r#193
[#327 ';']: r#194
[#327 '=']: r#194
[#328 ';']: r#195
[#329 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#330 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#196
[#331 'function']: s#338
[#331 'private']: s#339
[#331 'storage']: s#342
[#331 'uniform']: s#341
[#331 'workgroup']: s#340
[#332 ',']: s#336
[#333 ')']: r#197
[#333 ',']: r#197
[#334 ';']: r#198
[#334 '@']: r#198
[#334 'array']: r#198
[#334 'atomic']: r#198
[#334 'bool']: r#198
[#334 'f16']: r#198
[#334 'f32']: r#198
[#334 'fn']: r#198
[#334 'for']: r#198
[#334 'i32']: r#198
[#334 'if']: r#198
[#334 'loop']: r#198
[#334 'mat2x2']: r#198
[#334 'mat2x3']: r#198
[#334 'mat2x4']: r#198
[#334 'mat3x2']: r#198
[#334 'mat3x3']: r#198
[#334 'mat3x4']: r#198
[#334 'mat4x2']: r#198
[#334 'mat4x3']: r#198
[#334 'mat4x4']: r#198
[#334 'override']: r#198
[#334 'ptr']: r#198
[#334 'sampler']: r#198
[#334 'sampler_comparison']: r#198
[#334 'switch']: r#198
[#334 'texture_1d']: r#198
[#334 'texture_2d']: r#198
[#334 'texture_2d_array']: r#198
[#334 'texture_3d']: r#198
[#334 'texture_cube']: r#198
[#334 'texture_cube_array']: r#198
[#334 'texture_depth_2d']: r#198
[#334 'texture_depth_2d_array']: r#198
[#334 'texture_depth_cube']: r#198
[#334 'texture_depth_cube_array']: r#198
[#334 'texture_depth_multisampled_2d']: r#198
[#334 'texture_multisampled_2d']: r#198
[#334 'texture_storage_1d']: r#198
[#334 'texture_storage_2d']: r#198
[#334 'texture_storage_2d_array']: r#198
[#334 'texture_storage_3d']: r#198
[#334 'u32']: r#198
[#334 'var']: r#198
[#334 'vec2']: r#198
[#334 'vec3']: r#198
[#334 'vec4']: r#198
[#334 'while']: r#198
[#334 '{']: r#198
[#334 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#198
[#335 ')']: s#540
[#336 ')']: r#199
[#337 ',']: s#539
[#338 ',']: r#200
[#338 /\u200B_template_args_end/]: r#200
[#339 ',']: r#201
[#339 /\u200B_template_args_end/]: r#201
[#340 ',']: r#202
[#340 /\u200B_template_args_end/]: r#202
[#341 ',']: r#203
[#341 /\u200B_template_args_end/]: r#203
[#342 ',']: r#204
[#342 /\u200B_template_args_end/]: r#204
[#343 ';']: r#205
[#343 '=']: r#205
[#344 ';']: r#206
[#345 /\u200B_template_args_start/]: s#298
[#346 /\u200B_template_args_start/]: s#298
[#347 /\u200B_template_args_start/]: s#298
[#348 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#207
[#349 ':']: s#537
[#350 ',']: s#536
[#351 ',']: r#208
[#351 '}']: r#208
[#352 ',']: s#353
[#353 '@']: s#35
[#354 ')']: s#532
[#355 ')']: r#209
[#356 ',']: s#531
[#357 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#358 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#210
[#359 '@']: s#35
[#360 '}']: s#525
[#361 '}']: r#211
[#362 '&']: s#404
[#362 '(']: s#405
[#362 '*']: s#403
[#362 ';']: s#363
[#362 '@']: s#35
[#362 '_']: s#400
[#362 'array']: s#87
[#362 'atomic']: s#101
[#362 'bool']: s#94
[#362 'break']: s#388
[#362 'const']: s#387
[#362 'const_assert']: s#30
[#362 'continue']: s#389
[#362 'discard']: s#374
[#362 'f16']: s#96
[#362 'f32']: s#95
[#362 'i32']: s#97
[#362 'let']: s#386
[#362 'mat2x2']: s#106
[#362 'mat2x3']: s#107
[#362 'mat2x4']: s#108
[#362 'mat3x2']: s#109
[#362 'mat3x3']: s#110
[#362 'mat3x4']: s#111
[#362 'mat4x2']: s#112
[#362 'mat4x3']: s#113
[#362 'mat4x4']: s#114
[#362 'ptr']: s#99
[#362 'return']: s#378
[#362 'sampler']: s#131
[#362 'sampler_comparison']: s#132
[#362 'texture_1d']: s#138
[#362 'texture_2d']: s#139
[#362 'texture_2d_array']: s#140
[#362 'texture_3d']: s#141
[#362 'texture_cube']: s#142
[#362 'texture_cube_array']: s#143
[#362 'texture_depth_2d']: s#133
[#362 'texture_depth_2d_array']: s#134
[#362 'texture_depth_cube']: s#135
[#362 'texture_depth_cube_array']: s#136
[#362 'texture_depth_multisampled_2d']: s#137
[#362 'texture_multisampled_2d']: s#144
[#362 'texture_storage_1d']: s#145
[#362 'texture_storage_2d']: s#146
[#362 'texture_storage_2d_array']: s#147
[#362 'texture_storage_3d']: s#148
[#362 'u32']: s#98
[#362 'var']: s#157
[#362 'vec2']: s#103
[#362 'vec3']: s#104
[#362 'vec4']: s#105
[#362 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#363 '&']: r#212
[#363 '(']: r#212
[#363 '*']: r#212
[#363 ';']: r#212
[#363 '@']: r#212
[#363 '_']: r#212
[#363 'array']: r#212
[#363 'atomic']: r#212
[#363 'bool']: r#212
[#363 'break']: r#212
[#363 'const']: r#212
[#363 'const_assert']: r#212
[#363 'continue']: r#212
[#363 'continuing']: r#212
[#363 'discard']: r#212
[#363 'f16']: r#212
[#363 'f32']: r#212
[#363 'for']: r#212
[#363 'i32']: r#212
[#363 'if']: r#212
[#363 'let']: r#212
[#363 'loop']: r#212
[#363 'mat2x2']: r#212
[#363 'mat2x3']: r#212
[#363 'mat2x4']: r#212
[#363 'mat3x2']: r#212
[#363 'mat3x3']: r#212
[#363 'mat3x4']: r#212
[#363 'mat4x2']: r#212
[#363 'mat4x3']: r#212
[#363 'mat4x4']: r#212
[#363 'ptr']: r#212
[#363 'return']: r#212
[#363 'sampler']: r#212
[#363 'sampler_comparison']: r#212
[#363 'switch']: r#212
[#363 'texture_1d']: r#212
[#363 'texture_2d']: r#212
[#363 'texture_2d_array']: r#212
[#363 'texture_3d']: r#212
[#363 'texture_cube']: r#212
[#363 'texture_cube_array']: r#212
[#363 'texture_depth_2d']: r#212
[#363 'texture_depth_2d_array']: r#212
[#363 'texture_depth_cube']: r#212
[#363 'texture_depth_cube_array']: r#212
[#363 'texture_depth_multisampled_2d']: r#212
[#363 'texture_multisampled_2d']: r#212
[#363 'texture_storage_1d']: r#212
[#363 'texture_storage_2d']: r#212
[#363 'texture_storage_2d_array']: r#212
[#363 'texture_storage_3d']: r#212
[#363 'u32']: r#212
[#363 'var']: r#212
[#363 'vec2']: r#212
[#363 'vec3']: r#212
[#363 'vec4']: r#212
[#363 'while']: r#212
[#363 '{']: r#212
[#363 '}']: r#212
[#363 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#212
[#364 ';']: s#523
[#365 '&']: r#213
[#365 '(']: r#213
[#365 '*']: r#213
[#365 ';']: r#213
[#365 '@']: r#213
[#365 '_']: r#213
[#365 'array']: r#213
[#365 'atomic']: r#213
[#365 'bool']: r#213
[#365 'break']: r#213
[#365 'const']: r#213
[#365 'const_assert']: r#213
[#365 'continue']: r#213
[#365 'continuing']: r#213
[#365 'discard']: r#213
[#365 'f16']: r#213
[#365 'f32']: r#213
[#365 'for']: r#213
[#365 'i32']: r#213
[#365 'if']: r#213
[#365 'let']: r#213
[#365 'loop']: r#213
[#365 'mat2x2']: r#213
[#365 'mat2x3']: r#213
[#365 'mat2x4']: r#213
[#365 'mat3x2']: r#213
[#365 'mat3x3']: r#213
[#365 'mat3x4']: r#213
[#365 'mat4x2']: r#213
[#365 'mat4x3']: r#213
[#365 'mat4x4']: r#213
[#365 'ptr']: r#213
[#365 'return']: r#213
[#365 'sampler']: r#213
[#365 'sampler_comparison']: r#213
[#365 'switch']: r#213
[#365 'texture_1d']: r#213
[#365 'texture_2d']: r#213
[#365 'texture_2d_array']: r#213
[#365 'texture_3d']: r#213
[#365 'texture_cube']: r#213
[#365 'texture_cube_array']: r#213
[#365 'texture_depth_2d']: r#213
[#365 'texture_depth_2d_array']: r#213
[#365 'texture_depth_cube']: r#213
[#365 'texture_depth_cube_array']: r#213
[#365 'texture_depth_multisampled_2d']: r#213
[#365 'texture_multisampled_2d']: r#213
[#365 'texture_storage_1d']: r#213
[#365 'texture_storage_2d']: r#213
[#365 'texture_storage_2d_array']: r#213
[#365 'texture_storage_3d']: r#213
[#365 'u32']: r#213
[#365 'var']: r#213
[#365 'vec2']: r#213
[#365 'vec3']: r#213
[#365 'vec4']: r#213
[#365 'while']: r#213
[#365 '{']: r#213
[#365 '}']: r#213
[#365 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#213
[#366 '&']: r#214
[#366 '(']: r#214
[#366 '*']: r#214
[#366 ';']: r#214
[#366 '@']: r#214
[#366 '_']: r#214
[#366 'array']: r#214
[#366 'atomic']: r#214
[#366 'bool']: r#214
[#366 'break']: r#214
[#366 'const']: r#214
[#366 'const_assert']: r#214
[#366 'continue']: r#214
[#366 'continuing']: r#214
[#366 'discard']: r#214
[#366 'f16']: r#214
[#366 'f32']: r#214
[#366 'for']: r#214
[#366 'i32']: r#214
[#366 'if']: r#214
[#366 'let']: r#214
[#366 'loop']: r#214
[#366 'mat2x2']: r#214
[#366 'mat2x3']: r#214
[#366 'mat2x4']: r#214
[#366 'mat3x2']: r#214
[#366 'mat3x3']: r#214
[#366 'mat3x4']: r#214
[#366 'mat4x2']: r#214
[#366 'mat4x3']: r#214
[#366 'mat4x4']: r#214
[#366 'ptr']: r#214
[#366 'return']: r#214
[#366 'sampler']: r#214
[#366 'sampler_comparison']: r#214
[#366 'switch']: r#214
[#366 'texture_1d']: r#214
[#366 'texture_2d']: r#214
[#366 'texture_2d_array']: r#214
[#366 'texture_3d']: r#214
[#366 'texture_cube']: r#214
[#366 'texture_cube_array']: r#214
[#366 'texture_depth_2d']: r#214
[#366 'texture_depth_2d_array']: r#214
[#366 'texture_depth_cube']: r#214
[#366 'texture_depth_cube_array']: r#214
[#366 'texture_depth_multisampled_2d']: r#214
[#366 'texture_multisampled_2d']: r#214
[#366 'texture_storage_1d']: r#214
[#366 'texture_storage_2d']: r#214
[#366 'texture_storage_2d_array']: r#214
[#366 'texture_storage_3d']: r#214
[#366 'u32']: r#214
[#366 'var']: r#214
[#366 'vec2']: r#214
[#366 'vec3']: r#214
[#366 'vec4']: r#214
[#366 'while']: r#214
[#366 '{']: r#214
[#366 '}']: r#214
[#366 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#214
[#367 '&']: r#215
[#367 '(']: r#215
[#367 '*']: r#215
[#367 ';']: r#215
[#367 '@']: r#215
[#367 '_']: r#215
[#367 'array']: r#215
[#367 'atomic']: r#215
[#367 'bool']: r#215
[#367 'break']: r#215
[#367 'const']: r#215
[#367 'const_assert']: r#215
[#367 'continue']: r#215
[#367 'continuing']: r#215
[#367 'discard']: r#215
[#367 'f16']: r#215
[#367 'f32']: r#215
[#367 'for']: r#215
[#367 'i32']: r#215
[#367 'if']: r#215
[#367 'let']: r#215
[#367 'loop']: r#215
[#367 'mat2x2']: r#215
[#367 'mat2x3']: r#215
[#367 'mat2x4']: r#215
[#367 'mat3x2']: r#215
[#367 'mat3x3']: r#215
[#367 'mat3x4']: r#215
[#367 'mat4x2']: r#215
[#367 'mat4x3']: r#215
[#367 'mat4x4']: r#215
[#367 'ptr']: r#215
[#367 'return']: r#215
[#367 'sampler']: r#215
[#367 'sampler_comparison']: r#215
[#367 'switch']: r#215
[#367 'texture_1d']: r#215
[#367 'texture_2d']: r#215
[#367 'texture_2d_array']: r#215
[#367 'texture_3d']: r#215
[#367 'texture_cube']: r#215
[#367 'texture_cube_array']: r#215
[#367 'texture_depth_2d']: r#215
[#367 'texture_depth_2d_array']: r#215
[#367 'texture_depth_cube']: r#215
[#367 'texture_depth_cube_array']: r#215
[#367 'texture_depth_multisampled_2d']: r#215
[#367 'texture_multisampled_2d']: r#215
[#367 'texture_storage_1d']: r#215
[#367 'texture_storage_2d']: r#215
[#367 'texture_storage_2d_array']: r#215
[#367 'texture_storage_3d']: r#215
[#367 'u32']: r#215
[#367 'var']: r#215
[#367 'vec2']: r#215
[#367 'vec3']: r#215
[#367 'vec4']: r#215
[#367 'while']: r#215
[#367 '{']: r#215
[#367 '}']: r#215
[#367 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#215
[#368 '&']: r#216
[#368 '(']: r#216
[#368 '*']: r#216
[#368 ';']: r#216
[#368 '@']: r#216
[#368 '_']: r#216
[#368 'array']: r#216
[#368 'atomic']: r#216
[#368 'bool']: r#216
[#368 'break']: r#216
[#368 'const']: r#216
[#368 'const_assert']: r#216
[#368 'continue']: r#216
[#368 'continuing']: r#216
[#368 'discard']: r#216
[#368 'f16']: r#216
[#368 'f32']: r#216
[#368 'for']: r#216
[#368 'i32']: r#216
[#368 'if']: r#216
[#368 'let']: r#216
[#368 'loop']: r#216
[#368 'mat2x2']: r#216
[#368 'mat2x3']: r#216
[#368 'mat2x4']: r#216
[#368 'mat3x2']: r#216
[#368 'mat3x3']: r#216
[#368 'mat3x4']: r#216
[#368 'mat4x2']: r#216
[#368 'mat4x3']: r#216
[#368 'mat4x4']: r#216
[#368 'ptr']: r#216
[#368 'return']: r#216
[#368 'sampler']: r#216
[#368 'sampler_comparison']: r#216
[#368 'switch']: r#216
[#368 'texture_1d']: r#216
[#368 'texture_2d']: r#216
[#368 'texture_2d_array']: r#216
[#368 'texture_3d']: r#216
[#368 'texture_cube']: r#216
[#368 'texture_cube_array']: r#216
[#368 'texture_depth_2d']: r#216
[#368 'texture_depth_2d_array']: r#216
[#368 'texture_depth_cube']: r#216
[#368 'texture_depth_cube_array']: r#216
[#368 'texture_depth_multisampled_2d']: r#216
[#368 'texture_multisampled_2d']: r#216
[#368 'texture_storage_1d']: r#216
[#368 'texture_storage_2d']: r#216
[#368 'texture_storage_2d_array']: r#216
[#368 'texture_storage_3d']: r#216
[#368 'u32']: r#216
[#368 'var']: r#216
[#368 'vec2']: r#216
[#368 'vec3']: r#216
[#368 'vec4']: r#216
[#368 'while']: r#216
[#368 '{']: r#216
[#368 '}']: r#216
[#368 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#216
[#369 '&']: r#217
[#369 '(']: r#217
[#369 '*']: r#217
[#369 ';']: r#217
[#369 '@']: r#217
[#369 '_']: r#217
[#369 'array']: r#217
[#369 'atomic']: r#217
[#369 'bool']: r#217
[#369 'break']: r#217
[#369 'const']: r#217
[#369 'const_assert']: r#217
[#369 'continue']: r#217
[#369 'continuing']: r#217
[#369 'discard']: r#217
[#369 'f16']: r#217
[#369 'f32']: r#217
[#369 'for']: r#217
[#369 'i32']: r#217
[#369 'if']: r#217
[#369 'let']: r#217
[#369 'loop']: r#217
[#369 'mat2x2']: r#217
[#369 'mat2x3']: r#217
[#369 'mat2x4']: r#217
[#369 'mat3x2']: r#217
[#369 'mat3x3']: r#217
[#369 'mat3x4']: r#217
[#369 'mat4x2']: r#217
[#369 'mat4x3']: r#217
[#369 'mat4x4']: r#217
[#369 'ptr']: r#217
[#369 'return']: r#217
[#369 'sampler']: r#217
[#369 'sampler_comparison']: r#217
[#369 'switch']: r#217
[#369 'texture_1d']: r#217
[#369 'texture_2d']: r#217
[#369 'texture_2d_array']: r#217
[#369 'texture_3d']: r#217
[#369 'texture_cube']: r#217
[#369 'texture_cube_array']: r#217
[#369 'texture_depth_2d']: r#217
[#369 'texture_depth_2d_array']: r#217
[#369 'texture_depth_cube']: r#217
[#369 'texture_depth_cube_array']: r#217
[#369 'texture_depth_multisampled_2d']: r#217
[#369 'texture_multisampled_2d']: r#217
[#369 'texture_storage_1d']: r#217
[#369 'texture_storage_2d']: r#217
[#369 'texture_storage_2d_array']: r#217
[#369 'texture_storage_3d']: r#217
[#369 'u32']: r#217
[#369 'var']: r#217
[#369 'vec2']: r#217
[#369 'vec3']: r#217
[#369 'vec4']: r#217
[#369 'while']: r#217
[#369 '{']: r#217
[#369 '}']: r#217
[#369 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#217
[#370 ';']: s#522
[#371 ';']: s#521
[#372 ';']: s#520
[#373 ';']: s#519
[#374 ';']: s#518
[#375 ';']: s#517
[#376 '&']: r#218
[#376 '(']: r#218
[#376 '*']: r#218
[#376 ';']: r#218
[#376 '@']: r#218
[#376 '_']: r#218
[#376 'array']: r#218
[#376 'atomic']: r#218
[#376 'bool']: r#218
[#376 'break']: r#218
[#376 'const']: r#218
[#376 'const_assert']: r#218
[#376 'continue']: r#218
[#376 'continuing']: r#218
[#376 'discard']: r#218
[#376 'f16']: r#218
[#376 'f32']: r#218
[#376 'for']: r#218
[#376 'i32']: r#218
[#376 'if']: r#218
[#376 'let']: r#218
[#376 'loop']: r#218
[#376 'mat2x2']: r#218
[#376 'mat2x3']: r#218
[#376 'mat2x4']: r#218
[#376 'mat3x2']: r#218
[#376 'mat3x3']: r#218
[#376 'mat3x4']: r#218
[#376 'mat4x2']: r#218
[#376 'mat4x3']: r#218
[#376 'mat4x4']: r#218
[#376 'ptr']: r#218
[#376 'return']: r#218
[#376 'sampler']: r#218
[#376 'sampler_comparison']: r#218
[#376 'switch']: r#218
[#376 'texture_1d']: r#218
[#376 'texture_2d']: r#218
[#376 'texture_2d_array']: r#218
[#376 'texture_3d']: r#218
[#376 'texture_cube']: r#218
[#376 'texture_cube_array']: r#218
[#376 'texture_depth_2d']: r#218
[#376 'texture_depth_2d_array']: r#218
[#376 'texture_depth_cube']: r#218
[#376 'texture_depth_cube_array']: r#218
[#376 'texture_depth_multisampled_2d']: r#218
[#376 'texture_multisampled_2d']: r#218
[#376 'texture_storage_1d']: r#218
[#376 'texture_storage_2d']: r#218
[#376 'texture_storage_2d_array']: r#218
[#376 'texture_storage_3d']: r#218
[#376 'u32']: r#218
[#376 'var']: r#218
[#376 'vec2']: r#218
[#376 'vec3']: r#218
[#376 'vec4']: r#218
[#376 'while']: r#218
[#376 '{']: r#218
[#376 '}']: r#218
[#376 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#218
[#377 ';']: s#516
[#378 '!']: s#68
[#378 '&']: s#71
[#378 '(']: s#83
[#378 '*']: s#70
[#378 '-']: s#67
[#378 'array']: s#87
[#378 'atomic']: s#101
[#378 'bitcast']: s#77
[#378 'bool']: s#94
[#378 'f16']: s#96
[#378 'f32']: s#95
[#378 'false']: s#93
[#378 'i32']: s#97
[#378 'mat2x2']: s#106
[#378 'mat2x3']: s#107
[#378 'mat2x4']: s#108
[#378 'mat3x2']: s#109
[#378 'mat3x3']: s#110
[#378 'mat3x4']: s#111
[#378 'mat4x2']: s#112
[#378 'mat4x3']: s#113
[#378 'mat4x4']: s#114
[#378 'ptr']: s#99
[#378 'sampler']: s#131
[#378 'sampler_comparison']: s#132
[#378 'texture_1d']: s#138
[#378 'texture_2d']: s#139
[#378 'texture_2d_array']: s#140
[#378 'texture_3d']: s#141
[#378 'texture_cube']: s#142
[#378 'texture_cube_array']: s#143
[#378 'texture_depth_2d']: s#133
[#378 'texture_depth_2d_array']: s#134
[#378 'texture_depth_cube']: s#135
[#378 'texture_depth_cube_array']: s#136
[#378 'texture_depth_multisampled_2d']: s#137
[#378 'texture_multisampled_2d']: s#144
[#378 'texture_storage_1d']: s#145
[#378 'texture_storage_2d']: s#146
[#378 'texture_storage_2d_array']: s#147
[#378 'texture_storage_3d']: s#148
[#378 'true']: s#92
[#378 'u32']: s#98
[#378 'vec2']: s#103
[#378 'vec3']: s#104
[#378 'vec4']: s#105
[#378 '~']: s#69
[#378 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#378 /0[fh]/]: s#118
[#378 /0[iu]?/]: s#115
[#378 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#378 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#378 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#378 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#378 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#378 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#378 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#378 /[1-9][0-9]*[fh]/]: s#119
[#378 /[1-9][0-9]*[iu]?/]: s#116
[#379 'if']: s#513
[#380 'switch']: s#511
[#381 'loop']: s#510
[#382 'for']: s#509
[#383 'while']: s#508
[#384 '(']: s#197
[#385 ';']: r#219
[#385 '=']: s#506
[#386 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#387 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#388 ';']: r#220
[#389 ';']: r#221
[#390 ')']: r#222
[#390 ';']: r#222
[#391 ')']: r#223
[#391 ';']: r#223
[#392 ')']: r#224
[#392 ';']: r#224
[#393 'if']: r#225
[#394 'switch']: r#226
[#395 'loop']: r#227
[#396 'for']: r#228
[#397 'while']: r#229
[#398 '%=']: r#230
[#398 '&=']: r#230
[#398 '(']: r#35
[#398 '*=']: r#230
[#398 '++']: r#230
[#398 '+=']: r#230
[#398 '--']: r#230
[#398 '-=']: r#230
[#398 '.']: r#230
[#398 '/=']: r#230
[#398 '=']: r#230
[#398 '[']: r#230
[#398 '^=']: r#230
[#398 '|=']: r#230
[#398 /\u200B_shift_left_assign/]: r#230
[#398 /\u200B_shift_right_assign/]: r#230
[#399 '%=']: s#496
[#399 '&=']: s#497
[#399 '*=']: s#494
[#399 '++']: s#488
[#399 '+=']: s#492
[#399 '--']: s#489
[#399 '-=']: s#493
[#399 '/=']: s#495
[#399 '=']: s#490
[#399 '^=']: s#499
[#399 '|=']: s#498
[#399 /\u200B_shift_left_assign/]: s#503
[#399 /\u200B_shift_right_assign/]: s#502
[#400 '=']: s#486
[#401 '@']: s#35
[#402 '.']: s#202
[#402 '[']: s#201
[#403 '&']: s#404
[#403 '(']: s#405
[#403 '*']: s#403
[#403 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#404 '&']: s#404
[#404 '(']: s#405
[#404 '*']: s#403
[#404 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#405 '&']: s#404
[#405 '(']: s#405
[#405 '*']: s#403
[#405 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#406 ',']: s#474
[#407 ',']: r#231
[#408 ',']: r#232
[#409 ',']: r#233
[#410 ',']: r#234
[#411 ',']: r#235
[#412 ',']: r#236
[#413 ',']: r#237
[#414 ',']: r#238
[#415 ',']: r#239
[#416 ',']: r#240
[#417 ',']: r#241
[#418 ',']: r#242
[#419 ',']: r#243
[#420 ',']: r#244
[#421 ',']: r#245
[#422 ',']: r#246
[#423 ',']: r#247
[#424 /\u200B_template_args_end/]: s#461
[#425 /\u200B_template_args_end/]: s#461
[#426 /\u200B_template_args_end/]: s#461
[#427 ',']: s#470
[#428 ',']: s#469
[#429 /\u200B_template_args_end/]: s#461
[#430 /\u200B_template_args_end/]: s#461
[#431 ',']: s#465
[#432 ')']: r#248
[#432 ',']: r#248
[#433 ',']: s#434
[#434 '!']: s#68
[#434 '&']: s#71
[#434 '(']: s#83
[#434 '*']: s#70
[#434 '-']: s#67
[#434 'array']: s#87
[#434 'atomic']: s#101
[#434 'bitcast']: s#77
[#434 'bool']: s#94
[#434 'f16']: s#96
[#434 'f32']: s#95
[#434 'false']: s#93
[#434 'i32']: s#97
[#434 'mat2x2']: s#106
[#434 'mat2x3']: s#107
[#434 'mat2x4']: s#108
[#434 'mat3x2']: s#109
[#434 'mat3x3']: s#110
[#434 'mat3x4']: s#111
[#434 'mat4x2']: s#112
[#434 'mat4x3']: s#113
[#434 'mat4x4']: s#114
[#434 'ptr']: s#99
[#434 'sampler']: s#131
[#434 'sampler_comparison']: s#132
[#434 'texture_1d']: s#138
[#434 'texture_2d']: s#139
[#434 'texture_2d_array']: s#140
[#434 'texture_3d']: s#141
[#434 'texture_cube']: s#142
[#434 'texture_cube_array']: s#143
[#434 'texture_depth_2d']: s#133
[#434 'texture_depth_2d_array']: s#134
[#434 'texture_depth_cube']: s#135
[#434 'texture_depth_cube_array']: s#136
[#434 'texture_depth_multisampled_2d']: s#137
[#434 'texture_multisampled_2d']: s#144
[#434 'texture_storage_1d']: s#145
[#434 'texture_storage_2d']: s#146
[#434 'texture_storage_2d_array']: s#147
[#434 'texture_storage_3d']: s#148
[#434 'true']: s#92
[#434 'u32']: s#98
[#434 'vec2']: s#103
[#434 'vec3']: s#104
[#434 'vec4']: s#105
[#434 '~']: s#69
[#434 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#434 /0[fh]/]: s#118
[#434 /0[iu]?/]: s#115
[#434 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#434 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#434 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#434 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#434 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#434 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#434 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#434 /[1-9][0-9]*[fh]/]: s#119
[#434 /[1-9][0-9]*[iu]?/]: s#116
[#435 '!=']: r#249
[#435 '%']: r#249
[#435 '&&']: r#249
[#435 '&']: r#249
[#435 ')']: r#249
[#435 '*']: r#249
[#435 '+']: r#249
[#435 ',']: r#249
[#435 '-']: r#249
[#435 '.']: r#249
[#435 '/']: r#249
[#435 ':']: r#249
[#435 ';']: r#249
[#435 '==']: r#249
[#435 '@']: r#249
[#435 '[']: r#249
[#435 ']']: r#249
[#435 '^']: r#249
[#435 '{']: r#249
[#435 '|']: r#249
[#435 '||']: r#249
[#435 /\u200B_greater_than/]: r#249
[#435 /\u200B_greater_than_equal/]: r#249
[#435 /\u200B_less_than/]: r#249
[#435 /\u200B_less_than_equal/]: r#249
[#435 /\u200B_shift_left/]: r#249
[#435 /\u200B_shift_right/]: r#249
[#435 /\u200B_template_args_end/]: r#249
[#436 /\u200B_template_args_end/]: s#461
[#437 '.']: s#202
[#437 '[']: s#201
[#438 '!=']: r#250
[#438 '%']: r#250
[#438 '%=']: r#250
[#438 '&&']: r#250
[#438 '&']: r#250
[#438 '&=']: r#250
[#438 ')']: r#250
[#438 '*']: r#250
[#438 '*=']: r#250
[#438 '+']: r#250
[#438 '++']: r#250
[#438 '+=']: r#250
[#438 ',']: r#250
[#438 '-']: r#250
[#438 '--']: r#250
[#438 '-=']: r#250
[#438 '/']: r#250
[#438 '/=']: r#250
[#438 ':']: r#250
[#438 ';']: r#250
[#438 '=']: r#250
[#438 '==']: r#250
[#438 '@']: r#250
[#438 ']']: r#250
[#438 '^']: r#250
[#438 '^=']: r#250
[#438 '{']: r#250
[#438 '|']: r#250
[#438 '|=']: r#250
[#438 '||']: r#250
[#438 /\u200B_greater_than/]: r#250
[#438 /\u200B_greater_than_equal/]: r#250
[#438 /\u200B_less_than/]: r#250
[#438 /\u200B_less_than_equal/]: r#250
[#438 /\u200B_shift_left/]: r#250
[#438 /\u200B_shift_left_assign/]: r#250
[#438 /\u200B_shift_right/]: r#250
[#438 /\u200B_shift_right_assign/]: r#250
[#438 /\u200B_template_args_end/]: r#250
[#439 '!=']: r#251
[#439 '%']: r#251
[#439 '%=']: r#251
[#439 '&&']: r#251
[#439 '&']: r#251
[#439 '&=']: r#251
[#439 ')']: r#251
[#439 '*']: r#251
[#439 '*=']: r#251
[#439 '+']: r#251
[#439 '++']: r#251
[#439 '+=']: r#251
[#439 ',']: r#251
[#439 '-']: r#251
[#439 '--']: r#251
[#439 '-=']: r#251
[#439 '/']: r#251
[#439 '/=']: r#251
[#439 ':']: r#251
[#439 ';']: r#251
[#439 '=']: r#251
[#439 '==']: r#251
[#439 '@']: r#251
[#439 ']']: r#251
[#439 '^']: r#251
[#439 '^=']: r#251
[#439 '{']: r#251
[#439 '|']: r#251
[#439 '|=']: r#251
[#439 '||']: r#251
[#439 /\u200B_greater_than/]: r#251
[#439 /\u200B_greater_than_equal/]: r#251
[#439 /\u200B_less_than/]: r#251
[#439 /\u200B_less_than_equal/]: r#251
[#439 /\u200B_shift_left/]: r#251
[#439 /\u200B_shift_left_assign/]: r#251
[#439 /\u200B_shift_right/]: r#251
[#439 /\u200B_shift_right_assign/]: r#251
[#439 /\u200B_template_args_end/]: r#251
[#440 '!=']: r#252
[#440 '%']: r#252
[#440 '%=']: r#252
[#440 '&&']: r#252
[#440 '&']: r#252
[#440 '&=']: r#252
[#440 ')']: r#252
[#440 '*']: r#252
[#440 '*=']: r#252
[#440 '+']: r#252
[#440 '++']: r#252
[#440 '+=']: r#252
[#440 ',']: r#252
[#440 '-']: r#252
[#440 '--']: r#252
[#440 '-=']: r#252
[#440 '/']: r#252
[#440 '/=']: r#252
[#440 ':']: r#252
[#440 ';']: r#252
[#440 '=']: r#252
[#440 '==']: r#252
[#440 '@']: r#252
[#440 ']']: r#252
[#440 '^']: r#252
[#440 '^=']: r#252
[#440 '{']: r#252
[#440 '|']: r#252
[#440 '|=']: r#252
[#440 '||']: r#252
[#440 /\u200B_greater_than/]: r#252
[#440 /\u200B_greater_than_equal/]: r#252
[#440 /\u200B_less_than/]: r#252
[#440 /\u200B_less_than_equal/]: r#252
[#440 /\u200B_shift_left/]: r#252
[#440 /\u200B_shift_left_assign/]: r#252
[#440 /\u200B_shift_right/]: r#252
[#440 /\u200B_shift_right_assign/]: r#252
[#440 /\u200B_template_args_end/]: r#252
[#441 '!=']: r#253
[#441 '%']: r#253
[#441 '%=']: r#253
[#441 '&&']: r#253
[#441 '&']: r#253
[#441 '&=']: r#253
[#441 ')']: r#253
[#441 '*']: r#253
[#441 '*=']: r#253
[#441 '+']: r#253
[#441 '++']: r#253
[#441 '+=']: r#253
[#441 ',']: r#253
[#441 '-']: r#253
[#441 '--']: r#253
[#441 '-=']: r#253
[#441 '/']: r#253
[#441 '/=']: r#253
[#441 ':']: r#253
[#441 ';']: r#253
[#441 '=']: r#253
[#441 '==']: r#253
[#441 '@']: r#253
[#441 ']']: r#253
[#441 '^']: r#253
[#441 '^=']: r#253
[#441 '{']: r#253
[#441 '|']: r#253
[#441 '|=']: r#253
[#441 '||']: r#253
[#441 /\u200B_greater_than/]: r#253
[#441 /\u200B_greater_than_equal/]: r#253
[#441 /\u200B_less_than/]: r#253
[#441 /\u200B_less_than_equal/]: r#253
[#441 /\u200B_shift_left/]: r#253
[#441 /\u200B_shift_left_assign/]: r#253
[#441 /\u200B_shift_right/]: r#253
[#441 /\u200B_shift_right_assign/]: r#253
[#441 /\u200B_template_args_end/]: r#253
[#442 '@']: r#254
[#442 'array']: r#254
[#442 'atomic']: r#254
[#442 'bool']: r#254
[#442 'f16']: r#254
[#442 'f32']: r#254
[#442 'fn']: r#254
[#442 'for']: r#254
[#442 'i32']: r#254
[#442 'if']: r#254
[#442 'loop']: r#254
[#442 'mat2x2']: r#254
[#442 'mat2x3']: r#254
[#442 'mat2x4']: r#254
[#442 'mat3x2']: r#254
[#442 'mat3x3']: r#254
[#442 'mat3x4']: r#254
[#442 'mat4x2']: r#254
[#442 'mat4x3']: r#254
[#442 'mat4x4']: r#254
[#442 'override']: r#254
[#442 'ptr']: r#254
[#442 'sampler']: r#254
[#442 'sampler_comparison']: r#254
[#442 'switch']: r#254
[#442 'texture_1d']: r#254
[#442 'texture_2d']: r#254
[#442 'texture_2d_array']: r#254
[#442 'texture_3d']: r#254
[#442 'texture_cube']: r#254
[#442 'texture_cube_array']: r#254
[#442 'texture_depth_2d']: r#254
[#442 'texture_depth_2d_array']: r#254
[#442 'texture_depth_cube']: r#254
[#442 'texture_depth_cube_array']: r#254
[#442 'texture_depth_multisampled_2d']: r#254
[#442 'texture_multisampled_2d']: r#254
[#442 'texture_storage_1d']: r#254
[#442 'texture_storage_2d']: r#254
[#442 'texture_storage_2d_array']: r#254
[#442 'texture_storage_3d']: r#254
[#442 'u32']: r#254
[#442 'var']: r#254
[#442 'vec2']: r#254
[#442 'vec3']: r#254
[#442 'vec4']: r#254
[#442 'while']: r#254
[#442 '{']: r#254
[#442 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#254
[#443 '!']: s#68
[#443 '&']: s#71
[#443 '(']: s#83
[#443 ')']: r#199
[#443 '*']: s#70
[#443 '-']: s#67
[#443 'array']: s#87
[#443 'atomic']: s#101
[#443 'bitcast']: s#77
[#443 'bool']: s#94
[#443 'f16']: s#96
[#443 'f32']: s#95
[#443 'false']: s#93
[#443 'i32']: s#97
[#443 'mat2x2']: s#106
[#443 'mat2x3']: s#107
[#443 'mat2x4']: s#108
[#443 'mat3x2']: s#109
[#443 'mat3x3']: s#110
[#443 'mat3x4']: s#111
[#443 'mat4x2']: s#112
[#443 'mat4x3']: s#113
[#443 'mat4x4']: s#114
[#443 'ptr']: s#99
[#443 'sampler']: s#131
[#443 'sampler_comparison']: s#132
[#443 'texture_1d']: s#138
[#443 'texture_2d']: s#139
[#443 'texture_2d_array']: s#140
[#443 'texture_3d']: s#141
[#443 'texture_cube']: s#142
[#443 'texture_cube_array']: s#143
[#443 'texture_depth_2d']: s#133
[#443 'texture_depth_2d_array']: s#134
[#443 'texture_depth_cube']: s#135
[#443 'texture_depth_cube_array']: s#136
[#443 'texture_depth_multisampled_2d']: s#137
[#443 'texture_multisampled_2d']: s#144
[#443 'texture_storage_1d']: s#145
[#443 'texture_storage_2d']: s#146
[#443 'texture_storage_2d_array']: s#147
[#443 'texture_storage_3d']: s#148
[#443 'true']: s#92
[#443 'u32']: s#98
[#443 'vec2']: s#103
[#443 'vec3']: s#104
[#443 'vec4']: s#105
[#443 '~']: s#69
[#443 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#443 /0[fh]/]: s#118
[#443 /0[iu]?/]: s#115
[#443 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#443 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#443 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#443 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#443 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#443 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#443 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#443 /[1-9][0-9]*[fh]/]: s#119
[#443 /[1-9][0-9]*[iu]?/]: s#116
[#444 '@']: r#255
[#444 'array']: r#255
[#444 'atomic']: r#255
[#444 'bool']: r#255
[#444 'f16']: r#255
[#444 'f32']: r#255
[#444 'fn']: r#255
[#444 'for']: r#255
[#444 'i32']: r#255
[#444 'if']: r#255
[#444 'loop']: r#255
[#444 'mat2x2']: r#255
[#444 'mat2x3']: r#255
[#444 'mat2x4']: r#255
[#444 'mat3x2']: r#255
[#444 'mat3x3']: r#255
[#444 'mat3x4']: r#255
[#444 'mat4x2']: r#255
[#444 'mat4x3']: r#255
[#444 'mat4x4']: r#255
[#444 'override']: r#255
[#444 'ptr']: r#255
[#444 'sampler']: r#255
[#444 'sampler_comparison']: r#255
[#444 'switch']: r#255
[#444 'texture_1d']: r#255
[#444 'texture_2d']: r#255
[#444 'texture_2d_array']: r#255
[#444 'texture_3d']: r#255
[#444 'texture_cube']: r#255
[#444 'texture_cube_array']: r#255
[#444 'texture_depth_2d']: r#255
[#444 'texture_depth_2d_array']: r#255
[#444 'texture_depth_cube']: r#255
[#444 'texture_depth_cube_array']: r#255
[#444 'texture_depth_multisampled_2d']: r#255
[#444 'texture_multisampled_2d']: r#255
[#444 'texture_storage_1d']: r#255
[#444 'texture_storage_2d']: r#255
[#444 'texture_storage_2d_array']: r#255
[#444 'texture_storage_3d']: r#255
[#444 'u32']: r#255
[#444 'var']: r#255
[#444 'vec2']: r#255
[#444 'vec3']: r#255
[#444 'vec4']: r#255
[#444 'while']: r#255
[#444 '{']: r#255
[#444 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#255
[#445 '@']: r#256
[#445 'array']: r#256
[#445 'atomic']: r#256
[#445 'bool']: r#256
[#445 'f16']: r#256
[#445 'f32']: r#256
[#445 'fn']: r#256
[#445 'for']: r#256
[#445 'i32']: r#256
[#445 'if']: r#256
[#445 'loop']: r#256
[#445 'mat2x2']: r#256
[#445 'mat2x3']: r#256
[#445 'mat2x4']: r#256
[#445 'mat3x2']: r#256
[#445 'mat3x3']: r#256
[#445 'mat3x4']: r#256
[#445 'mat4x2']: r#256
[#445 'mat4x3']: r#256
[#445 'mat4x4']: r#256
[#445 'override']: r#256
[#445 'ptr']: r#256
[#445 'sampler']: r#256
[#445 'sampler_comparison']: r#256
[#445 'switch']: r#256
[#445 'texture_1d']: r#256
[#445 'texture_2d']: r#256
[#445 'texture_2d_array']: r#256
[#445 'texture_3d']: r#256
[#445 'texture_cube']: r#256
[#445 'texture_cube_array']: r#256
[#445 'texture_depth_2d']: r#256
[#445 'texture_depth_2d_array']: r#256
[#445 'texture_depth_cube']: r#256
[#445 'texture_depth_cube_array']: r#256
[#445 'texture_depth_multisampled_2d']: r#256
[#445 'texture_multisampled_2d']: r#256
[#445 'texture_storage_1d']: r#256
[#445 'texture_storage_2d']: r#256
[#445 'texture_storage_2d_array']: r#256
[#445 'texture_storage_3d']: r#256
[#445 'u32']: r#256
[#445 'var']: r#256
[#445 'vec2']: r#256
[#445 'vec3']: r#256
[#445 'vec4']: r#256
[#445 'while']: r#256
[#445 '{']: r#256
[#445 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#256
[#446 '@']: r#257
[#446 'array']: r#257
[#446 'atomic']: r#257
[#446 'bool']: r#257
[#446 'f16']: r#257
[#446 'f32']: r#257
[#446 'fn']: r#257
[#446 'for']: r#257
[#446 'i32']: r#257
[#446 'if']: r#257
[#446 'loop']: r#257
[#446 'mat2x2']: r#257
[#446 'mat2x3']: r#257
[#446 'mat2x4']: r#257
[#446 'mat3x2']: r#257
[#446 'mat3x3']: r#257
[#446 'mat3x4']: r#257
[#446 'mat4x2']: r#257
[#446 'mat4x3']: r#257
[#446 'mat4x4']: r#257
[#446 'override']: r#257
[#446 'ptr']: r#257
[#446 'sampler']: r#257
[#446 'sampler_comparison']: r#257
[#446 'switch']: r#257
[#446 'texture_1d']: r#257
[#446 'texture_2d']: r#257
[#446 'texture_2d_array']: r#257
[#446 'texture_3d']: r#257
[#446 'texture_cube']: r#257
[#446 'texture_cube_array']: r#257
[#446 'texture_depth_2d']: r#257
[#446 'texture_depth_2d_array']: r#257
[#446 'texture_depth_cube']: r#257
[#446 'texture_depth_cube_array']: r#257
[#446 'texture_depth_multisampled_2d']: r#257
[#446 'texture_multisampled_2d']: r#257
[#446 'texture_storage_1d']: r#257
[#446 'texture_storage_2d']: r#257
[#446 'texture_storage_2d_array']: r#257
[#446 'texture_storage_3d']: r#257
[#446 'u32']: r#257
[#446 'var']: r#257
[#446 'vec2']: r#257
[#446 'vec3']: r#257
[#446 'vec4']: r#257
[#446 'while']: r#257
[#446 '{']: r#257
[#446 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#257
[#447 ')']: r#199
[#447 'center']: s#454
[#447 'centroid']: s#455
[#447 'sample']: s#456
[#448 '@']: r#258
[#448 'array']: r#258
[#448 'atomic']: r#258
[#448 'bool']: r#258
[#448 'f16']: r#258
[#448 'f32']: r#258
[#448 'fn']: r#258
[#448 'for']: r#258
[#448 'i32']: r#258
[#448 'if']: r#258
[#448 'loop']: r#258
[#448 'mat2x2']: r#258
[#448 'mat2x3']: r#258
[#448 'mat2x4']: r#258
[#448 'mat3x2']: r#258
[#448 'mat3x3']: r#258
[#448 'mat3x4']: r#258
[#448 'mat4x2']: r#258
[#448 'mat4x3']: r#258
[#448 'mat4x4']: r#258
[#448 'override']: r#258
[#448 'ptr']: r#258
[#448 'sampler']: r#258
[#448 'sampler_comparison']: r#258
[#448 'switch']: r#258
[#448 'texture_1d']: r#258
[#448 'texture_2d']: r#258
[#448 'texture_2d_array']: r#258
[#448 'texture_3d']: r#258
[#448 'texture_cube']: r#258
[#448 'texture_cube_array']: r#258
[#448 'texture_depth_2d']: r#258
[#448 'texture_depth_2d_array']: r#258
[#448 'texture_depth_cube']: r#258
[#448 'texture_depth_cube_array']: r#258
[#448 'texture_depth_multisampled_2d']: r#258
[#448 'texture_multisampled_2d']: r#258
[#448 'texture_storage_1d']: r#258
[#448 'texture_storage_2d']: r#258
[#448 'texture_storage_2d_array']: r#258
[#448 'texture_storage_3d']: r#258
[#448 'u32']: r#258
[#448 'var']: r#258
[#448 'vec2']: r#258
[#448 'vec3']: r#258
[#448 'vec4']: r#258
[#448 'while']: r#258
[#448 '{']: r#258
[#448 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#258
[#449 '@']: r#259
[#449 'array']: r#259
[#449 'atomic']: r#259
[#449 'bool']: r#259
[#449 'f16']: r#259
[#449 'f32']: r#259
[#449 'fn']: r#259
[#449 'for']: r#259
[#449 'i32']: r#259
[#449 'if']: r#259
[#449 'loop']: r#259
[#449 'mat2x2']: r#259
[#449 'mat2x3']: r#259
[#449 'mat2x4']: r#259
[#449 'mat3x2']: r#259
[#449 'mat3x3']: r#259
[#449 'mat3x4']: r#259
[#449 'mat4x2']: r#259
[#449 'mat4x3']: r#259
[#449 'mat4x4']: r#259
[#449 'override']: r#259
[#449 'ptr']: r#259
[#449 'sampler']: r#259
[#449 'sampler_comparison']: r#259
[#449 'switch']: r#259
[#449 'texture_1d']: r#259
[#449 'texture_2d']: r#259
[#449 'texture_2d_array']: r#259
[#449 'texture_3d']: r#259
[#449 'texture_cube']: r#259
[#449 'texture_cube_array']: r#259
[#449 'texture_depth_2d']: r#259
[#449 'texture_depth_2d_array']: r#259
[#449 'texture_depth_cube']: r#259
[#449 'texture_depth_cube_array']: r#259
[#449 'texture_depth_multisampled_2d']: r#259
[#449 'texture_multisampled_2d']: r#259
[#449 'texture_storage_1d']: r#259
[#449 'texture_storage_2d']: r#259
[#449 'texture_storage_2d_array']: r#259
[#449 'texture_storage_3d']: r#259
[#449 'u32']: r#259
[#449 'var']: r#259
[#449 'vec2']: r#259
[#449 'vec3']: r#259
[#449 'vec4']: r#259
[#449 'while']: r#259
[#449 '{']: r#259
[#449 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#259
[#450 '@']: r#260
[#450 'array']: r#260
[#450 'atomic']: r#260
[#450 'bool']: r#260
[#450 'f16']: r#260
[#450 'f32']: r#260
[#450 'fn']: r#260
[#450 'for']: r#260
[#450 'i32']: r#260
[#450 'if']: r#260
[#450 'loop']: r#260
[#450 'mat2x2']: r#260
[#450 'mat2x3']: r#260
[#450 'mat2x4']: r#260
[#450 'mat3x2']: r#260
[#450 'mat3x3']: r#260
[#450 'mat3x4']: r#260
[#450 'mat4x2']: r#260
[#450 'mat4x3']: r#260
[#450 'mat4x4']: r#260
[#450 'override']: r#260
[#450 'ptr']: r#260
[#450 'sampler']: r#260
[#450 'sampler_comparison']: r#260
[#450 'switch']: r#260
[#450 'texture_1d']: r#260
[#450 'texture_2d']: r#260
[#450 'texture_2d_array']: r#260
[#450 'texture_3d']: r#260
[#450 'texture_cube']: r#260
[#450 'texture_cube_array']: r#260
[#450 'texture_depth_2d']: r#260
[#450 'texture_depth_2d_array']: r#260
[#450 'texture_depth_cube']: r#260
[#450 'texture_depth_cube_array']: r#260
[#450 'texture_depth_multisampled_2d']: r#260
[#450 'texture_multisampled_2d']: r#260
[#450 'texture_storage_1d']: r#260
[#450 'texture_storage_2d']: r#260
[#450 'texture_storage_2d_array']: r#260
[#450 'texture_storage_3d']: r#260
[#450 'u32']: r#260
[#450 'var']: r#260
[#450 'vec2']: r#260
[#450 'vec3']: r#260
[#450 'vec4']: r#260
[#450 'while']: r#260
[#450 '{']: r#260
[#450 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#260
[#451 '@']: r#261
[#451 'array']: r#261
[#451 'atomic']: r#261
[#451 'bool']: r#261
[#451 'f16']: r#261
[#451 'f32']: r#261
[#451 'fn']: r#261
[#451 'for']: r#261
[#451 'i32']: r#261
[#451 'if']: r#261
[#451 'loop']: r#261
[#451 'mat2x2']: r#261
[#451 'mat2x3']: r#261
[#451 'mat2x4']: r#261
[#451 'mat3x2']: r#261
[#451 'mat3x3']: r#261
[#451 'mat3x4']: r#261
[#451 'mat4x2']: r#261
[#451 'mat4x3']: r#261
[#451 'mat4x4']: r#261
[#451 'override']: r#261
[#451 'ptr']: r#261
[#451 'sampler']: r#261
[#451 'sampler_comparison']: r#261
[#451 'switch']: r#261
[#451 'texture_1d']: r#261
[#451 'texture_2d']: r#261
[#451 'texture_2d_array']: r#261
[#451 'texture_3d']: r#261
[#451 'texture_cube']: r#261
[#451 'texture_cube_array']: r#261
[#451 'texture_depth_2d']: r#261
[#451 'texture_depth_2d_array']: r#261
[#451 'texture_depth_cube']: r#261
[#451 'texture_depth_cube_array']: r#261
[#451 'texture_depth_multisampled_2d']: r#261
[#451 'texture_multisampled_2d']: r#261
[#451 'texture_storage_1d']: r#261
[#451 'texture_storage_2d']: r#261
[#451 'texture_storage_2d_array']: r#261
[#451 'texture_storage_3d']: r#261
[#451 'u32']: r#261
[#451 'var']: r#261
[#451 'vec2']: r#261
[#451 'vec3']: r#261
[#451 'vec4']: r#261
[#451 'while']: r#261
[#451 '{']: r#261
[#451 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#261
[#452 '@']: r#262
[#452 'array']: r#262
[#452 'atomic']: r#262
[#452 'bool']: r#262
[#452 'f16']: r#262
[#452 'f32']: r#262
[#452 'fn']: r#262
[#452 'for']: r#262
[#452 'i32']: r#262
[#452 'if']: r#262
[#452 'loop']: r#262
[#452 'mat2x2']: r#262
[#452 'mat2x3']: r#262
[#452 'mat2x4']: r#262
[#452 'mat3x2']: r#262
[#452 'mat3x3']: r#262
[#452 'mat3x4']: r#262
[#452 'mat4x2']: r#262
[#452 'mat4x3']: r#262
[#452 'mat4x4']: r#262
[#452 'override']: r#262
[#452 'ptr']: r#262
[#452 'sampler']: r#262
[#452 'sampler_comparison']: r#262
[#452 'switch']: r#262
[#452 'texture_1d']: r#262
[#452 'texture_2d']: r#262
[#452 'texture_2d_array']: r#262
[#452 'texture_3d']: r#262
[#452 'texture_cube']: r#262
[#452 'texture_cube_array']: r#262
[#452 'texture_depth_2d']: r#262
[#452 'texture_depth_2d_array']: r#262
[#452 'texture_depth_cube']: r#262
[#452 'texture_depth_cube_array']: r#262
[#452 'texture_depth_multisampled_2d']: r#262
[#452 'texture_multisampled_2d']: r#262
[#452 'texture_storage_1d']: r#262
[#452 'texture_storage_2d']: r#262
[#452 'texture_storage_2d_array']: r#262
[#452 'texture_storage_3d']: r#262
[#452 'u32']: r#262
[#452 'var']: r#262
[#452 'vec2']: r#262
[#452 'vec3']: r#262
[#452 'vec4']: r#262
[#452 'while']: r#262
[#452 '{']: r#262
[#452 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#262
[#453 ',']: s#336
[#454 ')']: r#263
[#454 ',']: r#263
[#455 ')']: r#264
[#455 ',']: r#264
[#456 ')']: r#265
[#456 ',']: r#265
[#457 ',']: s#581
[#458 '!=']: r#266
[#458 '%']: r#266
[#458 '%=']: r#266
[#458 '&&']: r#266
[#458 '&']: r#266
[#458 '&=']: r#266
[#458 ')']: r#266
[#458 '*']: r#266
[#458 '*=']: r#266
[#458 '+']: r#266
[#458 '++']: r#266
[#458 '+=']: r#266
[#458 ',']: r#266
[#458 '-']: r#266
[#458 '--']: r#266
[#458 '-=']: r#266
[#458 '/']: r#266
[#458 '/=']: r#266
[#458 ':']: r#266
[#458 ';']: r#266
[#458 '=']: r#266
[#458 '==']: r#266
[#458 '@']: r#266
[#458 ']']: r#266
[#458 '^']: r#266
[#458 '^=']: r#266
[#458 '{']: r#266
[#458 '|']: r#266
[#458 '|=']: r#266
[#458 '||']: r#266
[#458 /\u200B_greater_than/]: r#266
[#458 /\u200B_greater_than_equal/]: r#266
[#458 /\u200B_less_than/]: r#266
[#458 /\u200B_less_than_equal/]: r#266
[#458 /\u200B_shift_left/]: r#266
[#458 /\u200B_shift_left_assign/]: r#266
[#458 /\u200B_shift_right/]: r#266
[#458 /\u200B_shift_right_assign/]: r#266
[#458 /\u200B_template_args_end/]: r#266
[#459 '!=']: r#267
[#459 '%']: r#267
[#459 '%=']: r#267
[#459 '&&']: r#267
[#459 '&']: r#267
[#459 '&=']: r#267
[#459 ')']: r#267
[#459 '*']: r#267
[#459 '*=']: r#267
[#459 '+']: r#267
[#459 '++']: r#267
[#459 '+=']: r#267
[#459 ',']: r#267
[#459 '-']: r#267
[#459 '--']: r#267
[#459 '-=']: r#267
[#459 '/']: r#267
[#459 '/=']: r#267
[#459 ':']: r#267
[#459 ';']: r#267
[#459 '=']: r#267
[#459 '==']: r#267
[#459 '@']: r#267
[#459 ']']: r#267
[#459 '^']: r#267
[#459 '^=']: r#267
[#459 '{']: r#267
[#459 '|']: r#267
[#459 '|=']: r#267
[#459 '||']: r#267
[#459 /\u200B_greater_than/]: r#267
[#459 /\u200B_greater_than_equal/]: r#267
[#459 /\u200B_less_than/]: r#267
[#459 /\u200B_less_than_equal/]: r#267
[#459 /\u200B_shift_left/]: r#267
[#459 /\u200B_shift_left_assign/]: r#267
[#459 /\u200B_shift_right/]: r#267
[#459 /\u200B_shift_right_assign/]: r#267
[#459 /\u200B_template_args_end/]: r#267
[#460 '(']: s#83
[#461 '(']: r#268
[#461 ')']: r#268
[#461 ',']: r#268
[#461 ';']: r#268
[#461 '=']: r#268
[#461 '@']: r#268
[#461 '{']: r#268
[#461 '}']: r#268
[#461 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#268
[#461 /\u200B_template_args_end/]: r#268
[#462 ')']: r#269
[#462 ',']: r#269
[#463 ')']: r#270
[#463 ',']: r#270
[#464 ')']: r#271
[#465 ')']: r#272
[#466 '(']: r#273
[#466 ')']: r#273
[#466 ',']: r#273
[#466 ';']: r#273
[#466 '=']: r#273
[#466 '@']: r#273
[#466 '{']: r#273
[#466 '}']: r#273
[#466 /\u200B_template_args_end/]: r#273
[#467 '(']: r#274
[#467 ')']: r#274
[#467 ',']: r#274
[#467 ';']: r#274
[#467 '=']: r#274
[#467 '@']: r#274
[#467 '{']: r#274
[#467 '}']: r#274
[#467 /\u200B_template_args_end/]: r#274
[#468 /\u200B_template_args_end/]: s#461
[#469 '!']: s#68
[#469 '&']: s#71
[#469 '(']: s#83
[#469 '*']: s#70
[#469 '-']: s#67
[#469 'array']: s#87
[#469 'atomic']: s#101
[#469 'bitcast']: s#77
[#469 'bool']: s#94
[#469 'f16']: s#96
[#469 'f32']: s#95
[#469 'false']: s#93
[#469 'i32']: s#97
[#469 'mat2x2']: s#106
[#469 'mat2x3']: s#107
[#469 'mat2x4']: s#108
[#469 'mat3x2']: s#109
[#469 'mat3x3']: s#110
[#469 'mat3x4']: s#111
[#469 'mat4x2']: s#112
[#469 'mat4x3']: s#113
[#469 'mat4x4']: s#114
[#469 'ptr']: s#99
[#469 'sampler']: s#131
[#469 'sampler_comparison']: s#132
[#469 'texture_1d']: s#138
[#469 'texture_2d']: s#139
[#469 'texture_2d_array']: s#140
[#469 'texture_3d']: s#141
[#469 'texture_cube']: s#142
[#469 'texture_cube_array']: s#143
[#469 'texture_depth_2d']: s#133
[#469 'texture_depth_2d_array']: s#134
[#469 'texture_depth_cube']: s#135
[#469 'texture_depth_cube_array']: s#136
[#469 'texture_depth_multisampled_2d']: s#137
[#469 'texture_multisampled_2d']: s#144
[#469 'texture_storage_1d']: s#145
[#469 'texture_storage_2d']: s#146
[#469 'texture_storage_2d_array']: s#147
[#469 'texture_storage_3d']: s#148
[#469 'true']: s#92
[#469 'u32']: s#98
[#469 'vec2']: s#103
[#469 'vec3']: s#104
[#469 'vec4']: s#105
[#469 '~']: s#69
[#469 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#469 /0[fh]/]: s#118
[#469 /0[iu]?/]: s#115
[#469 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#469 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#469 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#469 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#469 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#469 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#469 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#469 /[1-9][0-9]*[fh]/]: s#119
[#469 /[1-9][0-9]*[iu]?/]: s#116
[#470 'array']: s#323
[#470 'atomic']: s#101
[#470 'bool']: s#94
[#470 'f16']: s#96
[#470 'f32']: s#95
[#470 'i32']: s#97
[#470 'mat2x2']: s#106
[#470 'mat2x3']: s#107
[#470 'mat2x4']: s#108
[#470 'mat3x2']: s#109
[#470 'mat3x3']: s#110
[#470 'mat3x4']: s#111
[#470 'mat4x2']: s#112
[#470 'mat4x3']: s#113
[#470 'mat4x4']: s#114
[#470 'ptr']: s#99
[#470 'sampler']: s#131
[#470 'sampler_comparison']: s#132
[#470 'texture_1d']: s#138
[#470 'texture_2d']: s#139
[#470 'texture_2d_array']: s#140
[#470 'texture_3d']: s#141
[#470 'texture_cube']: s#142
[#470 'texture_cube_array']: s#143
[#470 'texture_depth_2d']: s#133
[#470 'texture_depth_2d_array']: s#134
[#470 'texture_depth_cube']: s#135
[#470 'texture_depth_cube_array']: s#136
[#470 'texture_depth_multisampled_2d']: s#137
[#470 'texture_multisampled_2d']: s#144
[#470 'texture_storage_1d']: s#145
[#470 'texture_storage_2d']: s#146
[#470 'texture_storage_2d_array']: s#147
[#470 'texture_storage_3d']: s#148
[#470 'u32']: s#98
[#470 'vec2']: s#103
[#470 'vec3']: s#104
[#470 'vec4']: s#105
[#470 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#471 '(']: r#275
[#471 ')']: r#275
[#471 ',']: r#275
[#471 ';']: r#275
[#471 '=']: r#275
[#471 '@']: r#275
[#471 '{']: r#275
[#471 '}']: r#275
[#471 /\u200B_template_args_end/]: r#275
[#472 '(']: r#276
[#472 ')']: r#276
[#472 ',']: r#276
[#472 ';']: r#276
[#472 '=']: r#276
[#472 '@']: r#276
[#472 '{']: r#276
[#472 '}']: r#276
[#472 /\u200B_template_args_end/]: r#276
[#473 '(']: r#277
[#473 ')']: r#277
[#473 ',']: r#277
[#473 ';']: r#277
[#473 '=']: r#277
[#473 '@']: r#277
[#473 '{']: r#277
[#473 '}']: r#277
[#473 /\u200B_template_args_end/]: r#277
[#474 'read']: s#542
[#474 'read_write']: s#544
[#474 'write']: s#543
[#475 ')']: s#571
[#476 '%=']: r#230
[#476 '&=']: r#230
[#476 ')']: r#230
[#476 '*=']: r#230
[#476 '++']: r#230
[#476 '+=']: r#230
[#476 '--']: r#230
[#476 '-=']: r#230
[#476 '.']: r#230
[#476 '/=']: r#230
[#476 '=']: r#230
[#476 '[']: r#230
[#476 '^=']: r#230
[#476 '|=']: r#230
[#476 /\u200B_shift_left_assign/]: r#230
[#476 /\u200B_shift_right_assign/]: r#230
[#477 '%=']: r#278
[#477 '&=']: r#278
[#477 ')']: r#278
[#477 '*=']: r#278
[#477 '++']: r#278
[#477 '+=']: r#278
[#477 '--']: r#278
[#477 '-=']: r#278
[#477 '/=']: r#278
[#477 '=']: r#278
[#477 '^=']: r#278
[#477 '|=']: r#278
[#477 /\u200B_shift_left_assign/]: r#278
[#477 /\u200B_shift_right_assign/]: r#278
[#478 '%=']: r#279
[#478 '&=']: r#279
[#478 ')']: r#279
[#478 '*=']: r#279
[#478 '++']: r#279
[#478 '+=']: r#279
[#478 '--']: r#279
[#478 '-=']: r#279
[#478 '/=']: r#279
[#478 '=']: r#279
[#478 '^=']: r#279
[#478 '|=']: r#279
[#478 /\u200B_shift_left_assign/]: r#279
[#478 /\u200B_shift_right_assign/]: r#279
[#479 '%=']: r#280
[#479 '&=']: r#280
[#479 ')']: r#280
[#479 '*=']: r#280
[#479 '++']: r#280
[#479 '+=']: r#280
[#479 '--']: r#280
[#479 '-=']: r#280
[#479 '/=']: r#280
[#479 '=']: r#280
[#479 '^=']: r#280
[#479 '|=']: r#280
[#479 /\u200B_shift_left_assign/]: r#280
[#479 /\u200B_shift_right_assign/]: r#280
[#480 '%=']: r#281
[#480 '&=']: r#281
[#480 ')']: r#281
[#480 '*=']: r#281
[#480 '++']: r#281
[#480 '+=']: r#281
[#480 '--']: r#281
[#480 '-=']: r#281
[#480 '/=']: r#281
[#480 '=']: r#281
[#480 '^=']: r#281
[#480 '|=']: r#281
[#480 /\u200B_shift_left_assign/]: r#281
[#480 /\u200B_shift_right_assign/]: r#281
[#481 'if']: r#282
[#482 'switch']: r#283
[#483 'loop']: r#284
[#484 'for']: r#285
[#485 'while']: r#286
[#486 '!']: s#68
[#486 '&']: s#71
[#486 '(']: s#83
[#486 '*']: s#70
[#486 '-']: s#67
[#486 'array']: s#87
[#486 'atomic']: s#101
[#486 'bitcast']: s#77
[#486 'bool']: s#94
[#486 'f16']: s#96
[#486 'f32']: s#95
[#486 'false']: s#93
[#486 'i32']: s#97
[#486 'mat2x2']: s#106
[#486 'mat2x3']: s#107
[#486 'mat2x4']: s#108
[#486 'mat3x2']: s#109
[#486 'mat3x3']: s#110
[#486 'mat3x4']: s#111
[#486 'mat4x2']: s#112
[#486 'mat4x3']: s#113
[#486 'mat4x4']: s#114
[#486 'ptr']: s#99
[#486 'sampler']: s#131
[#486 'sampler_comparison']: s#132
[#486 'texture_1d']: s#138
[#486 'texture_2d']: s#139
[#486 'texture_2d_array']: s#140
[#486 'texture_3d']: s#141
[#486 'texture_cube']: s#142
[#486 'texture_cube_array']: s#143
[#486 'texture_depth_2d']: s#133
[#486 'texture_depth_2d_array']: s#134
[#486 'texture_depth_cube']: s#135
[#486 'texture_depth_cube_array']: s#136
[#486 'texture_depth_multisampled_2d']: s#137
[#486 'texture_multisampled_2d']: s#144
[#486 'texture_storage_1d']: s#145
[#486 'texture_storage_2d']: s#146
[#486 'texture_storage_2d_array']: s#147
[#486 'texture_storage_3d']: s#148
[#486 'true']: s#92
[#486 'u32']: s#98
[#486 'vec2']: s#103
[#486 'vec3']: s#104
[#486 'vec4']: s#105
[#486 '~']: s#69
[#486 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#486 /0[fh]/]: s#118
[#486 /0[iu]?/]: s#115
[#486 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#486 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#486 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#486 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#486 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#486 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#486 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#486 /[1-9][0-9]*[fh]/]: s#119
[#486 /[1-9][0-9]*[iu]?/]: s#116
[#487 '!']: s#68
[#487 '&']: s#71
[#487 '(']: s#83
[#487 '*']: s#70
[#487 '-']: s#67
[#487 'array']: s#87
[#487 'atomic']: s#101
[#487 'bitcast']: s#77
[#487 'bool']: s#94
[#487 'f16']: s#96
[#487 'f32']: s#95
[#487 'false']: s#93
[#487 'i32']: s#97
[#487 'mat2x2']: s#106
[#487 'mat2x3']: s#107
[#487 'mat2x4']: s#108
[#487 'mat3x2']: s#109
[#487 'mat3x3']: s#110
[#487 'mat3x4']: s#111
[#487 'mat4x2']: s#112
[#487 'mat4x3']: s#113
[#487 'mat4x4']: s#114
[#487 'ptr']: s#99
[#487 'sampler']: s#131
[#487 'sampler_comparison']: s#132
[#487 'texture_1d']: s#138
[#487 'texture_2d']: s#139
[#487 'texture_2d_array']: s#140
[#487 'texture_3d']: s#141
[#487 'texture_cube']: s#142
[#487 'texture_cube_array']: s#143
[#487 'texture_depth_2d']: s#133
[#487 'texture_depth_2d_array']: s#134
[#487 'texture_depth_cube']: s#135
[#487 'texture_depth_cube_array']: s#136
[#487 'texture_depth_multisampled_2d']: s#137
[#487 'texture_multisampled_2d']: s#144
[#487 'texture_storage_1d']: s#145
[#487 'texture_storage_2d']: s#146
[#487 'texture_storage_2d_array']: s#147
[#487 'texture_storage_3d']: s#148
[#487 'true']: s#92
[#487 'u32']: s#98
[#487 'vec2']: s#103
[#487 'vec3']: s#104
[#487 'vec4']: s#105
[#487 '~']: s#69
[#487 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#487 /0[fh]/]: s#118
[#487 /0[iu]?/]: s#115
[#487 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#487 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#487 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#487 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#487 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#487 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#487 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#487 /[1-9][0-9]*[fh]/]: s#119
[#487 /[1-9][0-9]*[iu]?/]: s#116
[#488 ')']: r#287
[#488 ';']: r#287
[#489 ')']: r#288
[#489 ';']: r#288
[#490 '!']: r#289
[#490 '&']: r#289
[#490 '(']: r#289
[#490 '*']: r#289
[#490 '-']: r#289
[#490 'array']: r#289
[#490 'atomic']: r#289
[#490 'bitcast']: r#289
[#490 'bool']: r#289
[#490 'f16']: r#289
[#490 'f32']: r#289
[#490 'false']: r#289
[#490 'i32']: r#289
[#490 'mat2x2']: r#289
[#490 'mat2x3']: r#289
[#490 'mat2x4']: r#289
[#490 'mat3x2']: r#289
[#490 'mat3x3']: r#289
[#490 'mat3x4']: r#289
[#490 'mat4x2']: r#289
[#490 'mat4x3']: r#289
[#490 'mat4x4']: r#289
[#490 'ptr']: r#289
[#490 'sampler']: r#289
[#490 'sampler_comparison']: r#289
[#490 'texture_1d']: r#289
[#490 'texture_2d']: r#289
[#490 'texture_2d_array']: r#289
[#490 'texture_3d']: r#289
[#490 'texture_cube']: r#289
[#490 'texture_cube_array']: r#289
[#490 'texture_depth_2d']: r#289
[#490 'texture_depth_2d_array']: r#289
[#490 'texture_depth_cube']: r#289
[#490 'texture_depth_cube_array']: r#289
[#490 'texture_depth_multisampled_2d']: r#289
[#490 'texture_multisampled_2d']: r#289
[#490 'texture_storage_1d']: r#289
[#490 'texture_storage_2d']: r#289
[#490 'texture_storage_2d_array']: r#289
[#490 'texture_storage_3d']: r#289
[#490 'true']: r#289
[#490 'u32']: r#289
[#490 'vec2']: r#289
[#490 'vec3']: r#289
[#490 'vec4']: r#289
[#490 '~']: r#289
[#490 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#289
[#490 /0[fh]/]: r#289
[#490 /0[iu]?/]: r#289
[#490 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#289
[#490 /0[xX][0-9a-fA-F]+[iu]?/]: r#289
[#490 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#289
[#490 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#289
[#490 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#289
[#490 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#289
[#490 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#289
[#490 /[1-9][0-9]*[fh]/]: r#289
[#490 /[1-9][0-9]*[iu]?/]: r#289
[#491 '!']: r#290
[#491 '&']: r#290
[#491 '(']: r#290
[#491 '*']: r#290
[#491 '-']: r#290
[#491 'array']: r#290
[#491 'atomic']: r#290
[#491 'bitcast']: r#290
[#491 'bool']: r#290
[#491 'f16']: r#290
[#491 'f32']: r#290
[#491 'false']: r#290
[#491 'i32']: r#290
[#491 'mat2x2']: r#290
[#491 'mat2x3']: r#290
[#491 'mat2x4']: r#290
[#491 'mat3x2']: r#290
[#491 'mat3x3']: r#290
[#491 'mat3x4']: r#290
[#491 'mat4x2']: r#290
[#491 'mat4x3']: r#290
[#491 'mat4x4']: r#290
[#491 'ptr']: r#290
[#491 'sampler']: r#290
[#491 'sampler_comparison']: r#290
[#491 'texture_1d']: r#290
[#491 'texture_2d']: r#290
[#491 'texture_2d_array']: r#290
[#491 'texture_3d']: r#290
[#491 'texture_cube']: r#290
[#491 'texture_cube_array']: r#290
[#491 'texture_depth_2d']: r#290
[#491 'texture_depth_2d_array']: r#290
[#491 'texture_depth_cube']: r#290
[#491 'texture_depth_cube_array']: r#290
[#491 'texture_depth_multisampled_2d']: r#290
[#491 'texture_multisampled_2d']: r#290
[#491 'texture_storage_1d']: r#290
[#491 'texture_storage_2d']: r#290
[#491 'texture_storage_2d_array']: r#290
[#491 'texture_storage_3d']: r#290
[#491 'true']: r#290
[#491 'u32']: r#290
[#491 'vec2']: r#290
[#491 'vec3']: r#290
[#491 'vec4']: r#290
[#491 '~']: r#290
[#491 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#290
[#491 /0[fh]/]: r#290
[#491 /0[iu]?/]: r#290
[#491 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#290
[#491 /0[xX][0-9a-fA-F]+[iu]?/]: r#290
[#491 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#290
[#491 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#290
[#491 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#290
[#491 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#290
[#491 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#290
[#491 /[1-9][0-9]*[fh]/]: r#290
[#491 /[1-9][0-9]*[iu]?/]: r#290
[#492 '!']: r#291
[#492 '&']: r#291
[#492 '(']: r#291
[#492 '*']: r#291
[#492 '-']: r#291
[#492 'array']: r#291
[#492 'atomic']: r#291
[#492 'bitcast']: r#291
[#492 'bool']: r#291
[#492 'f16']: r#291
[#492 'f32']: r#291
[#492 'false']: r#291
[#492 'i32']: r#291
[#492 'mat2x2']: r#291
[#492 'mat2x3']: r#291
[#492 'mat2x4']: r#291
[#492 'mat3x2']: r#291
[#492 'mat3x3']: r#291
[#492 'mat3x4']: r#291
[#492 'mat4x2']: r#291
[#492 'mat4x3']: r#291
[#492 'mat4x4']: r#291
[#492 'ptr']: r#291
[#492 'sampler']: r#291
[#492 'sampler_comparison']: r#291
[#492 'texture_1d']: r#291
[#492 'texture_2d']: r#291
[#492 'texture_2d_array']: r#291
[#492 'texture_3d']: r#291
[#492 'texture_cube']: r#291
[#492 'texture_cube_array']: r#291
[#492 'texture_depth_2d']: r#291
[#492 'texture_depth_2d_array']: r#291
[#492 'texture_depth_cube']: r#291
[#492 'texture_depth_cube_array']: r#291
[#492 'texture_depth_multisampled_2d']: r#291
[#492 'texture_multisampled_2d']: r#291
[#492 'texture_storage_1d']: r#291
[#492 'texture_storage_2d']: r#291
[#492 'texture_storage_2d_array']: r#291
[#492 'texture_storage_3d']: r#291
[#492 'true']: r#291
[#492 'u32']: r#291
[#492 'vec2']: r#291
[#492 'vec3']: r#291
[#492 'vec4']: r#291
[#492 '~']: r#291
[#492 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#291
[#492 /0[fh]/]: r#291
[#492 /0[iu]?/]: r#291
[#492 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#291
[#492 /0[xX][0-9a-fA-F]+[iu]?/]: r#291
[#492 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#291
[#492 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#291
[#492 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#291
[#492 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#291
[#492 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#291
[#492 /[1-9][0-9]*[fh]/]: r#291
[#492 /[1-9][0-9]*[iu]?/]: r#291
[#493 '!']: r#292
[#493 '&']: r#292
[#493 '(']: r#292
[#493 '*']: r#292
[#493 '-']: r#292
[#493 'array']: r#292
[#493 'atomic']: r#292
[#493 'bitcast']: r#292
[#493 'bool']: r#292
[#493 'f16']: r#292
[#493 'f32']: r#292
[#493 'false']: r#292
[#493 'i32']: r#292
[#493 'mat2x2']: r#292
[#493 'mat2x3']: r#292
[#493 'mat2x4']: r#292
[#493 'mat3x2']: r#292
[#493 'mat3x3']: r#292
[#493 'mat3x4']: r#292
[#493 'mat4x2']: r#292
[#493 'mat4x3']: r#292
[#493 'mat4x4']: r#292
[#493 'ptr']: r#292
[#493 'sampler']: r#292
[#493 'sampler_comparison']: r#292
[#493 'texture_1d']: r#292
[#493 'texture_2d']: r#292
[#493 'texture_2d_array']: r#292
[#493 'texture_3d']: r#292
[#493 'texture_cube']: r#292
[#493 'texture_cube_array']: r#292
[#493 'texture_depth_2d']: r#292
[#493 'texture_depth_2d_array']: r#292
[#493 'texture_depth_cube']: r#292
[#493 'texture_depth_cube_array']: r#292
[#493 'texture_depth_multisampled_2d']: r#292
[#493 'texture_multisampled_2d']: r#292
[#493 'texture_storage_1d']: r#292
[#493 'texture_storage_2d']: r#292
[#493 'texture_storage_2d_array']: r#292
[#493 'texture_storage_3d']: r#292
[#493 'true']: r#292
[#493 'u32']: r#292
[#493 'vec2']: r#292
[#493 'vec3']: r#292
[#493 'vec4']: r#292
[#493 '~']: r#292
[#493 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#292
[#493 /0[fh]/]: r#292
[#493 /0[iu]?/]: r#292
[#493 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#292
[#493 /0[xX][0-9a-fA-F]+[iu]?/]: r#292
[#493 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#292
[#493 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#292
[#493 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#292
[#493 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#292
[#493 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#292
[#493 /[1-9][0-9]*[fh]/]: r#292
[#493 /[1-9][0-9]*[iu]?/]: r#292
[#494 '!']: r#293
[#494 '&']: r#293
[#494 '(']: r#293
[#494 '*']: r#293
[#494 '-']: r#293
[#494 'array']: r#293
[#494 'atomic']: r#293
[#494 'bitcast']: r#293
[#494 'bool']: r#293
[#494 'f16']: r#293
[#494 'f32']: r#293
[#494 'false']: r#293
[#494 'i32']: r#293
[#494 'mat2x2']: r#293
[#494 'mat2x3']: r#293
[#494 'mat2x4']: r#293
[#494 'mat3x2']: r#293
[#494 'mat3x3']: r#293
[#494 'mat3x4']: r#293
[#494 'mat4x2']: r#293
[#494 'mat4x3']: r#293
[#494 'mat4x4']: r#293
[#494 'ptr']: r#293
[#494 'sampler']: r#293
[#494 'sampler_comparison']: r#293
[#494 'texture_1d']: r#293
[#494 'texture_2d']: r#293
[#494 'texture_2d_array']: r#293
[#494 'texture_3d']: r#293
[#494 'texture_cube']: r#293
[#494 'texture_cube_array']: r#293
[#494 'texture_depth_2d']: r#293
[#494 'texture_depth_2d_array']: r#293
[#494 'texture_depth_cube']: r#293
[#494 'texture_depth_cube_array']: r#293
[#494 'texture_depth_multisampled_2d']: r#293
[#494 'texture_multisampled_2d']: r#293
[#494 'texture_storage_1d']: r#293
[#494 'texture_storage_2d']: r#293
[#494 'texture_storage_2d_array']: r#293
[#494 'texture_storage_3d']: r#293
[#494 'true']: r#293
[#494 'u32']: r#293
[#494 'vec2']: r#293
[#494 'vec3']: r#293
[#494 'vec4']: r#293
[#494 '~']: r#293
[#494 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#293
[#494 /0[fh]/]: r#293
[#494 /0[iu]?/]: r#293
[#494 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#293
[#494 /0[xX][0-9a-fA-F]+[iu]?/]: r#293
[#494 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#293
[#494 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#293
[#494 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#293
[#494 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#293
[#494 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#293
[#494 /[1-9][0-9]*[fh]/]: r#293
[#494 /[1-9][0-9]*[iu]?/]: r#293
[#495 '!']: r#294
[#495 '&']: r#294
[#495 '(']: r#294
[#495 '*']: r#294
[#495 '-']: r#294
[#495 'array']: r#294
[#495 'atomic']: r#294
[#495 'bitcast']: r#294
[#495 'bool']: r#294
[#495 'f16']: r#294
[#495 'f32']: r#294
[#495 'false']: r#294
[#495 'i32']: r#294
[#495 'mat2x2']: r#294
[#495 'mat2x3']: r#294
[#495 'mat2x4']: r#294
[#495 'mat3x2']: r#294
[#495 'mat3x3']: r#294
[#495 'mat3x4']: r#294
[#495 'mat4x2']: r#294
[#495 'mat4x3']: r#294
[#495 'mat4x4']: r#294
[#495 'ptr']: r#294
[#495 'sampler']: r#294
[#495 'sampler_comparison']: r#294
[#495 'texture_1d']: r#294
[#495 'texture_2d']: r#294
[#495 'texture_2d_array']: r#294
[#495 'texture_3d']: r#294
[#495 'texture_cube']: r#294
[#495 'texture_cube_array']: r#294
[#495 'texture_depth_2d']: r#294
[#495 'texture_depth_2d_array']: r#294
[#495 'texture_depth_cube']: r#294
[#495 'texture_depth_cube_array']: r#294
[#495 'texture_depth_multisampled_2d']: r#294
[#495 'texture_multisampled_2d']: r#294
[#495 'texture_storage_1d']: r#294
[#495 'texture_storage_2d']: r#294
[#495 'texture_storage_2d_array']: r#294
[#495 'texture_storage_3d']: r#294
[#495 'true']: r#294
[#495 'u32']: r#294
[#495 'vec2']: r#294
[#495 'vec3']: r#294
[#495 'vec4']: r#294
[#495 '~']: r#294
[#495 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#294
[#495 /0[fh]/]: r#294
[#495 /0[iu]?/]: r#294
[#495 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#294
[#495 /0[xX][0-9a-fA-F]+[iu]?/]: r#294
[#495 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#294
[#495 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#294
[#495 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#294
[#495 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#294
[#495 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#294
[#495 /[1-9][0-9]*[fh]/]: r#294
[#495 /[1-9][0-9]*[iu]?/]: r#294
[#496 '!']: r#295
[#496 '&']: r#295
[#496 '(']: r#295
[#496 '*']: r#295
[#496 '-']: r#295
[#496 'array']: r#295
[#496 'atomic']: r#295
[#496 'bitcast']: r#295
[#496 'bool']: r#295
[#496 'f16']: r#295
[#496 'f32']: r#295
[#496 'false']: r#295
[#496 'i32']: r#295
[#496 'mat2x2']: r#295
[#496 'mat2x3']: r#295
[#496 'mat2x4']: r#295
[#496 'mat3x2']: r#295
[#496 'mat3x3']: r#295
[#496 'mat3x4']: r#295
[#496 'mat4x2']: r#295
[#496 'mat4x3']: r#295
[#496 'mat4x4']: r#295
[#496 'ptr']: r#295
[#496 'sampler']: r#295
[#496 'sampler_comparison']: r#295
[#496 'texture_1d']: r#295
[#496 'texture_2d']: r#295
[#496 'texture_2d_array']: r#295
[#496 'texture_3d']: r#295
[#496 'texture_cube']: r#295
[#496 'texture_cube_array']: r#295
[#496 'texture_depth_2d']: r#295
[#496 'texture_depth_2d_array']: r#295
[#496 'texture_depth_cube']: r#295
[#496 'texture_depth_cube_array']: r#295
[#496 'texture_depth_multisampled_2d']: r#295
[#496 'texture_multisampled_2d']: r#295
[#496 'texture_storage_1d']: r#295
[#496 'texture_storage_2d']: r#295
[#496 'texture_storage_2d_array']: r#295
[#496 'texture_storage_3d']: r#295
[#496 'true']: r#295
[#496 'u32']: r#295
[#496 'vec2']: r#295
[#496 'vec3']: r#295
[#496 'vec4']: r#295
[#496 '~']: r#295
[#496 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#295
[#496 /0[fh]/]: r#295
[#496 /0[iu]?/]: r#295
[#496 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#295
[#496 /0[xX][0-9a-fA-F]+[iu]?/]: r#295
[#496 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#295
[#496 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#295
[#496 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#295
[#496 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#295
[#496 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#295
[#496 /[1-9][0-9]*[fh]/]: r#295
[#496 /[1-9][0-9]*[iu]?/]: r#295
[#497 '!']: r#296
[#497 '&']: r#296
[#497 '(']: r#296
[#497 '*']: r#296
[#497 '-']: r#296
[#497 'array']: r#296
[#497 'atomic']: r#296
[#497 'bitcast']: r#296
[#497 'bool']: r#296
[#497 'f16']: r#296
[#497 'f32']: r#296
[#497 'false']: r#296
[#497 'i32']: r#296
[#497 'mat2x2']: r#296
[#497 'mat2x3']: r#296
[#497 'mat2x4']: r#296
[#497 'mat3x2']: r#296
[#497 'mat3x3']: r#296
[#497 'mat3x4']: r#296
[#497 'mat4x2']: r#296
[#497 'mat4x3']: r#296
[#497 'mat4x4']: r#296
[#497 'ptr']: r#296
[#497 'sampler']: r#296
[#497 'sampler_comparison']: r#296
[#497 'texture_1d']: r#296
[#497 'texture_2d']: r#296
[#497 'texture_2d_array']: r#296
[#497 'texture_3d']: r#296
[#497 'texture_cube']: r#296
[#497 'texture_cube_array']: r#296
[#497 'texture_depth_2d']: r#296
[#497 'texture_depth_2d_array']: r#296
[#497 'texture_depth_cube']: r#296
[#497 'texture_depth_cube_array']: r#296
[#497 'texture_depth_multisampled_2d']: r#296
[#497 'texture_multisampled_2d']: r#296
[#497 'texture_storage_1d']: r#296
[#497 'texture_storage_2d']: r#296
[#497 'texture_storage_2d_array']: r#296
[#497 'texture_storage_3d']: r#296
[#497 'true']: r#296
[#497 'u32']: r#296
[#497 'vec2']: r#296
[#497 'vec3']: r#296
[#497 'vec4']: r#296
[#497 '~']: r#296
[#497 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#296
[#497 /0[fh]/]: r#296
[#497 /0[iu]?/]: r#296
[#497 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#296
[#497 /0[xX][0-9a-fA-F]+[iu]?/]: r#296
[#497 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#296
[#497 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#296
[#497 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#296
[#497 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#296
[#497 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#296
[#497 /[1-9][0-9]*[fh]/]: r#296
[#497 /[1-9][0-9]*[iu]?/]: r#296
[#498 '!']: r#297
[#498 '&']: r#297
[#498 '(']: r#297
[#498 '*']: r#297
[#498 '-']: r#297
[#498 'array']: r#297
[#498 'atomic']: r#297
[#498 'bitcast']: r#297
[#498 'bool']: r#297
[#498 'f16']: r#297
[#498 'f32']: r#297
[#498 'false']: r#297
[#498 'i32']: r#297
[#498 'mat2x2']: r#297
[#498 'mat2x3']: r#297
[#498 'mat2x4']: r#297
[#498 'mat3x2']: r#297
[#498 'mat3x3']: r#297
[#498 'mat3x4']: r#297
[#498 'mat4x2']: r#297
[#498 'mat4x3']: r#297
[#498 'mat4x4']: r#297
[#498 'ptr']: r#297
[#498 'sampler']: r#297
[#498 'sampler_comparison']: r#297
[#498 'texture_1d']: r#297
[#498 'texture_2d']: r#297
[#498 'texture_2d_array']: r#297
[#498 'texture_3d']: r#297
[#498 'texture_cube']: r#297
[#498 'texture_cube_array']: r#297
[#498 'texture_depth_2d']: r#297
[#498 'texture_depth_2d_array']: r#297
[#498 'texture_depth_cube']: r#297
[#498 'texture_depth_cube_array']: r#297
[#498 'texture_depth_multisampled_2d']: r#297
[#498 'texture_multisampled_2d']: r#297
[#498 'texture_storage_1d']: r#297
[#498 'texture_storage_2d']: r#297
[#498 'texture_storage_2d_array']: r#297
[#498 'texture_storage_3d']: r#297
[#498 'true']: r#297
[#498 'u32']: r#297
[#498 'vec2']: r#297
[#498 'vec3']: r#297
[#498 'vec4']: r#297
[#498 '~']: r#297
[#498 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#297
[#498 /0[fh]/]: r#297
[#498 /0[iu]?/]: r#297
[#498 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#297
[#498 /0[xX][0-9a-fA-F]+[iu]?/]: r#297
[#498 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#297
[#498 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#297
[#498 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#297
[#498 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#297
[#498 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#297
[#498 /[1-9][0-9]*[fh]/]: r#297
[#498 /[1-9][0-9]*[iu]?/]: r#297
[#499 '!']: r#298
[#499 '&']: r#298
[#499 '(']: r#298
[#499 '*']: r#298
[#499 '-']: r#298
[#499 'array']: r#298
[#499 'atomic']: r#298
[#499 'bitcast']: r#298
[#499 'bool']: r#298
[#499 'f16']: r#298
[#499 'f32']: r#298
[#499 'false']: r#298
[#499 'i32']: r#298
[#499 'mat2x2']: r#298
[#499 'mat2x3']: r#298
[#499 'mat2x4']: r#298
[#499 'mat3x2']: r#298
[#499 'mat3x3']: r#298
[#499 'mat3x4']: r#298
[#499 'mat4x2']: r#298
[#499 'mat4x3']: r#298
[#499 'mat4x4']: r#298
[#499 'ptr']: r#298
[#499 'sampler']: r#298
[#499 'sampler_comparison']: r#298
[#499 'texture_1d']: r#298
[#499 'texture_2d']: r#298
[#499 'texture_2d_array']: r#298
[#499 'texture_3d']: r#298
[#499 'texture_cube']: r#298
[#499 'texture_cube_array']: r#298
[#499 'texture_depth_2d']: r#298
[#499 'texture_depth_2d_array']: r#298
[#499 'texture_depth_cube']: r#298
[#499 'texture_depth_cube_array']: r#298
[#499 'texture_depth_multisampled_2d']: r#298
[#499 'texture_multisampled_2d']: r#298
[#499 'texture_storage_1d']: r#298
[#499 'texture_storage_2d']: r#298
[#499 'texture_storage_2d_array']: r#298
[#499 'texture_storage_3d']: r#298
[#499 'true']: r#298
[#499 'u32']: r#298
[#499 'vec2']: r#298
[#499 'vec3']: r#298
[#499 'vec4']: r#298
[#499 '~']: r#298
[#499 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#298
[#499 /0[fh]/]: r#298
[#499 /0[iu]?/]: r#298
[#499 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#298
[#499 /0[xX][0-9a-fA-F]+[iu]?/]: r#298
[#499 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#298
[#499 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#298
[#499 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#298
[#499 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#298
[#499 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#298
[#499 /[1-9][0-9]*[fh]/]: r#298
[#499 /[1-9][0-9]*[iu]?/]: r#298
[#500 '!']: r#299
[#500 '&']: r#299
[#500 '(']: r#299
[#500 '*']: r#299
[#500 '-']: r#299
[#500 'array']: r#299
[#500 'atomic']: r#299
[#500 'bitcast']: r#299
[#500 'bool']: r#299
[#500 'f16']: r#299
[#500 'f32']: r#299
[#500 'false']: r#299
[#500 'i32']: r#299
[#500 'mat2x2']: r#299
[#500 'mat2x3']: r#299
[#500 'mat2x4']: r#299
[#500 'mat3x2']: r#299
[#500 'mat3x3']: r#299
[#500 'mat3x4']: r#299
[#500 'mat4x2']: r#299
[#500 'mat4x3']: r#299
[#500 'mat4x4']: r#299
[#500 'ptr']: r#299
[#500 'sampler']: r#299
[#500 'sampler_comparison']: r#299
[#500 'texture_1d']: r#299
[#500 'texture_2d']: r#299
[#500 'texture_2d_array']: r#299
[#500 'texture_3d']: r#299
[#500 'texture_cube']: r#299
[#500 'texture_cube_array']: r#299
[#500 'texture_depth_2d']: r#299
[#500 'texture_depth_2d_array']: r#299
[#500 'texture_depth_cube']: r#299
[#500 'texture_depth_cube_array']: r#299
[#500 'texture_depth_multisampled_2d']: r#299
[#500 'texture_multisampled_2d']: r#299
[#500 'texture_storage_1d']: r#299
[#500 'texture_storage_2d']: r#299
[#500 'texture_storage_2d_array']: r#299
[#500 'texture_storage_3d']: r#299
[#500 'true']: r#299
[#500 'u32']: r#299
[#500 'vec2']: r#299
[#500 'vec3']: r#299
[#500 'vec4']: r#299
[#500 '~']: r#299
[#500 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#299
[#500 /0[fh]/]: r#299
[#500 /0[iu]?/]: r#299
[#500 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#299
[#500 /0[xX][0-9a-fA-F]+[iu]?/]: r#299
[#500 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#299
[#500 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#299
[#500 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#299
[#500 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#299
[#500 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#299
[#500 /[1-9][0-9]*[fh]/]: r#299
[#500 /[1-9][0-9]*[iu]?/]: r#299
[#501 '!']: r#300
[#501 '&']: r#300
[#501 '(']: r#300
[#501 '*']: r#300
[#501 '-']: r#300
[#501 'array']: r#300
[#501 'atomic']: r#300
[#501 'bitcast']: r#300
[#501 'bool']: r#300
[#501 'f16']: r#300
[#501 'f32']: r#300
[#501 'false']: r#300
[#501 'i32']: r#300
[#501 'mat2x2']: r#300
[#501 'mat2x3']: r#300
[#501 'mat2x4']: r#300
[#501 'mat3x2']: r#300
[#501 'mat3x3']: r#300
[#501 'mat3x4']: r#300
[#501 'mat4x2']: r#300
[#501 'mat4x3']: r#300
[#501 'mat4x4']: r#300
[#501 'ptr']: r#300
[#501 'sampler']: r#300
[#501 'sampler_comparison']: r#300
[#501 'texture_1d']: r#300
[#501 'texture_2d']: r#300
[#501 'texture_2d_array']: r#300
[#501 'texture_3d']: r#300
[#501 'texture_cube']: r#300
[#501 'texture_cube_array']: r#300
[#501 'texture_depth_2d']: r#300
[#501 'texture_depth_2d_array']: r#300
[#501 'texture_depth_cube']: r#300
[#501 'texture_depth_cube_array']: r#300
[#501 'texture_depth_multisampled_2d']: r#300
[#501 'texture_multisampled_2d']: r#300
[#501 'texture_storage_1d']: r#300
[#501 'texture_storage_2d']: r#300
[#501 'texture_storage_2d_array']: r#300
[#501 'texture_storage_3d']: r#300
[#501 'true']: r#300
[#501 'u32']: r#300
[#501 'vec2']: r#300
[#501 'vec3']: r#300
[#501 'vec4']: r#300
[#501 '~']: r#300
[#501 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#300
[#501 /0[fh]/]: r#300
[#501 /0[iu]?/]: r#300
[#501 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#300
[#501 /0[xX][0-9a-fA-F]+[iu]?/]: r#300
[#501 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#300
[#501 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#300
[#501 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#300
[#501 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#300
[#501 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#300
[#501 /[1-9][0-9]*[fh]/]: r#300
[#501 /[1-9][0-9]*[iu]?/]: r#300
[#502 '!']: r#301
[#502 '&']: r#301
[#502 '(']: r#301
[#502 '*']: r#301
[#502 '-']: r#301
[#502 'array']: r#301
[#502 'atomic']: r#301
[#502 'bitcast']: r#301
[#502 'bool']: r#301
[#502 'f16']: r#301
[#502 'f32']: r#301
[#502 'false']: r#301
[#502 'i32']: r#301
[#502 'mat2x2']: r#301
[#502 'mat2x3']: r#301
[#502 'mat2x4']: r#301
[#502 'mat3x2']: r#301
[#502 'mat3x3']: r#301
[#502 'mat3x4']: r#301
[#502 'mat4x2']: r#301
[#502 'mat4x3']: r#301
[#502 'mat4x4']: r#301
[#502 'ptr']: r#301
[#502 'sampler']: r#301
[#502 'sampler_comparison']: r#301
[#502 'texture_1d']: r#301
[#502 'texture_2d']: r#301
[#502 'texture_2d_array']: r#301
[#502 'texture_3d']: r#301
[#502 'texture_cube']: r#301
[#502 'texture_cube_array']: r#301
[#502 'texture_depth_2d']: r#301
[#502 'texture_depth_2d_array']: r#301
[#502 'texture_depth_cube']: r#301
[#502 'texture_depth_cube_array']: r#301
[#502 'texture_depth_multisampled_2d']: r#301
[#502 'texture_multisampled_2d']: r#301
[#502 'texture_storage_1d']: r#301
[#502 'texture_storage_2d']: r#301
[#502 'texture_storage_2d_array']: r#301
[#502 'texture_storage_3d']: r#301
[#502 'true']: r#301
[#502 'u32']: r#301
[#502 'vec2']: r#301
[#502 'vec3']: r#301
[#502 'vec4']: r#301
[#502 '~']: r#301
[#502 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#301
[#502 /0[fh]/]: r#301
[#502 /0[iu]?/]: r#301
[#502 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#301
[#502 /0[xX][0-9a-fA-F]+[iu]?/]: r#301
[#502 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#301
[#502 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#301
[#502 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#301
[#502 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#301
[#502 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#301
[#502 /[1-9][0-9]*[fh]/]: r#301
[#502 /[1-9][0-9]*[iu]?/]: r#301
[#503 '!']: r#302
[#503 '&']: r#302
[#503 '(']: r#302
[#503 '*']: r#302
[#503 '-']: r#302
[#503 'array']: r#302
[#503 'atomic']: r#302
[#503 'bitcast']: r#302
[#503 'bool']: r#302
[#503 'f16']: r#302
[#503 'f32']: r#302
[#503 'false']: r#302
[#503 'i32']: r#302
[#503 'mat2x2']: r#302
[#503 'mat2x3']: r#302
[#503 'mat2x4']: r#302
[#503 'mat3x2']: r#302
[#503 'mat3x3']: r#302
[#503 'mat3x4']: r#302
[#503 'mat4x2']: r#302
[#503 'mat4x3']: r#302
[#503 'mat4x4']: r#302
[#503 'ptr']: r#302
[#503 'sampler']: r#302
[#503 'sampler_comparison']: r#302
[#503 'texture_1d']: r#302
[#503 'texture_2d']: r#302
[#503 'texture_2d_array']: r#302
[#503 'texture_3d']: r#302
[#503 'texture_cube']: r#302
[#503 'texture_cube_array']: r#302
[#503 'texture_depth_2d']: r#302
[#503 'texture_depth_2d_array']: r#302
[#503 'texture_depth_cube']: r#302
[#503 'texture_depth_cube_array']: r#302
[#503 'texture_depth_multisampled_2d']: r#302
[#503 'texture_multisampled_2d']: r#302
[#503 'texture_storage_1d']: r#302
[#503 'texture_storage_2d']: r#302
[#503 'texture_storage_2d_array']: r#302
[#503 'texture_storage_3d']: r#302
[#503 'true']: r#302
[#503 'u32']: r#302
[#503 'vec2']: r#302
[#503 'vec3']: r#302
[#503 'vec4']: r#302
[#503 '~']: r#302
[#503 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#302
[#503 /0[fh]/]: r#302
[#503 /0[iu]?/]: r#302
[#503 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#302
[#503 /0[xX][0-9a-fA-F]+[iu]?/]: r#302
[#503 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#302
[#503 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#302
[#503 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#302
[#503 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#302
[#503 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#302
[#503 /[1-9][0-9]*[fh]/]: r#302
[#503 /[1-9][0-9]*[iu]?/]: r#302
[#504 '=']: s#568
[#505 '=']: s#567
[#506 '!']: s#68
[#506 '&']: s#71
[#506 '(']: s#83
[#506 '*']: s#70
[#506 '-']: s#67
[#506 'array']: s#87
[#506 'atomic']: s#101
[#506 'bitcast']: s#77
[#506 'bool']: s#94
[#506 'f16']: s#96
[#506 'f32']: s#95
[#506 'false']: s#93
[#506 'i32']: s#97
[#506 'mat2x2']: s#106
[#506 'mat2x3']: s#107
[#506 'mat2x4']: s#108
[#506 'mat3x2']: s#109
[#506 'mat3x3']: s#110
[#506 'mat3x4']: s#111
[#506 'mat4x2']: s#112
[#506 'mat4x3']: s#113
[#506 'mat4x4']: s#114
[#506 'ptr']: s#99
[#506 'sampler']: s#131
[#506 'sampler_comparison']: s#132
[#506 'texture_1d']: s#138
[#506 'texture_2d']: s#139
[#506 'texture_2d_array']: s#140
[#506 'texture_3d']: s#141
[#506 'texture_cube']: s#142
[#506 'texture_cube_array']: s#143
[#506 'texture_depth_2d']: s#133
[#506 'texture_depth_2d_array']: s#134
[#506 'texture_depth_cube']: s#135
[#506 'texture_depth_cube_array']: s#136
[#506 'texture_depth_multisampled_2d']: s#137
[#506 'texture_multisampled_2d']: s#144
[#506 'texture_storage_1d']: s#145
[#506 'texture_storage_2d']: s#146
[#506 'texture_storage_2d_array']: s#147
[#506 'texture_storage_3d']: s#148
[#506 'true']: s#92
[#506 'u32']: s#98
[#506 'vec2']: s#103
[#506 'vec3']: s#104
[#506 'vec4']: s#105
[#506 '~']: s#69
[#506 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#506 /0[fh]/]: s#118
[#506 /0[iu]?/]: s#115
[#506 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#506 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#506 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#506 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#506 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#506 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#506 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#506 /[1-9][0-9]*[fh]/]: s#119
[#506 /[1-9][0-9]*[iu]?/]: s#116
[#507 ')']: r#303
[#507 ';']: r#303
[#508 '!']: s#68
[#508 '&']: s#71
[#508 '(']: s#83
[#508 '*']: s#70
[#508 '-']: s#67
[#508 'array']: s#87
[#508 'atomic']: s#101
[#508 'bitcast']: s#77
[#508 'bool']: s#94
[#508 'f16']: s#96
[#508 'f32']: s#95
[#508 'false']: s#93
[#508 'i32']: s#97
[#508 'mat2x2']: s#106
[#508 'mat2x3']: s#107
[#508 'mat2x4']: s#108
[#508 'mat3x2']: s#109
[#508 'mat3x3']: s#110
[#508 'mat3x4']: s#111
[#508 'mat4x2']: s#112
[#508 'mat4x3']: s#113
[#508 'mat4x4']: s#114
[#508 'ptr']: s#99
[#508 'sampler']: s#131
[#508 'sampler_comparison']: s#132
[#508 'texture_1d']: s#138
[#508 'texture_2d']: s#139
[#508 'texture_2d_array']: s#140
[#508 'texture_3d']: s#141
[#508 'texture_cube']: s#142
[#508 'texture_cube_array']: s#143
[#508 'texture_depth_2d']: s#133
[#508 'texture_depth_2d_array']: s#134
[#508 'texture_depth_cube']: s#135
[#508 'texture_depth_cube_array']: s#136
[#508 'texture_depth_multisampled_2d']: s#137
[#508 'texture_multisampled_2d']: s#144
[#508 'texture_storage_1d']: s#145
[#508 'texture_storage_2d']: s#146
[#508 'texture_storage_2d_array']: s#147
[#508 'texture_storage_3d']: s#148
[#508 'true']: s#92
[#508 'u32']: s#98
[#508 'vec2']: s#103
[#508 'vec3']: s#104
[#508 'vec4']: s#105
[#508 '~']: s#69
[#508 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#508 /0[fh]/]: s#118
[#508 /0[iu]?/]: s#115
[#508 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#508 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#508 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#508 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#508 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#508 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#508 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#508 /[1-9][0-9]*[fh]/]: s#119
[#508 /[1-9][0-9]*[iu]?/]: s#116
[#509 '(']: s#564
[#510 '@']: s#35
[#511 '!']: s#68
[#511 '&']: s#71
[#511 '(']: s#83
[#511 '*']: s#70
[#511 '-']: s#67
[#511 'array']: s#87
[#511 'atomic']: s#101
[#511 'bitcast']: s#77
[#511 'bool']: s#94
[#511 'f16']: s#96
[#511 'f32']: s#95
[#511 'false']: s#93
[#511 'i32']: s#97
[#511 'mat2x2']: s#106
[#511 'mat2x3']: s#107
[#511 'mat2x4']: s#108
[#511 'mat3x2']: s#109
[#511 'mat3x3']: s#110
[#511 'mat3x4']: s#111
[#511 'mat4x2']: s#112
[#511 'mat4x3']: s#113
[#511 'mat4x4']: s#114
[#511 'ptr']: s#99
[#511 'sampler']: s#131
[#511 'sampler_comparison']: s#132
[#511 'texture_1d']: s#138
[#511 'texture_2d']: s#139
[#511 'texture_2d_array']: s#140
[#511 'texture_3d']: s#141
[#511 'texture_cube']: s#142
[#511 'texture_cube_array']: s#143
[#511 'texture_depth_2d']: s#133
[#511 'texture_depth_2d_array']: s#134
[#511 'texture_depth_cube']: s#135
[#511 'texture_depth_cube_array']: s#136
[#511 'texture_depth_multisampled_2d']: s#137
[#511 'texture_multisampled_2d']: s#144
[#511 'texture_storage_1d']: s#145
[#511 'texture_storage_2d']: s#146
[#511 'texture_storage_2d_array']: s#147
[#511 'texture_storage_3d']: s#148
[#511 'true']: s#92
[#511 'u32']: s#98
[#511 'vec2']: s#103
[#511 'vec3']: s#104
[#511 'vec4']: s#105
[#511 '~']: s#69
[#511 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#511 /0[fh]/]: s#118
[#511 /0[iu]?/]: s#115
[#511 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#511 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#511 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#511 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#511 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#511 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#511 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#511 /[1-9][0-9]*[fh]/]: s#119
[#511 /[1-9][0-9]*[iu]?/]: s#116
[#512 'else']: s#559
[#513 '!']: s#68
[#513 '&']: s#71
[#513 '(']: s#83
[#513 '*']: s#70
[#513 '-']: s#67
[#513 'array']: s#87
[#513 'atomic']: s#101
[#513 'bitcast']: s#77
[#513 'bool']: s#94
[#513 'f16']: s#96
[#513 'f32']: s#95
[#513 'false']: s#93
[#513 'i32']: s#97
[#513 'mat2x2']: s#106
[#513 'mat2x3']: s#107
[#513 'mat2x4']: s#108
[#513 'mat3x2']: s#109
[#513 'mat3x3']: s#110
[#513 'mat3x4']: s#111
[#513 'mat4x2']: s#112
[#513 'mat4x3']: s#113
[#513 'mat4x4']: s#114
[#513 'ptr']: s#99
[#513 'sampler']: s#131
[#513 'sampler_comparison']: s#132
[#513 'texture_1d']: s#138
[#513 'texture_2d']: s#139
[#513 'texture_2d_array']: s#140
[#513 'texture_3d']: s#141
[#513 'texture_cube']: s#142
[#513 'texture_cube_array']: s#143
[#513 'texture_depth_2d']: s#133
[#513 'texture_depth_2d_array']: s#134
[#513 'texture_depth_cube']: s#135
[#513 'texture_depth_cube_array']: s#136
[#513 'texture_depth_multisampled_2d']: s#137
[#513 'texture_multisampled_2d']: s#144
[#513 'texture_storage_1d']: s#145
[#513 'texture_storage_2d']: s#146
[#513 'texture_storage_2d_array']: s#147
[#513 'texture_storage_3d']: s#148
[#513 'true']: s#92
[#513 'u32']: s#98
[#513 'vec2']: s#103
[#513 'vec3']: s#104
[#513 'vec4']: s#105
[#513 '~']: s#69
[#513 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#513 /0[fh]/]: s#118
[#513 /0[iu]?/]: s#115
[#513 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#513 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#513 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#513 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#513 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#513 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#513 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#513 /[1-9][0-9]*[fh]/]: s#119
[#513 /[1-9][0-9]*[iu]?/]: s#116
[#514 ';']: r#304
[#515 ';']: r#305
[#516 '&']: r#306
[#516 '(']: r#306
[#516 '*']: r#306
[#516 ';']: r#306
[#516 '@']: r#306
[#516 '_']: r#306
[#516 'array']: r#306
[#516 'atomic']: r#306
[#516 'bool']: r#306
[#516 'break']: r#306
[#516 'const']: r#306
[#516 'const_assert']: r#306
[#516 'continue']: r#306
[#516 'continuing']: r#306
[#516 'discard']: r#306
[#516 'f16']: r#306
[#516 'f32']: r#306
[#516 'for']: r#306
[#516 'i32']: r#306
[#516 'if']: r#306
[#516 'let']: r#306
[#516 'loop']: r#306
[#516 'mat2x2']: r#306
[#516 'mat2x3']: r#306
[#516 'mat2x4']: r#306
[#516 'mat3x2']: r#306
[#516 'mat3x3']: r#306
[#516 'mat3x4']: r#306
[#516 'mat4x2']: r#306
[#516 'mat4x3']: r#306
[#516 'mat4x4']: r#306
[#516 'ptr']: r#306
[#516 'return']: r#306
[#516 'sampler']: r#306
[#516 'sampler_comparison']: r#306
[#516 'switch']: r#306
[#516 'texture_1d']: r#306
[#516 'texture_2d']: r#306
[#516 'texture_2d_array']: r#306
[#516 'texture_3d']: r#306
[#516 'texture_cube']: r#306
[#516 'texture_cube_array']: r#306
[#516 'texture_depth_2d']: r#306
[#516 'texture_depth_2d_array']: r#306
[#516 'texture_depth_cube']: r#306
[#516 'texture_depth_cube_array']: r#306
[#516 'texture_depth_multisampled_2d']: r#306
[#516 'texture_multisampled_2d']: r#306
[#516 'texture_storage_1d']: r#306
[#516 'texture_storage_2d']: r#306
[#516 'texture_storage_2d_array']: r#306
[#516 'texture_storage_3d']: r#306
[#516 'u32']: r#306
[#516 'var']: r#306
[#516 'vec2']: r#306
[#516 'vec3']: r#306
[#516 'vec4']: r#306
[#516 'while']: r#306
[#516 '{']: r#306
[#516 '}']: r#306
[#516 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#306
[#517 '&']: r#307
[#517 '(']: r#307
[#517 '*']: r#307
[#517 ';']: r#307
[#517 '@']: r#307
[#517 '_']: r#307
[#517 'array']: r#307
[#517 'atomic']: r#307
[#517 'bool']: r#307
[#517 'break']: r#307
[#517 'const']: r#307
[#517 'const_assert']: r#307
[#517 'continue']: r#307
[#517 'continuing']: r#307
[#517 'discard']: r#307
[#517 'f16']: r#307
[#517 'f32']: r#307
[#517 'for']: r#307
[#517 'i32']: r#307
[#517 'if']: r#307
[#517 'let']: r#307
[#517 'loop']: r#307
[#517 'mat2x2']: r#307
[#517 'mat2x3']: r#307
[#517 'mat2x4']: r#307
[#517 'mat3x2']: r#307
[#517 'mat3x3']: r#307
[#517 'mat3x4']: r#307
[#517 'mat4x2']: r#307
[#517 'mat4x3']: r#307
[#517 'mat4x4']: r#307
[#517 'ptr']: r#307
[#517 'return']: r#307
[#517 'sampler']: r#307
[#517 'sampler_comparison']: r#307
[#517 'switch']: r#307
[#517 'texture_1d']: r#307
[#517 'texture_2d']: r#307
[#517 'texture_2d_array']: r#307
[#517 'texture_3d']: r#307
[#517 'texture_cube']: r#307
[#517 'texture_cube_array']: r#307
[#517 'texture_depth_2d']: r#307
[#517 'texture_depth_2d_array']: r#307
[#517 'texture_depth_cube']: r#307
[#517 'texture_depth_cube_array']: r#307
[#517 'texture_depth_multisampled_2d']: r#307
[#517 'texture_multisampled_2d']: r#307
[#517 'texture_storage_1d']: r#307
[#517 'texture_storage_2d']: r#307
[#517 'texture_storage_2d_array']: r#307
[#517 'texture_storage_3d']: r#307
[#517 'u32']: r#307
[#517 'var']: r#307
[#517 'vec2']: r#307
[#517 'vec3']: r#307
[#517 'vec4']: r#307
[#517 'while']: r#307
[#517 '{']: r#307
[#517 '}']: r#307
[#517 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#307
[#518 '&']: r#308
[#518 '(']: r#308
[#518 '*']: r#308
[#518 ';']: r#308
[#518 '@']: r#308
[#518 '_']: r#308
[#518 'array']: r#308
[#518 'atomic']: r#308
[#518 'bool']: r#308
[#518 'break']: r#308
[#518 'const']: r#308
[#518 'const_assert']: r#308
[#518 'continue']: r#308
[#518 'continuing']: r#308
[#518 'discard']: r#308
[#518 'f16']: r#308
[#518 'f32']: r#308
[#518 'for']: r#308
[#518 'i32']: r#308
[#518 'if']: r#308
[#518 'let']: r#308
[#518 'loop']: r#308
[#518 'mat2x2']: r#308
[#518 'mat2x3']: r#308
[#518 'mat2x4']: r#308
[#518 'mat3x2']: r#308
[#518 'mat3x3']: r#308
[#518 'mat3x4']: r#308
[#518 'mat4x2']: r#308
[#518 'mat4x3']: r#308
[#518 'mat4x4']: r#308
[#518 'ptr']: r#308
[#518 'return']: r#308
[#518 'sampler']: r#308
[#518 'sampler_comparison']: r#308
[#518 'switch']: r#308
[#518 'texture_1d']: r#308
[#518 'texture_2d']: r#308
[#518 'texture_2d_array']: r#308
[#518 'texture_3d']: r#308
[#518 'texture_cube']: r#308
[#518 'texture_cube_array']: r#308
[#518 'texture_depth_2d']: r#308
[#518 'texture_depth_2d_array']: r#308
[#518 'texture_depth_cube']: r#308
[#518 'texture_depth_cube_array']: r#308
[#518 'texture_depth_multisampled_2d']: r#308
[#518 'texture_multisampled_2d']: r#308
[#518 'texture_storage_1d']: r#308
[#518 'texture_storage_2d']: r#308
[#518 'texture_storage_2d_array']: r#308
[#518 'texture_storage_3d']: r#308
[#518 'u32']: r#308
[#518 'var']: r#308
[#518 'vec2']: r#308
[#518 'vec3']: r#308
[#518 'vec4']: r#308
[#518 'while']: r#308
[#518 '{']: r#308
[#518 '}']: r#308
[#518 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#308
[#519 '&']: r#309
[#519 '(']: r#309
[#519 '*']: r#309
[#519 ';']: r#309
[#519 '@']: r#309
[#519 '_']: r#309
[#519 'array']: r#309
[#519 'atomic']: r#309
[#519 'bool']: r#309
[#519 'break']: r#309
[#519 'const']: r#309
[#519 'const_assert']: r#309
[#519 'continue']: r#309
[#519 'continuing']: r#309
[#519 'discard']: r#309
[#519 'f16']: r#309
[#519 'f32']: r#309
[#519 'for']: r#309
[#519 'i32']: r#309
[#519 'if']: r#309
[#519 'let']: r#309
[#519 'loop']: r#309
[#519 'mat2x2']: r#309
[#519 'mat2x3']: r#309
[#519 'mat2x4']: r#309
[#519 'mat3x2']: r#309
[#519 'mat3x3']: r#309
[#519 'mat3x4']: r#309
[#519 'mat4x2']: r#309
[#519 'mat4x3']: r#309
[#519 'mat4x4']: r#309
[#519 'ptr']: r#309
[#519 'return']: r#309
[#519 'sampler']: r#309
[#519 'sampler_comparison']: r#309
[#519 'switch']: r#309
[#519 'texture_1d']: r#309
[#519 'texture_2d']: r#309
[#519 'texture_2d_array']: r#309
[#519 'texture_3d']: r#309
[#519 'texture_cube']: r#309
[#519 'texture_cube_array']: r#309
[#519 'texture_depth_2d']: r#309
[#519 'texture_depth_2d_array']: r#309
[#519 'texture_depth_cube']: r#309
[#519 'texture_depth_cube_array']: r#309
[#519 'texture_depth_multisampled_2d']: r#309
[#519 'texture_multisampled_2d']: r#309
[#519 'texture_storage_1d']: r#309
[#519 'texture_storage_2d']: r#309
[#519 'texture_storage_2d_array']: r#309
[#519 'texture_storage_3d']: r#309
[#519 'u32']: r#309
[#519 'var']: r#309
[#519 'vec2']: r#309
[#519 'vec3']: r#309
[#519 'vec4']: r#309
[#519 'while']: r#309
[#519 '{']: r#309
[#519 '}']: r#309
[#519 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#309
[#520 '&']: r#310
[#520 '(']: r#310
[#520 '*']: r#310
[#520 ';']: r#310
[#520 '@']: r#310
[#520 '_']: r#310
[#520 'array']: r#310
[#520 'atomic']: r#310
[#520 'bool']: r#310
[#520 'break']: r#310
[#520 'const']: r#310
[#520 'const_assert']: r#310
[#520 'continue']: r#310
[#520 'continuing']: r#310
[#520 'discard']: r#310
[#520 'f16']: r#310
[#520 'f32']: r#310
[#520 'for']: r#310
[#520 'i32']: r#310
[#520 'if']: r#310
[#520 'let']: r#310
[#520 'loop']: r#310
[#520 'mat2x2']: r#310
[#520 'mat2x3']: r#310
[#520 'mat2x4']: r#310
[#520 'mat3x2']: r#310
[#520 'mat3x3']: r#310
[#520 'mat3x4']: r#310
[#520 'mat4x2']: r#310
[#520 'mat4x3']: r#310
[#520 'mat4x4']: r#310
[#520 'ptr']: r#310
[#520 'return']: r#310
[#520 'sampler']: r#310
[#520 'sampler_comparison']: r#310
[#520 'switch']: r#310
[#520 'texture_1d']: r#310
[#520 'texture_2d']: r#310
[#520 'texture_2d_array']: r#310
[#520 'texture_3d']: r#310
[#520 'texture_cube']: r#310
[#520 'texture_cube_array']: r#310
[#520 'texture_depth_2d']: r#310
[#520 'texture_depth_2d_array']: r#310
[#520 'texture_depth_cube']: r#310
[#520 'texture_depth_cube_array']: r#310
[#520 'texture_depth_multisampled_2d']: r#310
[#520 'texture_multisampled_2d']: r#310
[#520 'texture_storage_1d']: r#310
[#520 'texture_storage_2d']: r#310
[#520 'texture_storage_2d_array']: r#310
[#520 'texture_storage_3d']: r#310
[#520 'u32']: r#310
[#520 'var']: r#310
[#520 'vec2']: r#310
[#520 'vec3']: r#310
[#520 'vec4']: r#310
[#520 'while']: r#310
[#520 '{']: r#310
[#520 '}']: r#310
[#520 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#310
[#521 '&']: r#311
[#521 '(']: r#311
[#521 '*']: r#311
[#521 ';']: r#311
[#521 '@']: r#311
[#521 '_']: r#311
[#521 'array']: r#311
[#521 'atomic']: r#311
[#521 'bool']: r#311
[#521 'break']: r#311
[#521 'const']: r#311
[#521 'const_assert']: r#311
[#521 'continue']: r#311
[#521 'continuing']: r#311
[#521 'discard']: r#311
[#521 'f16']: r#311
[#521 'f32']: r#311
[#521 'for']: r#311
[#521 'i32']: r#311
[#521 'if']: r#311
[#521 'let']: r#311
[#521 'loop']: r#311
[#521 'mat2x2']: r#311
[#521 'mat2x3']: r#311
[#521 'mat2x4']: r#311
[#521 'mat3x2']: r#311
[#521 'mat3x3']: r#311
[#521 'mat3x4']: r#311
[#521 'mat4x2']: r#311
[#521 'mat4x3']: r#311
[#521 'mat4x4']: r#311
[#521 'ptr']: r#311
[#521 'return']: r#311
[#521 'sampler']: r#311
[#521 'sampler_comparison']: r#311
[#521 'switch']: r#311
[#521 'texture_1d']: r#311
[#521 'texture_2d']: r#311
[#521 'texture_2d_array']: r#311
[#521 'texture_3d']: r#311
[#521 'texture_cube']: r#311
[#521 'texture_cube_array']: r#311
[#521 'texture_depth_2d']: r#311
[#521 'texture_depth_2d_array']: r#311
[#521 'texture_depth_cube']: r#311
[#521 'texture_depth_cube_array']: r#311
[#521 'texture_depth_multisampled_2d']: r#311
[#521 'texture_multisampled_2d']: r#311
[#521 'texture_storage_1d']: r#311
[#521 'texture_storage_2d']: r#311
[#521 'texture_storage_2d_array']: r#311
[#521 'texture_storage_3d']: r#311
[#521 'u32']: r#311
[#521 'var']: r#311
[#521 'vec2']: r#311
[#521 'vec3']: r#311
[#521 'vec4']: r#311
[#521 'while']: r#311
[#521 '{']: r#311
[#521 '}']: r#311
[#521 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#311
[#522 '&']: r#312
[#522 '(']: r#312
[#522 '*']: r#312
[#522 ';']: r#312
[#522 '@']: r#312
[#522 '_']: r#312
[#522 'array']: r#312
[#522 'atomic']: r#312
[#522 'bool']: r#312
[#522 'break']: r#312
[#522 'const']: r#312
[#522 'const_assert']: r#312
[#522 'continue']: r#312
[#522 'continuing']: r#312
[#522 'discard']: r#312
[#522 'f16']: r#312
[#522 'f32']: r#312
[#522 'for']: r#312
[#522 'i32']: r#312
[#522 'if']: r#312
[#522 'let']: r#312
[#522 'loop']: r#312
[#522 'mat2x2']: r#312
[#522 'mat2x3']: r#312
[#522 'mat2x4']: r#312
[#522 'mat3x2']: r#312
[#522 'mat3x3']: r#312
[#522 'mat3x4']: r#312
[#522 'mat4x2']: r#312
[#522 'mat4x3']: r#312
[#522 'mat4x4']: r#312
[#522 'ptr']: r#312
[#522 'return']: r#312
[#522 'sampler']: r#312
[#522 'sampler_comparison']: r#312
[#522 'switch']: r#312
[#522 'texture_1d']: r#312
[#522 'texture_2d']: r#312
[#522 'texture_2d_array']: r#312
[#522 'texture_3d']: r#312
[#522 'texture_cube']: r#312
[#522 'texture_cube_array']: r#312
[#522 'texture_depth_2d']: r#312
[#522 'texture_depth_2d_array']: r#312
[#522 'texture_depth_cube']: r#312
[#522 'texture_depth_cube_array']: r#312
[#522 'texture_depth_multisampled_2d']: r#312
[#522 'texture_multisampled_2d']: r#312
[#522 'texture_storage_1d']: r#312
[#522 'texture_storage_2d']: r#312
[#522 'texture_storage_2d_array']: r#312
[#522 'texture_storage_3d']: r#312
[#522 'u32']: r#312
[#522 'var']: r#312
[#522 'vec2']: r#312
[#522 'vec3']: r#312
[#522 'vec4']: r#312
[#522 'while']: r#312
[#522 '{']: r#312
[#522 '}']: r#312
[#522 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#312
[#523 '&']: r#313
[#523 '(']: r#313
[#523 '*']: r#313
[#523 ';']: r#313
[#523 '@']: r#313
[#523 '_']: r#313
[#523 'array']: r#313
[#523 'atomic']: r#313
[#523 'bool']: r#313
[#523 'break']: r#313
[#523 'const']: r#313
[#523 'const_assert']: r#313
[#523 'continue']: r#313
[#523 'continuing']: r#313
[#523 'discard']: r#313
[#523 'f16']: r#313
[#523 'f32']: r#313
[#523 'for']: r#313
[#523 'i32']: r#313
[#523 'if']: r#313
[#523 'let']: r#313
[#523 'loop']: r#313
[#523 'mat2x2']: r#313
[#523 'mat2x3']: r#313
[#523 'mat2x4']: r#313
[#523 'mat3x2']: r#313
[#523 'mat3x3']: r#313
[#523 'mat3x4']: r#313
[#523 'mat4x2']: r#313
[#523 'mat4x3']: r#313
[#523 'mat4x4']: r#313
[#523 'ptr']: r#313
[#523 'return']: r#313
[#523 'sampler']: r#313
[#523 'sampler_comparison']: r#313
[#523 'switch']: r#313
[#523 'texture_1d']: r#313
[#523 'texture_2d']: r#313
[#523 'texture_2d_array']: r#313
[#523 'texture_3d']: r#313
[#523 'texture_cube']: r#313
[#523 'texture_cube_array']: r#313
[#523 'texture_depth_2d']: r#313
[#523 'texture_depth_2d_array']: r#313
[#523 'texture_depth_cube']: r#313
[#523 'texture_depth_cube_array']: r#313
[#523 'texture_depth_multisampled_2d']: r#313
[#523 'texture_multisampled_2d']: r#313
[#523 'texture_storage_1d']: r#313
[#523 'texture_storage_2d']: r#313
[#523 'texture_storage_2d_array']: r#313
[#523 'texture_storage_3d']: r#313
[#523 'u32']: r#313
[#523 'var']: r#313
[#523 'vec2']: r#313
[#523 'vec3']: r#313
[#523 'vec4']: r#313
[#523 'while']: r#313
[#523 '{']: r#313
[#523 '}']: r#313
[#523 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#313
[#524 '}']: r#314
[#525 '&']: r#315
[#525 '(']: r#315
[#525 '*']: r#315
[#525 ';']: r#315
[#525 '@']: r#315
[#525 '_']: r#315
[#525 'alias']: r#315
[#525 'array']: r#315
[#525 'atomic']: r#315
[#525 'bool']: r#315
[#525 'break']: r#315
[#525 'case']: r#315
[#525 'const']: r#315
[#525 'const_assert']: r#315
[#525 'continue']: r#315
[#525 'continuing']: r#315
[#525 'default']: r#315
[#525 'discard']: r#315
[#525 'else']: r#315
[#525 'f16']: r#315
[#525 'f32']: r#315
[#525 'fn']: r#315
[#525 'for']: r#315
[#525 'i32']: r#315
[#525 'if']: r#315
[#525 'let']: r#315
[#525 'loop']: r#315
[#525 'mat2x2']: r#315
[#525 'mat2x3']: r#315
[#525 'mat2x4']: r#315
[#525 'mat3x2']: r#315
[#525 'mat3x3']: r#315
[#525 'mat3x4']: r#315
[#525 'mat4x2']: r#315
[#525 'mat4x3']: r#315
[#525 'mat4x4']: r#315
[#525 'override']: r#315
[#525 'ptr']: r#315
[#525 'return']: r#315
[#525 'sampler']: r#315
[#525 'sampler_comparison']: r#315
[#525 'struct']: r#315
[#525 'switch']: r#315
[#525 'texture_1d']: r#315
[#525 'texture_2d']: r#315
[#525 'texture_2d_array']: r#315
[#525 'texture_3d']: r#315
[#525 'texture_cube']: r#315
[#525 'texture_cube_array']: r#315
[#525 'texture_depth_2d']: r#315
[#525 'texture_depth_2d_array']: r#315
[#525 'texture_depth_cube']: r#315
[#525 'texture_depth_cube_array']: r#315
[#525 'texture_depth_multisampled_2d']: r#315
[#525 'texture_multisampled_2d']: r#315
[#525 'texture_storage_1d']: r#315
[#525 'texture_storage_2d']: r#315
[#525 'texture_storage_2d_array']: r#315
[#525 'texture_storage_3d']: r#315
[#525 'u32']: r#315
[#525 'var']: r#315
[#525 'vec2']: r#315
[#525 'vec3']: r#315
[#525 'vec4']: r#315
[#525 'while']: r#315
[#525 '{']: r#315
[#525 '}']: r#315
[#525 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#315
[#525 EndOfText]: r#315
[#526 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#316
[#527 ':']: s#554
[#528 ',']: s#553
[#529 ')']: r#317
[#529 ',']: r#317
[#530 ',']: s#531
[#531 '@']: s#35
[#532 '->']: s#549
[#533 ',']: r#318
[#533 '}']: r#318
[#534 ',']: r#319
[#534 '}']: r#319
[#535 '}']: s#547
[#536 '}']: r#320
[#537 'array']: s#323
[#537 'atomic']: s#101
[#537 'bool']: s#94
[#537 'f16']: s#96
[#537 'f32']: s#95
[#537 'i32']: s#97
[#537 'mat2x2']: s#106
[#537 'mat2x3']: s#107
[#537 'mat2x4']: s#108
[#537 'mat3x2']: s#109
[#537 'mat3x3']: s#110
[#537 'mat3x4']: s#111
[#537 'mat4x2']: s#112
[#537 'mat4x3']: s#113
[#537 'mat4x4']: s#114
[#537 'ptr']: s#99
[#537 'sampler']: s#131
[#537 'sampler_comparison']: s#132
[#537 'texture_1d']: s#138
[#537 'texture_2d']: s#139
[#537 'texture_2d_array']: s#140
[#537 'texture_3d']: s#141
[#537 'texture_cube']: s#142
[#537 'texture_cube_array']: s#143
[#537 'texture_depth_2d']: s#133
[#537 'texture_depth_2d_array']: s#134
[#537 'texture_depth_cube']: s#135
[#537 'texture_depth_cube_array']: s#136
[#537 'texture_depth_multisampled_2d']: s#137
[#537 'texture_multisampled_2d']: s#144
[#537 'texture_storage_1d']: s#145
[#537 'texture_storage_2d']: s#146
[#537 'texture_storage_2d_array']: s#147
[#537 'texture_storage_3d']: s#148
[#537 'u32']: s#98
[#537 'vec2']: s#103
[#537 'vec3']: s#104
[#537 'vec4']: s#105
[#537 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#538 /\u200B_template_args_end/]: s#461
[#539 'read']: s#542
[#539 'read_write']: s#544
[#539 'write']: s#543
[#540 ';']: r#321
[#540 '@']: r#321
[#540 'array']: r#321
[#540 'atomic']: r#321
[#540 'bool']: r#321
[#540 'f16']: r#321
[#540 'f32']: r#321
[#540 'fn']: r#321
[#540 'for']: r#321
[#540 'i32']: r#321
[#540 'if']: r#321
[#540 'loop']: r#321
[#540 'mat2x2']: r#321
[#540 'mat2x3']: r#321
[#540 'mat2x4']: r#321
[#540 'mat3x2']: r#321
[#540 'mat3x3']: r#321
[#540 'mat3x4']: r#321
[#540 'mat4x2']: r#321
[#540 'mat4x3']: r#321
[#540 'mat4x4']: r#321
[#540 'override']: r#321
[#540 'ptr']: r#321
[#540 'sampler']: r#321
[#540 'sampler_comparison']: r#321
[#540 'switch']: r#321
[#540 'texture_1d']: r#321
[#540 'texture_2d']: r#321
[#540 'texture_2d_array']: r#321
[#540 'texture_3d']: r#321
[#540 'texture_cube']: r#321
[#540 'texture_cube_array']: r#321
[#540 'texture_depth_2d']: r#321
[#540 'texture_depth_2d_array']: r#321
[#540 'texture_depth_cube']: r#321
[#540 'texture_depth_cube_array']: r#321
[#540 'texture_depth_multisampled_2d']: r#321
[#540 'texture_multisampled_2d']: r#321
[#540 'texture_storage_1d']: r#321
[#540 'texture_storage_2d']: r#321
[#540 'texture_storage_2d_array']: r#321
[#540 'texture_storage_3d']: r#321
[#540 'u32']: r#321
[#540 'var']: r#321
[#540 'vec2']: r#321
[#540 'vec3']: r#321
[#540 'vec4']: r#321
[#540 'while']: r#321
[#540 '{']: r#321
[#540 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#321
[#541 /\u200B_template_args_end/]: r#322
[#542 /\u200B_template_args_end/]: r#323
[#543 /\u200B_template_args_end/]: r#324
[#544 /\u200B_template_args_end/]: r#325
[#545 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#326
[#546 ',']: r#327
[#546 '}']: r#327
[#547 ';']: r#328
[#547 '@']: r#328
[#547 'alias']: r#328
[#547 'const']: r#328
[#547 'const_assert']: r#328
[#547 'fn']: r#328
[#547 'override']: r#328
[#547 'struct']: r#328
[#547 'var']: r#328
[#547 EndOfText]: r#328
[#548 '@']: r#329
[#548 '{']: r#329
[#549 '@']: s#35
[#550 ')']: r#330
[#550 ',']: r#330
[#551 ')']: r#331
[#551 ',']: r#331
[#552 ')']: r#332
[#553 ')']: r#333
[#554 'array']: s#323
[#554 'atomic']: s#101
[#554 'bool']: s#94
[#554 'f16']: s#96
[#554 'f32']: s#95
[#554 'i32']: s#97
[#554 'mat2x2']: s#106
[#554 'mat2x3']: s#107
[#554 'mat2x4']: s#108
[#554 'mat3x2']: s#109
[#554 'mat3x3']: s#110
[#554 'mat3x4']: s#111
[#554 'mat4x2']: s#112
[#554 'mat4x3']: s#113
[#554 'mat4x4']: s#114
[#554 'ptr']: s#99
[#554 'sampler']: s#131
[#554 'sampler_comparison']: s#132
[#554 'texture_1d']: s#138
[#554 'texture_2d']: s#139
[#554 'texture_2d_array']: s#140
[#554 'texture_3d']: s#141
[#554 'texture_cube']: s#142
[#554 'texture_cube_array']: s#143
[#554 'texture_depth_2d']: s#133
[#554 'texture_depth_2d_array']: s#134
[#554 'texture_depth_cube']: s#135
[#554 'texture_depth_cube_array']: s#136
[#554 'texture_depth_multisampled_2d']: s#137
[#554 'texture_multisampled_2d']: s#144
[#554 'texture_storage_1d']: s#145
[#554 'texture_storage_2d']: s#146
[#554 'texture_storage_2d_array']: s#147
[#554 'texture_storage_3d']: s#148
[#554 'u32']: s#98
[#554 'vec2']: s#103
[#554 'vec3']: s#104
[#554 'vec4']: s#105
[#554 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#555 '@']: s#35
[#556 'else']: s#606
[#557 '&']: r#334
[#557 '(']: r#334
[#557 '*']: r#334
[#557 ';']: r#334
[#557 '@']: r#334
[#557 '_']: r#334
[#557 'array']: r#334
[#557 'atomic']: r#334
[#557 'bool']: r#334
[#557 'break']: r#334
[#557 'const']: r#334
[#557 'const_assert']: r#334
[#557 'continue']: r#334
[#557 'continuing']: r#334
[#557 'discard']: r#334
[#557 'else']: r#334
[#557 'f16']: r#334
[#557 'f32']: r#334
[#557 'for']: r#334
[#557 'i32']: r#334
[#557 'if']: r#334
[#557 'let']: r#334
[#557 'loop']: r#334
[#557 'mat2x2']: r#334
[#557 'mat2x3']: r#334
[#557 'mat2x4']: r#334
[#557 'mat3x2']: r#334
[#557 'mat3x3']: r#334
[#557 'mat3x4']: r#334
[#557 'mat4x2']: r#334
[#557 'mat4x3']: r#334
[#557 'mat4x4']: r#334
[#557 'ptr']: r#334
[#557 'return']: r#334
[#557 'sampler']: r#334
[#557 'sampler_comparison']: r#334
[#557 'switch']: r#334
[#557 'texture_1d']: r#334
[#557 'texture_2d']: r#334
[#557 'texture_2d_array']: r#334
[#557 'texture_3d']: r#334
[#557 'texture_cube']: r#334
[#557 'texture_cube_array']: r#334
[#557 'texture_depth_2d']: r#334
[#557 'texture_depth_2d_array']: r#334
[#557 'texture_depth_cube']: r#334
[#557 'texture_depth_cube_array']: r#334
[#557 'texture_depth_multisampled_2d']: r#334
[#557 'texture_multisampled_2d']: r#334
[#557 'texture_storage_1d']: r#334
[#557 'texture_storage_2d']: r#334
[#557 'texture_storage_2d_array']: r#334
[#557 'texture_storage_3d']: r#334
[#557 'u32']: r#334
[#557 'var']: r#334
[#557 'vec2']: r#334
[#557 'vec3']: r#334
[#557 'vec4']: r#334
[#557 'while']: r#334
[#557 '{']: r#334
[#557 '}']: r#334
[#557 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#334
[#558 'else']: s#559
[#559 'if']: s#602
[#560 '@']: s#35
[#561 '{']: s#597
[#562 '{']: r#335
[#563 '@']: s#35
[#564 '&']: s#404
[#564 '(']: s#405
[#564 '*']: s#403
[#564 '_']: s#400
[#564 'array']: s#87
[#564 'atomic']: s#101
[#564 'bool']: s#94
[#564 'const']: s#387
[#564 'f16']: s#96
[#564 'f32']: s#95
[#564 'i32']: s#97
[#564 'let']: s#386
[#564 'mat2x2']: s#106
[#564 'mat2x3']: s#107
[#564 'mat2x4']: s#108
[#564 'mat3x2']: s#109
[#564 'mat3x3']: s#110
[#564 'mat3x4']: s#111
[#564 'mat4x2']: s#112
[#564 'mat4x3']: s#113
[#564 'mat4x4']: s#114
[#564 'ptr']: s#99
[#564 'sampler']: s#131
[#564 'sampler_comparison']: s#132
[#564 'texture_1d']: s#138
[#564 'texture_2d']: s#139
[#564 'texture_2d_array']: s#140
[#564 'texture_3d']: s#141
[#564 'texture_cube']: s#142
[#564 'texture_cube_array']: s#143
[#564 'texture_depth_2d']: s#133
[#564 'texture_depth_2d_array']: s#134
[#564 'texture_depth_cube']: s#135
[#564 'texture_depth_cube_array']: s#136
[#564 'texture_depth_multisampled_2d']: s#137
[#564 'texture_multisampled_2d']: s#144
[#564 'texture_storage_1d']: s#145
[#564 'texture_storage_2d']: s#146
[#564 'texture_storage_2d_array']: s#147
[#564 'texture_storage_3d']: s#148
[#564 'u32']: s#98
[#564 'var']: s#157
[#564 'vec2']: s#103
[#564 'vec3']: s#104
[#564 'vec4']: s#105
[#564 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#565 '@']: s#35
[#566 ';']: r#336
[#567 '!']: s#68
[#567 '&']: s#71
[#567 '(']: s#83
[#567 '*']: s#70
[#567 '-']: s#67
[#567 'array']: s#87
[#567 'atomic']: s#101
[#567 'bitcast']: s#77
[#567 'bool']: s#94
[#567 'f16']: s#96
[#567 'f32']: s#95
[#567 'false']: s#93
[#567 'i32']: s#97
[#567 'mat2x2']: s#106
[#567 'mat2x3']: s#107
[#567 'mat2x4']: s#108
[#567 'mat3x2']: s#109
[#567 'mat3x3']: s#110
[#567 'mat3x4']: s#111
[#567 'mat4x2']: s#112
[#567 'mat4x3']: s#113
[#567 'mat4x4']: s#114
[#567 'ptr']: s#99
[#567 'sampler']: s#131
[#567 'sampler_comparison']: s#132
[#567 'texture_1d']: s#138
[#567 'texture_2d']: s#139
[#567 'texture_2d_array']: s#140
[#567 'texture_3d']: s#141
[#567 'texture_cube']: s#142
[#567 'texture_cube_array']: s#143
[#567 'texture_depth_2d']: s#133
[#567 'texture_depth_2d_array']: s#134
[#567 'texture_depth_cube']: s#135
[#567 'texture_depth_cube_array']: s#136
[#567 'texture_depth_multisampled_2d']: s#137
[#567 'texture_multisampled_2d']: s#144
[#567 'texture_storage_1d']: s#145
[#567 'texture_storage_2d']: s#146
[#567 'texture_storage_2d_array']: s#147
[#567 'texture_storage_3d']: s#148
[#567 'true']: s#92
[#567 'u32']: s#98
[#567 'vec2']: s#103
[#567 'vec3']: s#104
[#567 'vec4']: s#105
[#567 '~']: s#69
[#567 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#567 /0[fh]/]: s#118
[#567 /0[iu]?/]: s#115
[#567 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#567 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#567 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#567 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#567 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#567 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#567 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#567 /[1-9][0-9]*[fh]/]: s#119
[#567 /[1-9][0-9]*[iu]?/]: s#116
[#568 '!']: s#68
[#568 '&']: s#71
[#568 '(']: s#83
[#568 '*']: s#70
[#568 '-']: s#67
[#568 'array']: s#87
[#568 'atomic']: s#101
[#568 'bitcast']: s#77
[#568 'bool']: s#94
[#568 'f16']: s#96
[#568 'f32']: s#95
[#568 'false']: s#93
[#568 'i32']: s#97
[#568 'mat2x2']: s#106
[#568 'mat2x3']: s#107
[#568 'mat2x4']: s#108
[#568 'mat3x2']: s#109
[#568 'mat3x3']: s#110
[#568 'mat3x4']: s#111
[#568 'mat4x2']: s#112
[#568 'mat4x3']: s#113
[#568 'mat4x4']: s#114
[#568 'ptr']: s#99
[#568 'sampler']: s#131
[#568 'sampler_comparison']: s#132
[#568 'texture_1d']: s#138
[#568 'texture_2d']: s#139
[#568 'texture_2d_array']: s#140
[#568 'texture_3d']: s#141
[#568 'texture_cube']: s#142
[#568 'texture_cube_array']: s#143
[#568 'texture_depth_2d']: s#133
[#568 'texture_depth_2d_array']: s#134
[#568 'texture_depth_cube']: s#135
[#568 'texture_depth_cube_array']: s#136
[#568 'texture_depth_multisampled_2d']: s#137
[#568 'texture_multisampled_2d']: s#144
[#568 'texture_storage_1d']: s#145
[#568 'texture_storage_2d']: s#146
[#568 'texture_storage_2d_array']: s#147
[#568 'texture_storage_3d']: s#148
[#568 'true']: s#92
[#568 'u32']: s#98
[#568 'vec2']: s#103
[#568 'vec3']: s#104
[#568 'vec4']: s#105
[#568 '~']: s#69
[#568 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#568 /0[fh]/]: s#118
[#568 /0[iu]?/]: s#115
[#568 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#568 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#568 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#568 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#568 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#568 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#568 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#568 /[1-9][0-9]*[fh]/]: s#119
[#568 /[1-9][0-9]*[iu]?/]: s#116
[#569 ')']: r#337
[#569 ';']: r#337
[#570 ')']: r#338
[#570 ';']: r#338
[#571 '%=']: r#339
[#571 '&=']: r#339
[#571 ')']: r#339
[#571 '*=']: r#339
[#571 '++']: r#339
[#571 '+=']: r#339
[#571 '--']: r#339
[#571 '-=']: r#339
[#571 '.']: r#339
[#571 '/=']: r#339
[#571 '=']: r#339
[#571 '[']: r#339
[#571 '^=']: r#339
[#571 '|=']: r#339
[#571 /\u200B_shift_left_assign/]: r#339
[#571 /\u200B_shift_right_assign/]: r#339
[#572 /\u200B_template_args_end/]: s#461
[#573 ',']: s#585
[#574 /\u200B_template_args_end/]: r#340
[#575 '+']: s#217
[#575 '-']: s#218
[#575 /\u200B_template_args_end/]: r#341
[#576 /\u200B_template_args_end/]: r#342
[#577 '%']: r#31
[#577 '&']: r#28
[#577 '*']: r#31
[#577 '+']: r#31
[#577 '-']: r#31
[#577 '/']: r#31
[#577 '^']: r#30
[#577 '|']: r#29
[#577 /\u200B_template_args_end/]: r#31
[#578 '(']: r#343
[#578 ')']: r#343
[#578 ',']: r#343
[#578 ';']: r#343
[#578 '=']: r#343
[#578 '@']: r#343
[#578 '{']: r#343
[#578 '}']: r#343
[#578 /\u200B_template_args_end/]: r#343
[#579 '!=']: r#344
[#579 '%']: r#344
[#579 '&&']: r#344
[#579 '&']: r#344
[#579 ')']: r#344
[#579 '*']: r#344
[#579 '+']: r#344
[#579 ',']: r#344
[#579 '-']: r#344
[#579 '.']: r#344
[#579 '/']: r#344
[#579 ':']: r#344
[#579 ';']: r#344
[#579 '==']: r#344
[#579 '@']: r#344
[#579 '[']: r#344
[#579 ']']: r#344
[#579 '^']: r#344
[#579 '{']: r#344
[#579 '|']: r#344
[#579 '||']: r#344
[#579 /\u200B_greater_than/]: r#344
[#579 /\u200B_greater_than_equal/]: r#344
[#579 /\u200B_less_than/]: r#344
[#579 /\u200B_less_than_equal/]: r#344
[#579 /\u200B_shift_left/]: r#344
[#579 /\u200B_shift_right/]: r#344
[#579 /\u200B_template_args_end/]: r#344
[#580 '@']: r#345
[#580 'array']: r#345
[#580 'atomic']: r#345
[#580 'bool']: r#345
[#580 'f16']: r#345
[#580 'f32']: r#345
[#580 'fn']: r#345
[#580 'for']: r#345
[#580 'i32']: r#345
[#580 'if']: r#345
[#580 'loop']: r#345
[#580 'mat2x2']: r#345
[#580 'mat2x3']: r#345
[#580 'mat2x4']: r#345
[#580 'mat3x2']: r#345
[#580 'mat3x3']: r#345
[#580 'mat3x4']: r#345
[#580 'mat4x2']: r#345
[#580 'mat4x3']: r#345
[#580 'mat4x4']: r#345
[#580 'override']: r#345
[#580 'ptr']: r#345
[#580 'sampler']: r#345
[#580 'sampler_comparison']: r#345
[#580 'switch']: r#345
[#580 'texture_1d']: r#345
[#580 'texture_2d']: r#345
[#580 'texture_2d_array']: r#345
[#580 'texture_3d']: r#345
[#580 'texture_cube']: r#345
[#580 'texture_cube_array']: r#345
[#580 'texture_depth_2d']: r#345
[#580 'texture_depth_2d_array']: r#345
[#580 'texture_depth_cube']: r#345
[#580 'texture_depth_cube_array']: r#345
[#580 'texture_depth_multisampled_2d']: r#345
[#580 'texture_multisampled_2d']: r#345
[#580 'texture_storage_1d']: r#345
[#580 'texture_storage_2d']: r#345
[#580 'texture_storage_2d_array']: r#345
[#580 'texture_storage_3d']: r#345
[#580 'u32']: r#345
[#580 'var']: r#345
[#580 'vec2']: r#345
[#580 'vec3']: r#345
[#580 'vec4']: r#345
[#580 'while']: r#345
[#580 '{']: r#345
[#580 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#345
[#581 '!']: s#68
[#581 '&']: s#71
[#581 '(']: s#83
[#581 ')']: r#199
[#581 '*']: s#70
[#581 '-']: s#67
[#581 'array']: s#87
[#581 'atomic']: s#101
[#581 'bitcast']: s#77
[#581 'bool']: s#94
[#581 'f16']: s#96
[#581 'f32']: s#95
[#581 'false']: s#93
[#581 'i32']: s#97
[#581 'mat2x2']: s#106
[#581 'mat2x3']: s#107
[#581 'mat2x4']: s#108
[#581 'mat3x2']: s#109
[#581 'mat3x3']: s#110
[#581 'mat3x4']: s#111
[#581 'mat4x2']: s#112
[#581 'mat4x3']: s#113
[#581 'mat4x4']: s#114
[#581 'ptr']: s#99
[#581 'sampler']: s#131
[#581 'sampler_comparison']: s#132
[#581 'texture_1d']: s#138
[#581 'texture_2d']: s#139
[#581 'texture_2d_array']: s#140
[#581 'texture_3d']: s#141
[#581 'texture_cube']: s#142
[#581 'texture_cube_array']: s#143
[#581 'texture_depth_2d']: s#133
[#581 'texture_depth_2d_array']: s#134
[#581 'texture_depth_cube']: s#135
[#581 'texture_depth_cube_array']: s#136
[#581 'texture_depth_multisampled_2d']: s#137
[#581 'texture_multisampled_2d']: s#144
[#581 'texture_storage_1d']: s#145
[#581 'texture_storage_2d']: s#146
[#581 'texture_storage_2d_array']: s#147
[#581 'texture_storage_3d']: s#148
[#581 'true']: s#92
[#581 'u32']: s#98
[#581 'vec2']: s#103
[#581 'vec3']: s#104
[#581 'vec4']: s#105
[#581 '~']: s#69
[#581 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#581 /0[fh]/]: s#118
[#581 /0[iu]?/]: s#115
[#581 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#581 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#581 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#581 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#581 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#581 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#581 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#581 /[1-9][0-9]*[fh]/]: s#119
[#581 /[1-9][0-9]*[iu]?/]: s#116
[#582 '@']: r#346
[#582 'array']: r#346
[#582 'atomic']: r#346
[#582 'bool']: r#346
[#582 'f16']: r#346
[#582 'f32']: r#346
[#582 'fn']: r#346
[#582 'for']: r#346
[#582 'i32']: r#346
[#582 'if']: r#346
[#582 'loop']: r#346
[#582 'mat2x2']: r#346
[#582 'mat2x3']: r#346
[#582 'mat2x4']: r#346
[#582 'mat3x2']: r#346
[#582 'mat3x3']: r#346
[#582 'mat3x4']: r#346
[#582 'mat4x2']: r#346
[#582 'mat4x3']: r#346
[#582 'mat4x4']: r#346
[#582 'override']: r#346
[#582 'ptr']: r#346
[#582 'sampler']: r#346
[#582 'sampler_comparison']: r#346
[#582 'switch']: r#346
[#582 'texture_1d']: r#346
[#582 'texture_2d']: r#346
[#582 'texture_2d_array']: r#346
[#582 'texture_3d']: r#346
[#582 'texture_cube']: r#346
[#582 'texture_cube_array']: r#346
[#582 'texture_depth_2d']: r#346
[#582 'texture_depth_2d_array']: r#346
[#582 'texture_depth_cube']: r#346
[#582 'texture_depth_cube_array']: r#346
[#582 'texture_depth_multisampled_2d']: r#346
[#582 'texture_multisampled_2d']: r#346
[#582 'texture_storage_1d']: r#346
[#582 'texture_storage_2d']: r#346
[#582 'texture_storage_2d_array']: r#346
[#582 'texture_storage_3d']: r#346
[#582 'u32']: r#346
[#582 'var']: r#346
[#582 'vec2']: r#346
[#582 'vec3']: r#346
[#582 'vec4']: r#346
[#582 'while']: r#346
[#582 '{']: r#346
[#582 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#346
[#583 ',']: s#336
[#584 /\u200B_template_args_end/]: s#461
[#585 'read']: s#542
[#585 'read_write']: s#544
[#585 'write']: s#543
[#586 '(']: r#347
[#586 ')']: r#347
[#586 ',']: r#347
[#586 ';']: r#347
[#586 '=']: r#347
[#586 '@']: r#347
[#586 '{']: r#347
[#586 '}']: r#347
[#586 /\u200B_template_args_end/]: r#347
[#587 ';']: r#348
[#588 ';']: r#349
[#589 '&']: r#350
[#589 '(']: r#350
[#589 '*']: r#350
[#589 ';']: r#350
[#589 '@']: r#350
[#589 '_']: r#350
[#589 'array']: r#350
[#589 'atomic']: r#350
[#589 'bool']: r#350
[#589 'break']: r#350
[#589 'const']: r#350
[#589 'const_assert']: r#350
[#589 'continue']: r#350
[#589 'continuing']: r#350
[#589 'discard']: r#350
[#589 'f16']: r#350
[#589 'f32']: r#350
[#589 'for']: r#350
[#589 'i32']: r#350
[#589 'if']: r#350
[#589 'let']: r#350
[#589 'loop']: r#350
[#589 'mat2x2']: r#350
[#589 'mat2x3']: r#350
[#589 'mat2x4']: r#350
[#589 'mat3x2']: r#350
[#589 'mat3x3']: r#350
[#589 'mat3x4']: r#350
[#589 'mat4x2']: r#350
[#589 'mat4x3']: r#350
[#589 'mat4x4']: r#350
[#589 'ptr']: r#350
[#589 'return']: r#350
[#589 'sampler']: r#350
[#589 'sampler_comparison']: r#350
[#589 'switch']: r#350
[#589 'texture_1d']: r#350
[#589 'texture_2d']: r#350
[#589 'texture_2d_array']: r#350
[#589 'texture_3d']: r#350
[#589 'texture_cube']: r#350
[#589 'texture_cube_array']: r#350
[#589 'texture_depth_2d']: r#350
[#589 'texture_depth_2d_array']: r#350
[#589 'texture_depth_cube']: r#350
[#589 'texture_depth_cube_array']: r#350
[#589 'texture_depth_multisampled_2d']: r#350
[#589 'texture_multisampled_2d']: r#350
[#589 'texture_storage_1d']: r#350
[#589 'texture_storage_2d']: r#350
[#589 'texture_storage_2d_array']: r#350
[#589 'texture_storage_3d']: r#350
[#589 'u32']: r#350
[#589 'var']: r#350
[#589 'vec2']: r#350
[#589 'vec3']: r#350
[#589 'vec4']: r#350
[#589 'while']: r#350
[#589 '{']: r#350
[#589 '}']: r#350
[#589 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#350
[#590 ')']: s#622
[#591 ';']: s#621
[#592 ';']: r#351
[#593 ';']: r#352
[#594 ';']: r#353
[#595 ';']: r#354
[#596 '{']: r#355
[#597 '&']: s#404
[#597 '(']: s#405
[#597 '*']: s#403
[#597 ';']: s#363
[#597 '@']: s#35
[#597 '_']: s#400
[#597 'array']: s#87
[#597 'atomic']: s#101
[#597 'bool']: s#94
[#597 'break']: s#388
[#597 'const']: s#387
[#597 'const_assert']: s#30
[#597 'continue']: s#389
[#597 'discard']: s#374
[#597 'f16']: s#96
[#597 'f32']: s#95
[#597 'i32']: s#97
[#597 'let']: s#386
[#597 'mat2x2']: s#106
[#597 'mat2x3']: s#107
[#597 'mat2x4']: s#108
[#597 'mat3x2']: s#109
[#597 'mat3x3']: s#110
[#597 'mat3x4']: s#111
[#597 'mat4x2']: s#112
[#597 'mat4x3']: s#113
[#597 'mat4x4']: s#114
[#597 'ptr']: s#99
[#597 'return']: s#378
[#597 'sampler']: s#131
[#597 'sampler_comparison']: s#132
[#597 'texture_1d']: s#138
[#597 'texture_2d']: s#139
[#597 'texture_2d_array']: s#140
[#597 'texture_3d']: s#141
[#597 'texture_cube']: s#142
[#597 'texture_cube_array']: s#143
[#597 'texture_depth_2d']: s#133
[#597 'texture_depth_2d_array']: s#134
[#597 'texture_depth_cube']: s#135
[#597 'texture_depth_cube_array']: s#136
[#597 'texture_depth_multisampled_2d']: s#137
[#597 'texture_multisampled_2d']: s#144
[#597 'texture_storage_1d']: s#145
[#597 'texture_storage_2d']: s#146
[#597 'texture_storage_2d_array']: s#147
[#597 'texture_storage_3d']: s#148
[#597 'u32']: s#98
[#597 'var']: s#157
[#597 'vec2']: s#103
[#597 'vec3']: s#104
[#597 'vec4']: s#105
[#597 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#598 '&']: r#356
[#598 '(']: r#356
[#598 '*']: r#356
[#598 ';']: r#356
[#598 '@']: r#356
[#598 '_']: r#356
[#598 'array']: r#356
[#598 'atomic']: r#356
[#598 'bool']: r#356
[#598 'break']: r#356
[#598 'const']: r#356
[#598 'const_assert']: r#356
[#598 'continue']: r#356
[#598 'continuing']: r#356
[#598 'discard']: r#356
[#598 'f16']: r#356
[#598 'f32']: r#356
[#598 'for']: r#356
[#598 'i32']: r#356
[#598 'if']: r#356
[#598 'let']: r#356
[#598 'loop']: r#356
[#598 'mat2x2']: r#356
[#598 'mat2x3']: r#356
[#598 'mat2x4']: r#356
[#598 'mat3x2']: r#356
[#598 'mat3x3']: r#356
[#598 'mat3x4']: r#356
[#598 'mat4x2']: r#356
[#598 'mat4x3']: r#356
[#598 'mat4x4']: r#356
[#598 'ptr']: r#356
[#598 'return']: r#356
[#598 'sampler']: r#356
[#598 'sampler_comparison']: r#356
[#598 'switch']: r#356
[#598 'texture_1d']: r#356
[#598 'texture_2d']: r#356
[#598 'texture_2d_array']: r#356
[#598 'texture_3d']: r#356
[#598 'texture_cube']: r#356
[#598 'texture_cube_array']: r#356
[#598 'texture_depth_2d']: r#356
[#598 'texture_depth_2d_array']: r#356
[#598 'texture_depth_cube']: r#356
[#598 'texture_depth_cube_array']: r#356
[#598 'texture_depth_multisampled_2d']: r#356
[#598 'texture_multisampled_2d']: r#356
[#598 'texture_storage_1d']: r#356
[#598 'texture_storage_2d']: r#356
[#598 'texture_storage_2d_array']: r#356
[#598 'texture_storage_3d']: r#356
[#598 'u32']: r#356
[#598 'var']: r#356
[#598 'vec2']: r#356
[#598 'vec3']: r#356
[#598 'vec4']: r#356
[#598 'while']: r#356
[#598 '{']: r#356
[#598 '}']: r#356
[#598 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#356
[#599 '{']: s#617
[#600 '{']: r#357
[#601 '@']: s#35
[#602 '!']: s#68
[#602 '&']: s#71
[#602 '(']: s#83
[#602 '*']: s#70
[#602 '-']: s#67
[#602 'array']: s#87
[#602 'atomic']: s#101
[#602 'bitcast']: s#77
[#602 'bool']: s#94
[#602 'f16']: s#96
[#602 'f32']: s#95
[#602 'false']: s#93
[#602 'i32']: s#97
[#602 'mat2x2']: s#106
[#602 'mat2x3']: s#107
[#602 'mat2x4']: s#108
[#602 'mat3x2']: s#109
[#602 'mat3x3']: s#110
[#602 'mat3x4']: s#111
[#602 'mat4x2']: s#112
[#602 'mat4x3']: s#113
[#602 'mat4x4']: s#114
[#602 'ptr']: s#99
[#602 'sampler']: s#131
[#602 'sampler_comparison']: s#132
[#602 'texture_1d']: s#138
[#602 'texture_2d']: s#139
[#602 'texture_2d_array']: s#140
[#602 'texture_3d']: s#141
[#602 'texture_cube']: s#142
[#602 'texture_cube_array']: s#143
[#602 'texture_depth_2d']: s#133
[#602 'texture_depth_2d_array']: s#134
[#602 'texture_depth_cube']: s#135
[#602 'texture_depth_cube_array']: s#136
[#602 'texture_depth_multisampled_2d']: s#137
[#602 'texture_multisampled_2d']: s#144
[#602 'texture_storage_1d']: s#145
[#602 'texture_storage_2d']: s#146
[#602 'texture_storage_2d_array']: s#147
[#602 'texture_storage_3d']: s#148
[#602 'true']: s#92
[#602 'u32']: s#98
[#602 'vec2']: s#103
[#602 'vec3']: s#104
[#602 'vec4']: s#105
[#602 '~']: s#69
[#602 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#602 /0[fh]/]: s#118
[#602 /0[iu]?/]: s#115
[#602 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#602 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#602 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#602 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#602 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#602 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#602 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#602 /[1-9][0-9]*[fh]/]: s#119
[#602 /[1-9][0-9]*[iu]?/]: s#116
[#603 '&']: r#358
[#603 '(']: r#358
[#603 '*']: r#358
[#603 ';']: r#358
[#603 '@']: r#358
[#603 '_']: r#358
[#603 'array']: r#358
[#603 'atomic']: r#358
[#603 'bool']: r#358
[#603 'break']: r#358
[#603 'const']: r#358
[#603 'const_assert']: r#358
[#603 'continue']: r#358
[#603 'continuing']: r#358
[#603 'discard']: r#358
[#603 'else']: r#358
[#603 'f16']: r#358
[#603 'f32']: r#358
[#603 'for']: r#358
[#603 'i32']: r#358
[#603 'if']: r#358
[#603 'let']: r#358
[#603 'loop']: r#358
[#603 'mat2x2']: r#358
[#603 'mat2x3']: r#358
[#603 'mat2x4']: r#358
[#603 'mat3x2']: r#358
[#603 'mat3x3']: r#358
[#603 'mat3x4']: r#358
[#603 'mat4x2']: r#358
[#603 'mat4x3']: r#358
[#603 'mat4x4']: r#358
[#603 'ptr']: r#358
[#603 'return']: r#358
[#603 'sampler']: r#358
[#603 'sampler_comparison']: r#358
[#603 'switch']: r#358
[#603 'texture_1d']: r#358
[#603 'texture_2d']: r#358
[#603 'texture_2d_array']: r#358
[#603 'texture_3d']: r#358
[#603 'texture_cube']: r#358
[#603 'texture_cube_array']: r#358
[#603 'texture_depth_2d']: r#358
[#603 'texture_depth_2d_array']: r#358
[#603 'texture_depth_cube']: r#358
[#603 'texture_depth_cube_array']: r#358
[#603 'texture_depth_multisampled_2d']: r#358
[#603 'texture_multisampled_2d']: r#358
[#603 'texture_storage_1d']: r#358
[#603 'texture_storage_2d']: r#358
[#603 'texture_storage_2d_array']: r#358
[#603 'texture_storage_3d']: r#358
[#603 'u32']: r#358
[#603 'var']: r#358
[#603 'vec2']: r#358
[#603 'vec3']: r#358
[#603 'vec4']: r#358
[#603 'while']: r#358
[#603 '{']: r#358
[#603 '}']: r#358
[#603 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#358
[#604 '&']: r#359
[#604 '(']: r#359
[#604 '*']: r#359
[#604 ';']: r#359
[#604 '@']: r#359
[#604 '_']: r#359
[#604 'array']: r#359
[#604 'atomic']: r#359
[#604 'bool']: r#359
[#604 'break']: r#359
[#604 'const']: r#359
[#604 'const_assert']: r#359
[#604 'continue']: r#359
[#604 'continuing']: r#359
[#604 'discard']: r#359
[#604 'f16']: r#359
[#604 'f32']: r#359
[#604 'for']: r#359
[#604 'i32']: r#359
[#604 'if']: r#359
[#604 'let']: r#359
[#604 'loop']: r#359
[#604 'mat2x2']: r#359
[#604 'mat2x3']: r#359
[#604 'mat2x4']: r#359
[#604 'mat3x2']: r#359
[#604 'mat3x3']: r#359
[#604 'mat3x4']: r#359
[#604 'mat4x2']: r#359
[#604 'mat4x3']: r#359
[#604 'mat4x4']: r#359
[#604 'ptr']: r#359
[#604 'return']: r#359
[#604 'sampler']: r#359
[#604 'sampler_comparison']: r#359
[#604 'switch']: r#359
[#604 'texture_1d']: r#359
[#604 'texture_2d']: r#359
[#604 'texture_2d_array']: r#359
[#604 'texture_3d']: r#359
[#604 'texture_cube']: r#359
[#604 'texture_cube_array']: r#359
[#604 'texture_depth_2d']: r#359
[#604 'texture_depth_2d_array']: r#359
[#604 'texture_depth_cube']: r#359
[#604 'texture_depth_cube_array']: r#359
[#604 'texture_depth_multisampled_2d']: r#359
[#604 'texture_multisampled_2d']: r#359
[#604 'texture_storage_1d']: r#359
[#604 'texture_storage_2d']: r#359
[#604 'texture_storage_2d_array']: r#359
[#604 'texture_storage_3d']: r#359
[#604 'u32']: r#359
[#604 'var']: r#359
[#604 'vec2']: r#359
[#604 'vec3']: r#359
[#604 'vec4']: r#359
[#604 'while']: r#359
[#604 '{']: r#359
[#604 '}']: r#359
[#604 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#359
[#605 '&']: r#360
[#605 '(']: r#360
[#605 '*']: r#360
[#605 ';']: r#360
[#605 '@']: r#360
[#605 '_']: r#360
[#605 'array']: r#360
[#605 'atomic']: r#360
[#605 'bool']: r#360
[#605 'break']: r#360
[#605 'const']: r#360
[#605 'const_assert']: r#360
[#605 'continue']: r#360
[#605 'continuing']: r#360
[#605 'discard']: r#360
[#605 'f16']: r#360
[#605 'f32']: r#360
[#605 'for']: r#360
[#605 'i32']: r#360
[#605 'if']: r#360
[#605 'let']: r#360
[#605 'loop']: r#360
[#605 'mat2x2']: r#360
[#605 'mat2x3']: r#360
[#605 'mat2x4']: r#360
[#605 'mat3x2']: r#360
[#605 'mat3x3']: r#360
[#605 'mat3x4']: r#360
[#605 'mat4x2']: r#360
[#605 'mat4x3']: r#360
[#605 'mat4x4']: r#360
[#605 'ptr']: r#360
[#605 'return']: r#360
[#605 'sampler']: r#360
[#605 'sampler_comparison']: r#360
[#605 'switch']: r#360
[#605 'texture_1d']: r#360
[#605 'texture_2d']: r#360
[#605 'texture_2d_array']: r#360
[#605 'texture_3d']: r#360
[#605 'texture_cube']: r#360
[#605 'texture_cube_array']: r#360
[#605 'texture_depth_2d']: r#360
[#605 'texture_depth_2d_array']: r#360
[#605 'texture_depth_cube']: r#360
[#605 'texture_depth_cube_array']: r#360
[#605 'texture_depth_multisampled_2d']: r#360
[#605 'texture_multisampled_2d']: r#360
[#605 'texture_storage_1d']: r#360
[#605 'texture_storage_2d']: r#360
[#605 'texture_storage_2d_array']: r#360
[#605 'texture_storage_3d']: r#360
[#605 'u32']: r#360
[#605 'var']: r#360
[#605 'vec2']: r#360
[#605 'vec3']: r#360
[#605 'vec4']: r#360
[#605 'while']: r#360
[#605 '{']: r#360
[#605 '}']: r#360
[#605 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#360
[#606 '@']: s#35
[#607 '&']: r#361
[#607 '(']: r#361
[#607 '*']: r#361
[#607 ';']: r#361
[#607 '@']: r#361
[#607 '_']: r#361
[#607 'array']: r#361
[#607 'atomic']: r#361
[#607 'bool']: r#361
[#607 'break']: r#361
[#607 'const']: r#361
[#607 'const_assert']: r#361
[#607 'continue']: r#361
[#607 'continuing']: r#361
[#607 'discard']: r#361
[#607 'else']: r#361
[#607 'f16']: r#361
[#607 'f32']: r#361
[#607 'for']: r#361
[#607 'i32']: r#361
[#607 'if']: r#361
[#607 'let']: r#361
[#607 'loop']: r#361
[#607 'mat2x2']: r#361
[#607 'mat2x3']: r#361
[#607 'mat2x4']: r#361
[#607 'mat3x2']: r#361
[#607 'mat3x3']: r#361
[#607 'mat3x4']: r#361
[#607 'mat4x2']: r#361
[#607 'mat4x3']: r#361
[#607 'mat4x4']: r#361
[#607 'ptr']: r#361
[#607 'return']: r#361
[#607 'sampler']: r#361
[#607 'sampler_comparison']: r#361
[#607 'switch']: r#361
[#607 'texture_1d']: r#361
[#607 'texture_2d']: r#361
[#607 'texture_2d_array']: r#361
[#607 'texture_3d']: r#361
[#607 'texture_cube']: r#361
[#607 'texture_cube_array']: r#361
[#607 'texture_depth_2d']: r#361
[#607 'texture_depth_2d_array']: r#361
[#607 'texture_depth_cube']: r#361
[#607 'texture_depth_cube_array']: r#361
[#607 'texture_depth_multisampled_2d']: r#361
[#607 'texture_multisampled_2d']: r#361
[#607 'texture_storage_1d']: r#361
[#607 'texture_storage_2d']: r#361
[#607 'texture_storage_2d_array']: r#361
[#607 'texture_storage_3d']: r#361
[#607 'u32']: r#361
[#607 'var']: r#361
[#607 'vec2']: r#361
[#607 'vec3']: r#361
[#607 'vec4']: r#361
[#607 'while']: r#361
[#607 '{']: r#361
[#607 '}']: r#361
[#607 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#361
[#608 ')']: r#362
[#608 ',']: r#362
[#609 'array']: s#323
[#609 'atomic']: s#101
[#609 'bool']: s#94
[#609 'f16']: s#96
[#609 'f32']: s#95
[#609 'i32']: s#97
[#609 'mat2x2']: s#106
[#609 'mat2x3']: s#107
[#609 'mat2x4']: s#108
[#609 'mat3x2']: s#109
[#609 'mat3x3']: s#110
[#609 'mat3x4']: s#111
[#609 'mat4x2']: s#112
[#609 'mat4x3']: s#113
[#609 'mat4x4']: s#114
[#609 'ptr']: s#99
[#609 'sampler']: s#131
[#609 'sampler_comparison']: s#132
[#609 'texture_1d']: s#138
[#609 'texture_2d']: s#139
[#609 'texture_2d_array']: s#140
[#609 'texture_3d']: s#141
[#609 'texture_cube']: s#142
[#609 'texture_cube_array']: s#143
[#609 'texture_depth_2d']: s#133
[#609 'texture_depth_2d_array']: s#134
[#609 'texture_depth_cube']: s#135
[#609 'texture_depth_cube_array']: s#136
[#609 'texture_depth_multisampled_2d']: s#137
[#609 'texture_multisampled_2d']: s#144
[#609 'texture_storage_1d']: s#145
[#609 'texture_storage_2d']: s#146
[#609 'texture_storage_2d_array']: s#147
[#609 'texture_storage_3d']: s#148
[#609 'u32']: s#98
[#609 'vec2']: s#103
[#609 'vec3']: s#104
[#609 'vec4']: s#105
[#609 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#610 'array']: r#363
[#610 'atomic']: r#363
[#610 'bool']: r#363
[#610 'f16']: r#363
[#610 'f32']: r#363
[#610 'i32']: r#363
[#610 'mat2x2']: r#363
[#610 'mat2x3']: r#363
[#610 'mat2x4']: r#363
[#610 'mat3x2']: r#363
[#610 'mat3x3']: r#363
[#610 'mat3x4']: r#363
[#610 'mat4x2']: r#363
[#610 'mat4x3']: r#363
[#610 'mat4x4']: r#363
[#610 'ptr']: r#363
[#610 'sampler']: r#363
[#610 'sampler_comparison']: r#363
[#610 'texture_1d']: r#363
[#610 'texture_2d']: r#363
[#610 'texture_2d_array']: r#363
[#610 'texture_3d']: r#363
[#610 'texture_cube']: r#363
[#610 'texture_cube_array']: r#363
[#610 'texture_depth_2d']: r#363
[#610 'texture_depth_2d_array']: r#363
[#610 'texture_depth_cube']: r#363
[#610 'texture_depth_cube_array']: r#363
[#610 'texture_depth_multisampled_2d']: r#363
[#610 'texture_multisampled_2d']: r#363
[#610 'texture_storage_1d']: r#363
[#610 'texture_storage_2d']: r#363
[#610 'texture_storage_2d_array']: r#363
[#610 'texture_storage_3d']: r#363
[#610 'u32']: r#363
[#610 'vec2']: r#363
[#610 'vec3']: r#363
[#610 'vec4']: r#363
[#610 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#363
[#611 '@']: s#35
[#612 'array']: r#364
[#612 'atomic']: r#364
[#612 'bool']: r#364
[#612 'f16']: r#364
[#612 'f32']: r#364
[#612 'i32']: r#364
[#612 'mat2x2']: r#364
[#612 'mat2x3']: r#364
[#612 'mat2x4']: r#364
[#612 'mat3x2']: r#364
[#612 'mat3x3']: r#364
[#612 'mat3x4']: r#364
[#612 'mat4x2']: r#364
[#612 'mat4x3']: r#364
[#612 'mat4x4']: r#364
[#612 'ptr']: r#364
[#612 'sampler']: r#364
[#612 'sampler_comparison']: r#364
[#612 'texture_1d']: r#364
[#612 'texture_2d']: r#364
[#612 'texture_2d_array']: r#364
[#612 'texture_3d']: r#364
[#612 'texture_cube']: r#364
[#612 'texture_cube_array']: r#364
[#612 'texture_depth_2d']: r#364
[#612 'texture_depth_2d_array']: r#364
[#612 'texture_depth_cube']: r#364
[#612 'texture_depth_cube_array']: r#364
[#612 'texture_depth_multisampled_2d']: r#364
[#612 'texture_multisampled_2d']: r#364
[#612 'texture_storage_1d']: r#364
[#612 'texture_storage_2d']: r#364
[#612 'texture_storage_2d_array']: r#364
[#612 'texture_storage_3d']: r#364
[#612 'u32']: r#364
[#612 'vec2']: r#364
[#612 'vec3']: r#364
[#612 'vec4']: r#364
[#612 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#364
[#613 '@']: r#365
[#613 '{']: r#365
[#614 '&']: r#366
[#614 '(']: r#366
[#614 '*']: r#366
[#614 ';']: r#366
[#614 '@']: r#366
[#614 '_']: r#366
[#614 'array']: r#366
[#614 'atomic']: r#366
[#614 'bool']: r#366
[#614 'break']: r#366
[#614 'const']: r#366
[#614 'const_assert']: r#366
[#614 'continue']: r#366
[#614 'continuing']: r#366
[#614 'discard']: r#366
[#614 'f16']: r#366
[#614 'f32']: r#366
[#614 'for']: r#366
[#614 'i32']: r#366
[#614 'if']: r#366
[#614 'let']: r#366
[#614 'loop']: r#366
[#614 'mat2x2']: r#366
[#614 'mat2x3']: r#366
[#614 'mat2x4']: r#366
[#614 'mat3x2']: r#366
[#614 'mat3x3']: r#366
[#614 'mat3x4']: r#366
[#614 'mat4x2']: r#366
[#614 'mat4x3']: r#366
[#614 'mat4x4']: r#366
[#614 'ptr']: r#366
[#614 'return']: r#366
[#614 'sampler']: r#366
[#614 'sampler_comparison']: r#366
[#614 'switch']: r#366
[#614 'texture_1d']: r#366
[#614 'texture_2d']: r#366
[#614 'texture_2d_array']: r#366
[#614 'texture_3d']: r#366
[#614 'texture_cube']: r#366
[#614 'texture_cube_array']: r#366
[#614 'texture_depth_2d']: r#366
[#614 'texture_depth_2d_array']: r#366
[#614 'texture_depth_cube']: r#366
[#614 'texture_depth_cube_array']: r#366
[#614 'texture_depth_multisampled_2d']: r#366
[#614 'texture_multisampled_2d']: r#366
[#614 'texture_storage_1d']: r#366
[#614 'texture_storage_2d']: r#366
[#614 'texture_storage_2d_array']: r#366
[#614 'texture_storage_3d']: r#366
[#614 'u32']: r#366
[#614 'var']: r#366
[#614 'vec2']: r#366
[#614 'vec3']: r#366
[#614 'vec4']: r#366
[#614 'while']: r#366
[#614 '{']: r#366
[#614 '}']: r#366
[#614 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#366
[#615 '@']: s#35
[#616 '{']: r#367
[#617 'case']: s#638
[#617 'default']: s#639
[#618 'continuing']: s#632
[#619 'continuing']: r#368
[#619 '}']: r#368
[#620 '&']: s#404
[#620 '(']: s#405
[#620 '*']: s#403
[#620 ';']: s#363
[#620 '@']: s#35
[#620 '_']: s#400
[#620 'array']: s#87
[#620 'atomic']: s#101
[#620 'bool']: s#94
[#620 'break']: s#388
[#620 'const']: s#387
[#620 'const_assert']: s#30
[#620 'continue']: s#389
[#620 'discard']: s#374
[#620 'f16']: s#96
[#620 'f32']: s#95
[#620 'i32']: s#97
[#620 'let']: s#386
[#620 'mat2x2']: s#106
[#620 'mat2x3']: s#107
[#620 'mat2x4']: s#108
[#620 'mat3x2']: s#109
[#620 'mat3x3']: s#110
[#620 'mat3x4']: s#111
[#620 'mat4x2']: s#112
[#620 'mat4x3']: s#113
[#620 'mat4x4']: s#114
[#620 'ptr']: s#99
[#620 'return']: s#378
[#620 'sampler']: s#131
[#620 'sampler_comparison']: s#132
[#620 'texture_1d']: s#138
[#620 'texture_2d']: s#139
[#620 'texture_2d_array']: s#140
[#620 'texture_3d']: s#141
[#620 'texture_cube']: s#142
[#620 'texture_cube_array']: s#143
[#620 'texture_depth_2d']: s#133
[#620 'texture_depth_2d_array']: s#134
[#620 'texture_depth_cube']: s#135
[#620 'texture_depth_cube_array']: s#136
[#620 'texture_depth_multisampled_2d']: s#137
[#620 'texture_multisampled_2d']: s#144
[#620 'texture_storage_1d']: s#145
[#620 'texture_storage_2d']: s#146
[#620 'texture_storage_2d_array']: s#147
[#620 'texture_storage_3d']: s#148
[#620 'u32']: s#98
[#620 'var']: s#157
[#620 'vec2']: s#103
[#620 'vec3']: s#104
[#620 'vec4']: s#105
[#620 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#621 '!']: s#68
[#621 '&']: s#71
[#621 '(']: s#83
[#621 '*']: s#70
[#621 '-']: s#67
[#621 'array']: s#87
[#621 'atomic']: s#101
[#621 'bitcast']: s#77
[#621 'bool']: s#94
[#621 'f16']: s#96
[#621 'f32']: s#95
[#621 'false']: s#93
[#621 'i32']: s#97
[#621 'mat2x2']: s#106
[#621 'mat2x3']: s#107
[#621 'mat2x4']: s#108
[#621 'mat3x2']: s#109
[#621 'mat3x3']: s#110
[#621 'mat3x4']: s#111
[#621 'mat4x2']: s#112
[#621 'mat4x3']: s#113
[#621 'mat4x4']: s#114
[#621 'ptr']: s#99
[#621 'sampler']: s#131
[#621 'sampler_comparison']: s#132
[#621 'texture_1d']: s#138
[#621 'texture_2d']: s#139
[#621 'texture_2d_array']: s#140
[#621 'texture_3d']: s#141
[#621 'texture_cube']: s#142
[#621 'texture_cube_array']: s#143
[#621 'texture_depth_2d']: s#133
[#621 'texture_depth_2d_array']: s#134
[#621 'texture_depth_cube']: s#135
[#621 'texture_depth_cube_array']: s#136
[#621 'texture_depth_multisampled_2d']: s#137
[#621 'texture_multisampled_2d']: s#144
[#621 'texture_storage_1d']: s#145
[#621 'texture_storage_2d']: s#146
[#621 'texture_storage_2d_array']: s#147
[#621 'texture_storage_3d']: s#148
[#621 'true']: s#92
[#621 'u32']: s#98
[#621 'vec2']: s#103
[#621 'vec3']: s#104
[#621 'vec4']: s#105
[#621 '~']: s#69
[#621 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#621 /0[fh]/]: s#118
[#621 /0[iu]?/]: s#115
[#621 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#621 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#621 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#621 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#621 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#621 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#621 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#621 /[1-9][0-9]*[fh]/]: s#119
[#621 /[1-9][0-9]*[iu]?/]: s#116
[#622 '@']: s#35
[#623 /\u200B_template_args_end/]: r#369
[#624 '(']: r#370
[#624 ')']: r#370
[#624 ',']: r#370
[#624 ';']: r#370
[#624 '=']: r#370
[#624 '@']: r#370
[#624 '{']: r#370
[#624 '}']: r#370
[#624 /\u200B_template_args_end/]: r#370
[#625 '@']: r#371
[#625 'array']: r#371
[#625 'atomic']: r#371
[#625 'bool']: r#371
[#625 'f16']: r#371
[#625 'f32']: r#371
[#625 'fn']: r#371
[#625 'for']: r#371
[#625 'i32']: r#371
[#625 'if']: r#371
[#625 'loop']: r#371
[#625 'mat2x2']: r#371
[#625 'mat2x3']: r#371
[#625 'mat2x4']: r#371
[#625 'mat3x2']: r#371
[#625 'mat3x3']: r#371
[#625 'mat3x4']: r#371
[#625 'mat4x2']: r#371
[#625 'mat4x3']: r#371
[#625 'mat4x4']: r#371
[#625 'override']: r#371
[#625 'ptr']: r#371
[#625 'sampler']: r#371
[#625 'sampler_comparison']: r#371
[#625 'switch']: r#371
[#625 'texture_1d']: r#371
[#625 'texture_2d']: r#371
[#625 'texture_2d_array']: r#371
[#625 'texture_3d']: r#371
[#625 'texture_cube']: r#371
[#625 'texture_cube_array']: r#371
[#625 'texture_depth_2d']: r#371
[#625 'texture_depth_2d_array']: r#371
[#625 'texture_depth_cube']: r#371
[#625 'texture_depth_cube_array']: r#371
[#625 'texture_depth_multisampled_2d']: r#371
[#625 'texture_multisampled_2d']: r#371
[#625 'texture_storage_1d']: r#371
[#625 'texture_storage_2d']: r#371
[#625 'texture_storage_2d_array']: r#371
[#625 'texture_storage_3d']: r#371
[#625 'u32']: r#371
[#625 'var']: r#371
[#625 'vec2']: r#371
[#625 'vec3']: r#371
[#625 'vec4']: r#371
[#625 'while']: r#371
[#625 '{']: r#371
[#625 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#371
[#626 '&']: r#372
[#626 '(']: r#372
[#626 '*']: r#372
[#626 ';']: r#372
[#626 '@']: r#372
[#626 '_']: r#372
[#626 'array']: r#372
[#626 'atomic']: r#372
[#626 'bool']: r#372
[#626 'break']: r#372
[#626 'const']: r#372
[#626 'const_assert']: r#372
[#626 'continue']: r#372
[#626 'continuing']: r#372
[#626 'discard']: r#372
[#626 'f16']: r#372
[#626 'f32']: r#372
[#626 'for']: r#372
[#626 'i32']: r#372
[#626 'if']: r#372
[#626 'let']: r#372
[#626 'loop']: r#372
[#626 'mat2x2']: r#372
[#626 'mat2x3']: r#372
[#626 'mat2x4']: r#372
[#626 'mat3x2']: r#372
[#626 'mat3x3']: r#372
[#626 'mat3x4']: r#372
[#626 'mat4x2']: r#372
[#626 'mat4x3']: r#372
[#626 'mat4x4']: r#372
[#626 'ptr']: r#372
[#626 'return']: r#372
[#626 'sampler']: r#372
[#626 'sampler_comparison']: r#372
[#626 'switch']: r#372
[#626 'texture_1d']: r#372
[#626 'texture_2d']: r#372
[#626 'texture_2d_array']: r#372
[#626 'texture_3d']: r#372
[#626 'texture_cube']: r#372
[#626 'texture_cube_array']: r#372
[#626 'texture_depth_2d']: r#372
[#626 'texture_depth_2d_array']: r#372
[#626 'texture_depth_cube']: r#372
[#626 'texture_depth_cube_array']: r#372
[#626 'texture_depth_multisampled_2d']: r#372
[#626 'texture_multisampled_2d']: r#372
[#626 'texture_storage_1d']: r#372
[#626 'texture_storage_2d']: r#372
[#626 'texture_storage_2d_array']: r#372
[#626 'texture_storage_3d']: r#372
[#626 'u32']: r#372
[#626 'var']: r#372
[#626 'vec2']: r#372
[#626 'vec3']: r#372
[#626 'vec4']: r#372
[#626 'while']: r#372
[#626 '{']: r#372
[#626 '}']: r#372
[#626 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#372
[#627 ';']: s#654
[#628 ';']: r#373
[#629 'continuing']: r#374
[#629 '}']: r#374
[#630 '}']: s#653
[#631 '}']: r#375
[#632 '@']: s#35
[#633 '}']: s#648
[#634 '}']: r#376
[#635 'case']: s#638
[#635 'default']: s#639
[#636 'case']: r#377
[#636 'default']: r#377
[#636 '}']: r#377
[#637 'case']: r#378
[#637 'default']: r#378
[#637 '}']: r#378
[#638 '!']: s#68
[#638 '&']: s#71
[#638 '(']: s#83
[#638 '*']: s#70
[#638 '-']: s#67
[#638 'array']: s#87
[#638 'atomic']: s#101
[#638 'bitcast']: s#77
[#638 'bool']: s#94
[#638 'default']: s#645
[#638 'f16']: s#96
[#638 'f32']: s#95
[#638 'false']: s#93
[#638 'i32']: s#97
[#638 'mat2x2']: s#106
[#638 'mat2x3']: s#107
[#638 'mat2x4']: s#108
[#638 'mat3x2']: s#109
[#638 'mat3x3']: s#110
[#638 'mat3x4']: s#111
[#638 'mat4x2']: s#112
[#638 'mat4x3']: s#113
[#638 'mat4x4']: s#114
[#638 'ptr']: s#99
[#638 'sampler']: s#131
[#638 'sampler_comparison']: s#132
[#638 'texture_1d']: s#138
[#638 'texture_2d']: s#139
[#638 'texture_2d_array']: s#140
[#638 'texture_3d']: s#141
[#638 'texture_cube']: s#142
[#638 'texture_cube_array']: s#143
[#638 'texture_depth_2d']: s#133
[#638 'texture_depth_2d_array']: s#134
[#638 'texture_depth_cube']: s#135
[#638 'texture_depth_cube_array']: s#136
[#638 'texture_depth_multisampled_2d']: s#137
[#638 'texture_multisampled_2d']: s#144
[#638 'texture_storage_1d']: s#145
[#638 'texture_storage_2d']: s#146
[#638 'texture_storage_2d_array']: s#147
[#638 'texture_storage_3d']: s#148
[#638 'true']: s#92
[#638 'u32']: s#98
[#638 'vec2']: s#103
[#638 'vec3']: s#104
[#638 'vec4']: s#105
[#638 '~']: s#69
[#638 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#638 /0[fh]/]: s#118
[#638 /0[iu]?/]: s#115
[#638 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#638 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#638 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#638 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#638 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#638 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#638 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#638 /[1-9][0-9]*[fh]/]: s#119
[#638 /[1-9][0-9]*[iu]?/]: s#116
[#639 ':']: s#642
[#640 '&']: r#379
[#640 '(']: r#379
[#640 '*']: r#379
[#640 ';']: r#379
[#640 '@']: r#379
[#640 '_']: r#379
[#640 'array']: r#379
[#640 'atomic']: r#379
[#640 'bool']: r#379
[#640 'break']: r#379
[#640 'const']: r#379
[#640 'const_assert']: r#379
[#640 'continue']: r#379
[#640 'continuing']: r#379
[#640 'discard']: r#379
[#640 'else']: r#379
[#640 'f16']: r#379
[#640 'f32']: r#379
[#640 'for']: r#379
[#640 'i32']: r#379
[#640 'if']: r#379
[#640 'let']: r#379
[#640 'loop']: r#379
[#640 'mat2x2']: r#379
[#640 'mat2x3']: r#379
[#640 'mat2x4']: r#379
[#640 'mat3x2']: r#379
[#640 'mat3x3']: r#379
[#640 'mat3x4']: r#379
[#640 'mat4x2']: r#379
[#640 'mat4x3']: r#379
[#640 'mat4x4']: r#379
[#640 'ptr']: r#379
[#640 'return']: r#379
[#640 'sampler']: r#379
[#640 'sampler_comparison']: r#379
[#640 'switch']: r#379
[#640 'texture_1d']: r#379
[#640 'texture_2d']: r#379
[#640 'texture_2d_array']: r#379
[#640 'texture_3d']: r#379
[#640 'texture_cube']: r#379
[#640 'texture_cube_array']: r#379
[#640 'texture_depth_2d']: r#379
[#640 'texture_depth_2d_array']: r#379
[#640 'texture_depth_cube']: r#379
[#640 'texture_depth_cube_array']: r#379
[#640 'texture_depth_multisampled_2d']: r#379
[#640 'texture_multisampled_2d']: r#379
[#640 'texture_storage_1d']: r#379
[#640 'texture_storage_2d']: r#379
[#640 'texture_storage_2d_array']: r#379
[#640 'texture_storage_3d']: r#379
[#640 'u32']: r#379
[#640 'var']: r#379
[#640 'vec2']: r#379
[#640 'vec3']: r#379
[#640 'vec4']: r#379
[#640 'while']: r#379
[#640 '{']: r#379
[#640 '}']: r#379
[#640 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#379
[#641 '@']: s#35
[#642 '@']: r#380
[#642 '{']: r#380
[#643 ':']: s#666
[#644 ',']: s#664
[#645 ',']: r#381
[#645 ':']: r#381
[#645 '@']: r#381
[#645 '{']: r#381
[#646 ',']: r#382
[#646 ':']: r#382
[#646 '@']: r#382
[#646 '{']: r#382
[#647 '}']: r#383
[#648 '&']: r#384
[#648 '(']: r#384
[#648 '*']: r#384
[#648 ';']: r#384
[#648 '@']: r#384
[#648 '_']: r#384
[#648 'array']: r#384
[#648 'atomic']: r#384
[#648 'bool']: r#384
[#648 'break']: r#384
[#648 'const']: r#384
[#648 'const_assert']: r#384
[#648 'continue']: r#384
[#648 'continuing']: r#384
[#648 'discard']: r#384
[#648 'f16']: r#384
[#648 'f32']: r#384
[#648 'for']: r#384
[#648 'i32']: r#384
[#648 'if']: r#384
[#648 'let']: r#384
[#648 'loop']: r#384
[#648 'mat2x2']: r#384
[#648 'mat2x3']: r#384
[#648 'mat2x4']: r#384
[#648 'mat3x2']: r#384
[#648 'mat3x3']: r#384
[#648 'mat3x4']: r#384
[#648 'mat4x2']: r#384
[#648 'mat4x3']: r#384
[#648 'mat4x4']: r#384
[#648 'ptr']: r#384
[#648 'return']: r#384
[#648 'sampler']: r#384
[#648 'sampler_comparison']: r#384
[#648 'switch']: r#384
[#648 'texture_1d']: r#384
[#648 'texture_2d']: r#384
[#648 'texture_2d_array']: r#384
[#648 'texture_3d']: r#384
[#648 'texture_cube']: r#384
[#648 'texture_cube_array']: r#384
[#648 'texture_depth_2d']: r#384
[#648 'texture_depth_2d_array']: r#384
[#648 'texture_depth_cube']: r#384
[#648 'texture_depth_cube_array']: r#384
[#648 'texture_depth_multisampled_2d']: r#384
[#648 'texture_multisampled_2d']: r#384
[#648 'texture_storage_1d']: r#384
[#648 'texture_storage_2d']: r#384
[#648 'texture_storage_2d_array']: r#384
[#648 'texture_storage_3d']: r#384
[#648 'u32']: r#384
[#648 'var']: r#384
[#648 'vec2']: r#384
[#648 'vec3']: r#384
[#648 'vec4']: r#384
[#648 'while']: r#384
[#648 '{']: r#384
[#648 '}']: r#384
[#648 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#384
[#649 '}']: r#385
[#650 '{']: s#660
[#651 '{']: r#386
[#652 '@']: s#35
[#653 '&']: r#387
[#653 '(']: r#387
[#653 '*']: r#387
[#653 ';']: r#387
[#653 '@']: r#387
[#653 '_']: r#387
[#653 'array']: r#387
[#653 'atomic']: r#387
[#653 'bool']: r#387
[#653 'break']: r#387
[#653 'const']: r#387
[#653 'const_assert']: r#387
[#653 'continue']: r#387
[#653 'continuing']: r#387
[#653 'discard']: r#387
[#653 'f16']: r#387
[#653 'f32']: r#387
[#653 'for']: r#387
[#653 'i32']: r#387
[#653 'if']: r#387
[#653 'let']: r#387
[#653 'loop']: r#387
[#653 'mat2x2']: r#387
[#653 'mat2x3']: r#387
[#653 'mat2x4']: r#387
[#653 'mat3x2']: r#387
[#653 'mat3x3']: r#387
[#653 'mat3x4']: r#387
[#653 'mat4x2']: r#387
[#653 'mat4x3']: r#387
[#653 'mat4x4']: r#387
[#653 'ptr']: r#387
[#653 'return']: r#387
[#653 'sampler']: r#387
[#653 'sampler_comparison']: r#387
[#653 'switch']: r#387
[#653 'texture_1d']: r#387
[#653 'texture_2d']: r#387
[#653 'texture_2d_array']: r#387
[#653 'texture_3d']: r#387
[#653 'texture_cube']: r#387
[#653 'texture_cube_array']: r#387
[#653 'texture_depth_2d']: r#387
[#653 'texture_depth_2d_array']: r#387
[#653 'texture_depth_cube']: r#387
[#653 'texture_depth_cube_array']: r#387
[#653 'texture_depth_multisampled_2d']: r#387
[#653 'texture_multisampled_2d']: r#387
[#653 'texture_storage_1d']: r#387
[#653 'texture_storage_2d']: r#387
[#653 'texture_storage_2d_array']: r#387
[#653 'texture_storage_3d']: r#387
[#653 'u32']: r#387
[#653 'var']: r#387
[#653 'vec2']: r#387
[#653 'vec3']: r#387
[#653 'vec4']: r#387
[#653 'while']: r#387
[#653 '{']: r#387
[#653 '}']: r#387
[#653 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#387
[#654 '&']: s#404
[#654 '(']: s#405
[#654 '*']: s#403
[#654 '_']: s#400
[#654 'array']: s#87
[#654 'atomic']: s#101
[#654 'bool']: s#94
[#654 'f16']: s#96
[#654 'f32']: s#95
[#654 'i32']: s#97
[#654 'mat2x2']: s#106
[#654 'mat2x3']: s#107
[#654 'mat2x4']: s#108
[#654 'mat3x2']: s#109
[#654 'mat3x3']: s#110
[#654 'mat3x4']: s#111
[#654 'mat4x2']: s#112
[#654 'mat4x3']: s#113
[#654 'mat4x4']: s#114
[#654 'ptr']: s#99
[#654 'sampler']: s#131
[#654 'sampler_comparison']: s#132
[#654 'texture_1d']: s#138
[#654 'texture_2d']: s#139
[#654 'texture_2d_array']: s#140
[#654 'texture_3d']: s#141
[#654 'texture_cube']: s#142
[#654 'texture_cube_array']: s#143
[#654 'texture_depth_2d']: s#133
[#654 'texture_depth_2d_array']: s#134
[#654 'texture_depth_cube']: s#135
[#654 'texture_depth_cube_array']: s#136
[#654 'texture_depth_multisampled_2d']: s#137
[#654 'texture_multisampled_2d']: s#144
[#654 'texture_storage_1d']: s#145
[#654 'texture_storage_2d']: s#146
[#654 'texture_storage_2d_array']: s#147
[#654 'texture_storage_3d']: s#148
[#654 'u32']: s#98
[#654 'vec2']: s#103
[#654 'vec3']: s#104
[#654 'vec4']: s#105
[#654 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#655 ')']: r#388
[#656 ')']: r#389
[#657 ')']: r#390
[#658 ')']: r#391
[#659 '{']: r#392
[#660 '&']: s#404
[#660 '(']: s#405
[#660 '*']: s#403
[#660 ';']: s#363
[#660 '@']: s#35
[#660 '_']: s#400
[#660 'array']: s#87
[#660 'atomic']: s#101
[#660 'bool']: s#94
[#660 'break']: s#388
[#660 'const']: s#387
[#660 'const_assert']: s#30
[#660 'continue']: s#389
[#660 'discard']: s#374
[#660 'f16']: s#96
[#660 'f32']: s#95
[#660 'i32']: s#97
[#660 'let']: s#386
[#660 'mat2x2']: s#106
[#660 'mat2x3']: s#107
[#660 'mat2x4']: s#108
[#660 'mat3x2']: s#109
[#660 'mat3x3']: s#110
[#660 'mat3x4']: s#111
[#660 'mat4x2']: s#112
[#660 'mat4x3']: s#113
[#660 'mat4x4']: s#114
[#660 'ptr']: s#99
[#660 'return']: s#378
[#660 'sampler']: s#131
[#660 'sampler_comparison']: s#132
[#660 'texture_1d']: s#138
[#660 'texture_2d']: s#139
[#660 'texture_2d_array']: s#140
[#660 'texture_3d']: s#141
[#660 'texture_cube']: s#142
[#660 'texture_cube_array']: s#143
[#660 'texture_depth_2d']: s#133
[#660 'texture_depth_2d_array']: s#134
[#660 'texture_depth_cube']: s#135
[#660 'texture_depth_cube_array']: s#136
[#660 'texture_depth_multisampled_2d']: s#137
[#660 'texture_multisampled_2d']: s#144
[#660 'texture_storage_1d']: s#145
[#660 'texture_storage_2d']: s#146
[#660 'texture_storage_2d_array']: s#147
[#660 'texture_storage_3d']: s#148
[#660 'u32']: s#98
[#660 'var']: s#157
[#660 'vec2']: s#103
[#660 'vec3']: s#104
[#660 'vec4']: s#105
[#660 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#661 ',']: s#672
[#662 ',']: r#393
[#662 ':']: r#393
[#662 '@']: r#393
[#662 '{']: r#393
[#663 ',']: s#664
[#664 '!']: s#68
[#664 '&']: s#71
[#664 '(']: s#83
[#664 '*']: s#70
[#664 '-']: s#67
[#664 'array']: s#87
[#664 'atomic']: s#101
[#664 'bitcast']: s#77
[#664 'bool']: s#94
[#664 'default']: s#645
[#664 'f16']: s#96
[#664 'f32']: s#95
[#664 'false']: s#93
[#664 'i32']: s#97
[#664 'mat2x2']: s#106
[#664 'mat2x3']: s#107
[#664 'mat2x4']: s#108
[#664 'mat3x2']: s#109
[#664 'mat3x3']: s#110
[#664 'mat3x4']: s#111
[#664 'mat4x2']: s#112
[#664 'mat4x3']: s#113
[#664 'mat4x4']: s#114
[#664 'ptr']: s#99
[#664 'sampler']: s#131
[#664 'sampler_comparison']: s#132
[#664 'texture_1d']: s#138
[#664 'texture_2d']: s#139
[#664 'texture_2d_array']: s#140
[#664 'texture_3d']: s#141
[#664 'texture_cube']: s#142
[#664 'texture_cube_array']: s#143
[#664 'texture_depth_2d']: s#133
[#664 'texture_depth_2d_array']: s#134
[#664 'texture_depth_cube']: s#135
[#664 'texture_depth_cube_array']: s#136
[#664 'texture_depth_multisampled_2d']: s#137
[#664 'texture_multisampled_2d']: s#144
[#664 'texture_storage_1d']: s#145
[#664 'texture_storage_2d']: s#146
[#664 'texture_storage_2d_array']: s#147
[#664 'texture_storage_3d']: s#148
[#664 'true']: s#92
[#664 'u32']: s#98
[#664 'vec2']: s#103
[#664 'vec3']: s#104
[#664 'vec4']: s#105
[#664 '~']: s#69
[#664 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#664 /0[fh]/]: s#118
[#664 /0[iu]?/]: s#115
[#664 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#664 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#664 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#664 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#664 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#664 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#664 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#664 /[1-9][0-9]*[fh]/]: s#119
[#664 /[1-9][0-9]*[iu]?/]: s#116
[#665 '@']: s#35
[#666 '@']: r#394
[#666 '{']: r#394
[#667 'case']: r#395
[#667 'default']: r#395
[#667 '}']: r#395
[#668 'case']: r#396
[#668 'default']: r#396
[#668 '}']: r#396
[#669 ',']: r#397
[#669 ':']: r#397
[#669 '@']: r#397
[#669 '{']: r#397
[#670 ',']: r#398
[#670 ':']: r#398
[#670 '@']: r#398
[#670 '{']: r#398
[#671 ':']: r#399
[#671 '@']: r#399
[#671 '{']: r#399
[#672 ':']: r#400
[#672 '@']: r#400
[#672 '{']: r#400
[#673 'break']: s#679
[#674 'break']: r#401
[#674 '}']: r#401
[#675 '&']: s#404
[#675 '(']: s#405
[#675 '*']: s#403
[#675 ';']: s#363
[#675 '@']: s#35
[#675 '_']: s#400
[#675 'array']: s#87
[#675 'atomic']: s#101
[#675 'bool']: s#94
[#675 'break']: s#388
[#675 'const']: s#387
[#675 'const_assert']: s#30
[#675 'continue']: s#389
[#675 'discard']: s#374
[#675 'f16']: s#96
[#675 'f32']: s#95
[#675 'i32']: s#97
[#675 'let']: s#386
[#675 'mat2x2']: s#106
[#675 'mat2x3']: s#107
[#675 'mat2x4']: s#108
[#675 'mat3x2']: s#109
[#675 'mat3x3']: s#110
[#675 'mat3x4']: s#111
[#675 'mat4x2']: s#112
[#675 'mat4x3']: s#113
[#675 'mat4x4']: s#114
[#675 'ptr']: s#99
[#675 'return']: s#378
[#675 'sampler']: s#131
[#675 'sampler_comparison']: s#132
[#675 'texture_1d']: s#138
[#675 'texture_2d']: s#139
[#675 'texture_2d_array']: s#140
[#675 'texture_3d']: s#141
[#675 'texture_cube']: s#142
[#675 'texture_cube_array']: s#143
[#675 'texture_depth_2d']: s#133
[#675 'texture_depth_2d_array']: s#134
[#675 'texture_depth_cube']: s#135
[#675 'texture_depth_cube_array']: s#136
[#675 'texture_depth_multisampled_2d']: s#137
[#675 'texture_multisampled_2d']: s#144
[#675 'texture_storage_1d']: s#145
[#675 'texture_storage_2d']: s#146
[#675 'texture_storage_2d_array']: s#147
[#675 'texture_storage_3d']: s#148
[#675 'u32']: s#98
[#675 'var']: s#157
[#675 'vec2']: s#103
[#675 'vec3']: s#104
[#675 'vec4']: s#105
[#675 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#676 'break']: r#402
[#676 '}']: r#402
[#677 '}']: s#681
[#678 '}']: r#403
[#679 'if']: s#680
[#680 '!']: s#68
[#680 '&']: s#71
[#680 '(']: s#83
[#680 '*']: s#70
[#680 '-']: s#67
[#680 'array']: s#87
[#680 'atomic']: s#101
[#680 'bitcast']: s#77
[#680 'bool']: s#94
[#680 'f16']: s#96
[#680 'f32']: s#95
[#680 'false']: s#93
[#680 'i32']: s#97
[#680 'mat2x2']: s#106
[#680 'mat2x3']: s#107
[#680 'mat2x4']: s#108
[#680 'mat3x2']: s#109
[#680 'mat3x3']: s#110
[#680 'mat3x4']: s#111
[#680 'mat4x2']: s#112
[#680 'mat4x3']: s#113
[#680 'mat4x4']: s#114
[#680 'ptr']: s#99
[#680 'sampler']: s#131
[#680 'sampler_comparison']: s#132
[#680 'texture_1d']: s#138
[#680 'texture_2d']: s#139
[#680 'texture_2d_array']: s#140
[#680 'texture_3d']: s#141
[#680 'texture_cube']: s#142
[#680 'texture_cube_array']: s#143
[#680 'texture_depth_2d']: s#133
[#680 'texture_depth_2d_array']: s#134
[#680 'texture_depth_cube']: s#135
[#680 'texture_depth_cube_array']: s#136
[#680 'texture_depth_multisampled_2d']: s#137
[#680 'texture_multisampled_2d']: s#144
[#680 'texture_storage_1d']: s#145
[#680 'texture_storage_2d']: s#146
[#680 'texture_storage_2d_array']: s#147
[#680 'texture_storage_3d']: s#148
[#680 'true']: s#92
[#680 'u32']: s#98
[#680 'vec2']: s#103
[#680 'vec3']: s#104
[#680 'vec4']: s#105
[#680 '~']: s#69
[#680 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#680 /0[fh]/]: s#118
[#680 /0[iu]?/]: s#115
[#680 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#680 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#680 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#680 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#680 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#680 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#680 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#680 /[1-9][0-9]*[fh]/]: s#119
[#680 /[1-9][0-9]*[iu]?/]: s#116
[#681 '}']: r#404
[#682 ';']: s#683
[#683 '}']: r#405

=Goto:
[#0 diagnostic_directive]: #5
[#0 enable_directive]: #6
[#0 global_directive]: #4
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attribute]: #34
[#2 const_assert_statement]: #23
[#2 function_decl]: #22
[#2 function_decl/0.0]: #29
[#2 function_decl/0.0/0]: #33
[#2 global_constant_decl]: #19
[#2 global_constant_decl/1.0]: #26
[#2 global_constant_decl/1.0/0]: #32
[#2 global_decl]: #16
[#2 global_variable_decl]: #18
[#2 global_variable_decl/0.0]: #24
[#2 global_variable_decl/0.0/0]: #31
[#2 struct_decl]: #21
[#2 translation_unit/0.1]: #14
[#2 translation_unit/0.1/0]: #15
[#2 type_alias_decl]: #20
[#4 diagnostic_directive]: #5
[#4 enable_directive]: #6
[#4 global_directive]: #4
[#4 translation_unit/0.0/0]: #13
[#7 diagnostic_control]: #11
[#8 extension_name]: #9
[#12 severity_control_name]: #163
[#16 attribute]: #34
[#16 const_assert_statement]: #23
[#16 function_decl]: #22
[#16 function_decl/0.0]: #29
[#16 function_decl/0.0/0]: #33
[#16 global_constant_decl]: #19
[#16 global_constant_decl/1.0]: #26
[#16 global_constant_decl/1.0/0]: #32
[#16 global_decl]: #16
[#16 global_variable_decl]: #18
[#16 global_variable_decl/0.0]: #24
[#16 global_variable_decl/0.0/0]: #31
[#16 struct_decl]: #21
[#16 translation_unit/0.1/0]: #162
[#16 type_alias_decl]: #20
[#24 variable_decl]: #156
[#25 ident]: #155
[#25 optionally_typed_ident]: #154
[#27 ident]: #152
[#28 ident]: #151
[#29 function_header]: #149
[#30 additive_expression]: #63
[#30 array_type_specifier]: #100
[#30 binary_and_expression]: #60
[#30 binary_or_expression]: #61
[#30 binary_xor_expression]: #62
[#30 bitwise_expression]: #58
[#30 bool_literal]: #82
[#30 call_expression]: #74
[#30 callable]: #79
[#30 decimal_float_literal]: #90
[#30 decimal_int_literal]: #88
[#30 depth_texture_type]: #127
[#30 expression]: #54
[#30 float_literal]: #81
[#30 hex_float_literal]: #91
[#30 hex_int_literal]: #89
[#30 ident]: #73
[#30 int_literal]: #80
[#30 literal]: #75
[#30 mat_prefix]: #86
[#30 multiplicative_expression]: #65
[#30 multisampled_texture_type]: #129
[#30 paren_expression]: #76
[#30 primary_expression]: #72
[#30 relational_expression]: #55
[#30 sampled_texture_type]: #128
[#30 sampler_type]: #126
[#30 shift_expression]: #59
[#30 short_circuit_and_expression]: #57
[#30 short_circuit_or_expression]: #56
[#30 singular_expression]: #66
[#30 storage_texture_type]: #130
[#30 texture_and_sampler_types]: #102
[#30 type_specifier_without_ident]: #84
[#30 unary_expression]: #64
[#30 vec_prefix]: #85
[#34 attribute]: #34
[#34 function_decl/0.0/0]: #53
[#34 global_constant_decl/1.0/0]: #52
[#34 global_variable_decl/0.0/0]: #51
[#40 diagnostic_control]: #240
[#59 _greater_than]: #223
[#59 _greater_than_equal]: #225
[#59 _less_than]: #222
[#59 _less_than_equal]: #224
[#63 additive_operator]: #216
[#64 _shift_left]: #212
[#64 _shift_right]: #213
[#65 multiplicative_operator]: #208
[#67 array_type_specifier]: #100
[#67 bool_literal]: #82
[#67 call_expression]: #74
[#67 callable]: #79
[#67 decimal_float_literal]: #90
[#67 decimal_int_literal]: #88
[#67 depth_texture_type]: #127
[#67 float_literal]: #81
[#67 hex_float_literal]: #91
[#67 hex_int_literal]: #89
[#67 ident]: #73
[#67 int_literal]: #80
[#67 literal]: #75
[#67 mat_prefix]: #86
[#67 multisampled_texture_type]: #129
[#67 paren_expression]: #76
[#67 primary_expression]: #72
[#67 sampled_texture_type]: #128
[#67 sampler_type]: #126
[#67 singular_expression]: #66
[#67 storage_texture_type]: #130
[#67 texture_and_sampler_types]: #102
[#67 type_specifier_without_ident]: #84
[#67 unary_expression]: #207
[#67 vec_prefix]: #85
[#68 array_type_specifier]: #100
[#68 bool_literal]: #82
[#68 call_expression]: #74
[#68 callable]: #79
[#68 decimal_float_literal]: #90
[#68 decimal_int_literal]: #88
[#68 depth_texture_type]: #127
[#68 float_literal]: #81
[#68 hex_float_literal]: #91
[#68 hex_int_literal]: #89
[#68 ident]: #73
[#68 int_literal]: #80
[#68 literal]: #75
[#68 mat_prefix]: #86
[#68 multisampled_texture_type]: #129
[#68 paren_expression]: #76
[#68 primary_expression]: #72
[#68 sampled_texture_type]: #128
[#68 sampler_type]: #126
[#68 singular_expression]: #66
[#68 storage_texture_type]: #130
[#68 texture_and_sampler_types]: #102
[#68 type_specifier_without_ident]: #84
[#68 unary_expression]: #206
[#68 vec_prefix]: #85
[#69 array_type_specifier]: #100
[#69 bool_literal]: #82
[#69 call_expression]: #74
[#69 callable]: #79
[#69 decimal_float_literal]: #90
[#69 decimal_int_literal]: #88
[#69 depth_texture_type]: #127
[#69 float_literal]: #81
[#69 hex_float_literal]: #91
[#69 hex_int_literal]: #89
[#69 ident]: #73
[#69 int_literal]: #80
[#69 literal]: #75
[#69 mat_prefix]: #86
[#69 multisampled_texture_type]: #129
[#69 paren_expression]: #76
[#69 primary_expression]: #72
[#69 sampled_texture_type]: #128
[#69 sampler_type]: #126
[#69 singular_expression]: #66
[#69 storage_texture_type]: #130
[#69 texture_and_sampler_types]: #102
[#69 type_specifier_without_ident]: #84
[#69 unary_expression]: #205
[#69 vec_prefix]: #85
[#70 array_type_specifier]: #100
[#70 bool_literal]: #82
[#70 call_expression]: #74
[#70 callable]: #79
[#70 decimal_float_literal]: #90
[#70 decimal_int_literal]: #88
[#70 depth_texture_type]: #127
[#70 float_literal]: #81
[#70 hex_float_literal]: #91
[#70 hex_int_literal]: #89
[#70 ident]: #73
[#70 int_literal]: #80
[#70 literal]: #75
[#70 mat_prefix]: #86
[#70 multisampled_texture_type]: #129
[#70 paren_expression]: #76
[#70 primary_expression]: #72
[#70 sampled_texture_type]: #128
[#70 sampler_type]: #126
[#70 singular_expression]: #66
[#70 storage_texture_type]: #130
[#70 texture_and_sampler_types]: #102
[#70 type_specifier_without_ident]: #84
[#70 unary_expression]: #204
[#70 vec_prefix]: #85
[#71 array_type_specifier]: #100
[#71 bool_literal]: #82
[#71 call_expression]: #74
[#71 callable]: #79
[#71 decimal_float_literal]: #90
[#71 decimal_int_literal]: #88
[#71 depth_texture_type]: #127
[#71 float_literal]: #81
[#71 hex_float_literal]: #91
[#71 hex_int_literal]: #89
[#71 ident]: #73
[#71 int_literal]: #80
[#71 literal]: #75
[#71 mat_prefix]: #86
[#71 multisampled_texture_type]: #129
[#71 paren_expression]: #76
[#71 primary_expression]: #72
[#71 sampled_texture_type]: #128
[#71 sampler_type]: #126
[#71 singular_expression]: #66
[#71 storage_texture_type]: #130
[#71 texture_and_sampler_types]: #102
[#71 type_specifier_without_ident]: #84
[#71 unary_expression]: #203
[#71 vec_prefix]: #85
[#72 component_or_swizzle_specifier]: #200
[#72 singular_expression/0.1]: #199
[#77 _disambiguate_template]: #198
[#79 argument_expression_list]: #196
[#83 additive_expression]: #63
[#83 array_type_specifier]: #100
[#83 binary_and_expression]: #60
[#83 binary_or_expression]: #61
[#83 binary_xor_expression]: #62
[#83 bitwise_expression]: #58
[#83 bool_literal]: #82
[#83 call_expression]: #74
[#83 callable]: #79
[#83 decimal_float_literal]: #90
[#83 decimal_int_literal]: #88
[#83 depth_texture_type]: #127
[#83 expression]: #195
[#83 float_literal]: #81
[#83 hex_float_literal]: #91
[#83 hex_int_literal]: #89
[#83 ident]: #73
[#83 int_literal]: #80
[#83 literal]: #75
[#83 mat_prefix]: #86
[#83 multiplicative_expression]: #65
[#83 multisampled_texture_type]: #129
[#83 paren_expression]: #76
[#83 primary_expression]: #72
[#83 relational_expression]: #55
[#83 sampled_texture_type]: #128
[#83 sampler_type]: #126
[#83 shift_expression]: #59
[#83 short_circuit_and_expression]: #57
[#83 short_circuit_or_expression]: #56
[#83 singular_expression]: #66
[#83 storage_texture_type]: #130
[#83 texture_and_sampler_types]: #102
[#83 type_specifier_without_ident]: #84
[#83 unary_expression]: #64
[#83 vec_prefix]: #85
[#85 _disambiguate_template]: #194
[#86 _disambiguate_template]: #193
[#87 _disambiguate_template]: #192
[#99 _disambiguate_template]: #191
[#101 _disambiguate_template]: #190
[#128 _disambiguate_template]: #189
[#129 _disambiguate_template]: #188
[#130 _disambiguate_template]: #187
[#149 attribute]: #186
[#149 compound_statement]: #183
[#149 compound_statement/0.0]: #184
[#149 compound_statement/0.0/0]: #185
[#150 ident]: #182
[#151 struct_body_decl]: #180
[#153 ident]: #155
[#153 optionally_typed_ident]: #178
[#155 optionally_typed_ident/0.1]: #175
[#156 global_variable_decl/0.2]: #173
[#157 _disambiguate_template]: #171
[#170 diagnostic_rule_name]: #332
[#171 _template_args_start]: #331
[#171 variable_decl/0.2]: #329
[#171 variable_qualifier]: #330
[#174 additive_expression]: #63
[#174 array_type_specifier]: #100
[#174 binary_and_expression]: #60
[#174 binary_or_expression]: #61
[#174 binary_xor_expression]: #62
[#174 bitwise_expression]: #58
[#174 bool_literal]: #82
[#174 call_expression]: #74
[#174 callable]: #79
[#174 decimal_float_literal]: #90
[#174 decimal_int_literal]: #88
[#174 depth_texture_type]: #127
[#174 expression]: #328
[#174 float_literal]: #81
[#174 hex_float_literal]: #91
[#174 hex_int_literal]: #89
[#174 ident]: #73
[#174 int_literal]: #80
[#174 literal]: #75
[#174 mat_prefix]: #86
[#174 multiplicative_expression]: #65
[#174 multisampled_texture_type]: #129
[#174 paren_expression]: #76
[#174 primary_expression]: #72
[#174 relational_expression]: #55
[#174 sampled_texture_type]: #128
[#174 sampler_type]: #126
[#174 shift_expression]: #59
[#174 short_circuit_and_expression]: #57
[#174 short_circuit_or_expression]: #56
[#174 singular_expression]: #66
[#174 storage_texture_type]: #130
[#174 texture_and_sampler_types]: #102
[#174 type_specifier_without_ident]: #84
[#174 unary_expression]: #64
[#174 vec_prefix]: #85
[#176 array_type_specifier]: #100
[#176 depth_texture_type]: #127
[#176 ident]: #319
[#176 mat_prefix]: #322
[#176 multisampled_texture_type]: #129
[#176 sampled_texture_type]: #128
[#176 sampler_type]: #126
[#176 storage_texture_type]: #130
[#176 texture_and_sampler_types]: #102
[#176 type_specifier]: #327
[#176 type_specifier_without_ident]: #320
[#176 vec_prefix]: #321
[#177 additive_expression]: #63
[#177 array_type_specifier]: #100
[#177 binary_and_expression]: #60
[#177 binary_or_expression]: #61
[#177 binary_xor_expression]: #62
[#177 bitwise_expression]: #58
[#177 bool_literal]: #82
[#177 call_expression]: #74
[#177 callable]: #79
[#177 decimal_float_literal]: #90
[#177 decimal_int_literal]: #88
[#177 depth_texture_type]: #127
[#177 expression]: #326
[#177 float_literal]: #81
[#177 hex_float_literal]: #91
[#177 hex_int_literal]: #89
[#177 ident]: #73
[#177 int_literal]: #80
[#177 literal]: #75
[#177 mat_prefix]: #86
[#177 multiplicative_expression]: #65
[#177 multisampled_texture_type]: #129
[#177 paren_expression]: #76
[#177 primary_expression]: #72
[#177 relational_expression]: #55
[#177 sampled_texture_type]: #128
[#177 sampler_type]: #126
[#177 shift_expression]: #59
[#177 short_circuit_and_expression]: #57
[#177 short_circuit_or_expression]: #56
[#177 singular_expression]: #66
[#177 storage_texture_type]: #130
[#177 texture_and_sampler_types]: #102
[#177 type_specifier_without_ident]: #84
[#177 unary_expression]: #64
[#177 vec_prefix]: #85
[#178 global_constant_decl/1.3]: #324
[#179 array_type_specifier]: #100
[#179 depth_texture_type]: #127
[#179 ident]: #319
[#179 mat_prefix]: #322
[#179 multisampled_texture_type]: #129
[#179 sampled_texture_type]: #128
[#179 sampler_type]: #126
[#179 storage_texture_type]: #130
[#179 texture_and_sampler_types]: #102
[#179 type_specifier]: #318
[#179 type_specifier_without_ident]: #320
[#179 vec_prefix]: #321
[#181 attribute]: #317
[#181 struct_member]: #314
[#181 struct_member/0.0]: #315
[#181 struct_member/0.0/0]: #316
[#186 attribute]: #186
[#186 compound_statement/0.0/0]: #311
[#187 _template_args_start]: #310
[#188 _template_args_start]: #309
[#189 _template_args_start]: #308
[#190 _template_args_start]: #307
[#191 _template_args_start]: #306
[#192 _template_args_start]: #305
[#193 _template_args_start]: #304
[#194 _template_args_start]: #303
[#197 additive_expression]: #63
[#197 argument_expression_list/0.1]: #299
[#197 array_type_specifier]: #100
[#197 binary_and_expression]: #60
[#197 binary_or_expression]: #61
[#197 binary_xor_expression]: #62
[#197 bitwise_expression]: #58
[#197 bool_literal]: #82
[#197 call_expression]: #74
[#197 callable]: #79
[#197 decimal_float_literal]: #90
[#197 decimal_int_literal]: #88
[#197 depth_texture_type]: #127
[#197 expression]: #301
[#197 expression_comma_list]: #300
[#197 float_literal]: #81
[#197 hex_float_literal]: #91
[#197 hex_int_literal]: #89
[#197 ident]: #73
[#197 int_literal]: #80
[#197 literal]: #75
[#197 mat_prefix]: #86
[#197 multiplicative_expression]: #65
[#197 multisampled_texture_type]: #129
[#197 paren_expression]: #76
[#197 primary_expression]: #72
[#197 relational_expression]: #55
[#197 sampled_texture_type]: #128
[#197 sampler_type]: #126
[#197 shift_expression]: #59
[#197 short_circuit_and_expression]: #57
[#197 short_circuit_or_expression]: #56
[#197 singular_expression]: #66
[#197 storage_texture_type]: #130
[#197 texture_and_sampler_types]: #102
[#197 type_specifier_without_ident]: #84
[#197 unary_expression]: #64
[#197 vec_prefix]: #85
[#198 _template_args_start]: #297
[#201 additive_expression]: #63
[#201 array_type_specifier]: #100
[#201 binary_and_expression]: #60
[#201 binary_or_expression]: #61
[#201 binary_xor_expression]: #62
[#201 bitwise_expression]: #58
[#201 bool_literal]: #82
[#201 call_expression]: #74
[#201 callable]: #79
[#201 decimal_float_literal]: #90
[#201 decimal_int_literal]: #88
[#201 depth_texture_type]: #127
[#201 expression]: #296
[#201 float_literal]: #81
[#201 hex_float_literal]: #91
[#201 hex_int_literal]: #89
[#201 ident]: #73
[#201 int_literal]: #80
[#201 literal]: #75
[#201 mat_prefix]: #86
[#201 multiplicative_expression]: #65
[#201 multisampled_texture_type]: #129
[#201 paren_expression]: #76
[#201 primary_expression]: #72
[#201 relational_expression]: #55
[#201 sampled_texture_type]: #128
[#201 sampler_type]: #126
[#201 shift_expression]: #59
[#201 short_circuit_and_expression]: #57
[#201 short_circuit_or_expression]: #56
[#201 singular_expression]: #66
[#201 storage_texture_type]: #130
[#201 texture_and_sampler_types]: #102
[#201 type_specifier_without_ident]: #84
[#201 unary_expression]: #64
[#201 vec_prefix]: #85
[#202 member_ident]: #285
[#202 swizzle_name]: #286
[#208 array_type_specifier]: #100
[#208 bool_literal]: #82
[#208 call_expression]: #74
[#208 callable]: #79
[#208 decimal_float_literal]: #90
[#208 decimal_int_literal]: #88
[#208 depth_texture_type]: #127
[#208 float_literal]: #81
[#208 hex_float_literal]: #91
[#208 hex_int_literal]: #89
[#208 ident]: #73
[#208 int_literal]: #80
[#208 literal]: #75
[#208 mat_prefix]: #86
[#208 multisampled_texture_type]: #129
[#208 paren_expression]: #76
[#208 primary_expression]: #72
[#208 sampled_texture_type]: #128
[#208 sampler_type]: #126
[#208 singular_expression]: #66
[#208 storage_texture_type]: #130
[#208 texture_and_sampler_types]: #102
[#208 type_specifier_without_ident]: #84
[#208 unary_expression]: #284
[#208 vec_prefix]: #85
[#212 array_type_specifier]: #100
[#212 bool_literal]: #82
[#212 call_expression]: #74
[#212 callable]: #79
[#212 decimal_float_literal]: #90
[#212 decimal_int_literal]: #88
[#212 depth_texture_type]: #127
[#212 float_literal]: #81
[#212 hex_float_literal]: #91
[#212 hex_int_literal]: #89
[#212 ident]: #73
[#212 int_literal]: #80
[#212 literal]: #75
[#212 mat_prefix]: #86
[#212 multisampled_texture_type]: #129
[#212 paren_expression]: #76
[#212 primary_expression]: #72
[#212 sampled_texture_type]: #128
[#212 sampler_type]: #126
[#212 singular_expression]: #66
[#212 storage_texture_type]: #130
[#212 texture_and_sampler_types]: #102
[#212 type_specifier_without_ident]: #84
[#212 unary_expression]: #283
[#212 vec_prefix]: #85
[#213 array_type_specifier]: #100
[#213 bool_literal]: #82
[#213 call_expression]: #74
[#213 callable]: #79
[#213 decimal_float_literal]: #90
[#213 decimal_int_literal]: #88
[#213 depth_texture_type]: #127
[#213 float_literal]: #81
[#213 hex_float_literal]: #91
[#213 hex_int_literal]: #89
[#213 ident]: #73
[#213 int_literal]: #80
[#213 literal]: #75
[#213 mat_prefix]: #86
[#213 multisampled_texture_type]: #129
[#213 paren_expression]: #76
[#213 primary_expression]: #72
[#213 sampled_texture_type]: #128
[#213 sampler_type]: #126
[#213 singular_expression]: #66
[#213 storage_texture_type]: #130
[#213 texture_and_sampler_types]: #102
[#213 type_specifier_without_ident]: #84
[#213 unary_expression]: #282
[#213 vec_prefix]: #85
[#216 array_type_specifier]: #100
[#216 bool_literal]: #82
[#216 call_expression]: #74
[#216 callable]: #79
[#216 decimal_float_literal]: #90
[#216 decimal_int_literal]: #88
[#216 depth_texture_type]: #127
[#216 float_literal]: #81
[#216 hex_float_literal]: #91
[#216 hex_int_literal]: #89
[#216 ident]: #73
[#216 int_literal]: #80
[#216 literal]: #75
[#216 mat_prefix]: #86
[#216 multiplicative_expression]: #280
[#216 multisampled_texture_type]: #129
[#216 paren_expression]: #76
[#216 primary_expression]: #72
[#216 sampled_texture_type]: #128
[#216 sampler_type]: #126
[#216 singular_expression]: #66
[#216 storage_texture_type]: #130
[#216 texture_and_sampler_types]: #102
[#216 type_specifier_without_ident]: #84
[#216 unary_expression]: #281
[#216 vec_prefix]: #85
[#219 array_type_specifier]: #100
[#219 bool_literal]: #82
[#219 call_expression]: #74
[#219 callable]: #79
[#219 decimal_float_literal]: #90
[#219 decimal_int_literal]: #88
[#219 depth_texture_type]: #127
[#219 float_literal]: #81
[#219 hex_float_literal]: #91
[#219 hex_int_literal]: #89
[#219 ident]: #73
[#219 int_literal]: #80
[#219 literal]: #75
[#219 mat_prefix]: #86
[#219 multisampled_texture_type]: #129
[#219 paren_expression]: #76
[#219 primary_expression]: #72
[#219 sampled_texture_type]: #128
[#219 sampler_type]: #126
[#219 singular_expression]: #66
[#219 storage_texture_type]: #130
[#219 texture_and_sampler_types]: #102
[#219 type_specifier_without_ident]: #84
[#219 unary_expression]: #279
[#219 vec_prefix]: #85
[#220 array_type_specifier]: #100
[#220 bool_literal]: #82
[#220 call_expression]: #74
[#220 callable]: #79
[#220 decimal_float_literal]: #90
[#220 decimal_int_literal]: #88
[#220 depth_texture_type]: #127
[#220 float_literal]: #81
[#220 hex_float_literal]: #91
[#220 hex_int_literal]: #89
[#220 ident]: #73
[#220 int_literal]: #80
[#220 literal]: #75
[#220 mat_prefix]: #86
[#220 multisampled_texture_type]: #129
[#220 paren_expression]: #76
[#220 primary_expression]: #72
[#220 sampled_texture_type]: #128
[#220 sampler_type]: #126
[#220 singular_expression]: #66
[#220 storage_texture_type]: #130
[#220 texture_and_sampler_types]: #102
[#220 type_specifier_without_ident]: #84
[#220 unary_expression]: #278
[#220 vec_prefix]: #85
[#221 array_type_specifier]: #100
[#221 bool_literal]: #82
[#221 call_expression]: #74
[#221 callable]: #79
[#221 decimal_float_literal]: #90
[#221 decimal_int_literal]: #88
[#221 depth_texture_type]: #127
[#221 float_literal]: #81
[#221 hex_float_literal]: #91
[#221 hex_int_literal]: #89
[#221 ident]: #73
[#221 int_literal]: #80
[#221 literal]: #75
[#221 mat_prefix]: #86
[#221 multisampled_texture_type]: #129
[#221 paren_expression]: #76
[#221 primary_expression]: #72
[#221 sampled_texture_type]: #128
[#221 sampler_type]: #126
[#221 singular_expression]: #66
[#221 storage_texture_type]: #130
[#221 texture_and_sampler_types]: #102
[#221 type_specifier_without_ident]: #84
[#221 unary_expression]: #277
[#221 vec_prefix]: #85
[#222 additive_expression]: #63
[#222 array_type_specifier]: #100
[#222 bool_literal]: #82
[#222 call_expression]: #74
[#222 callable]: #79
[#222 decimal_float_literal]: #90
[#222 decimal_int_literal]: #88
[#222 depth_texture_type]: #127
[#222 float_literal]: #81
[#222 hex_float_literal]: #91
[#222 hex_int_literal]: #89
[#222 ident]: #73
[#222 int_literal]: #80
[#222 literal]: #75
[#222 mat_prefix]: #86
[#222 multiplicative_expression]: #65
[#222 multisampled_texture_type]: #129
[#222 paren_expression]: #76
[#222 primary_expression]: #72
[#222 sampled_texture_type]: #128
[#222 sampler_type]: #126
[#222 shift_expression]: #276
[#222 singular_expression]: #66
[#222 storage_texture_type]: #130
[#222 texture_and_sampler_types]: #102
[#222 type_specifier_without_ident]: #84
[#222 unary_expression]: #269
[#222 vec_prefix]: #85
[#223 additive_expression]: #63
[#223 array_type_specifier]: #100
[#223 bool_literal]: #82
[#223 call_expression]: #74
[#223 callable]: #79
[#223 decimal_float_literal]: #90
[#223 decimal_int_literal]: #88
[#223 depth_texture_type]: #127
[#223 float_literal]: #81
[#223 hex_float_literal]: #91
[#223 hex_int_literal]: #89
[#223 ident]: #73
[#223 int_literal]: #80
[#223 literal]: #75
[#223 mat_prefix]: #86
[#223 multiplicative_expression]: #65
[#223 multisampled_texture_type]: #129
[#223 paren_expression]: #76
[#223 primary_expression]: #72
[#223 sampled_texture_type]: #128
[#223 sampler_type]: #126
[#223 shift_expression]: #275
[#223 singular_expression]: #66
[#223 storage_texture_type]: #130
[#223 texture_and_sampler_types]: #102
[#223 type_specifier_without_ident]: #84
[#223 unary_expression]: #269
[#223 vec_prefix]: #85
[#224 additive_expression]: #63
[#224 array_type_specifier]: #100
[#224 bool_literal]: #82
[#224 call_expression]: #74
[#224 callable]: #79
[#224 decimal_float_literal]: #90
[#224 decimal_int_literal]: #88
[#224 depth_texture_type]: #127
[#224 float_literal]: #81
[#224 hex_float_literal]: #91
[#224 hex_int_literal]: #89
[#224 ident]: #73
[#224 int_literal]: #80
[#224 literal]: #75
[#224 mat_prefix]: #86
[#224 multiplicative_expression]: #65
[#224 multisampled_texture_type]: #129
[#224 paren_expression]: #76
[#224 primary_expression]: #72
[#224 sampled_texture_type]: #128
[#224 sampler_type]: #126
[#224 shift_expression]: #274
[#224 singular_expression]: #66
[#224 storage_texture_type]: #130
[#224 texture_and_sampler_types]: #102
[#224 type_specifier_without_ident]: #84
[#224 unary_expression]: #269
[#224 vec_prefix]: #85
[#225 additive_expression]: #63
[#225 array_type_specifier]: #100
[#225 bool_literal]: #82
[#225 call_expression]: #74
[#225 callable]: #79
[#225 decimal_float_literal]: #90
[#225 decimal_int_literal]: #88
[#225 depth_texture_type]: #127
[#225 float_literal]: #81
[#225 hex_float_literal]: #91
[#225 hex_int_literal]: #89
[#225 ident]: #73
[#225 int_literal]: #80
[#225 literal]: #75
[#225 mat_prefix]: #86
[#225 multiplicative_expression]: #65
[#225 multisampled_texture_type]: #129
[#225 paren_expression]: #76
[#225 primary_expression]: #72
[#225 sampled_texture_type]: #128
[#225 sampler_type]: #126
[#225 shift_expression]: #273
[#225 singular_expression]: #66
[#225 storage_texture_type]: #130
[#225 texture_and_sampler_types]: #102
[#225 type_specifier_without_ident]: #84
[#225 unary_expression]: #269
[#225 vec_prefix]: #85
[#226 additive_expression]: #63
[#226 array_type_specifier]: #100
[#226 bool_literal]: #82
[#226 call_expression]: #74
[#226 callable]: #79
[#226 decimal_float_literal]: #90
[#226 decimal_int_literal]: #88
[#226 depth_texture_type]: #127
[#226 float_literal]: #81
[#226 hex_float_literal]: #91
[#226 hex_int_literal]: #89
[#226 ident]: #73
[#226 int_literal]: #80
[#226 literal]: #75
[#226 mat_prefix]: #86
[#226 multiplicative_expression]: #65
[#226 multisampled_texture_type]: #129
[#226 paren_expression]: #76
[#226 primary_expression]: #72
[#226 sampled_texture_type]: #128
[#226 sampler_type]: #126
[#226 shift_expression]: #272
[#226 singular_expression]: #66
[#226 storage_texture_type]: #130
[#226 texture_and_sampler_types]: #102
[#226 type_specifier_without_ident]: #84
[#226 unary_expression]: #269
[#226 vec_prefix]: #85
[#227 additive_expression]: #63
[#227 array_type_specifier]: #100
[#227 bool_literal]: #82
[#227 call_expression]: #74
[#227 callable]: #79
[#227 decimal_float_literal]: #90
[#227 decimal_int_literal]: #88
[#227 depth_texture_type]: #127
[#227 float_literal]: #81
[#227 hex_float_literal]: #91
[#227 hex_int_literal]: #89
[#227 ident]: #73
[#227 int_literal]: #80
[#227 literal]: #75
[#227 mat_prefix]: #86
[#227 multiplicative_expression]: #65
[#227 multisampled_texture_type]: #129
[#227 paren_expression]: #76
[#227 primary_expression]: #72
[#227 sampled_texture_type]: #128
[#227 sampler_type]: #126
[#227 shift_expression]: #271
[#227 singular_expression]: #66
[#227 storage_texture_type]: #130
[#227 texture_and_sampler_types]: #102
[#227 type_specifier_without_ident]: #84
[#227 unary_expression]: #269
[#227 vec_prefix]: #85
[#232 additive_expression]: #63
[#232 array_type_specifier]: #100
[#232 bool_literal]: #82
[#232 call_expression]: #74
[#232 callable]: #79
[#232 decimal_float_literal]: #90
[#232 decimal_int_literal]: #88
[#232 depth_texture_type]: #127
[#232 float_literal]: #81
[#232 hex_float_literal]: #91
[#232 hex_int_literal]: #89
[#232 ident]: #73
[#232 int_literal]: #80
[#232 literal]: #75
[#232 mat_prefix]: #86
[#232 multiplicative_expression]: #65
[#232 multisampled_texture_type]: #129
[#232 paren_expression]: #76
[#232 primary_expression]: #72
[#232 relational_expression]: #270
[#232 sampled_texture_type]: #128
[#232 sampler_type]: #126
[#232 shift_expression]: #59
[#232 singular_expression]: #66
[#232 storage_texture_type]: #130
[#232 texture_and_sampler_types]: #102
[#232 type_specifier_without_ident]: #84
[#232 unary_expression]: #269
[#232 vec_prefix]: #85
[#233 additive_expression]: #63
[#233 array_type_specifier]: #100
[#233 bool_literal]: #82
[#233 call_expression]: #74
[#233 callable]: #79
[#233 decimal_float_literal]: #90
[#233 decimal_int_literal]: #88
[#233 depth_texture_type]: #127
[#233 float_literal]: #81
[#233 hex_float_literal]: #91
[#233 hex_int_literal]: #89
[#233 ident]: #73
[#233 int_literal]: #80
[#233 literal]: #75
[#233 mat_prefix]: #86
[#233 multiplicative_expression]: #65
[#233 multisampled_texture_type]: #129
[#233 paren_expression]: #76
[#233 primary_expression]: #72
[#233 relational_expression]: #268
[#233 sampled_texture_type]: #128
[#233 sampler_type]: #126
[#233 shift_expression]: #59
[#233 singular_expression]: #66
[#233 storage_texture_type]: #130
[#233 texture_and_sampler_types]: #102
[#233 type_specifier_without_ident]: #84
[#233 unary_expression]: #269
[#233 vec_prefix]: #85
[#234 additive_expression]: #63
[#234 array_type_specifier]: #100
[#234 binary_and_expression]: #60
[#234 binary_or_expression]: #61
[#234 binary_xor_expression]: #62
[#234 bitwise_expression]: #58
[#234 bool_literal]: #82
[#234 call_expression]: #74
[#234 callable]: #79
[#234 decimal_float_literal]: #90
[#234 decimal_int_literal]: #88
[#234 depth_texture_type]: #127
[#234 expression]: #267
[#234 float_literal]: #81
[#234 hex_float_literal]: #91
[#234 hex_int_literal]: #89
[#234 ident]: #73
[#234 int_literal]: #80
[#234 literal]: #75
[#234 mat_prefix]: #86
[#234 multiplicative_expression]: #65
[#234 multisampled_texture_type]: #129
[#234 paren_expression]: #76
[#234 primary_expression]: #72
[#234 relational_expression]: #55
[#234 sampled_texture_type]: #128
[#234 sampler_type]: #126
[#234 shift_expression]: #59
[#234 short_circuit_and_expression]: #57
[#234 short_circuit_or_expression]: #56
[#234 singular_expression]: #66
[#234 storage_texture_type]: #130
[#234 texture_and_sampler_types]: #102
[#234 type_specifier_without_ident]: #84
[#234 unary_expression]: #64
[#234 vec_prefix]: #85
[#235 additive_expression]: #63
[#235 array_type_specifier]: #100
[#235 binary_and_expression]: #60
[#235 binary_or_expression]: #61
[#235 binary_xor_expression]: #62
[#235 bitwise_expression]: #58
[#235 bool_literal]: #82
[#235 call_expression]: #74
[#235 callable]: #79
[#235 decimal_float_literal]: #90
[#235 decimal_int_literal]: #88
[#235 depth_texture_type]: #127
[#235 expression]: #266
[#235 float_literal]: #81
[#235 hex_float_literal]: #91
[#235 hex_int_literal]: #89
[#235 ident]: #73
[#235 int_literal]: #80
[#235 literal]: #75
[#235 mat_prefix]: #86
[#235 multiplicative_expression]: #65
[#235 multisampled_texture_type]: #129
[#235 paren_expression]: #76
[#235 primary_expression]: #72
[#235 relational_expression]: #55
[#235 sampled_texture_type]: #128
[#235 sampler_type]: #126
[#235 shift_expression]: #59
[#235 short_circuit_and_expression]: #57
[#235 short_circuit_or_expression]: #56
[#235 singular_expression]: #66
[#235 storage_texture_type]: #130
[#235 texture_and_sampler_types]: #102
[#235 type_specifier_without_ident]: #84
[#235 unary_expression]: #64
[#235 vec_prefix]: #85
[#236 additive_expression]: #63
[#236 array_type_specifier]: #100
[#236 binary_and_expression]: #60
[#236 binary_or_expression]: #61
[#236 binary_xor_expression]: #62
[#236 bitwise_expression]: #58
[#236 bool_literal]: #82
[#236 call_expression]: #74
[#236 callable]: #79
[#236 decimal_float_literal]: #90
[#236 decimal_int_literal]: #88
[#236 depth_texture_type]: #127
[#236 expression]: #265
[#236 float_literal]: #81
[#236 hex_float_literal]: #91
[#236 hex_int_literal]: #89
[#236 ident]: #73
[#236 int_literal]: #80
[#236 literal]: #75
[#236 mat_prefix]: #86
[#236 multiplicative_expression]: #65
[#236 multisampled_texture_type]: #129
[#236 paren_expression]: #76
[#236 primary_expression]: #72
[#236 relational_expression]: #55
[#236 sampled_texture_type]: #128
[#236 sampler_type]: #126
[#236 shift_expression]: #59
[#236 short_circuit_and_expression]: #57
[#236 short_circuit_or_expression]: #56
[#236 singular_expression]: #66
[#236 storage_texture_type]: #130
[#236 texture_and_sampler_types]: #102
[#236 type_specifier_without_ident]: #84
[#236 unary_expression]: #64
[#236 vec_prefix]: #85
[#237 interpolation_type_name]: #261
[#238 additive_expression]: #63
[#238 array_type_specifier]: #100
[#238 binary_and_expression]: #60
[#238 binary_or_expression]: #61
[#238 binary_xor_expression]: #62
[#238 bitwise_expression]: #58
[#238 bool_literal]: #82
[#238 call_expression]: #74
[#238 callable]: #79
[#238 decimal_float_literal]: #90
[#238 decimal_int_literal]: #88
[#238 depth_texture_type]: #127
[#238 expression]: #260
[#238 float_literal]: #81
[#238 hex_float_literal]: #91
[#238 hex_int_literal]: #89
[#238 ident]: #73
[#238 int_literal]: #80
[#238 literal]: #75
[#238 mat_prefix]: #86
[#238 multiplicative_expression]: #65
[#238 multisampled_texture_type]: #129
[#238 paren_expression]: #76
[#238 primary_expression]: #72
[#238 relational_expression]: #55
[#238 sampled_texture_type]: #128
[#238 sampler_type]: #126
[#238 shift_expression]: #59
[#238 short_circuit_and_expression]: #57
[#238 short_circuit_or_expression]: #56
[#238 singular_expression]: #66
[#238 storage_texture_type]: #130
[#238 texture_and_sampler_types]: #102
[#238 type_specifier_without_ident]: #84
[#238 unary_expression]: #64
[#238 vec_prefix]: #85
[#239 additive_expression]: #63
[#239 array_type_specifier]: #100
[#239 binary_and_expression]: #60
[#239 binary_or_expression]: #61
[#239 binary_xor_expression]: #62
[#239 bitwise_expression]: #58
[#239 bool_literal]: #82
[#239 call_expression]: #74
[#239 callable]: #79
[#239 decimal_float_literal]: #90
[#239 decimal_int_literal]: #88
[#239 depth_texture_type]: #127
[#239 expression]: #259
[#239 float_literal]: #81
[#239 hex_float_literal]: #91
[#239 hex_int_literal]: #89
[#239 ident]: #73
[#239 int_literal]: #80
[#239 literal]: #75
[#239 mat_prefix]: #86
[#239 multiplicative_expression]: #65
[#239 multisampled_texture_type]: #129
[#239 paren_expression]: #76
[#239 primary_expression]: #72
[#239 relational_expression]: #55
[#239 sampled_texture_type]: #128
[#239 sampler_type]: #126
[#239 shift_expression]: #59
[#239 short_circuit_and_expression]: #57
[#239 short_circuit_or_expression]: #56
[#239 singular_expression]: #66
[#239 storage_texture_type]: #130
[#239 texture_and_sampler_types]: #102
[#239 type_specifier_without_ident]: #84
[#239 unary_expression]: #64
[#239 vec_prefix]: #85
[#241 builtin_value_name]: #246
[#242 additive_expression]: #63
[#242 array_type_specifier]: #100
[#242 binary_and_expression]: #60
[#242 binary_or_expression]: #61
[#242 binary_xor_expression]: #62
[#242 bitwise_expression]: #58
[#242 bool_literal]: #82
[#242 call_expression]: #74
[#242 callable]: #79
[#242 decimal_float_literal]: #90
[#242 decimal_int_literal]: #88
[#242 depth_texture_type]: #127
[#242 expression]: #245
[#242 float_literal]: #81
[#242 hex_float_literal]: #91
[#242 hex_int_literal]: #89
[#242 ident]: #73
[#242 int_literal]: #80
[#242 literal]: #75
[#242 mat_prefix]: #86
[#242 multiplicative_expression]: #65
[#242 multisampled_texture_type]: #129
[#242 paren_expression]: #76
[#242 primary_expression]: #72
[#242 relational_expression]: #55
[#242 sampled_texture_type]: #128
[#242 sampler_type]: #126
[#242 shift_expression]: #59
[#242 short_circuit_and_expression]: #57
[#242 short_circuit_or_expression]: #56
[#242 singular_expression]: #66
[#242 storage_texture_type]: #130
[#242 texture_and_sampler_types]: #102
[#242 type_specifier_without_ident]: #84
[#242 unary_expression]: #64
[#242 vec_prefix]: #85
[#243 additive_expression]: #63
[#243 array_type_specifier]: #100
[#243 binary_and_expression]: #60
[#243 binary_or_expression]: #61
[#243 binary_xor_expression]: #62
[#243 bitwise_expression]: #58
[#243 bool_literal]: #82
[#243 call_expression]: #74
[#243 callable]: #79
[#243 decimal_float_literal]: #90
[#243 decimal_int_literal]: #88
[#243 depth_texture_type]: #127
[#243 expression]: #244
[#243 float_literal]: #81
[#243 hex_float_literal]: #91
[#243 hex_int_literal]: #89
[#243 ident]: #73
[#243 int_literal]: #80
[#243 literal]: #75
[#243 mat_prefix]: #86
[#243 multiplicative_expression]: #65
[#243 multisampled_texture_type]: #129
[#243 paren_expression]: #76
[#243 primary_expression]: #72
[#243 relational_expression]: #55
[#243 sampled_texture_type]: #128
[#243 sampler_type]: #126
[#243 shift_expression]: #59
[#243 short_circuit_and_expression]: #57
[#243 short_circuit_or_expression]: #56
[#243 singular_expression]: #66
[#243 storage_texture_type]: #130
[#243 texture_and_sampler_types]: #102
[#243 type_specifier_without_ident]: #84
[#243 unary_expression]: #64
[#243 vec_prefix]: #85
[#244 attrib_end]: #452
[#244 attrib_end/0.0]: #335
[#245 attrib_end]: #451
[#245 attrib_end/0.0]: #335
[#246 attrib_end]: #450
[#246 attrib_end/0.0]: #335
[#259 attrib_end]: #449
[#259 attrib_end/0.0]: #335
[#260 attrib_end]: #448
[#260 attrib_end/0.0]: #335
[#261 attrib_end]: #446
[#261 attrib_end/0.0]: #335
[#265 attrib_end]: #445
[#265 attrib_end/0.0]: #335
[#266 attrib_end]: #444
[#266 attrib_end/0.0]: #335
[#267 attrib_end]: #442
[#267 attrib_end/0.0]: #335
[#269 _shift_left]: #212
[#269 _shift_right]: #213
[#280 multiplicative_operator]: #208
[#285 component_or_swizzle_specifier]: #441
[#285 component_or_swizzle_specifier/1.2]: #440
[#286 component_or_swizzle_specifier]: #439
[#286 component_or_swizzle_specifier/2.2]: #438
[#297 array_type_specifier]: #100
[#297 depth_texture_type]: #127
[#297 ident]: #319
[#297 mat_prefix]: #322
[#297 multisampled_texture_type]: #129
[#297 sampled_texture_type]: #128
[#297 sampler_type]: #126
[#297 storage_texture_type]: #130
[#297 texture_and_sampler_types]: #102
[#297 type_specifier]: #436
[#297 type_specifier_without_ident]: #320
[#297 vec_prefix]: #321
[#301 expression_comma_list/0.1]: #431
[#301 expression_comma_list/0.1/0]: #432
[#301 expression_comma_list/0.1/0/0.0]: #433
[#303 array_type_specifier]: #100
[#303 depth_texture_type]: #127
[#303 ident]: #319
[#303 mat_prefix]: #322
[#303 multisampled_texture_type]: #129
[#303 sampled_texture_type]: #128
[#303 sampler_type]: #126
[#303 storage_texture_type]: #130
[#303 texture_and_sampler_types]: #102
[#303 type_specifier]: #430
[#303 type_specifier_without_ident]: #320
[#303 vec_prefix]: #321
[#304 array_type_specifier]: #100
[#304 depth_texture_type]: #127
[#304 ident]: #319
[#304 mat_prefix]: #322
[#304 multisampled_texture_type]: #129
[#304 sampled_texture_type]: #128
[#304 sampler_type]: #126
[#304 storage_texture_type]: #130
[#304 texture_and_sampler_types]: #102
[#304 type_specifier]: #429
[#304 type_specifier_without_ident]: #320
[#304 vec_prefix]: #321
[#305 array_type_specifier]: #100
[#305 depth_texture_type]: #127
[#305 ident]: #319
[#305 mat_prefix]: #322
[#305 multisampled_texture_type]: #129
[#305 sampled_texture_type]: #128
[#305 sampler_type]: #126
[#305 storage_texture_type]: #130
[#305 texture_and_sampler_types]: #102
[#305 type_specifier]: #428
[#305 type_specifier_without_ident]: #320
[#305 vec_prefix]: #321
[#306 address_space]: #427
[#307 array_type_specifier]: #100
[#307 depth_texture_type]: #127
[#307 ident]: #319
[#307 mat_prefix]: #322
[#307 multisampled_texture_type]: #129
[#307 sampled_texture_type]: #128
[#307 sampler_type]: #126
[#307 storage_texture_type]: #130
[#307 texture_and_sampler_types]: #102
[#307 type_specifier]: #426
[#307 type_specifier_without_ident]: #320
[#307 vec_prefix]: #321
[#308 array_type_specifier]: #100
[#308 depth_texture_type]: #127
[#308 ident]: #319
[#308 mat_prefix]: #322
[#308 multisampled_texture_type]: #129
[#308 sampled_texture_type]: #128
[#308 sampler_type]: #126
[#308 storage_texture_type]: #130
[#308 texture_and_sampler_types]: #102
[#308 type_specifier]: #425
[#308 type_specifier_without_ident]: #320
[#308 vec_prefix]: #321
[#309 array_type_specifier]: #100
[#309 depth_texture_type]: #127
[#309 ident]: #319
[#309 mat_prefix]: #322
[#309 multisampled_texture_type]: #129
[#309 sampled_texture_type]: #128
[#309 sampler_type]: #126
[#309 storage_texture_type]: #130
[#309 texture_and_sampler_types]: #102
[#309 type_specifier]: #424
[#309 type_specifier_without_ident]: #320
[#309 vec_prefix]: #321
[#310 texel_format]: #406
[#312 array_type_specifier]: #100
[#312 assignment_statement]: #390
[#312 attribute]: #401
[#312 break_statement]: #372
[#312 callable]: #384
[#312 compound_statement]: #376
[#312 compound_statement/0.0]: #184
[#312 compound_statement/0.0/0]: #185
[#312 compound_statement/0.2]: #360
[#312 compound_statement/0.2/0]: #361
[#312 const_assert_statement]: #377
[#312 continue_statement]: #373
[#312 core_lhs_expression]: #402
[#312 decrement_statement]: #392
[#312 depth_texture_type]: #127
[#312 for_statement]: #368
[#312 for_statement/0.0]: #382
[#312 for_statement/0.0/0]: #396
[#312 func_call_statement]: #370
[#312 ident]: #398
[#312 if_statement]: #365
[#312 if_statement/0.0]: #379
[#312 if_statement/0.0/0]: #393
[#312 increment_statement]: #391
[#312 lhs_expression]: #399
[#312 loop_statement]: #367
[#312 loop_statement/0.0]: #381
[#312 loop_statement/0.0/0]: #395
[#312 mat_prefix]: #86
[#312 multisampled_texture_type]: #129
[#312 return_statement]: #364
[#312 sampled_texture_type]: #128
[#312 sampler_type]: #126
[#312 statement]: #362
[#312 storage_texture_type]: #130
[#312 switch_statement]: #366
[#312 switch_statement/0.0]: #380
[#312 switch_statement/0.0/0]: #394
[#312 texture_and_sampler_types]: #102
[#312 type_specifier_without_ident]: #84
[#312 variable_decl]: #385
[#312 variable_statement]: #371
[#312 variable_updating_statement]: #375
[#312 vec_prefix]: #85
[#312 while_statement]: #369
[#312 while_statement/0.0]: #383
[#312 while_statement/0.0/0]: #397
[#313 attribute]: #359
[#313 function_header/0.3]: #354
[#313 param]: #356
[#313 param/0.0]: #357
[#313 param/0.0/0]: #358
[#313 param_list]: #355
[#314 struct_body_decl/0.2]: #350
[#314 struct_body_decl/0.2/0]: #351
[#314 struct_body_decl/0.2/0/0.0]: #352
[#315 member_ident]: #349
[#317 attribute]: #317
[#317 struct_member/0.0/0]: #348
[#321 _disambiguate_template]: #347
[#322 _disambiguate_template]: #346
[#323 _disambiguate_template]: #345
[#325 additive_expression]: #63
[#325 array_type_specifier]: #100
[#325 binary_and_expression]: #60
[#325 binary_or_expression]: #61
[#325 binary_xor_expression]: #62
[#325 bitwise_expression]: #58
[#325 bool_literal]: #82
[#325 call_expression]: #74
[#325 callable]: #79
[#325 decimal_float_literal]: #90
[#325 decimal_int_literal]: #88
[#325 depth_texture_type]: #127
[#325 expression]: #344
[#325 float_literal]: #81
[#325 hex_float_literal]: #91
[#325 hex_int_literal]: #89
[#325 ident]: #73
[#325 int_literal]: #80
[#325 literal]: #75
[#325 mat_prefix]: #86
[#325 multiplicative_expression]: #65
[#325 multisampled_texture_type]: #129
[#325 paren_expression]: #76
[#325 primary_expression]: #72
[#325 relational_expression]: #55
[#325 sampled_texture_type]: #128
[#325 sampler_type]: #126
[#325 shift_expression]: #59
[#325 short_circuit_and_expression]: #57
[#325 short_circuit_or_expression]: #56
[#325 singular_expression]: #66
[#325 storage_texture_type]: #130
[#325 texture_and_sampler_types]: #102
[#325 type_specifier_without_ident]: #84
[#325 unary_expression]: #64
[#325 vec_prefix]: #85
[#329 ident]: #155
[#329 optionally_typed_ident]: #343
[#331 address_space]: #337
[#332 attrib_end]: #334
[#332 attrib_end/0.0]: #335
[#337 variable_qualifier/0.2]: #538
[#345 _template_args_start]: #305
[#346 _template_args_start]: #304
[#347 _template_args_start]: #303
[#350 struct_body_decl/0.3]: #535
[#352 struct_body_decl/0.2/0]: #534
[#352 struct_body_decl/0.2/0/0.0]: #352
[#353 attribute]: #317
[#353 struct_member]: #533
[#353 struct_member/0.0]: #315
[#353 struct_member/0.0/0]: #316
[#356 param_list/0.1]: #528
[#356 param_list/0.1/0]: #529
[#356 param_list/0.1/0/0.0]: #530
[#357 ident]: #527
[#359 attribute]: #359
[#359 param/0.0/0]: #526
[#362 array_type_specifier]: #100
[#362 assignment_statement]: #390
[#362 attribute]: #401
[#362 break_statement]: #372
[#362 callable]: #384
[#362 compound_statement]: #376
[#362 compound_statement/0.0]: #184
[#362 compound_statement/0.0/0]: #185
[#362 compound_statement/0.2/0]: #524
[#362 const_assert_statement]: #377
[#362 continue_statement]: #373
[#362 core_lhs_expression]: #402
[#362 decrement_statement]: #392
[#362 depth_texture_type]: #127
[#362 for_statement]: #368
[#362 for_statement/0.0]: #382
[#362 for_statement/0.0/0]: #396
[#362 func_call_statement]: #370
[#362 ident]: #398
[#362 if_statement]: #365
[#362 if_statement/0.0]: #379
[#362 if_statement/0.0/0]: #393
[#362 increment_statement]: #391
[#362 lhs_expression]: #399
[#362 loop_statement]: #367
[#362 loop_statement/0.0]: #381
[#362 loop_statement/0.0/0]: #395
[#362 mat_prefix]: #86
[#362 multisampled_texture_type]: #129
[#362 return_statement]: #364
[#362 sampled_texture_type]: #128
[#362 sampler_type]: #126
[#362 statement]: #362
[#362 storage_texture_type]: #130
[#362 switch_statement]: #366
[#362 switch_statement/0.0]: #380
[#362 switch_statement/0.0/0]: #394
[#362 texture_and_sampler_types]: #102
[#362 type_specifier_without_ident]: #84
[#362 variable_decl]: #385
[#362 variable_statement]: #371
[#362 variable_updating_statement]: #375
[#362 vec_prefix]: #85
[#362 while_statement]: #369
[#362 while_statement/0.0]: #383
[#362 while_statement/0.0/0]: #397
[#378 additive_expression]: #63
[#378 array_type_specifier]: #100
[#378 binary_and_expression]: #60
[#378 binary_or_expression]: #61
[#378 binary_xor_expression]: #62
[#378 bitwise_expression]: #58
[#378 bool_literal]: #82
[#378 call_expression]: #74
[#378 callable]: #79
[#378 decimal_float_literal]: #90
[#378 decimal_int_literal]: #88
[#378 depth_texture_type]: #127
[#378 expression]: #515
[#378 float_literal]: #81
[#378 hex_float_literal]: #91
[#378 hex_int_literal]: #89
[#378 ident]: #73
[#378 int_literal]: #80
[#378 literal]: #75
[#378 mat_prefix]: #86
[#378 multiplicative_expression]: #65
[#378 multisampled_texture_type]: #129
[#378 paren_expression]: #76
[#378 primary_expression]: #72
[#378 relational_expression]: #55
[#378 return_statement/0.1]: #514
[#378 sampled_texture_type]: #128
[#378 sampler_type]: #126
[#378 shift_expression]: #59
[#378 short_circuit_and_expression]: #57
[#378 short_circuit_or_expression]: #56
[#378 singular_expression]: #66
[#378 storage_texture_type]: #130
[#378 texture_and_sampler_types]: #102
[#378 type_specifier_without_ident]: #84
[#378 unary_expression]: #64
[#378 vec_prefix]: #85
[#379 if_clause]: #512
[#384 argument_expression_list]: #507
[#386 ident]: #155
[#386 optionally_typed_ident]: #505
[#387 ident]: #155
[#387 optionally_typed_ident]: #504
[#399 _shift_left_assign]: #501
[#399 _shift_right_assign]: #500
[#399 assignment_statement/0.1]: #487
[#399 compound_assignment_operator]: #491
[#401 attribute]: #401
[#401 compound_statement/0.0/0]: #311
[#401 for_statement/0.0/0]: #484
[#401 if_statement/0.0/0]: #481
[#401 loop_statement/0.0/0]: #483
[#401 switch_statement/0.0/0]: #482
[#401 while_statement/0.0/0]: #485
[#402 component_or_swizzle_specifier]: #480
[#402 lhs_expression/0.1]: #479
[#403 core_lhs_expression]: #402
[#403 ident]: #476
[#403 lhs_expression]: #478
[#404 core_lhs_expression]: #402
[#404 ident]: #476
[#404 lhs_expression]: #477
[#405 core_lhs_expression]: #402
[#405 ident]: #476
[#405 lhs_expression]: #475
[#424 _template_args_end]: #473
[#425 _template_args_end]: #472
[#426 _template_args_end]: #471
[#428 array_type_specifier/0.4]: #468
[#429 _template_args_end]: #467
[#430 _template_args_end]: #466
[#431 expression_comma_list/0.2]: #464
[#433 expression_comma_list/0.1/0]: #463
[#433 expression_comma_list/0.1/0/0.0]: #433
[#434 additive_expression]: #63
[#434 array_type_specifier]: #100
[#434 binary_and_expression]: #60
[#434 binary_or_expression]: #61
[#434 binary_xor_expression]: #62
[#434 bitwise_expression]: #58
[#434 bool_literal]: #82
[#434 call_expression]: #74
[#434 callable]: #79
[#434 decimal_float_literal]: #90
[#434 decimal_int_literal]: #88
[#434 depth_texture_type]: #127
[#434 expression]: #462
[#434 float_literal]: #81
[#434 hex_float_literal]: #91
[#434 hex_int_literal]: #89
[#434 ident]: #73
[#434 int_literal]: #80
[#434 literal]: #75
[#434 mat_prefix]: #86
[#434 multiplicative_expression]: #65
[#434 multisampled_texture_type]: #129
[#434 paren_expression]: #76
[#434 primary_expression]: #72
[#434 relational_expression]: #55
[#434 sampled_texture_type]: #128
[#434 sampler_type]: #126
[#434 shift_expression]: #59
[#434 short_circuit_and_expression]: #57
[#434 short_circuit_or_expression]: #56
[#434 singular_expression]: #66
[#434 storage_texture_type]: #130
[#434 texture_and_sampler_types]: #102
[#434 type_specifier_without_ident]: #84
[#434 unary_expression]: #64
[#434 vec_prefix]: #85
[#436 _template_args_end]: #460
[#437 component_or_swizzle_specifier]: #459
[#437 component_or_swizzle_specifier/0.3]: #458
[#443 additive_expression]: #63
[#443 array_type_specifier]: #100
[#443 binary_and_expression]: #60
[#443 binary_or_expression]: #61
[#443 binary_xor_expression]: #62
[#443 bitwise_expression]: #58
[#443 bool_literal]: #82
[#443 call_expression]: #74
[#443 callable]: #79
[#443 decimal_float_literal]: #90
[#443 decimal_int_literal]: #88
[#443 depth_texture_type]: #127
[#443 expression]: #457
[#443 float_literal]: #81
[#443 hex_float_literal]: #91
[#443 hex_int_literal]: #89
[#443 ident]: #73
[#443 int_literal]: #80
[#443 literal]: #75
[#443 mat_prefix]: #86
[#443 multiplicative_expression]: #65
[#443 multisampled_texture_type]: #129
[#443 paren_expression]: #76
[#443 primary_expression]: #72
[#443 relational_expression]: #55
[#443 sampled_texture_type]: #128
[#443 sampler_type]: #126
[#443 shift_expression]: #59
[#443 short_circuit_and_expression]: #57
[#443 short_circuit_or_expression]: #56
[#443 singular_expression]: #66
[#443 storage_texture_type]: #130
[#443 texture_and_sampler_types]: #102
[#443 type_specifier_without_ident]: #84
[#443 unary_expression]: #64
[#443 vec_prefix]: #85
[#447 interpolation_sample_name]: #453
[#453 attrib_end]: #582
[#453 attrib_end/0.0]: #335
[#457 attrib_end]: #580
[#457 attrib_end/0.0]: #335
[#460 paren_expression]: #579
[#468 _template_args_end]: #578
[#469 additive_expression]: #575
[#469 array_type_specifier]: #100
[#469 binary_and_expression]: #60
[#469 binary_or_expression]: #61
[#469 binary_xor_expression]: #62
[#469 bitwise_expression]: #576
[#469 bool_literal]: #82
[#469 call_expression]: #74
[#469 callable]: #79
[#469 decimal_float_literal]: #90
[#469 decimal_int_literal]: #88
[#469 depth_texture_type]: #127
[#469 element_count_expression]: #574
[#469 float_literal]: #81
[#469 hex_float_literal]: #91
[#469 hex_int_literal]: #89
[#469 ident]: #73
[#469 int_literal]: #80
[#469 literal]: #75
[#469 mat_prefix]: #86
[#469 multiplicative_expression]: #65
[#469 multisampled_texture_type]: #129
[#469 paren_expression]: #76
[#469 primary_expression]: #72
[#469 sampled_texture_type]: #128
[#469 sampler_type]: #126
[#469 singular_expression]: #66
[#469 storage_texture_type]: #130
[#469 texture_and_sampler_types]: #102
[#469 type_specifier_without_ident]: #84
[#469 unary_expression]: #577
[#469 vec_prefix]: #85
[#470 array_type_specifier]: #100
[#470 depth_texture_type]: #127
[#470 ident]: #319
[#470 mat_prefix]: #322
[#470 multisampled_texture_type]: #129
[#470 sampled_texture_type]: #128
[#470 sampler_type]: #126
[#470 storage_texture_type]: #130
[#470 texture_and_sampler_types]: #102
[#470 type_specifier]: #573
[#470 type_specifier_without_ident]: #320
[#470 vec_prefix]: #321
[#474 access_mode]: #572
[#486 additive_expression]: #63
[#486 array_type_specifier]: #100
[#486 binary_and_expression]: #60
[#486 binary_or_expression]: #61
[#486 binary_xor_expression]: #62
[#486 bitwise_expression]: #58
[#486 bool_literal]: #82
[#486 call_expression]: #74
[#486 callable]: #79
[#486 decimal_float_literal]: #90
[#486 decimal_int_literal]: #88
[#486 depth_texture_type]: #127
[#486 expression]: #570
[#486 float_literal]: #81
[#486 hex_float_literal]: #91
[#486 hex_int_literal]: #89
[#486 ident]: #73
[#486 int_literal]: #80
[#486 literal]: #75
[#486 mat_prefix]: #86
[#486 multiplicative_expression]: #65
[#486 multisampled_texture_type]: #129
[#486 paren_expression]: #76
[#486 primary_expression]: #72
[#486 relational_expression]: #55
[#486 sampled_texture_type]: #128
[#486 sampler_type]: #126
[#486 shift_expression]: #59
[#486 short_circuit_and_expression]: #57
[#486 short_circuit_or_expression]: #56
[#486 singular_expression]: #66
[#486 storage_texture_type]: #130
[#486 texture_and_sampler_types]: #102
[#486 type_specifier_without_ident]: #84
[#486 unary_expression]: #64
[#486 vec_prefix]: #85
[#487 additive_expression]: #63
[#487 array_type_specifier]: #100
[#487 binary_and_expression]: #60
[#487 binary_or_expression]: #61
[#487 binary_xor_expression]: #62
[#487 bitwise_expression]: #58
[#487 bool_literal]: #82
[#487 call_expression]: #74
[#487 callable]: #79
[#487 decimal_float_literal]: #90
[#487 decimal_int_literal]: #88
[#487 depth_texture_type]: #127
[#487 expression]: #569
[#487 float_literal]: #81
[#487 hex_float_literal]: #91
[#487 hex_int_literal]: #89
[#487 ident]: #73
[#487 int_literal]: #80
[#487 literal]: #75
[#487 mat_prefix]: #86
[#487 multiplicative_expression]: #65
[#487 multisampled_texture_type]: #129
[#487 paren_expression]: #76
[#487 primary_expression]: #72
[#487 relational_expression]: #55
[#487 sampled_texture_type]: #128
[#487 sampler_type]: #126
[#487 shift_expression]: #59
[#487 short_circuit_and_expression]: #57
[#487 short_circuit_or_expression]: #56
[#487 singular_expression]: #66
[#487 storage_texture_type]: #130
[#487 texture_and_sampler_types]: #102
[#487 type_specifier_without_ident]: #84
[#487 unary_expression]: #64
[#487 vec_prefix]: #85
[#506 additive_expression]: #63
[#506 array_type_specifier]: #100
[#506 binary_and_expression]: #60
[#506 binary_or_expression]: #61
[#506 binary_xor_expression]: #62
[#506 bitwise_expression]: #58
[#506 bool_literal]: #82
[#506 call_expression]: #74
[#506 callable]: #79
[#506 decimal_float_literal]: #90
[#506 decimal_int_literal]: #88
[#506 depth_texture_type]: #127
[#506 expression]: #566
[#506 float_literal]: #81
[#506 hex_float_literal]: #91
[#506 hex_int_literal]: #89
[#506 ident]: #73
[#506 int_literal]: #80
[#506 literal]: #75
[#506 mat_prefix]: #86
[#506 multiplicative_expression]: #65
[#506 multisampled_texture_type]: #129
[#506 paren_expression]: #76
[#506 primary_expression]: #72
[#506 relational_expression]: #55
[#506 sampled_texture_type]: #128
[#506 sampler_type]: #126
[#506 shift_expression]: #59
[#506 short_circuit_and_expression]: #57
[#506 short_circuit_or_expression]: #56
[#506 singular_expression]: #66
[#506 storage_texture_type]: #130
[#506 texture_and_sampler_types]: #102
[#506 type_specifier_without_ident]: #84
[#506 unary_expression]: #64
[#506 vec_prefix]: #85
[#508 additive_expression]: #63
[#508 array_type_specifier]: #100
[#508 binary_and_expression]: #60
[#508 binary_or_expression]: #61
[#508 binary_xor_expression]: #62
[#508 bitwise_expression]: #58
[#508 bool_literal]: #82
[#508 call_expression]: #74
[#508 callable]: #79
[#508 decimal_float_literal]: #90
[#508 decimal_int_literal]: #88
[#508 depth_texture_type]: #127
[#508 expression]: #565
[#508 float_literal]: #81
[#508 hex_float_literal]: #91
[#508 hex_int_literal]: #89
[#508 ident]: #73
[#508 int_literal]: #80
[#508 literal]: #75
[#508 mat_prefix]: #86
[#508 multiplicative_expression]: #65
[#508 multisampled_texture_type]: #129
[#508 paren_expression]: #76
[#508 primary_expression]: #72
[#508 relational_expression]: #55
[#508 sampled_texture_type]: #128
[#508 sampler_type]: #126
[#508 shift_expression]: #59
[#508 short_circuit_and_expression]: #57
[#508 short_circuit_or_expression]: #56
[#508 singular_expression]: #66
[#508 storage_texture_type]: #130
[#508 texture_and_sampler_types]: #102
[#508 type_specifier_without_ident]: #84
[#508 unary_expression]: #64
[#508 vec_prefix]: #85
[#510 attribute]: #563
[#510 loop_statement/0.2]: #561
[#510 loop_statement/0.2/0]: #562
[#511 additive_expression]: #63
[#511 array_type_specifier]: #100
[#511 binary_and_expression]: #60
[#511 binary_or_expression]: #61
[#511 binary_xor_expression]: #62
[#511 bitwise_expression]: #58
[#511 bool_literal]: #82
[#511 call_expression]: #74
[#511 callable]: #79
[#511 decimal_float_literal]: #90
[#511 decimal_int_literal]: #88
[#511 depth_texture_type]: #127
[#511 expression]: #560
[#511 float_literal]: #81
[#511 hex_float_literal]: #91
[#511 hex_int_literal]: #89
[#511 ident]: #73
[#511 int_literal]: #80
[#511 literal]: #75
[#511 mat_prefix]: #86
[#511 multiplicative_expression]: #65
[#511 multisampled_texture_type]: #129
[#511 paren_expression]: #76
[#511 primary_expression]: #72
[#511 relational_expression]: #55
[#511 sampled_texture_type]: #128
[#511 sampler_type]: #126
[#511 shift_expression]: #59
[#511 short_circuit_and_expression]: #57
[#511 short_circuit_or_expression]: #56
[#511 singular_expression]: #66
[#511 storage_texture_type]: #130
[#511 texture_and_sampler_types]: #102
[#511 type_specifier_without_ident]: #84
[#511 unary_expression]: #64
[#511 vec_prefix]: #85
[#512 else_if_clause]: #558
[#512 if_statement/0.2]: #556
[#512 if_statement/0.2/0]: #557
[#513 additive_expression]: #63
[#513 array_type_specifier]: #100
[#513 binary_and_expression]: #60
[#513 binary_or_expression]: #61
[#513 binary_xor_expression]: #62
[#513 bitwise_expression]: #58
[#513 bool_literal]: #82
[#513 call_expression]: #74
[#513 callable]: #79
[#513 decimal_float_literal]: #90
[#513 decimal_int_literal]: #88
[#513 depth_texture_type]: #127
[#513 expression]: #555
[#513 float_literal]: #81
[#513 hex_float_literal]: #91
[#513 hex_int_literal]: #89
[#513 ident]: #73
[#513 int_literal]: #80
[#513 literal]: #75
[#513 mat_prefix]: #86
[#513 multiplicative_expression]: #65
[#513 multisampled_texture_type]: #129
[#513 paren_expression]: #76
[#513 primary_expression]: #72
[#513 relational_expression]: #55
[#513 sampled_texture_type]: #128
[#513 sampler_type]: #126
[#513 shift_expression]: #59
[#513 short_circuit_and_expression]: #57
[#513 short_circuit_or_expression]: #56
[#513 singular_expression]: #66
[#513 storage_texture_type]: #130
[#513 texture_and_sampler_types]: #102
[#513 type_specifier_without_ident]: #84
[#513 unary_expression]: #64
[#513 vec_prefix]: #85
[#528 param_list/0.2]: #552
[#530 param_list/0.1/0]: #551
[#530 param_list/0.1/0/0.0]: #530
[#531 attribute]: #359
[#531 param]: #550
[#531 param/0.0]: #357
[#531 param/0.0/0]: #358
[#532 function_header/0.5]: #548
[#537 array_type_specifier]: #100
[#537 depth_texture_type]: #127
[#537 ident]: #319
[#537 mat_prefix]: #322
[#537 multisampled_texture_type]: #129
[#537 sampled_texture_type]: #128
[#537 sampler_type]: #126
[#537 storage_texture_type]: #130
[#537 texture_and_sampler_types]: #102
[#537 type_specifier]: #546
[#537 type_specifier_without_ident]: #320
[#537 vec_prefix]: #321
[#538 _template_args_end]: #545
[#539 access_mode]: #541
[#549 attribute]: #611
[#549 function_header/0.5/0.1]: #609
[#549 function_header/0.5/0.1/0]: #610
[#554 array_type_specifier]: #100
[#554 depth_texture_type]: #127
[#554 ident]: #319
[#554 mat_prefix]: #322
[#554 multisampled_texture_type]: #129
[#554 sampled_texture_type]: #128
[#554 sampler_type]: #126
[#554 storage_texture_type]: #130
[#554 texture_and_sampler_types]: #102
[#554 type_specifier]: #608
[#554 type_specifier_without_ident]: #320
[#554 vec_prefix]: #321
[#555 attribute]: #186
[#555 compound_statement]: #607
[#555 compound_statement/0.0]: #184
[#555 compound_statement/0.0/0]: #185
[#556 else_clause]: #605
[#556 if_statement/0.3]: #604
[#558 else_if_clause]: #558
[#558 if_statement/0.2/0]: #603
[#560 attribute]: #601
[#560 switch_body]: #598
[#560 switch_body/0.0]: #599
[#560 switch_body/0.0/0]: #600
[#563 attribute]: #563
[#563 loop_statement/0.2/0]: #596
[#564 array_type_specifier]: #100
[#564 assignment_statement]: #390
[#564 callable]: #384
[#564 core_lhs_expression]: #402
[#564 decrement_statement]: #392
[#564 depth_texture_type]: #127
[#564 for_header]: #590
[#564 for_header/0.0]: #591
[#564 for_init]: #592
[#564 func_call_statement]: #595
[#564 ident]: #398
[#564 increment_statement]: #391
[#564 lhs_expression]: #399
[#564 mat_prefix]: #86
[#564 multisampled_texture_type]: #129
[#564 sampled_texture_type]: #128
[#564 sampler_type]: #126
[#564 storage_texture_type]: #130
[#564 texture_and_sampler_types]: #102
[#564 type_specifier_without_ident]: #84
[#564 variable_decl]: #385
[#564 variable_statement]: #593
[#564 variable_updating_statement]: #594
[#564 vec_prefix]: #85
[#565 attribute]: #186
[#565 compound_statement]: #589
[#565 compound_statement/0.0]: #184
[#565 compound_statement/0.0/0]: #185
[#567 additive_expression]: #63
[#567 array_type_specifier]: #100
[#567 binary_and_expression]: #60
[#567 binary_or_expression]: #61
[#567 binary_xor_expression]: #62
[#567 bitwise_expression]: #58
[#567 bool_literal]: #82
[#567 call_expression]: #74
[#567 callable]: #79
[#567 decimal_float_literal]: #90
[#567 decimal_int_literal]: #88
[#567 depth_texture_type]: #127
[#567 expression]: #588
[#567 float_literal]: #81
[#567 hex_float_literal]: #91
[#567 hex_int_literal]: #89
[#567 ident]: #73
[#567 int_literal]: #80
[#567 literal]: #75
[#567 mat_prefix]: #86
[#567 multiplicative_expression]: #65
[#567 multisampled_texture_type]: #129
[#567 paren_expression]: #76
[#567 primary_expression]: #72
[#567 relational_expression]: #55
[#567 sampled_texture_type]: #128
[#567 sampler_type]: #126
[#567 shift_expression]: #59
[#567 short_circuit_and_expression]: #57
[#567 short_circuit_or_expression]: #56
[#567 singular_expression]: #66
[#567 storage_texture_type]: #130
[#567 texture_and_sampler_types]: #102
[#567 type_specifier_without_ident]: #84
[#567 unary_expression]: #64
[#567 vec_prefix]: #85
[#568 additive_expression]: #63
[#568 array_type_specifier]: #100
[#568 binary_and_expression]: #60
[#568 binary_or_expression]: #61
[#568 binary_xor_expression]: #62
[#568 bitwise_expression]: #58
[#568 bool_literal]: #82
[#568 call_expression]: #74
[#568 callable]: #79
[#568 decimal_float_literal]: #90
[#568 decimal_int_literal]: #88
[#568 depth_texture_type]: #127
[#568 expression]: #587
[#568 float_literal]: #81
[#568 hex_float_literal]: #91
[#568 hex_int_literal]: #89
[#568 ident]: #73
[#568 int_literal]: #80
[#568 literal]: #75
[#568 mat_prefix]: #86
[#568 multiplicative_expression]: #65
[#568 multisampled_texture_type]: #129
[#568 paren_expression]: #76
[#568 primary_expression]: #72
[#568 relational_expression]: #55
[#568 sampled_texture_type]: #128
[#568 sampler_type]: #126
[#568 shift_expression]: #59
[#568 short_circuit_and_expression]: #57
[#568 short_circuit_or_expression]: #56
[#568 singular_expression]: #66
[#568 storage_texture_type]: #130
[#568 texture_and_sampler_types]: #102
[#568 type_specifier_without_ident]: #84
[#568 unary_expression]: #64
[#568 vec_prefix]: #85
[#572 _template_args_end]: #586
[#573 type_specifier_without_ident/7.6]: #584
[#575 additive_operator]: #216
[#581 additive_expression]: #63
[#581 array_type_specifier]: #100
[#581 binary_and_expression]: #60
[#581 binary_or_expression]: #61
[#581 binary_xor_expression]: #62
[#581 bitwise_expression]: #58
[#581 bool_literal]: #82
[#581 call_expression]: #74
[#581 callable]: #79
[#581 decimal_float_literal]: #90
[#581 decimal_int_literal]: #88
[#581 depth_texture_type]: #127
[#581 expression]: #583
[#581 float_literal]: #81
[#581 hex_float_literal]: #91
[#581 hex_int_literal]: #89
[#581 ident]: #73
[#581 int_literal]: #80
[#581 literal]: #75
[#581 mat_prefix]: #86
[#581 multiplicative_expression]: #65
[#581 multisampled_texture_type]: #129
[#581 paren_expression]: #76
[#581 primary_expression]: #72
[#581 relational_expression]: #55
[#581 sampled_texture_type]: #128
[#581 sampler_type]: #126
[#581 shift_expression]: #59
[#581 short_circuit_and_expression]: #57
[#581 short_circuit_or_expression]: #56
[#581 singular_expression]: #66
[#581 storage_texture_type]: #130
[#581 texture_and_sampler_types]: #102
[#581 type_specifier_without_ident]: #84
[#581 unary_expression]: #64
[#581 vec_prefix]: #85
[#583 attrib_end]: #625
[#583 attrib_end/0.0]: #335
[#584 _template_args_end]: #624
[#585 access_mode]: #623
[#597 array_type_specifier]: #100
[#597 assignment_statement]: #390
[#597 attribute]: #401
[#597 break_statement]: #372
[#597 callable]: #384
[#597 compound_statement]: #376
[#597 compound_statement/0.0]: #184
[#597 compound_statement/0.0/0]: #185
[#597 const_assert_statement]: #377
[#597 continue_statement]: #373
[#597 core_lhs_expression]: #402
[#597 decrement_statement]: #392
[#597 depth_texture_type]: #127
[#597 for_statement]: #368
[#597 for_statement/0.0]: #382
[#597 for_statement/0.0/0]: #396
[#597 func_call_statement]: #370
[#597 ident]: #398
[#597 if_statement]: #365
[#597 if_statement/0.0]: #379
[#597 if_statement/0.0/0]: #393
[#597 increment_statement]: #391
[#597 lhs_expression]: #399
[#597 loop_statement]: #367
[#597 loop_statement/0.0]: #381
[#597 loop_statement/0.0/0]: #395
[#597 loop_statement/0.4]: #618
[#597 loop_statement/0.4/0]: #619
[#597 mat_prefix]: #86
[#597 multisampled_texture_type]: #129
[#597 return_statement]: #364
[#597 sampled_texture_type]: #128
[#597 sampler_type]: #126
[#597 statement]: #620
[#597 storage_texture_type]: #130
[#597 switch_statement]: #366
[#597 switch_statement/0.0]: #380
[#597 switch_statement/0.0/0]: #394
[#597 texture_and_sampler_types]: #102
[#597 type_specifier_without_ident]: #84
[#597 variable_decl]: #385
[#597 variable_statement]: #371
[#597 variable_updating_statement]: #375
[#597 vec_prefix]: #85
[#597 while_statement]: #369
[#597 while_statement/0.0]: #383
[#597 while_statement/0.0/0]: #397
[#601 attribute]: #601
[#601 switch_body/0.0/0]: #616
[#602 additive_expression]: #63
[#602 array_type_specifier]: #100
[#602 binary_and_expression]: #60
[#602 binary_or_expression]: #61
[#602 binary_xor_expression]: #62
[#602 bitwise_expression]: #58
[#602 bool_literal]: #82
[#602 call_expression]: #74
[#602 callable]: #79
[#602 decimal_float_literal]: #90
[#602 decimal_int_literal]: #88
[#602 depth_texture_type]: #127
[#602 expression]: #615
[#602 float_literal]: #81
[#602 hex_float_literal]: #91
[#602 hex_int_literal]: #89
[#602 ident]: #73
[#602 int_literal]: #80
[#602 literal]: #75
[#602 mat_prefix]: #86
[#602 multiplicative_expression]: #65
[#602 multisampled_texture_type]: #129
[#602 paren_expression]: #76
[#602 primary_expression]: #72
[#602 relational_expression]: #55
[#602 sampled_texture_type]: #128
[#602 sampler_type]: #126
[#602 shift_expression]: #59
[#602 short_circuit_and_expression]: #57
[#602 short_circuit_or_expression]: #56
[#602 singular_expression]: #66
[#602 storage_texture_type]: #130
[#602 texture_and_sampler_types]: #102
[#602 type_specifier_without_ident]: #84
[#602 unary_expression]: #64
[#602 vec_prefix]: #85
[#606 attribute]: #186
[#606 compound_statement]: #614
[#606 compound_statement/0.0]: #184
[#606 compound_statement/0.0/0]: #185
[#609 array_type_specifier]: #100
[#609 depth_texture_type]: #127
[#609 ident]: #319
[#609 mat_prefix]: #322
[#609 multisampled_texture_type]: #129
[#609 sampled_texture_type]: #128
[#609 sampler_type]: #126
[#609 storage_texture_type]: #130
[#609 texture_and_sampler_types]: #102
[#609 type_specifier]: #613
[#609 type_specifier_without_ident]: #320
[#609 vec_prefix]: #321
[#611 attribute]: #611
[#611 function_header/0.5/0.1/0]: #612
[#615 attribute]: #186
[#615 compound_statement]: #640
[#615 compound_statement/0.0]: #184
[#615 compound_statement/0.0/0]: #185
[#617 case_clause]: #636
[#617 default_alone_clause]: #637
[#617 switch_body/0.2]: #633
[#617 switch_body/0.2/0]: #634
[#617 switch_clause]: #635
[#618 continuing_statement]: #631
[#618 loop_statement/0.5]: #630
[#620 array_type_specifier]: #100
[#620 assignment_statement]: #390
[#620 attribute]: #401
[#620 break_statement]: #372
[#620 callable]: #384
[#620 compound_statement]: #376
[#620 compound_statement/0.0]: #184
[#620 compound_statement/0.0/0]: #185
[#620 const_assert_statement]: #377
[#620 continue_statement]: #373
[#620 core_lhs_expression]: #402
[#620 decrement_statement]: #392
[#620 depth_texture_type]: #127
[#620 for_statement]: #368
[#620 for_statement/0.0]: #382
[#620 for_statement/0.0/0]: #396
[#620 func_call_statement]: #370
[#620 ident]: #398
[#620 if_statement]: #365
[#620 if_statement/0.0]: #379
[#620 if_statement/0.0/0]: #393
[#620 increment_statement]: #391
[#620 lhs_expression]: #399
[#620 loop_statement]: #367
[#620 loop_statement/0.0]: #381
[#620 loop_statement/0.0/0]: #395
[#620 loop_statement/0.4/0]: #629
[#620 mat_prefix]: #86
[#620 multisampled_texture_type]: #129
[#620 return_statement]: #364
[#620 sampled_texture_type]: #128
[#620 sampler_type]: #126
[#620 statement]: #620
[#620 storage_texture_type]: #130
[#620 switch_statement]: #366
[#620 switch_statement/0.0]: #380
[#620 switch_statement/0.0/0]: #394
[#620 texture_and_sampler_types]: #102
[#620 type_specifier_without_ident]: #84
[#620 variable_decl]: #385
[#620 variable_statement]: #371
[#620 variable_updating_statement]: #375
[#620 vec_prefix]: #85
[#620 while_statement]: #369
[#620 while_statement/0.0]: #383
[#620 while_statement/0.0/0]: #397
[#621 additive_expression]: #63
[#621 array_type_specifier]: #100
[#621 binary_and_expression]: #60
[#621 binary_or_expression]: #61
[#621 binary_xor_expression]: #62
[#621 bitwise_expression]: #58
[#621 bool_literal]: #82
[#621 call_expression]: #74
[#621 callable]: #79
[#621 decimal_float_literal]: #90
[#621 decimal_int_literal]: #88
[#621 depth_texture_type]: #127
[#621 expression]: #628
[#621 float_literal]: #81
[#621 for_header/0.2]: #627
[#621 hex_float_literal]: #91
[#621 hex_int_literal]: #89
[#621 ident]: #73
[#621 int_literal]: #80
[#621 literal]: #75
[#621 mat_prefix]: #86
[#621 multiplicative_expression]: #65
[#621 multisampled_texture_type]: #129
[#621 paren_expression]: #76
[#621 primary_expression]: #72
[#621 relational_expression]: #55
[#621 sampled_texture_type]: #128
[#621 sampler_type]: #126
[#621 shift_expression]: #59
[#621 short_circuit_and_expression]: #57
[#621 short_circuit_or_expression]: #56
[#621 singular_expression]: #66
[#621 storage_texture_type]: #130
[#621 texture_and_sampler_types]: #102
[#621 type_specifier_without_ident]: #84
[#621 unary_expression]: #64
[#621 vec_prefix]: #85
[#622 attribute]: #186
[#622 compound_statement]: #626
[#622 compound_statement/0.0]: #184
[#622 compound_statement/0.0/0]: #185
[#632 attribute]: #652
[#632 continuing_compound_statement]: #649
[#632 continuing_compound_statement/0.0]: #650
[#632 continuing_compound_statement/0.0/0]: #651
[#635 case_clause]: #636
[#635 default_alone_clause]: #637
[#635 switch_body/0.2/0]: #647
[#635 switch_clause]: #635
[#638 additive_expression]: #63
[#638 array_type_specifier]: #100
[#638 binary_and_expression]: #60
[#638 binary_or_expression]: #61
[#638 binary_xor_expression]: #62
[#638 bitwise_expression]: #58
[#638 bool_literal]: #82
[#638 call_expression]: #74
[#638 callable]: #79
[#638 case_selector]: #644
[#638 case_selectors]: #643
[#638 decimal_float_literal]: #90
[#638 decimal_int_literal]: #88
[#638 depth_texture_type]: #127
[#638 expression]: #646
[#638 float_literal]: #81
[#638 hex_float_literal]: #91
[#638 hex_int_literal]: #89
[#638 ident]: #73
[#638 int_literal]: #80
[#638 literal]: #75
[#638 mat_prefix]: #86
[#638 multiplicative_expression]: #65
[#638 multisampled_texture_type]: #129
[#638 paren_expression]: #76
[#638 primary_expression]: #72
[#638 relational_expression]: #55
[#638 sampled_texture_type]: #128
[#638 sampler_type]: #126
[#638 shift_expression]: #59
[#638 short_circuit_and_expression]: #57
[#638 short_circuit_or_expression]: #56
[#638 singular_expression]: #66
[#638 storage_texture_type]: #130
[#638 texture_and_sampler_types]: #102
[#638 type_specifier_without_ident]: #84
[#638 unary_expression]: #64
[#638 vec_prefix]: #85
[#639 default_alone_clause/0.1]: #641
[#641 attribute]: #186
[#641 compound_statement]: #667
[#641 compound_statement/0.0]: #184
[#641 compound_statement/0.0/0]: #185
[#643 case_clause/0.2]: #665
[#644 case_selectors/0.1]: #661
[#644 case_selectors/0.1/0]: #662
[#644 case_selectors/0.1/0/0.0]: #663
[#652 attribute]: #652
[#652 continuing_compound_statement/0.0/0]: #659
[#654 array_type_specifier]: #100
[#654 assignment_statement]: #390
[#654 callable]: #384
[#654 core_lhs_expression]: #402
[#654 decrement_statement]: #392
[#654 depth_texture_type]: #127
[#654 for_header/0.4]: #655
[#654 for_update]: #656
[#654 func_call_statement]: #658
[#654 ident]: #398
[#654 increment_statement]: #391
[#654 lhs_expression]: #399
[#654 mat_prefix]: #86
[#654 multisampled_texture_type]: #129
[#654 sampled_texture_type]: #128
[#654 sampler_type]: #126
[#654 storage_texture_type]: #130
[#654 texture_and_sampler_types]: #102
[#654 type_specifier_without_ident]: #84
[#654 variable_updating_statement]: #657
[#654 vec_prefix]: #85
[#660 array_type_specifier]: #100
[#660 assignment_statement]: #390
[#660 attribute]: #401
[#660 break_statement]: #372
[#660 callable]: #384
[#660 compound_statement]: #376
[#660 compound_statement/0.0]: #184
[#660 compound_statement/0.0/0]: #185
[#660 const_assert_statement]: #377
[#660 continue_statement]: #373
[#660 continuing_compound_statement/0.2]: #673
[#660 continuing_compound_statement/0.2/0]: #674
[#660 core_lhs_expression]: #402
[#660 decrement_statement]: #392
[#660 depth_texture_type]: #127
[#660 for_statement]: #368
[#660 for_statement/0.0]: #382
[#660 for_statement/0.0/0]: #396
[#660 func_call_statement]: #370
[#660 ident]: #398
[#660 if_statement]: #365
[#660 if_statement/0.0]: #379
[#660 if_statement/0.0/0]: #393
[#660 increment_statement]: #391
[#660 lhs_expression]: #399
[#660 loop_statement]: #367
[#660 loop_statement/0.0]: #381
[#660 loop_statement/0.0/0]: #395
[#660 mat_prefix]: #86
[#660 multisampled_texture_type]: #129
[#660 return_statement]: #364
[#660 sampled_texture_type]: #128
[#660 sampler_type]: #126
[#660 statement]: #675
[#660 storage_texture_type]: #130
[#660 switch_statement]: #366
[#660 switch_statement/0.0]: #380
[#660 switch_statement/0.0/0]: #394
[#660 texture_and_sampler_types]: #102
[#660 type_specifier_without_ident]: #84
[#660 variable_decl]: #385
[#660 variable_statement]: #371
[#660 variable_updating_statement]: #375
[#660 vec_prefix]: #85
[#660 while_statement]: #369
[#660 while_statement/0.0]: #383
[#660 while_statement/0.0/0]: #397
[#661 case_selectors/0.2]: #671
[#663 case_selectors/0.1/0]: #670
[#663 case_selectors/0.1/0/0.0]: #663
[#664 additive_expression]: #63
[#664 array_type_specifier]: #100
[#664 binary_and_expression]: #60
[#664 binary_or_expression]: #61
[#664 binary_xor_expression]: #62
[#664 bitwise_expression]: #58
[#664 bool_literal]: #82
[#664 call_expression]: #74
[#664 callable]: #79
[#664 case_selector]: #669
[#664 decimal_float_literal]: #90
[#664 decimal_int_literal]: #88
[#664 depth_texture_type]: #127
[#664 expression]: #646
[#664 float_literal]: #81
[#664 hex_float_literal]: #91
[#664 hex_int_literal]: #89
[#664 ident]: #73
[#664 int_literal]: #80
[#664 literal]: #75
[#664 mat_prefix]: #86
[#664 multiplicative_expression]: #65
[#664 multisampled_texture_type]: #129
[#664 paren_expression]: #76
[#664 primary_expression]: #72
[#664 relational_expression]: #55
[#664 sampled_texture_type]: #128
[#664 sampler_type]: #126
[#664 shift_expression]: #59
[#664 short_circuit_and_expression]: #57
[#664 short_circuit_or_expression]: #56
[#664 singular_expression]: #66
[#664 storage_texture_type]: #130
[#664 texture_and_sampler_types]: #102
[#664 type_specifier_without_ident]: #84
[#664 unary_expression]: #64
[#664 vec_prefix]: #85
[#665 attribute]: #186
[#665 compound_statement]: #668
[#665 compound_statement/0.0]: #184
[#665 compound_statement/0.0/0]: #185
[#673 break_if_statement]: #678
[#673 continuing_compound_statement/0.3]: #677
[#675 array_type_specifier]: #100
[#675 assignment_statement]: #390
[#675 attribute]: #401
[#675 break_statement]: #372
[#675 callable]: #384
[#675 compound_statement]: #376
[#675 compound_statement/0.0]: #184
[#675 compound_statement/0.0/0]: #185
[#675 const_assert_statement]: #377
[#675 continue_statement]: #373
[#675 continuing_compound_statement/0.2/0]: #676
[#675 core_lhs_expression]: #402
[#675 decrement_statement]: #392
[#675 depth_texture_type]: #127
[#675 for_statement]: #368
[#675 for_statement/0.0]: #382
[#675 for_statement/0.0/0]: #396
[#675 func_call_statement]: #370
[#675 ident]: #398
[#675 if_statement]: #365
[#675 if_statement/0.0]: #379
[#675 if_statement/0.0/0]: #393
[#675 increment_statement]: #391
[#675 lhs_expression]: #399
[#675 loop_statement]: #367
[#675 loop_statement/0.0]: #381
[#675 loop_statement/0.0/0]: #395
[#675 mat_prefix]: #86
[#675 multisampled_texture_type]: #129
[#675 return_statement]: #364
[#675 sampled_texture_type]: #128
[#675 sampler_type]: #126
[#675 statement]: #675
[#675 storage_texture_type]: #130
[#675 switch_statement]: #366
[#675 switch_statement/0.0]: #380
[#675 switch_statement/0.0/0]: #394
[#675 texture_and_sampler_types]: #102
[#675 type_specifier_without_ident]: #84
[#675 variable_decl]: #385
[#675 variable_statement]: #371
[#675 variable_updating_statement]: #375
[#675 vec_prefix]: #85
[#675 while_statement]: #369
[#675 while_statement/0.0]: #383
[#675 while_statement/0.0/0]: #397
[#680 additive_expression]: #63
[#680 array_type_specifier]: #100
[#680 binary_and_expression]: #60
[#680 binary_or_expression]: #61
[#680 binary_xor_expression]: #62
[#680 bitwise_expression]: #58
[#680 bool_literal]: #82
[#680 call_expression]: #74
[#680 callable]: #79
[#680 decimal_float_literal]: #90
[#680 decimal_int_literal]: #88
[#680 depth_texture_type]: #127
[#680 expression]: #682
[#680 float_literal]: #81
[#680 hex_float_literal]: #91
[#680 hex_int_literal]: #89
[#680 ident]: #73
[#680 int_literal]: #80
[#680 literal]: #75
[#680 mat_prefix]: #86
[#680 multiplicative_expression]: #65
[#680 multisampled_texture_type]: #129
[#680 paren_expression]: #76
[#680 primary_expression]: #72
[#680 relational_expression]: #55
[#680 sampled_texture_type]: #128
[#680 sampler_type]: #126
[#680 shift_expression]: #59
[#680 short_circuit_and_expression]: #57
[#680 short_circuit_or_expression]: #56
[#680 singular_expression]: #66
[#680 storage_texture_type]: #130
[#680 texture_and_sampler_types]: #102
[#680 type_specifier_without_ident]: #84
[#680 unary_expression]: #64
[#680 vec_prefix]: #85
