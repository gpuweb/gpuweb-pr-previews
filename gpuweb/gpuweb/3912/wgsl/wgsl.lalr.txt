=Grammar:

_blankspace:/[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_block_comment:/\u200B_block_comment/
_comment:/\/\/.*/
_disambiguate_template:/\u200B_disambiguate_template/
_error_sentinel:/\u200B_error_sentinel/
_greater_than:/\u200B_greater_than/
_greater_than_equal:/\u200B_greater_than_equal/
_less_than:/\u200B_less_than/
_less_than_equal:/\u200B_less_than_equal/
_shift_left:/\u200B_shift_left/
_shift_left_assign:/\u200B_shift_left_assign/
_shift_right:/\u200B_shift_right/
_shift_right_assign:/\u200B_shift_right_assign/
_template_args_end:/\u200B_template_args_end/
_template_args_start:/\u200B_template_args_start/
additive_expression:
   additive_expression additive_operator multiplicative_expression
 | multiplicative_expression
additive_operator:
   '+'
 | '-'
argument_expression_list:
   '(' expression_comma_list ? ')'
assignment_statement:
   '_' '=' expression
 | lhs_expression ( '=' | compound_assignment_operator ) expression
assignment_statement/0.1:
   '='
 | compound_assignment_operator
attribute:
   '@' 'diagnostic' diagnostic_control
 | '@' ident_pattern_token argument_expression_list ?
binary_and_expression:
   binary_and_expression '&' unary_expression
 | unary_expression
binary_or_expression:
   binary_or_expression '|' unary_expression
 | unary_expression
binary_xor_expression:
   binary_xor_expression '^' unary_expression
 | unary_expression
bitwise_expression:
   binary_and_expression '&' unary_expression
 | binary_or_expression '|' unary_expression
 | binary_xor_expression '^' unary_expression
bool_literal:
   'false'
 | 'true'
break_if_statement:
   'break' 'if' expression ';'
break_statement:'break'
call_expression:call_phrase
call_phrase:
   template_elaborated_ident argument_expression_list
case_clause:
   'case' case_selectors ':' ? compound_statement
case_selector:
   'default'
 | expression
case_selectors:
   case_selector ( ',' case_selector ) * ? ',' ?
case_selectors/0.1/0/0.0:
   ',' case_selector
component_or_swizzle_specifier:
   '.' member_ident component_or_swizzle_specifier ?
 | '.' swizzle_name component_or_swizzle_specifier ?
 | '[' expression ']' component_or_swizzle_specifier ?
compound_assignment_operator:
   '%='
 | '&='
 | '*='
 | '+='
 | '-='
 | '/='
 | '^='
 | '|='
 | _shift_left_assign
 | _shift_right_assign
compound_statement:
   attribute * ? '{' statement * ? '}'
const_assert_statement:
   'const_assert' expression
continue_statement:'continue'
continuing_compound_statement:
   attribute * ? '{' statement * ? break_if_statement ? '}'
continuing_statement:
   'continuing' continuing_compound_statement
core_lhs_expression:
   '(' lhs_expression ')'
 | ident _disambiguate_template
decimal_float_literal:
   /0[fh]/
 | /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/
 | /[0-9]+[eE][+-]?[0-9]+[fh]?/
 | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/
 | /[1-9][0-9]*[fh]/
decimal_int_literal:
   /0[iu]?/
 | /[1-9][0-9]*[iu]?/
decrement_statement:
   lhs_expression '--'
default_alone_clause:
   'default' ':' ? compound_statement
diagnostic_control:
   '(' severity_control_name ',' diagnostic_rule_name ',' ? ')'
diagnostic_directive:
   'diagnostic' diagnostic_control ';'
diagnostic_rule_name:ident_pattern_token
else_clause:
   'else' compound_statement
else_if_clause:
   'else' 'if' expression compound_statement
enable_directive:
   'enable' enable_extension_name ';'
enable_extension_name:ident_pattern_token
expression:
   bitwise_expression
 | relational_expression
 | short_circuit_and_expression '&&' relational_expression
 | short_circuit_or_expression '||' relational_expression
expression_comma_list:
   expression ( ',' expression ) * ? ',' ?
expression_comma_list/0.1/0/0.0:
   ',' expression
float_literal:
   decimal_float_literal
 | hex_float_literal
for_header:
   for_init ? ';' expression ? ';' for_update ?
for_init:
   func_call_statement
 | variable_statement
 | variable_updating_statement
for_statement:
   attribute * ? 'for' '(' for_header ')' compound_statement
for_update:
   func_call_statement
 | variable_updating_statement
func_call_statement:call_phrase
function_decl:
   attribute * ? function_header compound_statement
function_header:
   'fn' ident '(' param_list ? ')' ( '->' attribute * ? template_elaborated_ident )?
global_constant_decl:
   'const' optionally_typed_ident '=' expression
 | attribute * ? 'override' optionally_typed_ident ( '=' expression )?
global_decl:
   ';'
 | const_assert_statement ';'
 | function_decl
 | global_constant_decl ';'
 | global_variable_decl ';'
 | struct_decl
 | type_alias_decl ';'
global_directive:
   diagnostic_directive
 | enable_directive
 | requires_directive
global_variable_decl:
   attribute * ? variable_decl ( '=' expression )?
hex_float_literal:
   /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/
 | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
 | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/
hex_int_literal:/0[xX][0-9a-fA-F]+[iu]?/
ident:
   ident_pattern_token _disambiguate_template
ident_pattern_token:/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if_clause:
   'if' expression compound_statement
if_statement:
   attribute * ? if_clause else_if_clause * ? else_clause ?
increment_statement:
   lhs_expression '++'
int_literal:
   decimal_int_literal
 | hex_int_literal
lhs_expression:
   '&' lhs_expression
 | '*' lhs_expression
 | core_lhs_expression component_or_swizzle_specifier ?
literal:
   bool_literal
 | float_literal
 | int_literal
loop_statement:
   attribute * ? 'loop' attribute * ? '{' statement * ? continuing_statement ? '}'
member_ident:ident_pattern_token
multiplicative_expression:
   multiplicative_expression multiplicative_operator unary_expression
 | unary_expression
multiplicative_operator:
   '%'
 | '*'
 | '/'
optionally_typed_ident:
   ident ( ':' type_specifier )?
param:
   attribute * ? ident ':' type_specifier
param_list:
   param ( ',' param ) * ? ',' ?
param_list/0.1/0/0.0:
   ',' param
paren_expression:
   '(' expression ')'
primary_expression:
   call_expression
 | literal
 | paren_expression
 | template_elaborated_ident
relational_expression:
   shift_expression
 | shift_expression '!=' shift_expression
 | shift_expression '==' shift_expression
 | shift_expression _greater_than shift_expression
 | shift_expression _greater_than_equal shift_expression
 | shift_expression _less_than shift_expression
 | shift_expression _less_than_equal shift_expression
requires_directive:
   'requires' software_extension_list ';'
return_statement:
   'return' expression ?
severity_control_name:
   'error'
 | 'info'
 | 'off'
 | 'warning'
shift_expression:
   additive_expression
 | unary_expression _shift_left unary_expression
 | unary_expression _shift_right unary_expression
short_circuit_and_expression:
   relational_expression
 | short_circuit_and_expression '&&' relational_expression
short_circuit_or_expression:
   relational_expression
 | short_circuit_or_expression '||' relational_expression
singular_expression:
   primary_expression component_or_swizzle_specifier ?
software_extension_list:
   software_extension_name ( ',' software_extension_name ) * ? ',' ?
software_extension_list/0.1/0/0.0:
   ',' software_extension_name
software_extension_name:ident_pattern_token
statement:
   ';'
 | 'discard' ';'
 | break_statement ';'
 | compound_statement
 | const_assert_statement ';'
 | continue_statement ';'
 | for_statement
 | func_call_statement ';'
 | if_statement
 | loop_statement
 | return_statement ';'
 | switch_statement
 | variable_statement ';'
 | variable_updating_statement ';'
 | while_statement
struct_body_decl:
   '{' struct_member ( ',' struct_member ) * ? ',' ? '}'
struct_body_decl/0.2/0/0.0:
   ',' struct_member
struct_decl:
   'struct' ident struct_body_decl
struct_member:
   attribute * ? member_ident ':' type_specifier
switch_body:
   attribute * ? '{' ( switch_clause * ) '}'
switch_body/0.2:
   switch_clause *
switch_clause:
   case_clause
 | default_alone_clause
switch_statement:
   attribute * ? 'switch' expression switch_body
swizzle_name:
   '/[rgba]/'
 | '/[rgba][rgba]/'
 | '/[rgba][rgba][rgba]/'
 | '/[rgba][rgba][rgba][rgba]/'
 | '/[xyzw]/'
 | '/[xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw][xyzw]/'
template_arg_comma_list:
   template_arg_expression ( ',' template_arg_expression ) * ? ',' ?
template_arg_comma_list/0.1/0/0.0:
   ',' template_arg_expression
template_arg_expression:expression
template_elaborated_ident:
   ident _disambiguate_template template_list ?
template_list:
   _template_args_start template_arg_comma_list _template_args_end
translation_unit:
   global_directive * ? global_decl * ?
type_alias_decl:
   'alias' ident '=' type_specifier
type_specifier:template_elaborated_ident
unary_expression:
   '!' unary_expression
 | '&' unary_expression
 | '*' unary_expression
 | '-' unary_expression
 | '~' unary_expression
 | singular_expression
variable_decl:
   'var' _disambiguate_template template_list ? optionally_typed_ident
variable_statement:
   'const' optionally_typed_ident '=' expression
 | 'let' optionally_typed_ident '=' expression
 | variable_decl
 | variable_decl '=' expression
variable_updating_statement:
   assignment_statement
 | decrement_statement
 | increment_statement
while_statement:
   attribute * ? 'while' expression compound_statement

=Raw rules:
translation_unit  -> ( Choice ( Seq translation_unit/0.0 translation_unit/0.1 ) )
translation_unit .reg_info.index: 457
translation_unit .first: {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' Îµ}
translation_unit .derives_empty: True
translation_unit .follow: {EndOfText}
global_directive  -> ( Choice diagnostic_directive enable_directive requires_directive )
global_directive .reg_info.index: 115
global_directive .first: {'diagnostic' 'enable' 'requires'}
global_directive .derives_empty: False
global_directive .follow: {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
global_decl  -> ( Choice ';' ( Seq global_variable_decl ';' ) ( Seq global_constant_decl ';' ) ( Seq type_alias_decl ';' ) struct_decl function_decl ( Seq const_assert_statement ';' ) )
global_decl .reg_info.index: 126
global_decl .first: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var'}
global_decl .derives_empty: False
global_decl .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
bool_literal  -> ( Choice 'true' 'false' )
bool_literal .reg_info.index: 127
bool_literal .first: {'false' 'true'}
bool_literal .derives_empty: False
bool_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal  -> ( Choice decimal_int_literal hex_int_literal )
int_literal .reg_info.index: 130
int_literal .first: {/0[iu]?/ /0[xX][0-9a-fA-F]+[iu]?/ /[1-9][0-9]*[iu]?/}
int_literal .derives_empty: False
int_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal  -> ( Choice /0[iu]?/ /[1-9][0-9]*[iu]?/ )
decimal_int_literal .reg_info.index: 131
decimal_int_literal .first: {/0[iu]?/ /[1-9][0-9]*[iu]?/}
decimal_int_literal .derives_empty: False
decimal_int_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal  -> /0[xX][0-9a-fA-F]+[iu]?/
hex_int_literal .reg_info.index: 7
hex_int_literal .first: {/0[xX][0-9a-fA-F]+[iu]?/}
hex_int_literal .derives_empty: False
hex_int_literal .follow: {}
float_literal  -> ( Choice decimal_float_literal hex_float_literal )
float_literal .reg_info.index: 134
float_literal .first: {/0[fh]/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/}
float_literal .derives_empty: False
float_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal  -> ( Choice /0[fh]/ /[1-9][0-9]*[fh]/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ )
decimal_float_literal .reg_info.index: 135
decimal_float_literal .first: {/0[fh]/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/}
decimal_float_literal .derives_empty: False
decimal_float_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal  -> ( Choice /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ )
hex_float_literal .reg_info.index: 136
hex_float_literal .first: {/0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/}
hex_float_literal .derives_empty: False
hex_float_literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
diagnostic_directive  -> ( Choice ( Seq 'diagnostic' diagnostic_control ';' ) )
diagnostic_directive .reg_info.index: 404
diagnostic_directive .first: {'diagnostic'}
diagnostic_directive .derives_empty: False
diagnostic_directive .follow: {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
literal  -> ( Choice int_literal float_literal bool_literal )
literal .reg_info.index: 142
literal .first: {'false' 'true' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
literal .derives_empty: False
literal .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident  -> ( Choice ( Seq ident_pattern_token _disambiguate_template ) )
ident .reg_info.index: 405
ident .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
ident .derives_empty: False
ident .follow: {'(' ':' ';' '=' '{' /\u200B_disambiguate_template/}
member_ident  -> ident_pattern_token
member_ident .reg_info.index: 143
member_ident .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
member_ident .derives_empty: False
member_ident .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
diagnostic_rule_name  -> ident_pattern_token
diagnostic_rule_name .reg_info.index: 143
diagnostic_rule_name .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
diagnostic_rule_name .derives_empty: False
diagnostic_rule_name .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
template_list  -> ( Choice ( Seq _template_args_start template_arg_comma_list _template_args_end ) )
template_list .reg_info.index: 406
template_list .first: {/\u200B_template_args_start/}
template_list .derives_empty: False
template_list .follow: {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '=' '==' '@' '[' ']' '^' '{' '|' '||' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
template_arg_comma_list  -> ( Choice ( Seq template_arg_expression template_arg_comma_list/0.1 template_arg_comma_list/0.2 ) )
template_arg_comma_list .reg_info.index: 513
template_arg_comma_list .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
template_arg_comma_list .derives_empty: False
template_arg_comma_list .follow: {/\u200B_template_args_end/}
template_arg_expression  -> expression
template_arg_expression .reg_info.index: 156
template_arg_expression .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
template_arg_expression .derives_empty: False
template_arg_expression .follow: {',' /\u200B_template_args_end/}
attribute  -> ( Choice ( Seq '@' ident_pattern_token attribute/0.2 ) ( Seq '@' 'diagnostic' diagnostic_control ) )
attribute .reg_info.index: 524
attribute .first: {'@'}
attribute .derives_empty: False
attribute .follow: {'@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
diagnostic_control  -> ( Choice ( Seq '(' severity_control_name ',' diagnostic_rule_name diagnostic_control/0.4 ')' ) )
diagnostic_control .reg_info.index: 533
diagnostic_control .first: {'('}
diagnostic_control .derives_empty: False
diagnostic_control .follow: {';' '@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_decl  -> ( Choice ( Seq 'struct' ident struct_body_decl ) )
struct_decl .reg_info.index: 409
struct_decl .first: {'struct'}
struct_decl .derives_empty: False
struct_decl .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl  -> ( Choice ( Seq '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' ) )
struct_body_decl .reg_info.index: 546
struct_body_decl .first: {'{'}
struct_body_decl .derives_empty: False
struct_body_decl .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_member  -> ( Choice ( Seq struct_member/0.0 member_ident ':' type_specifier ) )
struct_member .reg_info.index: 554
struct_member .first: {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member .derives_empty: False
struct_member .follow: {',' '}'}
type_alias_decl  -> ( Choice ( Seq 'alias' ident '=' type_specifier ) )
type_alias_decl .reg_info.index: 412
type_alias_decl .first: {'alias'}
type_alias_decl .derives_empty: False
type_alias_decl .follow: {';'}
type_specifier  -> template_elaborated_ident
type_specifier .reg_info.index: 180
type_specifier .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_specifier .derives_empty: False
type_specifier .follow: {')' ',' ';' '=' '}'}
template_elaborated_ident  -> ( Choice ( Seq ident _disambiguate_template template_elaborated_ident/0.2 ) )
template_elaborated_ident .reg_info.index: 566
template_elaborated_ident .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
template_elaborated_ident .derives_empty: False
template_elaborated_ident .follow: {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '=' '==' '@' '[' ']' '^' '{' '|' '||' '}' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
variable_statement  -> ( Choice variable_decl ( Seq variable_decl '=' expression ) ( Seq 'let' optionally_typed_ident '=' expression ) ( Seq 'const' optionally_typed_ident '=' expression ) )
variable_statement .reg_info.index: 189
variable_statement .first: {'const' 'let' 'var'}
variable_statement .derives_empty: False
variable_statement .follow: {';'}
variable_decl  -> ( Choice ( Seq 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident ) )
variable_decl .reg_info.index: 588
variable_decl .first: {'var'}
variable_decl .derives_empty: False
variable_decl .follow: {';' '='}
optionally_typed_ident  -> ( Choice ( Seq ident optionally_typed_ident/0.1 ) )
optionally_typed_ident .reg_info.index: 594
optionally_typed_ident .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
optionally_typed_ident .derives_empty: False
optionally_typed_ident .follow: {';' '='}
global_variable_decl  -> ( Choice ( Seq global_variable_decl/0.0 variable_decl global_variable_decl/0.2 ) )
global_variable_decl .reg_info.index: 601
global_variable_decl .first: {'@' 'var'}
global_variable_decl .derives_empty: False
global_variable_decl .follow: {';'}
global_constant_decl  -> ( Choice ( Seq 'const' optionally_typed_ident '=' expression ) ( Seq global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 ) )
global_constant_decl .reg_info.index: 613
global_constant_decl .first: {'@' 'const' 'override'}
global_constant_decl .derives_empty: False
global_constant_decl .follow: {';'}
primary_expression  -> ( Choice template_elaborated_ident call_expression literal paren_expression )
primary_expression .reg_info.index: 202
primary_expression .first: {'(' 'false' 'true' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
primary_expression .derives_empty: False
primary_expression .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression  -> call_phrase
call_expression .reg_info.index: 203
call_expression .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
call_expression .derives_empty: False
call_expression .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_phrase  -> ( Choice ( Seq template_elaborated_ident argument_expression_list ) )
call_phrase .reg_info.index: 417
call_phrase .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
call_phrase .derives_empty: False
call_phrase .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
paren_expression  -> ( Choice ( Seq '(' expression ')' ) )
paren_expression .reg_info.index: 418
paren_expression .first: {'('}
paren_expression .derives_empty: False
paren_expression .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
argument_expression_list  -> ( Choice ( Seq '(' argument_expression_list/0.1 ')' ) )
argument_expression_list .reg_info.index: 631
argument_expression_list .first: {'('}
argument_expression_list .derives_empty: False
argument_expression_list .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' '|' '||' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
expression_comma_list  -> ( Choice ( Seq expression expression_comma_list/0.1 expression_comma_list/0.2 ) )
expression_comma_list .reg_info.index: 638
expression_comma_list .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
expression_comma_list .derives_empty: False
expression_comma_list .follow: {')'}
component_or_swizzle_specifier  -> ( Choice ( Seq '[' expression ']' component_or_swizzle_specifier/0.3 ) ( Seq '.' member_ident component_or_swizzle_specifier/1.2 ) ( Seq '.' swizzle_name component_or_swizzle_specifier/2.2 ) )
component_or_swizzle_specifier .reg_info.index: 656
component_or_swizzle_specifier .first: {'.' '['}
component_or_swizzle_specifier .derives_empty: False
component_or_swizzle_specifier .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
unary_expression  -> ( Choice singular_expression ( Seq '-' unary_expression ) ( Seq '!' unary_expression ) ( Seq '~' unary_expression ) ( Seq '*' unary_expression ) ( Seq '&' unary_expression ) )
unary_expression .reg_info.index: 227
unary_expression .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
unary_expression .derives_empty: False
unary_expression .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
singular_expression  -> ( Choice ( Seq primary_expression singular_expression/0.1 ) )
singular_expression .reg_info.index: 677
singular_expression .first: {'(' 'false' 'true' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
singular_expression .derives_empty: False
singular_expression .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
lhs_expression  -> ( Choice ( Seq core_lhs_expression lhs_expression/0.1 ) ( Seq '*' lhs_expression ) ( Seq '&' lhs_expression ) )
lhs_expression .reg_info.index: 688
lhs_expression .first: {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression .derives_empty: False
lhs_expression .follow: {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression  -> ( Choice ( Seq ident _disambiguate_template ) ( Seq '(' lhs_expression ')' ) )
core_lhs_expression .reg_info.index: 238
core_lhs_expression .first: {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
core_lhs_expression .derives_empty: False
core_lhs_expression .follow: {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
multiplicative_expression  -> ( Choice unary_expression ( Seq multiplicative_expression multiplicative_operator unary_expression ) )
multiplicative_expression .reg_info.index: 242
multiplicative_expression .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_expression .derives_empty: False
multiplicative_expression .follow: {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multiplicative_operator  -> ( Choice '*' '/' '%' )
multiplicative_operator .reg_info.index: 243
multiplicative_operator .first: {'%' '*' '/'}
multiplicative_operator .derives_empty: False
multiplicative_operator .follow: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_expression  -> ( Choice multiplicative_expression ( Seq additive_expression additive_operator multiplicative_expression ) )
additive_expression .reg_info.index: 247
additive_expression .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_expression .derives_empty: False
additive_expression .follow: {'!=' '&&' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
additive_operator  -> ( Choice '+' '-' )
additive_operator .reg_info.index: 248
additive_operator .first: {'+' '-'}
additive_operator .derives_empty: False
additive_operator .follow: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
shift_expression  -> ( Choice additive_expression ( Seq unary_expression _shift_left unary_expression ) ( Seq unary_expression _shift_right unary_expression ) )
shift_expression .reg_info.index: 253
shift_expression .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
shift_expression .derives_empty: False
shift_expression .follow: {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
relational_expression  -> ( Choice shift_expression ( Seq shift_expression _less_than shift_expression ) ( Seq shift_expression _greater_than shift_expression ) ( Seq shift_expression _less_than_equal shift_expression ) ( Seq shift_expression _greater_than_equal shift_expression ) ( Seq shift_expression '==' shift_expression ) ( Seq shift_expression '!=' shift_expression ) )
relational_expression .reg_info.index: 265
relational_expression .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
relational_expression .derives_empty: False
relational_expression .follow: {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
short_circuit_and_expression  -> ( Choice relational_expression ( Seq short_circuit_and_expression '&&' relational_expression ) )
short_circuit_and_expression .reg_info.index: 269
short_circuit_and_expression .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
short_circuit_and_expression .derives_empty: False
short_circuit_and_expression .follow: {'&&'}
short_circuit_or_expression  -> ( Choice relational_expression ( Seq short_circuit_or_expression '||' relational_expression ) )
short_circuit_or_expression .reg_info.index: 272
short_circuit_or_expression .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
short_circuit_or_expression .derives_empty: False
short_circuit_or_expression .follow: {'||'}
binary_or_expression  -> ( Choice unary_expression ( Seq binary_or_expression '|' unary_expression ) )
binary_or_expression .reg_info.index: 275
binary_or_expression .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
binary_or_expression .derives_empty: False
binary_or_expression .follow: {'|'}
binary_and_expression  -> ( Choice unary_expression ( Seq binary_and_expression '&' unary_expression ) )
binary_and_expression .reg_info.index: 278
binary_and_expression .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
binary_and_expression .derives_empty: False
binary_and_expression .follow: {'&'}
binary_xor_expression  -> ( Choice unary_expression ( Seq binary_xor_expression '^' unary_expression ) )
binary_xor_expression .reg_info.index: 281
binary_xor_expression .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
binary_xor_expression .derives_empty: False
binary_xor_expression .follow: {'^'}
bitwise_expression  -> ( Choice ( Seq binary_and_expression '&' unary_expression ) ( Seq binary_or_expression '|' unary_expression ) ( Seq binary_xor_expression '^' unary_expression ) )
bitwise_expression .reg_info.index: 282
bitwise_expression .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
bitwise_expression .derives_empty: False
bitwise_expression .follow: {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
expression  -> ( Choice relational_expression ( Seq short_circuit_or_expression '||' relational_expression ) ( Seq short_circuit_and_expression '&&' relational_expression ) bitwise_expression )
expression .reg_info.index: 284
expression .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
expression .derives_empty: False
expression .follow: {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
compound_statement  -> ( Choice ( Seq compound_statement/0.0 '{' compound_statement/0.2 '}' ) )
compound_statement .reg_info.index: 799
compound_statement .first: {'@' '{'}
compound_statement .derives_empty: False
compound_statement .follow: {'&' '(' '*' ';' '@' '_' 'alias' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'struct' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
assignment_statement  -> ( Choice ( Seq lhs_expression assignment_statement/0.1 expression ) ( Seq '_' '=' expression ) )
assignment_statement .reg_info.index: 810
assignment_statement .first: {'&' '(' '*' '_' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement .derives_empty: False
assignment_statement .follow: {')' ';'}
compound_assignment_operator  -> ( Choice '+=' '-=' '*=' '/=' '%=' '&=' '|=' '^=' _shift_right_assign _shift_left_assign )
compound_assignment_operator .reg_info.index: 296
compound_assignment_operator .first: {'%=' '&=' '*=' '+=' '-=' '/=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
compound_assignment_operator .derives_empty: False
compound_assignment_operator .follow: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
increment_statement  -> ( Choice ( Seq lhs_expression '++' ) )
increment_statement .reg_info.index: 423
increment_statement .first: {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement .derives_empty: False
increment_statement .follow: {')' ';'}
decrement_statement  -> ( Choice ( Seq lhs_expression '--' ) )
decrement_statement .reg_info.index: 424
decrement_statement .first: {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
decrement_statement .derives_empty: False
decrement_statement .follow: {')' ';'}
if_statement  -> ( Choice ( Seq if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 ) )
if_statement .reg_info.index: 835
if_statement .first: {'@' 'if'}
if_statement .derives_empty: False
if_statement .follow: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_clause  -> ( Choice ( Seq 'if' expression compound_statement ) )
if_clause .reg_info.index: 426
if_clause .first: {'if'}
if_clause .derives_empty: False
if_clause .follow: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause  -> ( Choice ( Seq 'else' 'if' expression compound_statement ) )
else_if_clause .reg_info.index: 427
else_if_clause .first: {'else'}
else_if_clause .derives_empty: False
else_if_clause .follow: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_clause  -> ( Choice ( Seq 'else' compound_statement ) )
else_clause .reg_info.index: 428
else_clause .first: {'else'}
else_clause .derives_empty: False
else_clause .follow: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement  -> ( Choice ( Seq switch_statement/0.0 'switch' expression switch_body ) )
switch_statement .reg_info.index: 854
switch_statement .first: {'@' 'switch'}
switch_statement .derives_empty: False
switch_statement .follow: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_body  -> ( Choice ( Seq switch_body/0.0 '{' switch_body/0.2 '}' ) )
switch_body .reg_info.index: 862
switch_body .first: {'@' '{'}
switch_body .derives_empty: False
switch_body .follow: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_clause  -> ( Choice case_clause default_alone_clause )
switch_clause .reg_info.index: 317
switch_clause .first: {'case' 'default'}
switch_clause .derives_empty: False
switch_clause .follow: {'case' 'default' '}'}
case_clause  -> ( Choice ( Seq 'case' case_selectors case_clause/0.2 compound_statement ) )
case_clause .reg_info.index: 872
case_clause .first: {'case'}
case_clause .derives_empty: False
case_clause .follow: {'case' 'default' '}'}
default_alone_clause  -> ( Choice ( Seq 'default' default_alone_clause/0.1 compound_statement ) )
default_alone_clause .reg_info.index: 878
default_alone_clause .first: {'default'}
default_alone_clause .derives_empty: False
default_alone_clause .follow: {'case' 'default' '}'}
case_selectors  -> ( Choice ( Seq case_selector case_selectors/0.1 case_selectors/0.2 ) )
case_selectors .reg_info.index: 885
case_selectors .first: {'!' '&' '(' '*' '-' 'default' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
case_selectors .derives_empty: False
case_selectors .follow: {':' '@' '{'}
case_selector  -> ( Choice 'default' expression )
case_selector .reg_info.index: 327
case_selector .first: {'!' '&' '(' '*' '-' 'default' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
case_selector .derives_empty: False
case_selector .follow: {',' ':' '@' '{'}
loop_statement  -> ( Choice ( Seq loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' ) )
loop_statement .reg_info.index: 898
loop_statement .first: {'@' 'loop'}
loop_statement .derives_empty: False
loop_statement .follow: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement  -> ( Choice ( Seq for_statement/0.0 'for' '(' for_header ')' compound_statement ) )
for_statement .reg_info.index: 907
for_statement .first: {'@' 'for'}
for_statement .derives_empty: False
for_statement .follow: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_header  -> ( Choice ( Seq for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 ) )
for_header .reg_info.index: 918
for_header .first: {'&' '(' '*' ';' '_' 'const' 'let' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_header .derives_empty: False
for_header .follow: {')'}
for_init  -> ( Choice variable_statement variable_updating_statement func_call_statement )
for_init .reg_info.index: 342
for_init .first: {'&' '(' '*' '_' 'const' 'let' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_init .derives_empty: False
for_init .follow: {';'}
for_update  -> ( Choice variable_updating_statement func_call_statement )
for_update .reg_info.index: 343
for_update .first: {'&' '(' '*' '_' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_update .derives_empty: False
for_update .follow: {')'}
while_statement  -> ( Choice ( Seq while_statement/0.0 'while' expression compound_statement ) )
while_statement .reg_info.index: 930
while_statement .first: {'@' 'while'}
while_statement .derives_empty: False
while_statement .follow: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement  -> 'break'
break_statement .reg_info.index: 67
break_statement .first: {'break'}
break_statement .derives_empty: False
break_statement .follow: {}
break_if_statement  -> ( Choice ( Seq 'break' 'if' expression ';' ) )
break_if_statement .reg_info.index: 438
break_if_statement .first: {'break'}
break_if_statement .derives_empty: False
break_if_statement .follow: {'}'}
continue_statement  -> 'continue'
continue_statement .reg_info.index: 68
continue_statement .first: {'continue'}
continue_statement .derives_empty: False
continue_statement .follow: {}
continuing_statement  -> ( Choice ( Seq 'continuing' continuing_compound_statement ) )
continuing_statement .reg_info.index: 439
continuing_statement .first: {'continuing'}
continuing_statement .derives_empty: False
continuing_statement .follow: {'}'}
continuing_compound_statement  -> ( Choice ( Seq continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' ) )
continuing_compound_statement .reg_info.index: 947
continuing_compound_statement .first: {'@' '{'}
continuing_compound_statement .derives_empty: False
continuing_compound_statement .follow: {'}'}
return_statement  -> ( Choice ( Seq 'return' return_statement/0.1 ) )
return_statement .reg_info.index: 952
return_statement .first: {'return'}
return_statement .derives_empty: False
return_statement .follow: {';'}
func_call_statement  -> call_phrase
func_call_statement .reg_info.index: 203
func_call_statement .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement .derives_empty: False
func_call_statement .follow: {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
const_assert_statement  -> ( Choice ( Seq 'const_assert' expression ) )
const_assert_statement .reg_info.index: 442
const_assert_statement .first: {'const_assert'}
const_assert_statement .derives_empty: False
const_assert_statement .follow: {';'}
statement  -> ( Choice ';' ( Seq return_statement ';' ) if_statement switch_statement loop_statement for_statement while_statement ( Seq func_call_statement ';' ) ( Seq variable_statement ';' ) ( Seq break_statement ';' ) ( Seq continue_statement ';' ) ( Seq 'discard' ';' ) ( Seq variable_updating_statement ';' ) compound_statement ( Seq const_assert_statement ';' ) )
statement .reg_info.index: 368
statement .first: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement .derives_empty: False
statement .follow: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_updating_statement  -> ( Choice assignment_statement increment_statement decrement_statement )
variable_updating_statement .reg_info.index: 372
variable_updating_statement .first: {'&' '(' '*' '_' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_updating_statement .derives_empty: False
variable_updating_statement .follow: {')' ';'}
function_decl  -> ( Choice ( Seq function_decl/0.0 function_header compound_statement ) )
function_decl .reg_info.index: 995
function_decl .first: {'@' 'fn'}
function_decl .derives_empty: False
function_decl .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_header  -> ( Choice ( Seq 'fn' ident '(' function_header/0.3 ')' function_header/0.5 ) )
function_header .reg_info.index: 1006
function_header .first: {'fn'}
function_header .derives_empty: False
function_header .follow: {'@' '{'}
param_list  -> ( Choice ( Seq param param_list/0.1 param_list/0.2 ) )
param_list .reg_info.index: 1013
param_list .first: {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list .derives_empty: False
param_list .follow: {')'}
param  -> ( Choice ( Seq param/0.0 ident ':' type_specifier ) )
param .reg_info.index: 1020
param .first: {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param .derives_empty: False
param .follow: {')' ','}
enable_directive  -> ( Choice ( Seq 'enable' enable_extension_name ';' ) )
enable_directive .reg_info.index: 447
enable_directive .first: {'enable'}
enable_directive .derives_empty: False
enable_directive .follow: {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
requires_directive  -> ( Choice ( Seq 'requires' software_extension_list ';' ) )
requires_directive .reg_info.index: 448
requires_directive .first: {'requires'}
requires_directive .derives_empty: False
requires_directive .follow: {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
software_extension_list  -> ( Choice ( Seq software_extension_name software_extension_list/0.1 software_extension_list/0.2 ) )
software_extension_list .reg_info.index: 1035
software_extension_list .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
software_extension_list .derives_empty: False
software_extension_list .follow: {';'}
enable_extension_name  -> ident_pattern_token
enable_extension_name .reg_info.index: 143
enable_extension_name .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
enable_extension_name .derives_empty: False
enable_extension_name .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
software_extension_name  -> ident_pattern_token
software_extension_name .reg_info.index: 143
software_extension_name .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
software_extension_name .derives_empty: False
software_extension_name .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
ident_pattern_token  -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
ident_pattern_token .reg_info.index: 77
ident_pattern_token .first: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
ident_pattern_token .derives_empty: False
ident_pattern_token .follow: {}
severity_control_name  -> ( Choice 'error' 'warning' 'info' 'off' )
severity_control_name .reg_info.index: 395
severity_control_name .first: {'error' 'info' 'off' 'warning'}
severity_control_name .derives_empty: False
severity_control_name .follow: {','}
swizzle_name  -> ( Choice '/[rgba]/' '/[rgba][rgba]/' '/[rgba][rgba][rgba]/' '/[rgba][rgba][rgba][rgba]/' '/[xyzw]/' '/[xyzw][xyzw]/' '/[xyzw][xyzw][xyzw]/' '/[xyzw][xyzw][xyzw][xyzw]/' )
swizzle_name .reg_info.index: 396
swizzle_name .first: {'/[rgba]/' '/[rgba][rgba]/' '/[rgba][rgba][rgba]/' '/[rgba][rgba][rgba][rgba]/' '/[xyzw]/' '/[xyzw][xyzw]/' '/[xyzw][xyzw][xyzw]/' '/[xyzw][xyzw][xyzw][xyzw]/'}
swizzle_name .derives_empty: False
swizzle_name .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
_comment  -> /\/\/.*/
_comment .reg_info.index: 90
_comment .first: {/\/\/.*/}
_comment .derives_empty: False
_comment .follow: {}
_blankspace  -> /[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_blankspace .reg_info.index: 91
_blankspace .first: {/[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/}
_blankspace .derives_empty: False
_blankspace .follow: {}
_greater_than_equal  -> /\u200B_greater_than_equal/
_greater_than_equal .reg_info.index: 92
_greater_than_equal .first: {/\u200B_greater_than_equal/}
_greater_than_equal .derives_empty: False
_greater_than_equal .follow: {}
_template_args_end  -> /\u200B_template_args_end/
_template_args_end .reg_info.index: 93
_template_args_end .first: {/\u200B_template_args_end/}
_template_args_end .derives_empty: False
_template_args_end .follow: {}
_less_than  -> /\u200B_less_than/
_less_than .reg_info.index: 94
_less_than .first: {/\u200B_less_than/}
_less_than .derives_empty: False
_less_than .follow: {}
_error_sentinel  -> /\u200B_error_sentinel/
_error_sentinel .reg_info.index: 95
_error_sentinel .first: {/\u200B_error_sentinel/}
_error_sentinel .derives_empty: False
_error_sentinel .follow: {}
_template_args_start  -> /\u200B_template_args_start/
_template_args_start .reg_info.index: 96
_template_args_start .first: {/\u200B_template_args_start/}
_template_args_start .derives_empty: False
_template_args_start .follow: {}
_disambiguate_template  -> /\u200B_disambiguate_template/
_disambiguate_template .reg_info.index: 97
_disambiguate_template .first: {/\u200B_disambiguate_template/}
_disambiguate_template .derives_empty: False
_disambiguate_template .follow: {}
_shift_right_assign  -> /\u200B_shift_right_assign/
_shift_right_assign .reg_info.index: 98
_shift_right_assign .first: {/\u200B_shift_right_assign/}
_shift_right_assign .derives_empty: False
_shift_right_assign .follow: {}
_shift_left  -> /\u200B_shift_left/
_shift_left .reg_info.index: 99
_shift_left .first: {/\u200B_shift_left/}
_shift_left .derives_empty: False
_shift_left .follow: {}
_shift_left_assign  -> /\u200B_shift_left_assign/
_shift_left_assign .reg_info.index: 100
_shift_left_assign .first: {/\u200B_shift_left_assign/}
_shift_left_assign .derives_empty: False
_shift_left_assign .follow: {}
_less_than_equal  -> /\u200B_less_than_equal/
_less_than_equal .reg_info.index: 101
_less_than_equal .first: {/\u200B_less_than_equal/}
_less_than_equal .derives_empty: False
_less_than_equal .follow: {}
_shift_right  -> /\u200B_shift_right/
_shift_right .reg_info.index: 102
_shift_right .first: {/\u200B_shift_right/}
_shift_right .derives_empty: False
_shift_right .follow: {}
_block_comment  -> /\u200B_block_comment/
_block_comment .reg_info.index: 103
_block_comment .first: {/\u200B_block_comment/}
_block_comment .derives_empty: False
_block_comment .follow: {}
_greater_than  -> /\u200B_greater_than/
_greater_than .reg_info.index: 104
_greater_than .first: {/\u200B_greater_than/}
_greater_than .derives_empty: False
_greater_than .follow: {}
language  -> ( Choice ( Seq translation_unit EndOfText ) )
language .reg_info.index: 450
language .first: {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
language .derives_empty: False
language .follow: {}
translation_unit/0.0  -> ( Choice translation_unit/0.0/0 Îµ )
translation_unit/0.0 .reg_info.index: 1115
translation_unit/0.0 .first: {'diagnostic' 'enable' 'requires' Îµ}
translation_unit/0.0 .derives_empty: True
translation_unit/0.0 .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.1  -> ( Choice translation_unit/0.1/0 Îµ )
translation_unit/0.1 .reg_info.index: 1119
translation_unit/0.1 .first: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' Îµ}
translation_unit/0.1 .derives_empty: True
translation_unit/0.1 .follow: {EndOfText}
template_arg_comma_list/0.1  -> ( Choice template_arg_comma_list/0.1/0 Îµ )
template_arg_comma_list/0.1 .reg_info.index: 1123
template_arg_comma_list/0.1 .first: {',' Îµ}
template_arg_comma_list/0.1 .derives_empty: True
template_arg_comma_list/0.1 .follow: {',' /\u200B_template_args_end/}
template_arg_comma_list/0.2  -> ( Choice ',' Îµ )
template_arg_comma_list/0.2 .reg_info.index: 154
template_arg_comma_list/0.2 .first: {',' Îµ}
template_arg_comma_list/0.2 .derives_empty: True
template_arg_comma_list/0.2 .follow: {')' ':' ';' '@' '{' '}' /\u200B_template_args_end/}
attribute/0.2  -> ( Choice argument_expression_list Îµ )
attribute/0.2 .reg_info.index: 158
attribute/0.2 .first: {'(' Îµ}
attribute/0.2 .derives_empty: True
attribute/0.2 .follow: {'@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
diagnostic_control/0.4  -> ( Choice ',' Îµ )
diagnostic_control/0.4 .reg_info.index: 154
diagnostic_control/0.4 .first: {',' Îµ}
diagnostic_control/0.4 .derives_empty: True
diagnostic_control/0.4 .follow: {')' ':' ';' '@' '{' '}' /\u200B_template_args_end/}
struct_body_decl/0.2  -> ( Choice struct_body_decl/0.2/0 Îµ )
struct_body_decl/0.2 .reg_info.index: 1130
struct_body_decl/0.2 .first: {',' Îµ}
struct_body_decl/0.2 .derives_empty: True
struct_body_decl/0.2 .follow: {',' '}'}
struct_body_decl/0.3  -> ( Choice ',' Îµ )
struct_body_decl/0.3 .reg_info.index: 154
struct_body_decl/0.3 .first: {',' Îµ}
struct_body_decl/0.3 .derives_empty: True
struct_body_decl/0.3 .follow: {')' ':' ';' '@' '{' '}' /\u200B_template_args_end/}
struct_member/0.0  -> ( Choice struct_member/0.0/0 Îµ )
struct_member/0.0 .reg_info.index: 1135
struct_member/0.0 .first: {'@' Îµ}
struct_member/0.0 .derives_empty: True
struct_member/0.0 .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
template_elaborated_ident/0.2  -> ( Choice template_list Îµ )
template_elaborated_ident/0.2 .reg_info.index: 182
template_elaborated_ident/0.2 .first: {/\u200B_template_args_start/ Îµ}
template_elaborated_ident/0.2 .derives_empty: True
template_elaborated_ident/0.2 .follow: {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '=' '==' '@' '[' ']' '^' '{' '|' '||' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
variable_decl/0.2  -> ( Choice template_list Îµ )
variable_decl/0.2 .reg_info.index: 182
variable_decl/0.2 .first: {/\u200B_template_args_start/ Îµ}
variable_decl/0.2 .derives_empty: True
variable_decl/0.2 .follow: {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '=' '==' '@' '[' ']' '^' '{' '|' '||' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
optionally_typed_ident/0.1  -> ( Choice ( Seq ':' type_specifier ) Îµ )
optionally_typed_ident/0.1 .reg_info.index: 192
optionally_typed_ident/0.1 .first: {':' Îµ}
optionally_typed_ident/0.1 .derives_empty: True
optionally_typed_ident/0.1 .follow: {';' '='}
global_variable_decl/0.0  -> ( Choice global_variable_decl/0.0/0 Îµ )
global_variable_decl/0.0 .reg_info.index: 1144
global_variable_decl/0.0 .first: {'@' Îµ}
global_variable_decl/0.0 .derives_empty: True
global_variable_decl/0.0 .follow: {'var'}
global_variable_decl/0.2  -> ( Choice ( Seq '=' expression ) Îµ )
global_variable_decl/0.2 .reg_info.index: 195
global_variable_decl/0.2 .first: {'=' Îµ}
global_variable_decl/0.2 .derives_empty: True
global_variable_decl/0.2 .follow: {';'}
global_constant_decl/1.0  -> ( Choice global_constant_decl/1.0/0 Îµ )
global_constant_decl/1.0 .reg_info.index: 1151
global_constant_decl/1.0 .first: {'@' Îµ}
global_constant_decl/1.0 .derives_empty: True
global_constant_decl/1.0 .follow: {'override'}
global_constant_decl/1.3  -> ( Choice ( Seq '=' expression ) Îµ )
global_constant_decl/1.3 .reg_info.index: 195
global_constant_decl/1.3 .first: {'=' Îµ}
global_constant_decl/1.3 .derives_empty: True
global_constant_decl/1.3 .follow: {';'}
argument_expression_list/0.1  -> ( Choice expression_comma_list Îµ )
argument_expression_list/0.1 .reg_info.index: 207
argument_expression_list/0.1 .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/ Îµ}
argument_expression_list/0.1 .derives_empty: True
argument_expression_list/0.1 .follow: {')'}
expression_comma_list/0.1  -> ( Choice expression_comma_list/0.1/0 Îµ )
expression_comma_list/0.1 .reg_info.index: 1159
expression_comma_list/0.1 .first: {',' Îµ}
expression_comma_list/0.1 .derives_empty: True
expression_comma_list/0.1 .follow: {')' ','}
expression_comma_list/0.2  -> ( Choice ',' Îµ )
expression_comma_list/0.2 .reg_info.index: 154
expression_comma_list/0.2 .first: {',' Îµ}
expression_comma_list/0.2 .derives_empty: True
expression_comma_list/0.2 .follow: {')' ':' ';' '@' '{' '}' /\u200B_template_args_end/}
component_or_swizzle_specifier/0.3  -> ( Choice component_or_swizzle_specifier Îµ )
component_or_swizzle_specifier/0.3 .reg_info.index: 214
component_or_swizzle_specifier/0.3 .first: {'.' '[' Îµ}
component_or_swizzle_specifier/0.3 .derives_empty: True
component_or_swizzle_specifier/0.3 .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier/1.2  -> ( Choice component_or_swizzle_specifier Îµ )
component_or_swizzle_specifier/1.2 .reg_info.index: 214
component_or_swizzle_specifier/1.2 .first: {'.' '[' Îµ}
component_or_swizzle_specifier/1.2 .derives_empty: True
component_or_swizzle_specifier/1.2 .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier/2.2  -> ( Choice component_or_swizzle_specifier Îµ )
component_or_swizzle_specifier/2.2 .reg_info.index: 214
component_or_swizzle_specifier/2.2 .first: {'.' '[' Îµ}
component_or_swizzle_specifier/2.2 .derives_empty: True
component_or_swizzle_specifier/2.2 .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
singular_expression/0.1  -> ( Choice component_or_swizzle_specifier Îµ )
singular_expression/0.1 .reg_info.index: 214
singular_expression/0.1 .first: {'.' '[' Îµ}
singular_expression/0.1 .derives_empty: True
singular_expression/0.1 .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
lhs_expression/0.1  -> ( Choice component_or_swizzle_specifier Îµ )
lhs_expression/0.1 .reg_info.index: 214
lhs_expression/0.1 .first: {'.' '[' Îµ}
lhs_expression/0.1 .derives_empty: True
lhs_expression/0.1 .follow: {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
compound_statement/0.0  -> ( Choice compound_statement/0.0/0 Îµ )
compound_statement/0.0 .reg_info.index: 1169
compound_statement/0.0 .first: {'@' Îµ}
compound_statement/0.0 .derives_empty: True
compound_statement/0.0 .follow: {'{'}
compound_statement/0.2  -> ( Choice compound_statement/0.2/0 Îµ )
compound_statement/0.2 .reg_info.index: 1173
compound_statement/0.2 .first: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Îµ}
compound_statement/0.2 .derives_empty: True
compound_statement/0.2 .follow: {'}'}
assignment_statement/0.1  -> ( Choice '=' compound_assignment_operator )
assignment_statement/0.1 .reg_info.index: 290
assignment_statement/0.1 .first: {'%=' '&=' '*=' '+=' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
assignment_statement/0.1 .derives_empty: False
assignment_statement/0.1 .follow: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
if_statement/0.0  -> ( Choice if_statement/0.0/0 Îµ )
if_statement/0.0 .reg_info.index: 1178
if_statement/0.0 .first: {'@' Îµ}
if_statement/0.0 .derives_empty: True
if_statement/0.0 .follow: {'if'}
if_statement/0.2  -> ( Choice if_statement/0.2/0 Îµ )
if_statement/0.2 .reg_info.index: 1182
if_statement/0.2 .first: {'else' Îµ}
if_statement/0.2 .derives_empty: True
if_statement/0.2 .follow: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.3  -> ( Choice else_clause Îµ )
if_statement/0.3 .reg_info.index: 304
if_statement/0.3 .first: {'else' Îµ}
if_statement/0.3 .derives_empty: True
if_statement/0.3 .follow: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0  -> ( Choice switch_statement/0.0/0 Îµ )
switch_statement/0.0 .reg_info.index: 1187
switch_statement/0.0 .first: {'@' Îµ}
switch_statement/0.0 .derives_empty: True
switch_statement/0.0 .follow: {'switch'}
switch_body/0.0  -> ( Choice switch_body/0.0/0 Îµ )
switch_body/0.0 .reg_info.index: 1191
switch_body/0.0 .first: {'@' Îµ}
switch_body/0.0 .derives_empty: True
switch_body/0.0 .follow: {'{'}
switch_body/0.2  -> ( Choice switch_body/0.2/0 )
switch_body/0.2 .reg_info.index: 1086
switch_body/0.2 .first: {'case' 'default' Îµ}
switch_body/0.2 .derives_empty: True
switch_body/0.2 .follow: {'}'}
case_clause/0.2  -> ( Choice ':' Îµ )
case_clause/0.2 .reg_info.index: 319
case_clause/0.2 .first: {':' Îµ}
case_clause/0.2 .derives_empty: True
case_clause/0.2 .follow: {'@' '{'}
default_alone_clause/0.1  -> ( Choice ':' Îµ )
default_alone_clause/0.1 .reg_info.index: 319
default_alone_clause/0.1 .first: {':' Îµ}
default_alone_clause/0.1 .derives_empty: True
default_alone_clause/0.1 .follow: {'@' '{'}
case_selectors/0.1  -> ( Choice case_selectors/0.1/0 Îµ )
case_selectors/0.1 .reg_info.index: 1197
case_selectors/0.1 .first: {',' Îµ}
case_selectors/0.1 .derives_empty: True
case_selectors/0.1 .follow: {',' ':' '@' '{'}
case_selectors/0.2  -> ( Choice ',' Îµ )
case_selectors/0.2 .reg_info.index: 154
case_selectors/0.2 .first: {',' Îµ}
case_selectors/0.2 .derives_empty: True
case_selectors/0.2 .follow: {')' ':' ';' '@' '{' '}' /\u200B_template_args_end/}
loop_statement/0.0  -> ( Choice loop_statement/0.0/0 Îµ )
loop_statement/0.0 .reg_info.index: 1202
loop_statement/0.0 .first: {'@' Îµ}
loop_statement/0.0 .derives_empty: True
loop_statement/0.0 .follow: {'loop'}
loop_statement/0.2  -> ( Choice loop_statement/0.2/0 Îµ )
loop_statement/0.2 .reg_info.index: 1206
loop_statement/0.2 .first: {'@' Îµ}
loop_statement/0.2 .derives_empty: True
loop_statement/0.2 .follow: {'{'}
loop_statement/0.4  -> ( Choice loop_statement/0.4/0 Îµ )
loop_statement/0.4 .reg_info.index: 1210
loop_statement/0.4 .first: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Îµ}
loop_statement/0.4 .derives_empty: True
loop_statement/0.4 .follow: {'continuing' '}'}
loop_statement/0.5  -> ( Choice continuing_statement Îµ )
loop_statement/0.5 .reg_info.index: 329
loop_statement/0.5 .first: {'continuing' Îµ}
loop_statement/0.5 .derives_empty: True
loop_statement/0.5 .follow: {'}'}
for_statement/0.0  -> ( Choice for_statement/0.0/0 Îµ )
for_statement/0.0 .reg_info.index: 1215
for_statement/0.0 .first: {'@' Îµ}
for_statement/0.0 .derives_empty: True
for_statement/0.0 .follow: {'for'}
for_header/0.0  -> ( Choice for_init Îµ )
for_header/0.0 .reg_info.index: 334
for_header/0.0 .first: {'&' '(' '*' '_' 'const' 'let' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Îµ}
for_header/0.0 .derives_empty: True
for_header/0.0 .follow: {';'}
for_header/0.2  -> ( Choice expression Îµ )
for_header/0.2 .reg_info.index: 335
for_header/0.2 .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/ Îµ}
for_header/0.2 .derives_empty: True
for_header/0.2 .follow: {';'}
for_header/0.4  -> ( Choice for_update Îµ )
for_header/0.4 .reg_info.index: 337
for_header/0.4 .first: {'&' '(' '*' '_' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Îµ}
for_header/0.4 .derives_empty: True
for_header/0.4 .follow: {')'}
while_statement/0.0  -> ( Choice while_statement/0.0/0 Îµ )
while_statement/0.0 .reg_info.index: 1222
while_statement/0.0 .first: {'@' Îµ}
while_statement/0.0 .derives_empty: True
while_statement/0.0 .follow: {'while'}
continuing_compound_statement/0.0  -> ( Choice continuing_compound_statement/0.0/0 Îµ )
continuing_compound_statement/0.0 .reg_info.index: 1226
continuing_compound_statement/0.0 .first: {'@' Îµ}
continuing_compound_statement/0.0 .derives_empty: True
continuing_compound_statement/0.0 .follow: {'{'}
continuing_compound_statement/0.2  -> ( Choice continuing_compound_statement/0.2/0 Îµ )
continuing_compound_statement/0.2 .reg_info.index: 1230
continuing_compound_statement/0.2 .first: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Îµ}
continuing_compound_statement/0.2 .derives_empty: True
continuing_compound_statement/0.2 .follow: {'break' '}'}
continuing_compound_statement/0.3  -> ( Choice break_if_statement Îµ )
continuing_compound_statement/0.3 .reg_info.index: 349
continuing_compound_statement/0.3 .first: {'break' Îµ}
continuing_compound_statement/0.3 .derives_empty: True
continuing_compound_statement/0.3 .follow: {'}'}
return_statement/0.1  -> ( Choice expression Îµ )
return_statement/0.1 .reg_info.index: 335
return_statement/0.1 .first: {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/ Îµ}
return_statement/0.1 .derives_empty: True
return_statement/0.1 .follow: {';'}
function_decl/0.0  -> ( Choice function_decl/0.0/0 Îµ )
function_decl/0.0 .reg_info.index: 1236
function_decl/0.0 .first: {'@' Îµ}
function_decl/0.0 .derives_empty: True
function_decl/0.0 .follow: {'fn'}
function_header/0.3  -> ( Choice param_list Îµ )
function_header/0.3 .reg_info.index: 376
function_header/0.3 .first: {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Îµ}
function_header/0.3 .derives_empty: True
function_header/0.3 .follow: {')'}
function_header/0.5  -> ( Choice ( Seq '->' function_header/0.5/0.1 template_elaborated_ident ) Îµ )
function_header/0.5 .reg_info.index: 1243
function_header/0.5 .first: {'->' Îµ}
function_header/0.5 .derives_empty: True
function_header/0.5 .follow: {'@' '{'}
param_list/0.1  -> ( Choice param_list/0.1/0 Îµ )
param_list/0.1 .reg_info.index: 1247
param_list/0.1 .first: {',' Îµ}
param_list/0.1 .derives_empty: True
param_list/0.1 .follow: {')' ','}
param_list/0.2  -> ( Choice ',' Îµ )
param_list/0.2 .reg_info.index: 154
param_list/0.2 .first: {',' Îµ}
param_list/0.2 .derives_empty: True
param_list/0.2 .follow: {')' ':' ';' '@' '{' '}' /\u200B_template_args_end/}
param/0.0  -> ( Choice param/0.0/0 Îµ )
param/0.0 .reg_info.index: 1252
param/0.0 .first: {'@' Îµ}
param/0.0 .derives_empty: True
param/0.0 .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
software_extension_list/0.1  -> ( Choice software_extension_list/0.1/0 Îµ )
software_extension_list/0.1 .reg_info.index: 1256
software_extension_list/0.1 .first: {',' Îµ}
software_extension_list/0.1 .derives_empty: True
software_extension_list/0.1 .follow: {',' ';'}
software_extension_list/0.2  -> ( Choice ',' Îµ )
software_extension_list/0.2 .reg_info.index: 154
software_extension_list/0.2 .first: {',' Îµ}
software_extension_list/0.2 .derives_empty: True
software_extension_list/0.2 .follow: {')' ':' ';' '@' '{' '}' /\u200B_template_args_end/}
switch_body/0.2/0  -> ( Choice ( Seq switch_clause switch_body/0.2/0 ) Îµ )
switch_body/0.2/0 .reg_info.index: 1085
switch_body/0.2/0 .first: {'case' 'default' Îµ}
switch_body/0.2/0 .derives_empty: True
switch_body/0.2/0 .follow: {'}'}
translation_unit/0.0/0  -> ( Choice ( Seq global_directive translation_unit/0.0/0 ) Îµ )
translation_unit/0.0/0 .reg_info.index: 1113
translation_unit/0.0/0 .first: {'diagnostic' 'enable' 'requires' Îµ}
translation_unit/0.0/0 .derives_empty: True
translation_unit/0.0/0 .follow: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.1/0  -> ( Choice ( Seq global_decl translation_unit/0.1/0 ) Îµ )
translation_unit/0.1/0 .reg_info.index: 1117
translation_unit/0.1/0 .first: {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' Îµ}
translation_unit/0.1/0 .derives_empty: True
translation_unit/0.1/0 .follow: {EndOfText}
template_arg_comma_list/0.1/0  -> ( Choice ( Seq template_arg_comma_list/0.1/0/0.0 template_arg_comma_list/0.1/0 ) Îµ )
template_arg_comma_list/0.1/0 .reg_info.index: 1276
template_arg_comma_list/0.1/0 .first: {',' Îµ}
template_arg_comma_list/0.1/0 .derives_empty: True
template_arg_comma_list/0.1/0 .follow: {',' /\u200B_template_args_end/}
struct_body_decl/0.2/0  -> ( Choice ( Seq struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 ) Îµ )
struct_body_decl/0.2/0 .reg_info.index: 1283
struct_body_decl/0.2/0 .first: {',' Îµ}
struct_body_decl/0.2/0 .derives_empty: True
struct_body_decl/0.2/0 .follow: {',' '}'}
struct_member/0.0/0  -> ( Choice ( Seq attribute struct_member/0.0/0 ) Îµ )
struct_member/0.0/0 .reg_info.index: 1133
struct_member/0.0/0 .first: {'@' Îµ}
struct_member/0.0/0 .derives_empty: True
struct_member/0.0/0 .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
global_variable_decl/0.0/0  -> ( Choice ( Seq attribute global_variable_decl/0.0/0 ) Îµ )
global_variable_decl/0.0/0 .reg_info.index: 1142
global_variable_decl/0.0/0 .first: {'@' Îµ}
global_variable_decl/0.0/0 .derives_empty: True
global_variable_decl/0.0/0 .follow: {'var'}
global_constant_decl/1.0/0  -> ( Choice ( Seq attribute global_constant_decl/1.0/0 ) Îµ )
global_constant_decl/1.0/0 .reg_info.index: 1149
global_constant_decl/1.0/0 .first: {'@' Îµ}
global_constant_decl/1.0/0 .derives_empty: True
global_constant_decl/1.0/0 .follow: {'override'}
expression_comma_list/0.1/0  -> ( Choice ( Seq expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 ) Îµ )
expression_comma_list/0.1/0 .reg_info.index: 1302
expression_comma_list/0.1/0 .first: {',' Îµ}
expression_comma_list/0.1/0 .derives_empty: True
expression_comma_list/0.1/0 .follow: {')' ','}
compound_statement/0.0/0  -> ( Choice ( Seq attribute compound_statement/0.0/0 ) Îµ )
compound_statement/0.0/0 .reg_info.index: 1167
compound_statement/0.0/0 .first: {'@' Îµ}
compound_statement/0.0/0 .derives_empty: True
compound_statement/0.0/0 .follow: {'{'}
compound_statement/0.2/0  -> ( Choice ( Seq statement compound_statement/0.2/0 ) Îµ )
compound_statement/0.2/0 .reg_info.index: 1171
compound_statement/0.2/0 .first: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Îµ}
compound_statement/0.2/0 .derives_empty: True
compound_statement/0.2/0 .follow: {'}'}
if_statement/0.0/0  -> ( Choice ( Seq attribute if_statement/0.0/0 ) Îµ )
if_statement/0.0/0 .reg_info.index: 1176
if_statement/0.0/0 .first: {'@' Îµ}
if_statement/0.0/0 .derives_empty: True
if_statement/0.0/0 .follow: {'if'}
if_statement/0.2/0  -> ( Choice ( Seq else_if_clause if_statement/0.2/0 ) Îµ )
if_statement/0.2/0 .reg_info.index: 1180
if_statement/0.2/0 .first: {'else' Îµ}
if_statement/0.2/0 .derives_empty: True
if_statement/0.2/0 .follow: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0/0  -> ( Choice ( Seq attribute switch_statement/0.0/0 ) Îµ )
switch_statement/0.0/0 .reg_info.index: 1185
switch_statement/0.0/0 .first: {'@' Îµ}
switch_statement/0.0/0 .derives_empty: True
switch_statement/0.0/0 .follow: {'switch'}
switch_body/0.0/0  -> ( Choice ( Seq attribute switch_body/0.0/0 ) Îµ )
switch_body/0.0/0 .reg_info.index: 1189
switch_body/0.0/0 .first: {'@' Îµ}
switch_body/0.0/0 .derives_empty: True
switch_body/0.0/0 .follow: {'{'}
case_selectors/0.1/0  -> ( Choice ( Seq case_selectors/0.1/0/0.0 case_selectors/0.1/0 ) Îµ )
case_selectors/0.1/0 .reg_info.index: 1333
case_selectors/0.1/0 .first: {',' Îµ}
case_selectors/0.1/0 .derives_empty: True
case_selectors/0.1/0 .follow: {',' ':' '@' '{'}
loop_statement/0.0/0  -> ( Choice ( Seq attribute loop_statement/0.0/0 ) Îµ )
loop_statement/0.0/0 .reg_info.index: 1200
loop_statement/0.0/0 .first: {'@' Îµ}
loop_statement/0.0/0 .derives_empty: True
loop_statement/0.0/0 .follow: {'loop'}
loop_statement/0.2/0  -> ( Choice ( Seq attribute loop_statement/0.2/0 ) Îµ )
loop_statement/0.2/0 .reg_info.index: 1204
loop_statement/0.2/0 .first: {'@' Îµ}
loop_statement/0.2/0 .derives_empty: True
loop_statement/0.2/0 .follow: {'{'}
loop_statement/0.4/0  -> ( Choice ( Seq statement loop_statement/0.4/0 ) Îµ )
loop_statement/0.4/0 .reg_info.index: 1208
loop_statement/0.4/0 .first: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Îµ}
loop_statement/0.4/0 .derives_empty: True
loop_statement/0.4/0 .follow: {'continuing' '}'}
for_statement/0.0/0  -> ( Choice ( Seq attribute for_statement/0.0/0 ) Îµ )
for_statement/0.0/0 .reg_info.index: 1213
for_statement/0.0/0 .first: {'@' Îµ}
for_statement/0.0/0 .derives_empty: True
for_statement/0.0/0 .follow: {'for'}
while_statement/0.0/0  -> ( Choice ( Seq attribute while_statement/0.0/0 ) Îµ )
while_statement/0.0/0 .reg_info.index: 1220
while_statement/0.0/0 .first: {'@' Îµ}
while_statement/0.0/0 .derives_empty: True
while_statement/0.0/0 .follow: {'while'}
continuing_compound_statement/0.0/0  -> ( Choice ( Seq attribute continuing_compound_statement/0.0/0 ) Îµ )
continuing_compound_statement/0.0/0 .reg_info.index: 1224
continuing_compound_statement/0.0/0 .first: {'@' Îµ}
continuing_compound_statement/0.0/0 .derives_empty: True
continuing_compound_statement/0.0/0 .follow: {'{'}
continuing_compound_statement/0.2/0  -> ( Choice ( Seq statement continuing_compound_statement/0.2/0 ) Îµ )
continuing_compound_statement/0.2/0 .reg_info.index: 1228
continuing_compound_statement/0.2/0 .first: {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Îµ}
continuing_compound_statement/0.2/0 .derives_empty: True
continuing_compound_statement/0.2/0 .follow: {'break' '}'}
function_decl/0.0/0  -> ( Choice ( Seq attribute function_decl/0.0/0 ) Îµ )
function_decl/0.0/0 .reg_info.index: 1234
function_decl/0.0/0 .first: {'@' Îµ}
function_decl/0.0/0 .derives_empty: True
function_decl/0.0/0 .follow: {'fn'}
function_header/0.5/0.1  -> ( Choice function_header/0.5/0.1/0 Îµ )
function_header/0.5/0.1 .reg_info.index: 1388
function_header/0.5/0.1 .first: {'@' Îµ}
function_header/0.5/0.1 .derives_empty: True
function_header/0.5/0.1 .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.1/0  -> ( Choice ( Seq param_list/0.1/0/0.0 param_list/0.1/0 ) Îµ )
param_list/0.1/0 .reg_info.index: 1373
param_list/0.1/0 .first: {',' Îµ}
param_list/0.1/0 .derives_empty: True
param_list/0.1/0 .follow: {')' ','}
param/0.0/0  -> ( Choice ( Seq attribute param/0.0/0 ) Îµ )
param/0.0/0 .reg_info.index: 1250
param/0.0/0 .first: {'@' Îµ}
param/0.0/0 .derives_empty: True
param/0.0/0 .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
software_extension_list/0.1/0  -> ( Choice ( Seq software_extension_list/0.1/0/0.0 software_extension_list/0.1/0 ) Îµ )
software_extension_list/0.1/0 .reg_info.index: 1384
software_extension_list/0.1/0 .first: {',' Îµ}
software_extension_list/0.1/0 .derives_empty: True
software_extension_list/0.1/0 .follow: {',' ';'}
template_arg_comma_list/0.1/0/0.0  -> ( Choice ( Seq ',' template_arg_expression ) )
template_arg_comma_list/0.1/0/0.0 .reg_info.index: 1272
template_arg_comma_list/0.1/0/0.0 .first: {','}
template_arg_comma_list/0.1/0/0.0 .derives_empty: False
template_arg_comma_list/0.1/0/0.0 .follow: {',' /\u200B_template_args_end/}
struct_body_decl/0.2/0/0.0  -> ( Choice ( Seq ',' struct_member ) )
struct_body_decl/0.2/0/0.0 .reg_info.index: 1279
struct_body_decl/0.2/0/0.0 .first: {','}
struct_body_decl/0.2/0/0.0 .derives_empty: False
struct_body_decl/0.2/0/0.0 .follow: {',' '}'}
expression_comma_list/0.1/0/0.0  -> ( Choice ( Seq ',' expression ) )
expression_comma_list/0.1/0/0.0 .reg_info.index: 1298
expression_comma_list/0.1/0/0.0 .first: {','}
expression_comma_list/0.1/0/0.0 .derives_empty: False
expression_comma_list/0.1/0/0.0 .follow: {')' ','}
case_selectors/0.1/0/0.0  -> ( Choice ( Seq ',' case_selector ) )
case_selectors/0.1/0/0.0 .reg_info.index: 1329
case_selectors/0.1/0/0.0 .first: {','}
case_selectors/0.1/0/0.0 .derives_empty: False
case_selectors/0.1/0/0.0 .follow: {',' ':' '@' '{'}
param_list/0.1/0/0.0  -> ( Choice ( Seq ',' param ) )
param_list/0.1/0/0.0 .reg_info.index: 1369
param_list/0.1/0/0.0 .first: {','}
param_list/0.1/0/0.0 .derives_empty: False
param_list/0.1/0/0.0 .follow: {')' ','}
software_extension_list/0.1/0/0.0  -> ( Choice ( Seq ',' software_extension_name ) )
software_extension_list/0.1/0/0.0 .reg_info.index: 1380
software_extension_list/0.1/0/0.0 .first: {','}
software_extension_list/0.1/0/0.0 .derives_empty: False
software_extension_list/0.1/0/0.0 .follow: {',' ';'}
function_header/0.5/0.1/0  -> ( Choice ( Seq attribute function_header/0.5/0.1/0 ) Îµ )
function_header/0.5/0.1/0 .reg_info.index: 1386
function_header/0.5/0.1/0 .first: {'@' Îµ}
function_header/0.5/0.1/0 .derives_empty: True
function_header/0.5/0.1/0 .follow: {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

=LALR1 item sets:
#0
language -> Â· translation_unit EndOfText : {EndOfText}
diagnostic_directive -> Â· 'diagnostic' diagnostic_control ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
enable_directive -> Â· 'enable' enable_extension_name ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
global_directive -> Â· diagnostic_directive : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
global_directive -> Â· enable_directive : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
global_directive -> Â· requires_directive : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
requires_directive -> Â· 'requires' software_extension_list ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
translation_unit -> Â· translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> Â· translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.0/0 -> Â· global_directive translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#1
language -> translation_unit Â· EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 Â· translation_unit/0.1 : {EndOfText}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' 'fn' 'override' 'var'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' 'fn' 'override' 'var'}
const_assert_statement -> Â· 'const_assert' expression : {';'}
function_decl -> Â· function_decl/0.0 function_header compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_decl/0.0 -> Â· function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> Â· attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> Â· 'const' optionally_typed_ident '=' expression : {';'}
global_constant_decl -> Â· global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> Â· global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> Â· attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> Â· ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> Â· const_assert_statement ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> Â· function_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> Â· global_constant_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> Â· global_variable_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> Â· struct_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> Â· type_alias_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_variable_decl -> Â· global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> Â· global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> Â· attribute global_variable_decl/0.0/0 : {'var'}
struct_decl -> Â· 'struct' ident struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.1 -> Â· translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> Â· global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> Â· 'alias' ident '=' type_specifier : {';'}

#3
translation_unit/0.0 -> translation_unit/0.0/0 Â· : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#4
translation_unit/0.0/0 -> global_directive Â· translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
diagnostic_directive -> Â· 'diagnostic' diagnostic_control ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
enable_directive -> Â· 'enable' enable_extension_name ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
global_directive -> Â· diagnostic_directive : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
global_directive -> Â· enable_directive : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
global_directive -> Â· requires_directive : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
requires_directive -> Â· 'requires' software_extension_list ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
translation_unit/0.0/0 -> Â· global_directive translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#5
global_directive -> diagnostic_directive Â· : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}

#6
global_directive -> enable_directive Â· : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}

#7
global_directive -> requires_directive Â· : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}

#8
diagnostic_directive -> 'diagnostic' Â· diagnostic_control ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
diagnostic_control -> Â· '(' severity_control_name ',' diagnostic_rule_name diagnostic_control/0.4 ')' : {';'}

#9
enable_directive -> 'enable' Â· enable_extension_name ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
enable_extension_name -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';'}

#10
requires_directive -> 'requires' Â· software_extension_list ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}
software_extension_list -> Â· software_extension_name software_extension_list/0.1 software_extension_list/0.2 : {';'}
software_extension_name -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' ';'}

#11
requires_directive -> 'requires' software_extension_list Â· ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}

#12
software_extension_list -> software_extension_name Â· software_extension_list/0.1 software_extension_list/0.2 : {';'}
software_extension_list/0.1 -> Â· software_extension_list/0.1/0 : {',' ';'}
software_extension_list/0.1/0 -> Â· software_extension_list/0.1/0/0.0 software_extension_list/0.1/0 : {',' ';'}
software_extension_list/0.1/0/0.0 -> Â· ',' software_extension_name : {',' ';'}

#13
software_extension_name -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Â· : {',' ';'}

#14
enable_directive -> 'enable' enable_extension_name Â· ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}

#15
enable_extension_name -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Â· : {';'}

#16
diagnostic_directive -> 'diagnostic' diagnostic_control Â· ';' : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}

#17
diagnostic_control -> '(' Â· severity_control_name ',' diagnostic_rule_name diagnostic_control/0.4 ')' : {';' '@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
severity_control_name -> Â· 'error' : {','}
severity_control_name -> Â· 'info' : {','}
severity_control_name -> Â· 'off' : {','}
severity_control_name -> Â· 'warning' : {','}

#18
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 Â· : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#19
translation_unit -> translation_unit/0.0 translation_unit/0.1 Â· : {EndOfText}

#20
translation_unit/0.1 -> translation_unit/0.1/0 Â· : {EndOfText}

#21
translation_unit/0.1/0 -> global_decl Â· translation_unit/0.1/0 : {EndOfText}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' 'fn' 'override' 'var'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' 'fn' 'override' 'var'}
const_assert_statement -> Â· 'const_assert' expression : {';'}
function_decl -> Â· function_decl/0.0 function_header compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_decl/0.0 -> Â· function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> Â· attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> Â· 'const' optionally_typed_ident '=' expression : {';'}
global_constant_decl -> Â· global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> Â· global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> Â· attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> Â· ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> Â· const_assert_statement ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> Â· function_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> Â· global_constant_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> Â· global_variable_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> Â· struct_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> Â· type_alias_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_variable_decl -> Â· global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> Â· global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> Â· attribute global_variable_decl/0.0/0 : {'var'}
struct_decl -> Â· 'struct' ident struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.1/0 -> Â· global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> Â· 'alias' ident '=' type_specifier : {';'}

#22
global_decl -> ';' Â· : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#23
global_decl -> global_variable_decl Â· ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#24
global_decl -> global_constant_decl Â· ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#25
global_decl -> type_alias_decl Â· ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#26
global_decl -> struct_decl Â· : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#27
global_decl -> function_decl Â· : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#28
global_decl -> const_assert_statement Â· ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#29
global_variable_decl -> global_variable_decl/0.0 Â· variable_decl global_variable_decl/0.2 : {';'}
variable_decl -> Â· 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}

#30
global_constant_decl -> 'const' Â· optionally_typed_ident '=' expression : {';'}
ident -> Â· ident_pattern_token _disambiguate_template : {':' '='}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
optionally_typed_ident -> Â· ident optionally_typed_ident/0.1 : {'='}

#31
global_constant_decl -> global_constant_decl/1.0 Â· 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}

#32
type_alias_decl -> 'alias' Â· ident '=' type_specifier : {';'}
ident -> Â· ident_pattern_token _disambiguate_template : {'='}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}

#33
struct_decl -> 'struct' Â· ident struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
ident -> Â· ident_pattern_token _disambiguate_template : {'{'}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}

#34
function_decl -> function_decl/0.0 Â· function_header compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_header -> Â· 'fn' ident '(' function_header/0.3 ')' function_header/0.5 : {'@' '{'}

#35
const_assert_statement -> 'const_assert' Â· expression : {';'}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {';'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {';'}
expression -> Â· relational_expression : {';'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {';'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#36
global_variable_decl/0.0 -> global_variable_decl/0.0/0 Â· : {'var'}

#37
global_constant_decl/1.0 -> global_constant_decl/1.0/0 Â· : {'override'}

#38
function_decl/0.0 -> function_decl/0.0/0 Â· : {'fn'}

#39
function_decl/0.0/0 -> attribute Â· function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> attribute Â· global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> attribute Â· global_variable_decl/0.0/0 : {'var'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' 'fn' 'override' 'var'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' 'fn' 'override' 'var'}
function_decl/0.0/0 -> Â· attribute function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> Â· attribute global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> Â· attribute global_variable_decl/0.0/0 : {'var'}

#40
attribute -> '@' Â· 'diagnostic' diagnostic_control : {'@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> '@' Â· ident_pattern_token attribute/0.2 : {'@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' '@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#41
attribute -> '@' ident_pattern_token Â· attribute/0.2 : {'@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
argument_expression_list -> Â· '(' argument_expression_list/0.1 ')' : {'@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute/0.2 -> Â· argument_expression_list : {'@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#42
attribute -> '@' 'diagnostic' Â· diagnostic_control : {'@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
diagnostic_control -> Â· '(' severity_control_name ',' diagnostic_rule_name diagnostic_control/0.4 ')' : {'@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#43
ident_pattern_token -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Â· : {'(' '@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_disambiguate_template/}

#44
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 Â· : {'var'}

#45
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 Â· : {'override'}

#46
function_decl/0.0/0 -> attribute function_decl/0.0/0 Â· : {'fn'}

#47
const_assert_statement -> 'const_assert' expression Â· : {';'}

#48
expression -> relational_expression Â· : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_and_expression -> relational_expression Â· : {'&&'}
short_circuit_or_expression -> relational_expression Â· : {'||'}

#49
expression -> short_circuit_or_expression Â· '||' relational_expression : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression Â· '||' relational_expression : {'||'}

#50
expression -> short_circuit_and_expression Â· '&&' relational_expression : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression Â· '&&' relational_expression : {'&&'}

#51
expression -> bitwise_expression Â· : {')' ',' ':' ';' '@' ']' '{'}

#52
relational_expression -> shift_expression Â· '!=' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
relational_expression -> shift_expression Â· '==' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
relational_expression -> shift_expression Â· : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
relational_expression -> shift_expression Â· _greater_than shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
relational_expression -> shift_expression Â· _greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
relational_expression -> shift_expression Â· _less_than shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
relational_expression -> shift_expression Â· _less_than_equal shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
_greater_than -> Â· /\u200B_greater_than/ : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
_greater_than_equal -> Â· /\u200B_greater_than_equal/ : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
_less_than -> Â· /\u200B_less_than/ : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
_less_than_equal -> Â· /\u200B_less_than_equal/ : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#53
binary_and_expression -> binary_and_expression Â· '&' unary_expression : {'&'}
bitwise_expression -> binary_and_expression Â· '&' unary_expression : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}

#54
binary_or_expression -> binary_or_expression Â· '|' unary_expression : {'|'}
bitwise_expression -> binary_or_expression Â· '|' unary_expression : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}

#55
binary_xor_expression -> binary_xor_expression Â· '^' unary_expression : {'^'}
bitwise_expression -> binary_xor_expression Â· '^' unary_expression : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}

#56
additive_expression -> additive_expression Â· additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
shift_expression -> additive_expression Â· : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
additive_operator -> Â· '+' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_operator -> Â· '-' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#57
binary_and_expression -> unary_expression Â· : {'&'}
binary_or_expression -> unary_expression Â· : {'|'}
binary_xor_expression -> unary_expression Â· : {'^'}
multiplicative_expression -> unary_expression Â· : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
shift_expression -> unary_expression Â· _shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
shift_expression -> unary_expression Â· _shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
_shift_left -> Â· /\u200B_shift_left/ : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
_shift_right -> Â· /\u200B_shift_right/ : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#58
additive_expression -> multiplicative_expression Â· : {'!=' '&&' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multiplicative_expression -> multiplicative_expression Â· multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multiplicative_operator -> Â· '%' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> Â· '*' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> Â· '/' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#59
unary_expression -> singular_expression Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#60
unary_expression -> '-' Â· unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#61
unary_expression -> '!' Â· unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#62
unary_expression -> '~' Â· unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#63
unary_expression -> '*' Â· unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#64
unary_expression -> '&' Â· unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#65
singular_expression -> primary_expression Â· singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> Â· '.' member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> Â· '.' swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> Â· '[' expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
singular_expression/0.1 -> Â· component_or_swizzle_specifier : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#66
call_expression -> template_elaborated_ident Â· argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> template_elaborated_ident Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
argument_expression_list -> Â· '(' argument_expression_list/0.1 ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#67
primary_expression -> call_expression Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#68
primary_expression -> literal Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#69
primary_expression -> paren_expression Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#70
template_elaborated_ident -> ident Â· _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
_disambiguate_template -> Â· /\u200B_disambiguate_template/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/ /\u200B_template_args_start/}

#71
literal -> int_literal Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#72
literal -> float_literal Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#73
literal -> bool_literal Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#74
paren_expression -> '(' Â· expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' ')' '+' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {')'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {')'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {')'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {')'}
expression -> Â· relational_expression : {')'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {')'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {')'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ')' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ')' '||'}
relational_expression -> Â· shift_expression : {'&&' ')' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ')' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ')' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ')' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ')' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' ')' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ')' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ')' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#75
ident -> ident_pattern_token Â· _disambiguate_template : {'(' ':' ';' '=' '{' /\u200B_disambiguate_template/}
_disambiguate_template -> Â· /\u200B_disambiguate_template/ : {'(' ':' ';' '=' '{' /\u200B_disambiguate_template/}

#76
int_literal -> decimal_int_literal Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#77
int_literal -> hex_int_literal Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#78
float_literal -> decimal_float_literal Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#79
float_literal -> hex_float_literal Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#80
bool_literal -> 'true' Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#81
bool_literal -> 'false' Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#82
decimal_int_literal -> /0[iu]?/ Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#83
decimal_int_literal -> /[1-9][0-9]*[iu]?/ Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#84
hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#85
decimal_float_literal -> /0[fh]/ Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#86
decimal_float_literal -> /[1-9][0-9]*[fh]/ Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#87
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#88
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#89
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#90
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#91
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#92
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#93
function_decl -> function_decl/0.0 function_header Â· compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' '{'}
compound_statement -> Â· compound_statement/0.0 '{' compound_statement/0.2 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
compound_statement/0.0 -> Â· compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> Â· attribute compound_statement/0.0/0 : {'{'}

#94
function_header -> 'fn' Â· ident '(' function_header/0.3 ')' function_header/0.5 : {'@' '{'}
ident -> Â· ident_pattern_token _disambiguate_template : {'('}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}

#95
struct_decl -> 'struct' ident Â· struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl -> Â· '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#96
type_alias_decl -> 'alias' ident Â· '=' type_specifier : {';'}

#97
global_constant_decl -> global_constant_decl/1.0 'override' Â· optionally_typed_ident global_constant_decl/1.3 : {';'}
ident -> Â· ident_pattern_token _disambiguate_template : {':' ';' '='}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
optionally_typed_ident -> Â· ident optionally_typed_ident/0.1 : {';' '='}

#98
global_constant_decl -> 'const' optionally_typed_ident Â· '=' expression : {';'}

#99
optionally_typed_ident -> ident Â· optionally_typed_ident/0.1 : {';' '='}
optionally_typed_ident/0.1 -> Â· ':' type_specifier : {';' '='}

#100
global_variable_decl -> global_variable_decl/0.0 variable_decl Â· global_variable_decl/0.2 : {';'}
global_variable_decl/0.2 -> Â· '=' expression : {';'}

#101
variable_decl -> 'var' Â· _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}
_disambiguate_template -> Â· /\u200B_disambiguate_template/ : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_template_args_start/}

#102
global_decl -> const_assert_statement ';' Â· : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#103
global_decl -> type_alias_decl ';' Â· : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#104
global_decl -> global_constant_decl ';' Â· : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#105
global_decl -> global_variable_decl ';' Â· : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#106
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 Â· : {EndOfText}

#107
diagnostic_control -> '(' severity_control_name Â· ',' diagnostic_rule_name diagnostic_control/0.4 ')' : {';' '@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#108
severity_control_name -> 'error' Â· : {','}

#109
severity_control_name -> 'warning' Â· : {','}

#110
severity_control_name -> 'info' Â· : {','}

#111
severity_control_name -> 'off' Â· : {','}

#112
diagnostic_directive -> 'diagnostic' diagnostic_control ';' Â· : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}

#113
enable_directive -> 'enable' enable_extension_name ';' Â· : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}

#114
software_extension_list -> software_extension_name software_extension_list/0.1 Â· software_extension_list/0.2 : {';'}
software_extension_list/0.2 -> Â· ',' : {';'}

#115
software_extension_list/0.1 -> software_extension_list/0.1/0 Â· : {',' ';'}

#116
software_extension_list/0.1/0 -> software_extension_list/0.1/0/0.0 Â· software_extension_list/0.1/0 : {',' ';'}
software_extension_list/0.1/0 -> Â· software_extension_list/0.1/0/0.0 software_extension_list/0.1/0 : {',' ';'}
software_extension_list/0.1/0/0.0 -> Â· ',' software_extension_name : {',' ';'}

#117
software_extension_list/0.1/0/0.0 -> ',' Â· software_extension_name : {',' ';'}
software_extension_name -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' ';'}

#118
requires_directive -> 'requires' software_extension_list ';' Â· : {';' '@' 'alias' 'const' 'const_assert' 'diagnostic' 'enable' 'fn' 'override' 'requires' 'struct' 'var' EndOfText}

#119
software_extension_list/0.1/0/0.0 -> ',' software_extension_name Â· : {',' ';'}

#120
software_extension_list/0.1/0 -> software_extension_list/0.1/0/0.0 software_extension_list/0.1/0 Â· : {',' ';'}

#121
software_extension_list -> software_extension_name software_extension_list/0.1 software_extension_list/0.2 Â· : {';'}

#122
software_extension_list/0.2 -> ',' Â· : {';'}

#123
diagnostic_control -> '(' severity_control_name ',' Â· diagnostic_rule_name diagnostic_control/0.4 ')' : {';' '@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
diagnostic_rule_name -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' ','}

#124
variable_decl -> 'var' _disambiguate_template Â· variable_decl/0.2 optionally_typed_ident : {';' '='}
_template_args_start -> Â· /\u200B_template_args_start/ : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
template_list -> Â· _template_args_start template_arg_comma_list _template_args_end : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl/0.2 -> Â· template_list : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#125
_disambiguate_template -> /\u200B_disambiguate_template/ Â· : {'!=' '%' '%=' '&&' '&' '&=' '(' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_disambiguate_template/ /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/ /\u200B_template_args_start/}

#126
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 Â· : {';'}

#127
global_variable_decl/0.2 -> '=' Â· expression : {';'}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {';'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {';'}
expression -> Â· relational_expression : {';'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {';'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#128
optionally_typed_ident -> ident optionally_typed_ident/0.1 Â· : {';' '='}

#129
optionally_typed_ident/0.1 -> ':' Â· type_specifier : {';' '='}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
type_specifier -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {';' '='}

#130
global_constant_decl -> 'const' optionally_typed_ident '=' Â· expression : {';'}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {';'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {';'}
expression -> Â· relational_expression : {';'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {';'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#131
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident Â· global_constant_decl/1.3 : {';'}
global_constant_decl/1.3 -> Â· '=' expression : {';'}

#132
type_alias_decl -> 'alias' ident '=' Â· type_specifier : {';'}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
type_specifier -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {';'}

#133
struct_decl -> 'struct' ident struct_body_decl Â· : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#134
struct_body_decl -> '{' Â· struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member -> Â· struct_member/0.0 member_ident ':' type_specifier : {',' '}'}
struct_member/0.0 -> Â· struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member/0.0/0 -> Â· attribute struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#135
function_header -> 'fn' ident Â· '(' function_header/0.3 ')' function_header/0.5 : {'@' '{'}

#136
function_decl -> function_decl/0.0 function_header compound_statement Â· : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#137
compound_statement -> compound_statement/0.0 Â· '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'alias' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'struct' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#138
compound_statement/0.0 -> compound_statement/0.0/0 Â· : {'{'}

#139
compound_statement/0.0/0 -> attribute Â· compound_statement/0.0/0 : {'{'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' '{'}
compound_statement/0.0/0 -> Â· attribute compound_statement/0.0/0 : {'{'}

#140
ident -> ident_pattern_token _disambiguate_template Â· : {'(' ':' ';' '=' '{' /\u200B_disambiguate_template/}

#141
paren_expression -> '(' expression Â· ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#142
template_elaborated_ident -> ident _disambiguate_template Â· template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
_template_args_start -> Â· /\u200B_template_args_start/ : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
template_elaborated_ident/0.2 -> Â· template_list : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
template_list -> Â· _template_args_start template_arg_comma_list _template_args_end : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#143
call_expression -> template_elaborated_ident argument_expression_list Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#144
argument_expression_list -> '(' Â· argument_expression_list/0.1 ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' '|' '||' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
argument_expression_list/0.1 -> Â· expression_comma_list : {')'}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {')' ','}
expression -> Â· relational_expression : {')' ','}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> Â· short_circuit_or_expression '||' relational_expression : {')' ','}
expression_comma_list -> Â· expression expression_comma_list/0.1 expression_comma_list/0.2 : {')'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> Â· shift_expression : {'&&' ')' ',' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ')' ',' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#145
singular_expression -> primary_expression singular_expression/0.1 Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#146
singular_expression/0.1 -> component_or_swizzle_specifier Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#147
component_or_swizzle_specifier -> '[' Â· expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '==' ']' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' '-' '==' ']' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {']'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {']'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {']'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {']'}
expression -> Â· relational_expression : {']'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {']'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {']'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' ']' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' ']' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ']' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ']' '||'}
relational_expression -> Â· shift_expression : {'&&' ']' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ']' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ']' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ']' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ']' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' '==' ']' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' '==' ']' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' '==' ']' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '==' '[' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' ']' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#148
component_or_swizzle_specifier -> '.' Â· member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> '.' Â· swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
member_ident -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
swizzle_name -> Â· '/[rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
swizzle_name -> Â· '/[rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
swizzle_name -> Â· '/[rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
swizzle_name -> Â· '/[rgba][rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
swizzle_name -> Â· '/[xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
swizzle_name -> Â· '/[xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
swizzle_name -> Â· '/[xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
swizzle_name -> Â· '/[xyzw][xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#149
unary_expression -> '&' unary_expression Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#150
unary_expression -> '*' unary_expression Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#151
unary_expression -> '~' unary_expression Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#152
unary_expression -> '!' unary_expression Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#153
unary_expression -> '-' unary_expression Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#154
multiplicative_expression -> multiplicative_expression multiplicative_operator Â· unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}

#155
multiplicative_operator -> '*' Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#156
multiplicative_operator -> '/' Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#157
multiplicative_operator -> '%' Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#158
shift_expression -> unary_expression _shift_left Â· unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '&&' '(' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}

#159
shift_expression -> unary_expression _shift_right Â· unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'!=' '&&' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '&&' '(' ')' ',' '.' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}

#160
_shift_left -> /\u200B_shift_left/ Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#161
_shift_right -> /\u200B_shift_right/ Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#162
additive_expression -> additive_expression additive_operator Â· multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}

#163
additive_operator -> '+' Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#164
additive_operator -> '-' Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#165
binary_xor_expression -> binary_xor_expression '^' Â· unary_expression : {'^'}
bitwise_expression -> binary_xor_expression '^' Â· unary_expression : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
literal -> Â· bool_literal : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
literal -> Â· float_literal : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
literal -> Â· int_literal : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
primary_expression -> Â· literal : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {')' ',' ':' ';' '@' ']' '^' '{' /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'(' ')' ',' '.' ':' ';' '@' '[' ']' '^' '{' /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {')' ',' ':' ';' '@' ']' '^' '{' /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {')' ',' ':' ';' '@' ']' '^' '{' /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {')' ',' ':' ';' '@' ']' '^' '{' /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {')' ',' ':' ';' '@' ']' '^' '{' /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {')' ',' ':' ';' '@' ']' '^' '{' /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {')' ',' ':' ';' '@' ']' '^' '{' /\u200B_template_args_end/}

#166
binary_or_expression -> binary_or_expression '|' Â· unary_expression : {'|'}
bitwise_expression -> binary_or_expression '|' Â· unary_expression : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
literal -> Â· bool_literal : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
literal -> Â· float_literal : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
literal -> Â· int_literal : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
primary_expression -> Â· literal : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {')' ',' ':' ';' '@' ']' '{' '|' /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'(' ')' ',' '.' ':' ';' '@' '[' ']' '{' '|' /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {')' ',' ':' ';' '@' ']' '{' '|' /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {')' ',' ':' ';' '@' ']' '{' '|' /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {')' ',' ':' ';' '@' ']' '{' '|' /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {')' ',' ':' ';' '@' ']' '{' '|' /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {')' ',' ':' ';' '@' ']' '{' '|' /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {')' ',' ':' ';' '@' ']' '{' '|' /\u200B_template_args_end/}

#167
binary_and_expression -> binary_and_expression '&' Â· unary_expression : {'&'}
bitwise_expression -> binary_and_expression '&' Â· unary_expression : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
literal -> Â· bool_literal : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
literal -> Â· float_literal : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
literal -> Â· int_literal : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
primary_expression -> Â· literal : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'&' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'&' ')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'&' '(' ')' ',' '.' ':' ';' '@' '[' ']' '{' /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'&' ')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'&' ')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'&' ')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'&' ')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'&' ')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'&' ')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}

#168
relational_expression -> shift_expression _less_than Â· shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
additive_expression -> Â· multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
multiplicative_expression -> Â· unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
shift_expression -> Â· additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#169
relational_expression -> shift_expression _greater_than Â· shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
additive_expression -> Â· multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
multiplicative_expression -> Â· unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
shift_expression -> Â· additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#170
relational_expression -> shift_expression _less_than_equal Â· shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
additive_expression -> Â· multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
multiplicative_expression -> Â· unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
shift_expression -> Â· additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#171
relational_expression -> shift_expression _greater_than_equal Â· shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
additive_expression -> Â· multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
multiplicative_expression -> Â· unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
shift_expression -> Â· additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#172
relational_expression -> shift_expression '==' Â· shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
additive_expression -> Â· multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
multiplicative_expression -> Â· unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
shift_expression -> Â· additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#173
relational_expression -> shift_expression '!=' Â· shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
additive_expression -> Â· multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
multiplicative_expression -> Â· unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
shift_expression -> Â· additive_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '@' '[' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '@' ']' '{' '||' /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#174
_less_than -> /\u200B_less_than/ Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#175
_greater_than -> /\u200B_greater_than/ Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#176
_less_than_equal -> /\u200B_less_than_equal/ Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#177
_greater_than_equal -> /\u200B_greater_than_equal/ Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#178
expression -> short_circuit_and_expression '&&' Â· relational_expression : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression '&&' Â· relational_expression : {'&&'}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
bool_literal -> Â· 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> Â· shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ')' ',' ':' ';' '@' ']' '{'}
shift_expression -> Â· additive_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#179
expression -> short_circuit_or_expression '||' Â· relational_expression : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression '||' Â· relational_expression : {'||'}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
bool_literal -> Â· 'false' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· decimal_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> Â· shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {')' ',' ':' ';' '@' ']' '{' '||'}
shift_expression -> Â· additive_expression : {'!=' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#180
attribute -> '@' 'diagnostic' diagnostic_control Â· : {'@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#181
attribute -> '@' ident_pattern_token attribute/0.2 Â· : {'@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#182
attribute/0.2 -> argument_expression_list Â· : {'@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#183
expression -> short_circuit_or_expression '||' relational_expression Â· : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression '||' relational_expression Â· : {'||'}

#184
multiplicative_expression -> unary_expression Â· : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
shift_expression -> unary_expression Â· _shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
shift_expression -> unary_expression Â· _shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
_shift_left -> Â· /\u200B_shift_left/ : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
_shift_right -> Â· /\u200B_shift_right/ : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#185
expression -> short_circuit_and_expression '&&' relational_expression Â· : {')' ',' ':' ';' '@' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression '&&' relational_expression Â· : {'&&'}

#186
relational_expression -> shift_expression '!=' shift_expression Â· : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}

#187
relational_expression -> shift_expression '==' shift_expression Â· : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}

#188
relational_expression -> shift_expression _greater_than_equal shift_expression Â· : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}

#189
relational_expression -> shift_expression _less_than_equal shift_expression Â· : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}

#190
relational_expression -> shift_expression _greater_than shift_expression Â· : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}

#191
relational_expression -> shift_expression _less_than shift_expression Â· : {'&&' ')' ',' ':' ';' '@' ']' '{' '||' /\u200B_template_args_end/}

#192
binary_and_expression -> binary_and_expression '&' unary_expression Â· : {'&'}
bitwise_expression -> binary_and_expression '&' unary_expression Â· : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}

#193
binary_or_expression -> binary_or_expression '|' unary_expression Â· : {'|'}
bitwise_expression -> binary_or_expression '|' unary_expression Â· : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}

#194
binary_xor_expression -> binary_xor_expression '^' unary_expression Â· : {'^'}
bitwise_expression -> binary_xor_expression '^' unary_expression Â· : {')' ',' ':' ';' '@' ']' '{' /\u200B_template_args_end/}

#195
additive_expression -> additive_expression additive_operator multiplicative_expression Â· : {'!=' '&&' ')' '+' ',' '-' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multiplicative_expression -> multiplicative_expression Â· multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multiplicative_operator -> Â· '%' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> Â· '*' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> Â· '/' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#196
multiplicative_expression -> unary_expression Â· : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}

#197
shift_expression -> unary_expression _shift_right unary_expression Â· : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}

#198
shift_expression -> unary_expression _shift_left unary_expression Â· : {'!=' '&&' ')' ',' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}

#199
multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression Â· : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '==' '@' ']' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}

#200
component_or_swizzle_specifier -> '.' member_ident Â· component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> Â· '.' member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> Â· '.' swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> Â· '[' expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier/1.2 -> Â· component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#201
component_or_swizzle_specifier -> '.' swizzle_name Â· component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> Â· '.' member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> Â· '.' swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> Â· '[' expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier/2.2 -> Â· component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#202
member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Â· : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#203
swizzle_name -> '/[rgba]/' Â· : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#204
swizzle_name -> '/[rgba][rgba]/' Â· : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#205
swizzle_name -> '/[rgba][rgba][rgba]/' Â· : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#206
swizzle_name -> '/[rgba][rgba][rgba][rgba]/' Â· : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#207
swizzle_name -> '/[xyzw]/' Â· : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#208
swizzle_name -> '/[xyzw][xyzw]/' Â· : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#209
swizzle_name -> '/[xyzw][xyzw][xyzw]/' Â· : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#210
swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' Â· : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '=' '==' '@' '[' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#211
component_or_swizzle_specifier -> '[' expression Â· ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#212
argument_expression_list -> '(' argument_expression_list/0.1 Â· ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' '|' '||' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#213
argument_expression_list/0.1 -> expression_comma_list Â· : {')'}

#214
expression_comma_list -> expression Â· expression_comma_list/0.1 expression_comma_list/0.2 : {')'}
expression_comma_list/0.1 -> Â· expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0 -> Â· expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0/0.0 -> Â· ',' expression : {')' ','}

#215
template_elaborated_ident -> ident _disambiguate_template template_elaborated_ident/0.2 Â· : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#216
template_elaborated_ident/0.2 -> template_list Â· : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '=' '==' '@' '[' ']' '^' '{' '|' '||' '}' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#217
template_list -> _template_args_start Â· template_arg_comma_list _template_args_end : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '=' '==' '@' '[' ']' '^' '{' '|' '||' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {',' /\u200B_template_args_end/}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {',' /\u200B_template_args_end/}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {',' /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression : {'&&' ',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ',' '||' /\u200B_template_args_end/}
shift_expression -> Â· additive_expression : {'!=' '&&' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
template_arg_comma_list -> Â· template_arg_expression template_arg_comma_list/0.1 template_arg_comma_list/0.2 : {/\u200B_template_args_end/}
template_arg_expression -> Â· bitwise_expression : {',' /\u200B_template_args_end/}
template_arg_expression -> Â· relational_expression : {',' /\u200B_template_args_end/}
template_arg_expression -> Â· short_circuit_and_expression '&&' relational_expression : {',' /\u200B_template_args_end/}
template_arg_expression -> Â· short_circuit_or_expression '||' relational_expression : {',' /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#218
_template_args_start -> /\u200B_template_args_start/ Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#219
paren_expression -> '(' expression ')' Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#220
compound_statement/0.0/0 -> attribute compound_statement/0.0/0 Â· : {'{'}

#221
compound_statement -> compound_statement/0.0 '{' Â· compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'alias' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'struct' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
assignment_statement -> Â· '_' '=' expression : {';'}
assignment_statement -> Â· lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> Â· 'break' : {';'}
compound_statement -> Â· compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> Â· compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> Â· attribute compound_statement/0.0/0 : {'{'}
compound_statement/0.2 -> Â· compound_statement/0.2/0 : {'}'}
compound_statement/0.2/0 -> Â· statement compound_statement/0.2/0 : {'}'}
const_assert_statement -> Â· 'const_assert' expression : {';'}
continue_statement -> Â· 'continue' : {';'}
core_lhs_expression -> Â· '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> Â· ident _disambiguate_template : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
decrement_statement -> Â· lhs_expression '--' : {';'}
for_statement -> Â· for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> Â· for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> Â· attribute for_statement/0.0/0 : {'for'}
func_call_statement -> Â· template_elaborated_ident argument_expression_list : {';'}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
if_statement -> Â· if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> Â· if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> Â· attribute if_statement/0.0/0 : {'if'}
increment_statement -> Â· lhs_expression '++' : {';'}
lhs_expression -> Â· '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
loop_statement -> Â· loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> Â· loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> Â· attribute loop_statement/0.0/0 : {'loop'}
return_statement -> Â· 'return' return_statement/0.1 : {';'}
statement -> Â· ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· break_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· for_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· if_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· loop_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· return_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· switch_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· while_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> Â· switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> Â· switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> Â· attribute switch_statement/0.0/0 : {'switch'}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'('}
variable_decl -> Â· 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}
variable_statement -> Â· 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> Â· 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> Â· variable_decl '=' expression : {';'}
variable_statement -> Â· variable_decl : {';'}
variable_updating_statement -> Â· assignment_statement : {';'}
variable_updating_statement -> Â· decrement_statement : {';'}
variable_updating_statement -> Â· increment_statement : {';'}
while_statement -> Â· while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> Â· while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> Â· attribute while_statement/0.0/0 : {'while'}

#222
function_header -> 'fn' ident '(' Â· function_header/0.3 ')' function_header/0.5 : {'@' '{'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.3 -> Â· param_list : {')'}
param -> Â· param/0.0 ident ':' type_specifier : {')' ','}
param/0.0 -> Â· param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> Â· attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list -> Â· param param_list/0.1 param_list/0.2 : {')'}

#223
struct_body_decl -> '{' struct_member Â· struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl/0.2 -> Â· struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0 -> Â· struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0/0.0 -> Â· ',' struct_member : {',' '}'}

#224
struct_member -> struct_member/0.0 Â· member_ident ':' type_specifier : {',' '}'}
member_ident -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}

#225
struct_member/0.0 -> struct_member/0.0/0 Â· : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#226
struct_member/0.0/0 -> attribute Â· struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member/0.0/0 -> Â· attribute struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#227
type_alias_decl -> 'alias' ident '=' type_specifier Â· : {';'}

#228
type_specifier -> ident Â· _disambiguate_template template_elaborated_ident/0.2 : {')' ',' ';' '=' '}'}
_disambiguate_template -> Â· /\u200B_disambiguate_template/ : {')' ',' ';' '=' '}' /\u200B_template_args_start/}

#229
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 Â· : {';'}

#230
global_constant_decl/1.3 -> '=' Â· expression : {';'}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {';'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {';'}
expression -> Â· relational_expression : {';'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {';'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#231
global_constant_decl -> 'const' optionally_typed_ident '=' expression Â· : {';'}

#232
optionally_typed_ident/0.1 -> ':' type_specifier Â· : {';' '='}

#233
global_variable_decl/0.2 -> '=' expression Â· : {';'}

#234
variable_decl -> 'var' _disambiguate_template variable_decl/0.2 Â· optionally_typed_ident : {';' '='}
ident -> Â· ident_pattern_token _disambiguate_template : {':' ';' '='}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
optionally_typed_ident -> Â· ident optionally_typed_ident/0.1 : {';' '='}

#235
variable_decl/0.2 -> template_list Â· : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#236
diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name Â· diagnostic_control/0.4 ')' : {';' '@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
diagnostic_control/0.4 -> Â· ',' : {')'}

#237
diagnostic_rule_name -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Â· : {')' ','}

#238
diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name diagnostic_control/0.4 Â· ')' : {';' '@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#239
diagnostic_control/0.4 -> ',' Â· : {')'}

#240
variable_decl -> 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident Â· : {';' '='}

#241
global_constant_decl/1.3 -> '=' expression Â· : {';'}

#242
type_specifier -> ident _disambiguate_template Â· template_elaborated_ident/0.2 : {')' ',' ';' '=' '}'}
_template_args_start -> Â· /\u200B_template_args_start/ : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
template_elaborated_ident/0.2 -> Â· template_list : {')' ',' ';' '=' '}'}
template_list -> Â· _template_args_start template_arg_comma_list _template_args_end : {')' ',' ';' '=' '}'}

#243
struct_member/0.0/0 -> attribute struct_member/0.0/0 Â· : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#244
struct_member -> struct_member/0.0 member_ident Â· ':' type_specifier : {',' '}'}

#245
struct_body_decl -> '{' struct_member struct_body_decl/0.2 Â· struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl/0.3 -> Â· ',' : {'}'}

#246
struct_body_decl/0.2 -> struct_body_decl/0.2/0 Â· : {',' '}'}

#247
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 Â· struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0 -> Â· struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0/0.0 -> Â· ',' struct_member : {',' '}'}

#248
struct_body_decl/0.2/0/0.0 -> ',' Â· struct_member : {',' '}'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member -> Â· struct_member/0.0 member_ident ':' type_specifier : {',' '}'}
struct_member/0.0 -> Â· struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member/0.0/0 -> Â· attribute struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#249
function_header -> 'fn' ident '(' function_header/0.3 Â· ')' function_header/0.5 : {'@' '{'}

#250
function_header/0.3 -> param_list Â· : {')'}

#251
param_list -> param Â· param_list/0.1 param_list/0.2 : {')'}
param_list/0.1 -> Â· param_list/0.1/0 : {')' ','}
param_list/0.1/0 -> Â· param_list/0.1/0/0.0 param_list/0.1/0 : {')' ','}
param_list/0.1/0/0.0 -> Â· ',' param : {')' ','}

#252
param -> param/0.0 Â· ident ':' type_specifier : {')' ','}
ident -> Â· ident_pattern_token _disambiguate_template : {':'}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}

#253
param/0.0 -> param/0.0/0 Â· : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#254
param/0.0/0 -> attribute Â· param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> Â· attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#255
compound_statement -> compound_statement/0.0 '{' compound_statement/0.2 Â· '}' : {'&' '(' '*' ';' '@' '_' 'alias' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'struct' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#256
compound_statement/0.2 -> compound_statement/0.2/0 Â· : {'}'}

#257
compound_statement/0.2/0 -> statement Â· compound_statement/0.2/0 : {'}'}
assignment_statement -> Â· '_' '=' expression : {';'}
assignment_statement -> Â· lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> Â· 'break' : {';'}
compound_statement -> Â· compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> Â· compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> Â· attribute compound_statement/0.0/0 : {'{'}
compound_statement/0.2/0 -> Â· statement compound_statement/0.2/0 : {'}'}
const_assert_statement -> Â· 'const_assert' expression : {';'}
continue_statement -> Â· 'continue' : {';'}
core_lhs_expression -> Â· '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> Â· ident _disambiguate_template : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
decrement_statement -> Â· lhs_expression '--' : {';'}
for_statement -> Â· for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> Â· for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> Â· attribute for_statement/0.0/0 : {'for'}
func_call_statement -> Â· template_elaborated_ident argument_expression_list : {';'}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
if_statement -> Â· if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> Â· if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> Â· attribute if_statement/0.0/0 : {'if'}
increment_statement -> Â· lhs_expression '++' : {';'}
lhs_expression -> Â· '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
loop_statement -> Â· loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> Â· loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> Â· attribute loop_statement/0.0/0 : {'loop'}
return_statement -> Â· 'return' return_statement/0.1 : {';'}
statement -> Â· ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· break_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· for_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· if_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· loop_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· return_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· switch_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· while_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> Â· switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> Â· switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> Â· attribute switch_statement/0.0/0 : {'switch'}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'('}
variable_decl -> Â· 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}
variable_statement -> Â· 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> Â· 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> Â· variable_decl '=' expression : {';'}
variable_statement -> Â· variable_decl : {';'}
variable_updating_statement -> Â· assignment_statement : {';'}
variable_updating_statement -> Â· decrement_statement : {';'}
variable_updating_statement -> Â· increment_statement : {';'}
while_statement -> Â· while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> Â· while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> Â· attribute while_statement/0.0/0 : {'while'}

#258
statement -> ';' Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#259
statement -> return_statement Â· ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#260
statement -> if_statement Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#261
statement -> switch_statement Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#262
statement -> loop_statement Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#263
statement -> for_statement Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#264
statement -> while_statement Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#265
statement -> func_call_statement Â· ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#266
statement -> variable_statement Â· ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#267
statement -> break_statement Â· ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#268
statement -> continue_statement Â· ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#269
statement -> 'discard' Â· ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#270
statement -> variable_updating_statement Â· ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#271
statement -> compound_statement Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#272
statement -> const_assert_statement Â· ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#273
return_statement -> 'return' Â· return_statement/0.1 : {';'}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {';'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {';'}
expression -> Â· relational_expression : {';'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {';'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
return_statement/0.1 -> Â· expression : {';'}
shift_expression -> Â· additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#274
if_statement -> if_statement/0.0 Â· if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_clause -> Â· 'if' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#275
switch_statement -> switch_statement/0.0 Â· 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#276
loop_statement -> loop_statement/0.0 Â· 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#277
for_statement -> for_statement/0.0 Â· 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#278
while_statement -> while_statement/0.0 Â· 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#279
func_call_statement -> template_elaborated_ident Â· argument_expression_list : {')' ';'}
argument_expression_list -> Â· '(' argument_expression_list/0.1 ')' : {')' ';'}

#280
variable_statement -> variable_decl Â· '=' expression : {';'}
variable_statement -> variable_decl Â· : {';'}

#281
variable_statement -> 'let' Â· optionally_typed_ident '=' expression : {';'}
ident -> Â· ident_pattern_token _disambiguate_template : {':' '='}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
optionally_typed_ident -> Â· ident optionally_typed_ident/0.1 : {'='}

#282
variable_statement -> 'const' Â· optionally_typed_ident '=' expression : {';'}
ident -> Â· ident_pattern_token _disambiguate_template : {':' '='}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
optionally_typed_ident -> Â· ident optionally_typed_ident/0.1 : {'='}

#283
break_statement -> 'break' Â· : {';'}

#284
continue_statement -> 'continue' Â· : {';'}

#285
variable_updating_statement -> assignment_statement Â· : {')' ';'}

#286
variable_updating_statement -> increment_statement Â· : {')' ';'}

#287
variable_updating_statement -> decrement_statement Â· : {')' ';'}

#288
if_statement/0.0 -> if_statement/0.0/0 Â· : {'if'}

#289
switch_statement/0.0 -> switch_statement/0.0/0 Â· : {'switch'}

#290
loop_statement/0.0 -> loop_statement/0.0/0 Â· : {'loop'}

#291
for_statement/0.0 -> for_statement/0.0/0 Â· : {'for'}

#292
while_statement/0.0 -> while_statement/0.0/0 Â· : {'while'}

#293
core_lhs_expression -> ident Â· _disambiguate_template : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
template_elaborated_ident -> ident Â· _disambiguate_template template_elaborated_ident/0.2 : {'('}
_disambiguate_template -> Â· /\u200B_disambiguate_template/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/ /\u200B_template_args_start/}

#294
assignment_statement -> lhs_expression Â· assignment_statement/0.1 expression : {')' ';'}
decrement_statement -> lhs_expression Â· '--' : {')' ';'}
increment_statement -> lhs_expression Â· '++' : {')' ';'}
_shift_left_assign -> Â· /\u200B_shift_left_assign/ : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
_shift_right_assign -> Â· /\u200B_shift_right_assign/ : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
assignment_statement/0.1 -> Â· '=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
assignment_statement/0.1 -> Â· compound_assignment_operator : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> Â· '%=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> Â· '&=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> Â· '*=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> Â· '+=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> Â· '-=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> Â· '/=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> Â· '^=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> Â· '|=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> Â· _shift_left_assign : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> Â· _shift_right_assign : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#295
assignment_statement -> '_' Â· '=' expression : {')' ';'}

#296
compound_statement/0.0/0 -> attribute Â· compound_statement/0.0/0 : {'{'}
for_statement/0.0/0 -> attribute Â· for_statement/0.0/0 : {'for'}
if_statement/0.0/0 -> attribute Â· if_statement/0.0/0 : {'if'}
loop_statement/0.0/0 -> attribute Â· loop_statement/0.0/0 : {'loop'}
switch_statement/0.0/0 -> attribute Â· switch_statement/0.0/0 : {'switch'}
while_statement/0.0/0 -> attribute Â· while_statement/0.0/0 : {'while'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
compound_statement/0.0/0 -> Â· attribute compound_statement/0.0/0 : {'{'}
for_statement/0.0/0 -> Â· attribute for_statement/0.0/0 : {'for'}
if_statement/0.0/0 -> Â· attribute if_statement/0.0/0 : {'if'}
loop_statement/0.0/0 -> Â· attribute loop_statement/0.0/0 : {'loop'}
switch_statement/0.0/0 -> Â· attribute switch_statement/0.0/0 : {'switch'}
while_statement/0.0/0 -> Â· attribute while_statement/0.0/0 : {'while'}

#297
lhs_expression -> core_lhs_expression Â· lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
component_or_swizzle_specifier -> Â· '.' member_ident component_or_swizzle_specifier/1.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
component_or_swizzle_specifier -> Â· '.' swizzle_name component_or_swizzle_specifier/2.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
component_or_swizzle_specifier -> Â· '[' expression ']' component_or_swizzle_specifier/0.3 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression/0.1 -> Â· component_or_swizzle_specifier : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#298
lhs_expression -> '*' Â· lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> Â· '(' lhs_expression ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> Â· ident _disambiguate_template : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
lhs_expression -> Â· '&' lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· '*' lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· core_lhs_expression lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#299
lhs_expression -> '&' Â· lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> Â· '(' lhs_expression ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> Â· ident _disambiguate_template : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
lhs_expression -> Â· '&' lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· '*' lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· core_lhs_expression lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#300
core_lhs_expression -> '(' Â· lhs_expression ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> Â· '(' lhs_expression ')' : {')' '.' '['}
core_lhs_expression -> Â· ident _disambiguate_template : {')' '.' '['}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
lhs_expression -> Â· '&' lhs_expression : {')'}
lhs_expression -> Â· '*' lhs_expression : {')'}
lhs_expression -> Â· core_lhs_expression lhs_expression/0.1 : {')'}

#301
template_list -> _template_args_start template_arg_comma_list Â· _template_args_end : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '=' '==' '@' '[' ']' '^' '{' '|' '||' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
_template_args_end -> Â· /\u200B_template_args_end/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '=' '==' '@' '[' ']' '^' '{' '|' '||' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#302
template_arg_comma_list -> template_arg_expression Â· template_arg_comma_list/0.1 template_arg_comma_list/0.2 : {/\u200B_template_args_end/}
template_arg_comma_list/0.1 -> Â· template_arg_comma_list/0.1/0 : {',' /\u200B_template_args_end/}
template_arg_comma_list/0.1/0 -> Â· template_arg_comma_list/0.1/0/0.0 template_arg_comma_list/0.1/0 : {',' /\u200B_template_args_end/}
template_arg_comma_list/0.1/0/0.0 -> Â· ',' template_arg_expression : {',' /\u200B_template_args_end/}

#303
short_circuit_and_expression -> relational_expression Â· : {'&&'}
short_circuit_or_expression -> relational_expression Â· : {'||'}
template_arg_expression -> relational_expression Â· : {',' /\u200B_template_args_end/}

#304
short_circuit_or_expression -> short_circuit_or_expression Â· '||' relational_expression : {'||'}
template_arg_expression -> short_circuit_or_expression Â· '||' relational_expression : {',' /\u200B_template_args_end/}

#305
short_circuit_and_expression -> short_circuit_and_expression Â· '&&' relational_expression : {'&&'}
template_arg_expression -> short_circuit_and_expression Â· '&&' relational_expression : {',' /\u200B_template_args_end/}

#306
template_arg_expression -> bitwise_expression Â· : {',' /\u200B_template_args_end/}

#307
expression_comma_list -> expression expression_comma_list/0.1 Â· expression_comma_list/0.2 : {')'}
expression_comma_list/0.2 -> Â· ',' : {')'}

#308
expression_comma_list/0.1 -> expression_comma_list/0.1/0 Â· : {')' ','}

#309
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 Â· expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0 -> Â· expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0/0.0 -> Â· ',' expression : {')' ','}

#310
expression_comma_list/0.1/0/0.0 -> ',' Â· expression : {')' ','}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {')' ','}
expression -> Â· relational_expression : {')' ','}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> Â· short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> Â· shift_expression : {'&&' ')' ',' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ')' ',' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ')' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#311
argument_expression_list -> '(' argument_expression_list/0.1 ')' Â· : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '==' '@' '[' ']' '^' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' '|' '||' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#312
component_or_swizzle_specifier -> '[' expression ']' Â· component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> Â· '.' member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> Â· '.' swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier -> Â· '[' expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}
component_or_swizzle_specifier/0.3 -> Â· component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#313
component_or_swizzle_specifier -> '.' swizzle_name component_or_swizzle_specifier/2.2 Â· : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#314
component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier Â· : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#315
component_or_swizzle_specifier -> '.' member_ident component_or_swizzle_specifier/1.2 Â· : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#316
component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier Â· : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#317
component_or_swizzle_specifier -> '[' expression ']' component_or_swizzle_specifier/0.3 Â· : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#318
component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier Â· : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '=' '==' '@' ']' '^' '^=' '{' '|' '|=' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_left_assign/ /\u200B_shift_right/ /\u200B_shift_right_assign/ /\u200B_template_args_end/}

#319
expression_comma_list/0.1/0/0.0 -> ',' expression Â· : {')' ','}

#320
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 Â· : {')' ','}

#321
expression_comma_list -> expression expression_comma_list/0.1 expression_comma_list/0.2 Â· : {')'}

#322
expression_comma_list/0.2 -> ',' Â· : {')'}

#323
short_circuit_and_expression -> short_circuit_and_expression '&&' Â· relational_expression : {'&&'}
template_arg_expression -> short_circuit_and_expression '&&' Â· relational_expression : {',' /\u200B_template_args_end/}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' ',' '-' '==' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' ',' '-' '==' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '==' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '==' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ',' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ',' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression : {'&&' ',' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ',' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ',' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ',' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ',' /\u200B_template_args_end/}
shift_expression -> Â· additive_expression : {'!=' '&&' ',' '==' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ',' '==' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ',' '==' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '*' '+' ',' '-' '/' '==' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '(' '*' '+' ',' '-' '.' '/' '==' '[' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '==' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '==' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '==' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '==' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '==' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '==' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#324
short_circuit_or_expression -> short_circuit_or_expression '||' Â· relational_expression : {'||'}
template_arg_expression -> short_circuit_or_expression '||' Â· relational_expression : {',' /\u200B_template_args_end/}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
additive_expression -> Â· multiplicative_expression : {'!=' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
relational_expression -> Â· shift_expression '!=' shift_expression : {',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression '==' shift_expression : {',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression : {',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression _greater_than shift_expression : {',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression _less_than shift_expression : {',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {',' '||' /\u200B_template_args_end/}
shift_expression -> Â· additive_expression : {'!=' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '(' '*' '+' ',' '-' '.' '/' '==' '[' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'!=' '%' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#325
template_arg_comma_list -> template_arg_expression template_arg_comma_list/0.1 Â· template_arg_comma_list/0.2 : {/\u200B_template_args_end/}
template_arg_comma_list/0.2 -> Â· ',' : {/\u200B_template_args_end/}

#326
template_arg_comma_list/0.1 -> template_arg_comma_list/0.1/0 Â· : {',' /\u200B_template_args_end/}

#327
template_arg_comma_list/0.1/0 -> template_arg_comma_list/0.1/0/0.0 Â· template_arg_comma_list/0.1/0 : {',' /\u200B_template_args_end/}
template_arg_comma_list/0.1/0 -> Â· template_arg_comma_list/0.1/0/0.0 template_arg_comma_list/0.1/0 : {',' /\u200B_template_args_end/}
template_arg_comma_list/0.1/0/0.0 -> Â· ',' template_arg_expression : {',' /\u200B_template_args_end/}

#328
template_arg_comma_list/0.1/0/0.0 -> ',' Â· template_arg_expression : {',' /\u200B_template_args_end/}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' ',' '-' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {',' /\u200B_template_args_end/}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {',' /\u200B_template_args_end/}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {',' /\u200B_template_args_end/}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression : {'&&' ',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ',' '||' /\u200B_template_args_end/}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ',' '||' /\u200B_template_args_end/}
shift_expression -> Â· additive_expression : {'!=' '&&' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ',' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_template_args_end/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
template_arg_expression -> Â· bitwise_expression : {',' /\u200B_template_args_end/}
template_arg_expression -> Â· relational_expression : {',' /\u200B_template_args_end/}
template_arg_expression -> Â· short_circuit_and_expression '&&' relational_expression : {',' /\u200B_template_args_end/}
template_arg_expression -> Â· short_circuit_or_expression '||' relational_expression : {',' /\u200B_template_args_end/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#329
template_list -> _template_args_start template_arg_comma_list _template_args_end Â· : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '=' '==' '@' '[' ']' '^' '{' '|' '||' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#330
_template_args_end -> /\u200B_template_args_end/ Â· : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '=' '==' '@' '[' ']' '^' '{' '|' '||' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/ /\u200B_template_args_end/}

#331
core_lhs_expression -> '(' lhs_expression Â· ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#332
core_lhs_expression -> ident Â· _disambiguate_template : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
_disambiguate_template -> Â· /\u200B_disambiguate_template/ : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#333
lhs_expression -> '&' lhs_expression Â· : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#334
lhs_expression -> '*' lhs_expression Â· : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#335
lhs_expression -> core_lhs_expression lhs_expression/0.1 Â· : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#336
lhs_expression/0.1 -> component_or_swizzle_specifier Â· : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#337
if_statement/0.0/0 -> attribute if_statement/0.0/0 Â· : {'if'}

#338
switch_statement/0.0/0 -> attribute switch_statement/0.0/0 Â· : {'switch'}

#339
loop_statement/0.0/0 -> attribute loop_statement/0.0/0 Â· : {'loop'}

#340
for_statement/0.0/0 -> attribute for_statement/0.0/0 Â· : {'for'}

#341
while_statement/0.0/0 -> attribute while_statement/0.0/0 Â· : {'while'}

#342
assignment_statement -> '_' '=' Â· expression : {')' ';'}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {')' ';'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {')' ';'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {')' ';'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {')' ';'}
expression -> Â· relational_expression : {')' ';'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {')' ';'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {')' ';'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> Â· shift_expression : {'&&' ')' ';' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ')' ';' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' ')' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ')' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ')' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#343
assignment_statement -> lhs_expression assignment_statement/0.1 Â· expression : {')' ';'}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {')' ';'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {')' ';'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {')' ';'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {')' ';'}
expression -> Â· relational_expression : {')' ';'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {')' ';'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {')' ';'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> Â· shift_expression : {'&&' ')' ';' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ')' ';' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' ')' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ')' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ')' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#344
increment_statement -> lhs_expression '++' Â· : {')' ';'}

#345
decrement_statement -> lhs_expression '--' Â· : {')' ';'}

#346
assignment_statement/0.1 -> '=' Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#347
assignment_statement/0.1 -> compound_assignment_operator Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#348
compound_assignment_operator -> '+=' Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#349
compound_assignment_operator -> '-=' Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#350
compound_assignment_operator -> '*=' Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#351
compound_assignment_operator -> '/=' Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#352
compound_assignment_operator -> '%=' Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#353
compound_assignment_operator -> '&=' Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#354
compound_assignment_operator -> '|=' Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#355
compound_assignment_operator -> '^=' Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#356
compound_assignment_operator -> _shift_right_assign Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#357
compound_assignment_operator -> _shift_left_assign Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#358
_shift_right_assign -> /\u200B_shift_right_assign/ Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#359
_shift_left_assign -> /\u200B_shift_left_assign/ Â· : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#360
core_lhs_expression -> ident _disambiguate_template Â· : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
template_elaborated_ident -> ident _disambiguate_template Â· template_elaborated_ident/0.2 : {'('}
_template_args_start -> Â· /\u200B_template_args_start/ : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
template_elaborated_ident/0.2 -> Â· template_list : {'('}
template_list -> Â· _template_args_start template_arg_comma_list _template_args_end : {'('}

#361
variable_statement -> 'const' optionally_typed_ident Â· '=' expression : {';'}

#362
variable_statement -> 'let' optionally_typed_ident Â· '=' expression : {';'}

#363
variable_statement -> variable_decl '=' Â· expression : {';'}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {';'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {';'}
expression -> Â· relational_expression : {';'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {';'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#364
func_call_statement -> template_elaborated_ident argument_expression_list Â· : {')' ';'}

#365
while_statement -> while_statement/0.0 'while' Â· expression compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' '-' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {'@' '{'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {'@' '{'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {'@' '{'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {'@' '{'}
expression -> Â· relational_expression : {'@' '{'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {'@' '{'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {'@' '{'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' '@' '{' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#366
for_statement -> for_statement/0.0 'for' Â· '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#367
loop_statement -> loop_statement/0.0 'loop' Â· loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' '{'}
loop_statement/0.2 -> Â· loop_statement/0.2/0 : {'{'}
loop_statement/0.2/0 -> Â· attribute loop_statement/0.2/0 : {'{'}

#368
switch_statement -> switch_statement/0.0 'switch' Â· expression switch_body : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' '-' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {'@' '{'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {'@' '{'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {'@' '{'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {'@' '{'}
expression -> Â· relational_expression : {'@' '{'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {'@' '{'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {'@' '{'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' '@' '{' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#369
if_statement -> if_statement/0.0 if_clause Â· if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> Â· 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.2 -> Â· if_statement/0.2/0 : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.2/0 -> Â· else_if_clause if_statement/0.2/0 : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#370
if_clause -> 'if' Â· expression compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' '-' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {'@' '{'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {'@' '{'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {'@' '{'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {'@' '{'}
expression -> Â· relational_expression : {'@' '{'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {'@' '{'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {'@' '{'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' '@' '{' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#371
return_statement -> 'return' return_statement/0.1 Â· : {';'}

#372
return_statement/0.1 -> expression Â· : {';'}

#373
statement -> const_assert_statement ';' Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#374
statement -> variable_updating_statement ';' Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#375
statement -> 'discard' ';' Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#376
statement -> continue_statement ';' Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#377
statement -> break_statement ';' Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#378
statement -> variable_statement ';' Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#379
statement -> func_call_statement ';' Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#380
statement -> return_statement ';' Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#381
compound_statement/0.2/0 -> statement compound_statement/0.2/0 Â· : {'}'}

#382
compound_statement -> compound_statement/0.0 '{' compound_statement/0.2 '}' Â· : {'&' '(' '*' ';' '@' '_' 'alias' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'struct' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#383
param/0.0/0 -> attribute param/0.0/0 Â· : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#384
param -> param/0.0 ident Â· ':' type_specifier : {')' ','}

#385
param_list -> param param_list/0.1 Â· param_list/0.2 : {')'}
param_list/0.2 -> Â· ',' : {')'}

#386
param_list/0.1 -> param_list/0.1/0 Â· : {')' ','}

#387
param_list/0.1/0 -> param_list/0.1/0/0.0 Â· param_list/0.1/0 : {')' ','}
param_list/0.1/0 -> Â· param_list/0.1/0/0.0 param_list/0.1/0 : {')' ','}
param_list/0.1/0/0.0 -> Â· ',' param : {')' ','}

#388
param_list/0.1/0/0.0 -> ',' Â· param : {')' ','}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param -> Â· param/0.0 ident ':' type_specifier : {')' ','}
param/0.0 -> Â· param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> Â· attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#389
function_header -> 'fn' ident '(' function_header/0.3 ')' Â· function_header/0.5 : {'@' '{'}
function_header/0.5 -> Â· '->' function_header/0.5/0.1 template_elaborated_ident : {'@' '{'}

#390
struct_body_decl/0.2/0/0.0 -> ',' struct_member Â· : {',' '}'}

#391
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 Â· : {',' '}'}

#392
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 Â· '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#393
struct_body_decl/0.3 -> ',' Â· : {'}'}

#394
struct_member -> struct_member/0.0 member_ident ':' Â· type_specifier : {',' '}'}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
type_specifier -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {',' '}'}

#395
type_specifier -> ident _disambiguate_template template_elaborated_ident/0.2 Â· : {')' ',' ';' '=' '}'}

#396
diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name diagnostic_control/0.4 ')' Â· : {';' '@' 'fn' 'for' 'if' 'loop' 'override' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#397
struct_member -> struct_member/0.0 member_ident ':' type_specifier Â· : {',' '}'}

#398
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' Â· : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#399
function_header -> 'fn' ident '(' function_header/0.3 ')' function_header/0.5 Â· : {'@' '{'}

#400
function_header/0.5 -> '->' Â· function_header/0.5/0.1 template_elaborated_ident : {'@' '{'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.5/0.1 -> Â· function_header/0.5/0.1/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.5/0.1/0 -> Â· attribute function_header/0.5/0.1/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#401
param_list/0.1/0/0.0 -> ',' param Â· : {')' ','}

#402
param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 Â· : {')' ','}

#403
param_list -> param param_list/0.1 param_list/0.2 Â· : {')'}

#404
param_list/0.2 -> ',' Â· : {')'}

#405
param -> param/0.0 ident ':' Â· type_specifier : {')' ','}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
type_specifier -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {')' ','}

#406
if_clause -> 'if' expression Â· compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' '{'}
compound_statement -> Â· compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> Â· compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> Â· attribute compound_statement/0.0/0 : {'{'}

#407
if_statement -> if_statement/0.0 if_clause if_statement/0.2 Â· if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_clause -> Â· 'else' compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.3 -> Â· else_clause : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#408
if_statement/0.2 -> if_statement/0.2/0 Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#409
if_statement/0.2/0 -> else_if_clause Â· if_statement/0.2/0 : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> Â· 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.2/0 -> Â· else_if_clause if_statement/0.2/0 : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#410
else_if_clause -> 'else' Â· 'if' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#411
switch_statement -> switch_statement/0.0 'switch' expression Â· switch_body : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' '{'}
switch_body -> Â· switch_body/0.0 '{' switch_body/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_body/0.0 -> Â· switch_body/0.0/0 : {'{'}
switch_body/0.0/0 -> Â· attribute switch_body/0.0/0 : {'{'}

#412
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 Â· '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#413
loop_statement/0.2 -> loop_statement/0.2/0 Â· : {'{'}

#414
loop_statement/0.2/0 -> attribute Â· loop_statement/0.2/0 : {'{'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' '{'}
loop_statement/0.2/0 -> Â· attribute loop_statement/0.2/0 : {'{'}

#415
for_statement -> for_statement/0.0 'for' '(' Â· for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> Â· '_' '=' expression : {';'}
assignment_statement -> Â· lhs_expression assignment_statement/0.1 expression : {';'}
core_lhs_expression -> Â· '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> Â· ident _disambiguate_template : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
decrement_statement -> Â· lhs_expression '--' : {';'}
for_header -> Â· for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 : {')'}
for_header/0.0 -> Â· for_init : {';'}
for_init -> Â· func_call_statement : {';'}
for_init -> Â· variable_statement : {';'}
for_init -> Â· variable_updating_statement : {';'}
func_call_statement -> Â· template_elaborated_ident argument_expression_list : {';'}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
increment_statement -> Â· lhs_expression '++' : {';'}
lhs_expression -> Â· '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'('}
variable_decl -> Â· 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}
variable_statement -> Â· 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> Â· 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> Â· variable_decl '=' expression : {';'}
variable_statement -> Â· variable_decl : {';'}
variable_updating_statement -> Â· assignment_statement : {';'}
variable_updating_statement -> Â· decrement_statement : {';'}
variable_updating_statement -> Â· increment_statement : {';'}

#416
while_statement -> while_statement/0.0 'while' expression Â· compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' '{'}
compound_statement -> Â· compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> Â· compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> Â· attribute compound_statement/0.0/0 : {'{'}

#417
variable_statement -> variable_decl '=' expression Â· : {';'}

#418
variable_statement -> 'let' optionally_typed_ident '=' Â· expression : {';'}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {';'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {';'}
expression -> Â· relational_expression : {';'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {';'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#419
variable_statement -> 'const' optionally_typed_ident '=' Â· expression : {';'}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {';'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {';'}
expression -> Â· relational_expression : {';'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {';'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#420
assignment_statement -> lhs_expression assignment_statement/0.1 expression Â· : {')' ';'}

#421
assignment_statement -> '_' '=' expression Â· : {')' ';'}

#422
core_lhs_expression -> ident _disambiguate_template Â· : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#423
core_lhs_expression -> '(' lhs_expression ')' Â· : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}

#424
template_arg_comma_list/0.1/0/0.0 -> ',' template_arg_expression Â· : {',' /\u200B_template_args_end/}

#425
template_arg_comma_list/0.1/0 -> template_arg_comma_list/0.1/0/0.0 template_arg_comma_list/0.1/0 Â· : {',' /\u200B_template_args_end/}

#426
template_arg_comma_list -> template_arg_expression template_arg_comma_list/0.1 template_arg_comma_list/0.2 Â· : {/\u200B_template_args_end/}

#427
template_arg_comma_list/0.2 -> ',' Â· : {/\u200B_template_args_end/}

#428
short_circuit_or_expression -> short_circuit_or_expression '||' relational_expression Â· : {'||'}
template_arg_expression -> short_circuit_or_expression '||' relational_expression Â· : {',' /\u200B_template_args_end/}

#429
short_circuit_and_expression -> short_circuit_and_expression '&&' relational_expression Â· : {'&&'}
template_arg_expression -> short_circuit_and_expression '&&' relational_expression Â· : {',' /\u200B_template_args_end/}

#430
variable_statement -> 'const' optionally_typed_ident '=' expression Â· : {';'}

#431
variable_statement -> 'let' optionally_typed_ident '=' expression Â· : {';'}

#432
while_statement -> while_statement/0.0 'while' expression compound_statement Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#433
for_statement -> for_statement/0.0 'for' '(' for_header Â· ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#434
for_header -> for_header/0.0 Â· ';' for_header/0.2 ';' for_header/0.4 : {')'}

#435
for_header/0.0 -> for_init Â· : {';'}

#436
for_init -> variable_statement Â· : {';'}

#437
for_init -> variable_updating_statement Â· : {';'}

#438
for_init -> func_call_statement Â· : {';'}

#439
loop_statement/0.2/0 -> attribute loop_statement/0.2/0 Â· : {'{'}

#440
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' Â· loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> Â· '_' '=' expression : {';'}
assignment_statement -> Â· lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> Â· 'break' : {';'}
compound_statement -> Â· compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> Â· compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> Â· attribute compound_statement/0.0/0 : {'{'}
const_assert_statement -> Â· 'const_assert' expression : {';'}
continue_statement -> Â· 'continue' : {';'}
core_lhs_expression -> Â· '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> Â· ident _disambiguate_template : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
decrement_statement -> Â· lhs_expression '--' : {';'}
for_statement -> Â· for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> Â· for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> Â· attribute for_statement/0.0/0 : {'for'}
func_call_statement -> Â· template_elaborated_ident argument_expression_list : {';'}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
if_statement -> Â· if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> Â· if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> Â· attribute if_statement/0.0/0 : {'if'}
increment_statement -> Â· lhs_expression '++' : {';'}
lhs_expression -> Â· '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
loop_statement -> Â· loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> Â· loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> Â· attribute loop_statement/0.0/0 : {'loop'}
loop_statement/0.4 -> Â· loop_statement/0.4/0 : {'continuing' '}'}
loop_statement/0.4/0 -> Â· statement loop_statement/0.4/0 : {'continuing' '}'}
return_statement -> Â· 'return' return_statement/0.1 : {';'}
statement -> Â· ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· break_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· for_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· if_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· loop_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· return_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· switch_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· while_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> Â· switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> Â· switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> Â· attribute switch_statement/0.0/0 : {'switch'}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'('}
variable_decl -> Â· 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}
variable_statement -> Â· 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> Â· 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> Â· variable_decl '=' expression : {';'}
variable_statement -> Â· variable_decl : {';'}
variable_updating_statement -> Â· assignment_statement : {';'}
variable_updating_statement -> Â· decrement_statement : {';'}
variable_updating_statement -> Â· increment_statement : {';'}
while_statement -> Â· while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> Â· while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> Â· attribute while_statement/0.0/0 : {'while'}

#441
switch_statement -> switch_statement/0.0 'switch' expression switch_body Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#442
switch_body -> switch_body/0.0 Â· '{' switch_body/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#443
switch_body/0.0 -> switch_body/0.0/0 Â· : {'{'}

#444
switch_body/0.0/0 -> attribute Â· switch_body/0.0/0 : {'{'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' '{'}
switch_body/0.0/0 -> Â· attribute switch_body/0.0/0 : {'{'}

#445
else_if_clause -> 'else' 'if' Â· expression compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' '-' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {'@' '{'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {'@' '{'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {'@' '{'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {'@' '{'}
expression -> Â· relational_expression : {'@' '{'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {'@' '{'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {'@' '{'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' '@' '{' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' '@' '{' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#446
if_statement/0.2/0 -> else_if_clause if_statement/0.2/0 Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#447
if_statement -> if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#448
if_statement/0.3 -> else_clause Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#449
else_clause -> 'else' Â· compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' '{'}
compound_statement -> Â· compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> Â· compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> Â· attribute compound_statement/0.0/0 : {'{'}

#450
if_clause -> 'if' expression compound_statement Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#451
param -> param/0.0 ident ':' type_specifier Â· : {')' ','}

#452
function_header/0.5 -> '->' function_header/0.5/0.1 Â· template_elaborated_ident : {'@' '{'}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'@' '{'}

#453
function_header/0.5/0.1 -> function_header/0.5/0.1/0 Â· : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#454
function_header/0.5/0.1/0 -> attribute Â· function_header/0.5/0.1/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.5/0.1/0 -> Â· attribute function_header/0.5/0.1/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#455
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 Â· : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#456
function_header/0.5 -> '->' function_header/0.5/0.1 template_elaborated_ident Â· : {'@' '{'}

#457
else_clause -> 'else' compound_statement Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#458
else_if_clause -> 'else' 'if' expression Â· compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' '{'}
compound_statement -> Â· compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> Â· compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> Â· attribute compound_statement/0.0/0 : {'{'}

#459
switch_body/0.0/0 -> attribute switch_body/0.0/0 Â· : {'{'}

#460
switch_body -> switch_body/0.0 '{' Â· switch_body/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
case_clause -> Â· 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
default_alone_clause -> Â· 'default' default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
switch_body/0.2 -> Â· switch_body/0.2/0 : {'}'}
switch_body/0.2/0 -> Â· switch_clause switch_body/0.2/0 : {'}'}
switch_clause -> Â· case_clause : {'case' 'default' '}'}
switch_clause -> Â· default_alone_clause : {'case' 'default' '}'}

#461
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 Â· loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_statement -> Â· 'continuing' continuing_compound_statement : {'}'}
loop_statement/0.5 -> Â· continuing_statement : {'}'}

#462
loop_statement/0.4 -> loop_statement/0.4/0 Â· : {'continuing' '}'}

#463
loop_statement/0.4/0 -> statement Â· loop_statement/0.4/0 : {'continuing' '}'}
assignment_statement -> Â· '_' '=' expression : {';'}
assignment_statement -> Â· lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> Â· 'break' : {';'}
compound_statement -> Â· compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> Â· compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> Â· attribute compound_statement/0.0/0 : {'{'}
const_assert_statement -> Â· 'const_assert' expression : {';'}
continue_statement -> Â· 'continue' : {';'}
core_lhs_expression -> Â· '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> Â· ident _disambiguate_template : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
decrement_statement -> Â· lhs_expression '--' : {';'}
for_statement -> Â· for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> Â· for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> Â· attribute for_statement/0.0/0 : {'for'}
func_call_statement -> Â· template_elaborated_ident argument_expression_list : {';'}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
if_statement -> Â· if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> Â· if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> Â· attribute if_statement/0.0/0 : {'if'}
increment_statement -> Â· lhs_expression '++' : {';'}
lhs_expression -> Â· '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
loop_statement -> Â· loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> Â· loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> Â· attribute loop_statement/0.0/0 : {'loop'}
loop_statement/0.4/0 -> Â· statement loop_statement/0.4/0 : {'continuing' '}'}
return_statement -> Â· 'return' return_statement/0.1 : {';'}
statement -> Â· ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· break_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· for_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· if_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· loop_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· return_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· switch_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· while_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> Â· switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> Â· switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> Â· attribute switch_statement/0.0/0 : {'switch'}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'('}
variable_decl -> Â· 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}
variable_statement -> Â· 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> Â· 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> Â· variable_decl '=' expression : {';'}
variable_statement -> Â· variable_decl : {';'}
variable_updating_statement -> Â· assignment_statement : {';'}
variable_updating_statement -> Â· decrement_statement : {';'}
variable_updating_statement -> Â· increment_statement : {';'}
while_statement -> Â· while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> Â· while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> Â· attribute while_statement/0.0/0 : {'while'}

#464
for_header -> for_header/0.0 ';' Â· for_header/0.2 ';' for_header/0.4 : {')'}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {';'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {';'}
expression -> Â· relational_expression : {';'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {';'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
for_header/0.2 -> Â· expression : {';'}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#465
for_statement -> for_statement/0.0 'for' '(' for_header ')' Â· compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' '{'}
compound_statement -> Â· compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> Â· compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> Â· attribute compound_statement/0.0/0 : {'{'}

#466
for_statement -> for_statement/0.0 'for' '(' for_header ')' compound_statement Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#467
for_header -> for_header/0.0 ';' for_header/0.2 Â· ';' for_header/0.4 : {')'}

#468
for_header/0.2 -> expression Â· : {';'}

#469
loop_statement/0.4/0 -> statement loop_statement/0.4/0 Â· : {'continuing' '}'}

#470
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 Â· '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#471
loop_statement/0.5 -> continuing_statement Â· : {'}'}

#472
continuing_statement -> 'continuing' Â· continuing_compound_statement : {'}'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' '{'}
continuing_compound_statement -> Â· continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' : {'}'}
continuing_compound_statement/0.0 -> Â· continuing_compound_statement/0.0/0 : {'{'}
continuing_compound_statement/0.0/0 -> Â· attribute continuing_compound_statement/0.0/0 : {'{'}

#473
switch_body -> switch_body/0.0 '{' switch_body/0.2 Â· '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#474
switch_body/0.2 -> switch_body/0.2/0 Â· : {'}'}

#475
switch_body/0.2/0 -> switch_clause Â· switch_body/0.2/0 : {'}'}
case_clause -> Â· 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
default_alone_clause -> Â· 'default' default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
switch_body/0.2/0 -> Â· switch_clause switch_body/0.2/0 : {'}'}
switch_clause -> Â· case_clause : {'case' 'default' '}'}
switch_clause -> Â· default_alone_clause : {'case' 'default' '}'}

#476
switch_clause -> case_clause Â· : {'case' 'default' '}'}

#477
switch_clause -> default_alone_clause Â· : {'case' 'default' '}'}

#478
case_clause -> 'case' Â· case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {',' ':' '@' '{'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {',' ':' '@' '{'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {',' ':' '@' '{'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
case_selector -> Â· 'default' : {',' ':' '@' '{'}
case_selector -> Â· expression : {',' ':' '@' '{'}
case_selectors -> Â· case_selector case_selectors/0.1 case_selectors/0.2 : {':' '@' '{'}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {',' ':' '@' '{'}
expression -> Â· relational_expression : {',' ':' '@' '{'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {',' ':' '@' '{'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {',' ':' '@' '{'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> Â· shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ',' ':' '@' '{' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' ',' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ',' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ',' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#479
default_alone_clause -> 'default' Â· default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
default_alone_clause/0.1 -> Â· ':' : {'@' '{'}

#480
else_if_clause -> 'else' 'if' expression compound_statement Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#481
default_alone_clause -> 'default' default_alone_clause/0.1 Â· compound_statement : {'case' 'default' '}'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' '{'}
compound_statement -> Â· compound_statement/0.0 '{' compound_statement/0.2 '}' : {'case' 'default' '}'}
compound_statement/0.0 -> Â· compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> Â· attribute compound_statement/0.0/0 : {'{'}

#482
default_alone_clause/0.1 -> ':' Â· : {'@' '{'}

#483
case_clause -> 'case' case_selectors Â· case_clause/0.2 compound_statement : {'case' 'default' '}'}
case_clause/0.2 -> Â· ':' : {'@' '{'}

#484
case_selectors -> case_selector Â· case_selectors/0.1 case_selectors/0.2 : {':' '@' '{'}
case_selectors/0.1 -> Â· case_selectors/0.1/0 : {',' ':' '@' '{'}
case_selectors/0.1/0 -> Â· case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '@' '{'}
case_selectors/0.1/0/0.0 -> Â· ',' case_selector : {',' ':' '@' '{'}

#485
case_selector -> 'default' Â· : {',' ':' '@' '{'}

#486
case_selector -> expression Â· : {',' ':' '@' '{'}

#487
switch_body/0.2/0 -> switch_clause switch_body/0.2/0 Â· : {'}'}

#488
switch_body -> switch_body/0.0 '{' switch_body/0.2 '}' Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#489
continuing_statement -> 'continuing' continuing_compound_statement Â· : {'}'}

#490
continuing_compound_statement -> continuing_compound_statement/0.0 Â· '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' : {'}'}

#491
continuing_compound_statement/0.0 -> continuing_compound_statement/0.0/0 Â· : {'{'}

#492
continuing_compound_statement/0.0/0 -> attribute Â· continuing_compound_statement/0.0/0 : {'{'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' '{'}
continuing_compound_statement/0.0/0 -> Â· attribute continuing_compound_statement/0.0/0 : {'{'}

#493
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' Â· : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#494
for_header -> for_header/0.0 ';' for_header/0.2 ';' Â· for_header/0.4 : {')'}
assignment_statement -> Â· '_' '=' expression : {')'}
assignment_statement -> Â· lhs_expression assignment_statement/0.1 expression : {')'}
core_lhs_expression -> Â· '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> Â· ident _disambiguate_template : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
decrement_statement -> Â· lhs_expression '--' : {')'}
for_header/0.4 -> Â· for_update : {')'}
for_update -> Â· func_call_statement : {')'}
for_update -> Â· variable_updating_statement : {')'}
func_call_statement -> Â· template_elaborated_ident argument_expression_list : {')'}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
increment_statement -> Â· lhs_expression '++' : {')'}
lhs_expression -> Â· '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'('}
variable_updating_statement -> Â· assignment_statement : {')'}
variable_updating_statement -> Â· decrement_statement : {')'}
variable_updating_statement -> Â· increment_statement : {')'}

#495
for_header -> for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 Â· : {')'}

#496
for_header/0.4 -> for_update Â· : {')'}

#497
for_update -> variable_updating_statement Â· : {')'}

#498
for_update -> func_call_statement Â· : {')'}

#499
continuing_compound_statement/0.0/0 -> attribute continuing_compound_statement/0.0/0 Â· : {'{'}

#500
continuing_compound_statement -> continuing_compound_statement/0.0 '{' Â· continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' : {'}'}
assignment_statement -> Â· '_' '=' expression : {';'}
assignment_statement -> Â· lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> Â· 'break' : {';'}
compound_statement -> Â· compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> Â· compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> Â· attribute compound_statement/0.0/0 : {'{'}
const_assert_statement -> Â· 'const_assert' expression : {';'}
continue_statement -> Â· 'continue' : {';'}
continuing_compound_statement/0.2 -> Â· continuing_compound_statement/0.2/0 : {'break' '}'}
continuing_compound_statement/0.2/0 -> Â· statement continuing_compound_statement/0.2/0 : {'break' '}'}
core_lhs_expression -> Â· '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> Â· ident _disambiguate_template : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
decrement_statement -> Â· lhs_expression '--' : {';'}
for_statement -> Â· for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> Â· for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> Â· attribute for_statement/0.0/0 : {'for'}
func_call_statement -> Â· template_elaborated_ident argument_expression_list : {';'}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
if_statement -> Â· if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> Â· if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> Â· attribute if_statement/0.0/0 : {'if'}
increment_statement -> Â· lhs_expression '++' : {';'}
lhs_expression -> Â· '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
loop_statement -> Â· loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> Â· loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> Â· attribute loop_statement/0.0/0 : {'loop'}
return_statement -> Â· 'return' return_statement/0.1 : {';'}
statement -> Â· ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· break_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· for_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· if_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· loop_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· return_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· switch_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· while_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> Â· switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> Â· switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> Â· attribute switch_statement/0.0/0 : {'switch'}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'('}
variable_decl -> Â· 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}
variable_statement -> Â· 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> Â· 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> Â· variable_decl '=' expression : {';'}
variable_statement -> Â· variable_decl : {';'}
variable_updating_statement -> Â· assignment_statement : {';'}
variable_updating_statement -> Â· decrement_statement : {';'}
variable_updating_statement -> Â· increment_statement : {';'}
while_statement -> Â· while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> Â· while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> Â· attribute while_statement/0.0/0 : {'while'}

#501
case_selectors -> case_selector case_selectors/0.1 Â· case_selectors/0.2 : {':' '@' '{'}
case_selectors/0.2 -> Â· ',' : {':' '@' '{'}

#502
case_selectors/0.1 -> case_selectors/0.1/0 Â· : {',' ':' '@' '{'}

#503
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 Â· case_selectors/0.1/0 : {',' ':' '@' '{'}
case_selectors/0.1/0 -> Â· case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '@' '{'}
case_selectors/0.1/0/0.0 -> Â· ',' case_selector : {',' ':' '@' '{'}

#504
case_selectors/0.1/0/0.0 -> ',' Â· case_selector : {',' ':' '@' '{'}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {',' ':' '@' '{'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {',' ':' '@' '{'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {',' ':' '@' '{'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
case_selector -> Â· 'default' : {',' ':' '@' '{'}
case_selector -> Â· expression : {',' ':' '@' '{'}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {',' ':' '@' '{'}
expression -> Â· relational_expression : {',' ':' '@' '{'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {',' ':' '@' '{'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {',' ':' '@' '{'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> Â· shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ',' ':' '@' '{' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ',' ':' '@' '{' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' ',' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ',' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ',' ':' '==' '@' '{' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '==' '@' '[' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '==' '@' '^' '{' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#505
case_clause -> 'case' case_selectors case_clause/0.2 Â· compound_statement : {'case' 'default' '}'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' '{'}
compound_statement -> Â· compound_statement/0.0 '{' compound_statement/0.2 '}' : {'case' 'default' '}'}
compound_statement/0.0 -> Â· compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> Â· attribute compound_statement/0.0/0 : {'{'}

#506
case_clause/0.2 -> ':' Â· : {'@' '{'}

#507
default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement Â· : {'case' 'default' '}'}

#508
case_clause -> 'case' case_selectors case_clause/0.2 compound_statement Â· : {'case' 'default' '}'}

#509
case_selectors/0.1/0/0.0 -> ',' case_selector Â· : {',' ':' '@' '{'}

#510
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 Â· : {',' ':' '@' '{'}

#511
case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 Â· : {':' '@' '{'}

#512
case_selectors/0.2 -> ',' Â· : {':' '@' '{'}

#513
continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 Â· continuing_compound_statement/0.3 '}' : {'}'}
break_if_statement -> Â· 'break' 'if' expression ';' : {'}'}
continuing_compound_statement/0.3 -> Â· break_if_statement : {'}'}

#514
continuing_compound_statement/0.2 -> continuing_compound_statement/0.2/0 Â· : {'break' '}'}

#515
continuing_compound_statement/0.2/0 -> statement Â· continuing_compound_statement/0.2/0 : {'break' '}'}
assignment_statement -> Â· '_' '=' expression : {';'}
assignment_statement -> Â· lhs_expression assignment_statement/0.1 expression : {';'}
attribute -> Â· '@' 'diagnostic' diagnostic_control : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
attribute -> Â· '@' ident_pattern_token attribute/0.2 : {'@' 'for' 'if' 'loop' 'switch' 'while' '{'}
break_statement -> Â· 'break' : {';'}
compound_statement -> Â· compound_statement/0.0 '{' compound_statement/0.2 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.0 -> Â· compound_statement/0.0/0 : {'{'}
compound_statement/0.0/0 -> Â· attribute compound_statement/0.0/0 : {'{'}
const_assert_statement -> Â· 'const_assert' expression : {';'}
continue_statement -> Â· 'continue' : {';'}
continuing_compound_statement/0.2/0 -> Â· statement continuing_compound_statement/0.2/0 : {'break' '}'}
core_lhs_expression -> Â· '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
core_lhs_expression -> Â· ident _disambiguate_template : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '=' '[' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
decrement_statement -> Â· lhs_expression '--' : {';'}
for_statement -> Â· for_statement/0.0 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
for_statement/0.0 -> Â· for_statement/0.0/0 : {'for'}
for_statement/0.0/0 -> Â· attribute for_statement/0.0/0 : {'for'}
func_call_statement -> Â· template_elaborated_ident argument_expression_list : {';'}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
if_statement -> Â· if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.0 -> Â· if_statement/0.0/0 : {'if'}
if_statement/0.0/0 -> Â· attribute if_statement/0.0/0 : {'if'}
increment_statement -> Â· lhs_expression '++' : {';'}
lhs_expression -> Â· '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
lhs_expression -> Â· core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '=' '^=' '|=' /\u200B_shift_left_assign/ /\u200B_shift_right_assign/}
loop_statement -> Â· loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.0 -> Â· loop_statement/0.0/0 : {'loop'}
loop_statement/0.0/0 -> Â· attribute loop_statement/0.0/0 : {'loop'}
return_statement -> Â· 'return' return_statement/0.1 : {';'}
statement -> Â· ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· 'discard' ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· break_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· const_assert_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· continue_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· for_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· func_call_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· if_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· loop_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· return_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· switch_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· variable_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· variable_updating_statement ';' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> Â· while_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> Â· switch_statement/0.0 'switch' expression switch_body : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement/0.0 -> Â· switch_statement/0.0/0 : {'switch'}
switch_statement/0.0/0 -> Â· attribute switch_statement/0.0/0 : {'switch'}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'('}
variable_decl -> Â· 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident : {';' '='}
variable_statement -> Â· 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> Â· 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> Â· variable_decl '=' expression : {';'}
variable_statement -> Â· variable_decl : {';'}
variable_updating_statement -> Â· assignment_statement : {';'}
variable_updating_statement -> Â· decrement_statement : {';'}
variable_updating_statement -> Â· increment_statement : {';'}
while_statement -> Â· while_statement/0.0 'while' expression compound_statement : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
while_statement/0.0 -> Â· while_statement/0.0/0 : {'while'}
while_statement/0.0/0 -> Â· attribute while_statement/0.0/0 : {'while'}

#516
continuing_compound_statement/0.2/0 -> statement continuing_compound_statement/0.2/0 Â· : {'break' '}'}

#517
continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 Â· '}' : {'}'}

#518
continuing_compound_statement/0.3 -> break_if_statement Â· : {'}'}

#519
break_if_statement -> 'break' Â· 'if' expression ';' : {'}'}

#520
break_if_statement -> 'break' 'if' Â· expression ';' : {'}'}
additive_expression -> Â· additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
additive_expression -> Â· multiplicative_expression : {'!=' '&&' '+' '-' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
binary_and_expression -> Â· binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> Â· unary_expression : {'&'}
binary_or_expression -> Â· binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> Â· unary_expression : {'|'}
binary_xor_expression -> Â· binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> Â· unary_expression : {'^'}
bitwise_expression -> Â· binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> Â· binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> Â· binary_xor_expression '^' unary_expression : {';'}
bool_literal -> Â· 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
bool_literal -> Â· 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
call_expression -> Â· template_elaborated_ident argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_float_literal -> Â· /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
decimal_int_literal -> Â· /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
expression -> Â· bitwise_expression : {';'}
expression -> Â· relational_expression : {';'}
expression -> Â· short_circuit_and_expression '&&' relational_expression : {';'}
expression -> Â· short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> Â· decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
float_literal -> Â· hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_float_literal -> Â· /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
hex_int_literal -> Â· /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
ident -> Â· ident_pattern_token _disambiguate_template : {/\u200B_disambiguate_template/}
ident_pattern_token -> Â· /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {/\u200B_disambiguate_template/}
int_literal -> Â· decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
int_literal -> Â· hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
literal -> Â· int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
multiplicative_expression -> Â· multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
multiplicative_expression -> Â· unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
paren_expression -> Â· '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
primary_expression -> Â· template_elaborated_ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
relational_expression -> Â· shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than shift_expression : {'&&' ';' '||'}
relational_expression -> Â· shift_expression _less_than_equal shift_expression : {'&&' ';' '||'}
shift_expression -> Â· additive_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_left unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
shift_expression -> Â· unary_expression _shift_right unary_expression : {'!=' '&&' ';' '==' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/}
short_circuit_and_expression -> Â· relational_expression : {'&&'}
short_circuit_and_expression -> Â· short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> Â· relational_expression : {'||'}
short_circuit_or_expression -> Â· short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> Â· primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
template_elaborated_ident -> Â· ident _disambiguate_template template_elaborated_ident/0.2 : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '==' '[' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}
unary_expression -> Â· singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '==' '^' '|' '||' /\u200B_greater_than/ /\u200B_greater_than_equal/ /\u200B_less_than/ /\u200B_less_than_equal/ /\u200B_shift_left/ /\u200B_shift_right/}

#521
continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' Â· : {'}'}

#522
break_if_statement -> 'break' 'if' expression Â· ';' : {'}'}

#523
break_if_statement -> 'break' 'if' expression ';' Â· : {'}'}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 Â·
r#1 global_directive -> diagnostic_directive Â·
r#2 global_directive -> enable_directive Â·
r#3 global_directive -> requires_directive Â·
r#4 software_extension_name -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Â·
r#5 enable_extension_name -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Â·
r#6 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 Â·
r#7 translation_unit -> translation_unit/0.0 translation_unit/0.1 Â·
r#8 translation_unit/0.1 -> translation_unit/0.1/0 Â·
r#9 global_decl -> ';' Â·
r#10 global_decl -> struct_decl Â·
r#11 global_decl -> function_decl Â·
r#12 global_variable_decl/0.0 -> global_variable_decl/0.0/0 Â·
r#13 global_constant_decl/1.0 -> global_constant_decl/1.0/0 Â·
r#14 function_decl/0.0 -> function_decl/0.0/0 Â·
r#15 ident_pattern_token -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Â·
r#16 global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 Â·
r#17 global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 Â·
r#18 function_decl/0.0/0 -> attribute function_decl/0.0/0 Â·
r#19 const_assert_statement -> 'const_assert' expression Â·
r#20 expression -> relational_expression Â·
r#21 short_circuit_or_expression -> relational_expression Â·
r#22 short_circuit_and_expression -> relational_expression Â·
r#23 expression -> bitwise_expression Â·
r#24 relational_expression -> shift_expression Â·
r#25 shift_expression -> additive_expression Â·
r#26 binary_and_expression -> unary_expression Â·
r#27 binary_or_expression -> unary_expression Â·
r#28 binary_xor_expression -> unary_expression Â·
r#29 multiplicative_expression -> unary_expression Â·
r#30 additive_expression -> multiplicative_expression Â·
r#31 unary_expression -> singular_expression Â·
r#32 primary_expression -> template_elaborated_ident Â·
r#33 primary_expression -> call_expression Â·
r#34 primary_expression -> literal Â·
r#35 primary_expression -> paren_expression Â·
r#36 literal -> int_literal Â·
r#37 literal -> float_literal Â·
r#38 literal -> bool_literal Â·
r#39 int_literal -> decimal_int_literal Â·
r#40 int_literal -> hex_int_literal Â·
r#41 float_literal -> decimal_float_literal Â·
r#42 float_literal -> hex_float_literal Â·
r#43 bool_literal -> 'true' Â·
r#44 bool_literal -> 'false' Â·
r#45 decimal_int_literal -> /0[iu]?/ Â·
r#46 decimal_int_literal -> /[1-9][0-9]*[iu]?/ Â·
r#47 hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ Â·
r#48 decimal_float_literal -> /0[fh]/ Â·
r#49 decimal_float_literal -> /[1-9][0-9]*[fh]/ Â·
r#50 decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ Â·
r#51 decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ Â·
r#52 decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ Â·
r#53 hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ Â·
r#54 hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ Â·
r#55 hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ Â·
r#56 global_decl -> const_assert_statement ';' Â·
r#57 global_decl -> type_alias_decl ';' Â·
r#58 global_decl -> global_constant_decl ';' Â·
r#59 global_decl -> global_variable_decl ';' Â·
r#60 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 Â·
r#61 severity_control_name -> 'error' Â·
r#62 severity_control_name -> 'warning' Â·
r#63 severity_control_name -> 'info' Â·
r#64 severity_control_name -> 'off' Â·
r#65 diagnostic_directive -> 'diagnostic' diagnostic_control ';' Â·
r#66 enable_directive -> 'enable' enable_extension_name ';' Â·
r#67 software_extension_list/0.1 -> software_extension_list/0.1/0 Â·
r#68 requires_directive -> 'requires' software_extension_list ';' Â·
r#69 software_extension_list/0.1/0/0.0 -> ',' software_extension_name Â·
r#70 software_extension_list/0.1/0 -> software_extension_list/0.1/0/0.0 software_extension_list/0.1/0 Â·
r#71 software_extension_list -> software_extension_name software_extension_list/0.1 software_extension_list/0.2 Â·
r#72 software_extension_list/0.2 -> ',' Â·
r#73 _disambiguate_template -> /\u200B_disambiguate_template/ Â·
r#74 global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 Â·
r#75 optionally_typed_ident -> ident optionally_typed_ident/0.1 Â·
r#76 struct_decl -> 'struct' ident struct_body_decl Â·
r#77 function_decl -> function_decl/0.0 function_header compound_statement Â·
r#78 compound_statement/0.0 -> compound_statement/0.0/0 Â·
r#79 ident -> ident_pattern_token _disambiguate_template Â·
r#80 call_expression -> template_elaborated_ident argument_expression_list Â·
r#81 singular_expression -> primary_expression singular_expression/0.1 Â·
r#82 singular_expression/0.1 -> component_or_swizzle_specifier Â·
r#83 unary_expression -> '&' unary_expression Â·
r#84 unary_expression -> '*' unary_expression Â·
r#85 unary_expression -> '~' unary_expression Â·
r#86 unary_expression -> '!' unary_expression Â·
r#87 unary_expression -> '-' unary_expression Â·
r#88 multiplicative_operator -> '*' Â·
r#89 multiplicative_operator -> '/' Â·
r#90 multiplicative_operator -> '%' Â·
r#91 _shift_left -> /\u200B_shift_left/ Â·
r#92 _shift_right -> /\u200B_shift_right/ Â·
r#93 additive_operator -> '+' Â·
r#94 additive_operator -> '-' Â·
r#95 _less_than -> /\u200B_less_than/ Â·
r#96 _greater_than -> /\u200B_greater_than/ Â·
r#97 _less_than_equal -> /\u200B_less_than_equal/ Â·
r#98 _greater_than_equal -> /\u200B_greater_than_equal/ Â·
r#99 attribute -> '@' 'diagnostic' diagnostic_control Â·
r#100 attribute -> '@' ident_pattern_token attribute/0.2 Â·
r#101 attribute/0.2 -> argument_expression_list Â·
r#102 expression -> short_circuit_or_expression '||' relational_expression Â·
r#103 short_circuit_or_expression -> short_circuit_or_expression '||' relational_expression Â·
r#104 expression -> short_circuit_and_expression '&&' relational_expression Â·
r#105 short_circuit_and_expression -> short_circuit_and_expression '&&' relational_expression Â·
r#106 relational_expression -> shift_expression '!=' shift_expression Â·
r#107 relational_expression -> shift_expression '==' shift_expression Â·
r#108 relational_expression -> shift_expression _greater_than_equal shift_expression Â·
r#109 relational_expression -> shift_expression _less_than_equal shift_expression Â·
r#110 relational_expression -> shift_expression _greater_than shift_expression Â·
r#111 relational_expression -> shift_expression _less_than shift_expression Â·
r#112 bitwise_expression -> binary_and_expression '&' unary_expression Â·
r#113 binary_and_expression -> binary_and_expression '&' unary_expression Â·
r#114 bitwise_expression -> binary_or_expression '|' unary_expression Â·
r#115 binary_or_expression -> binary_or_expression '|' unary_expression Â·
r#116 bitwise_expression -> binary_xor_expression '^' unary_expression Â·
r#117 binary_xor_expression -> binary_xor_expression '^' unary_expression Â·
r#118 additive_expression -> additive_expression additive_operator multiplicative_expression Â·
r#119 shift_expression -> unary_expression _shift_right unary_expression Â·
r#120 shift_expression -> unary_expression _shift_left unary_expression Â·
r#121 multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression Â·
r#122 member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Â·
r#123 swizzle_name -> '/[rgba]/' Â·
r#124 swizzle_name -> '/[rgba][rgba]/' Â·
r#125 swizzle_name -> '/[rgba][rgba][rgba]/' Â·
r#126 swizzle_name -> '/[rgba][rgba][rgba][rgba]/' Â·
r#127 swizzle_name -> '/[xyzw]/' Â·
r#128 swizzle_name -> '/[xyzw][xyzw]/' Â·
r#129 swizzle_name -> '/[xyzw][xyzw][xyzw]/' Â·
r#130 swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' Â·
r#131 argument_expression_list/0.1 -> expression_comma_list Â·
r#132 template_elaborated_ident -> ident _disambiguate_template template_elaborated_ident/0.2 Â·
r#133 template_elaborated_ident/0.2 -> template_list Â·
r#134 _template_args_start -> /\u200B_template_args_start/ Â·
r#135 paren_expression -> '(' expression ')' Â·
r#136 compound_statement/0.0/0 -> attribute compound_statement/0.0/0 Â·
r#137 struct_member/0.0 -> struct_member/0.0/0 Â·
r#138 type_alias_decl -> 'alias' ident '=' type_specifier Â·
r#139 global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 Â·
r#140 global_constant_decl -> 'const' optionally_typed_ident '=' expression Â·
r#141 optionally_typed_ident/0.1 -> ':' type_specifier Â·
r#142 global_variable_decl/0.2 -> '=' expression Â·
r#143 variable_decl/0.2 -> template_list Â·
r#144 diagnostic_rule_name -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ Â·
r#145 diagnostic_control/0.4 -> ',' Â·
r#146 variable_decl -> 'var' _disambiguate_template variable_decl/0.2 optionally_typed_ident Â·
r#147 global_constant_decl/1.3 -> '=' expression Â·
r#148 struct_member/0.0/0 -> attribute struct_member/0.0/0 Â·
r#149 struct_body_decl/0.2 -> struct_body_decl/0.2/0 Â·
r#150 function_header/0.3 -> param_list Â·
r#151 param/0.0 -> param/0.0/0 Â·
r#152 compound_statement/0.2 -> compound_statement/0.2/0 Â·
r#153 statement -> ';' Â·
r#154 statement -> if_statement Â·
r#155 statement -> switch_statement Â·
r#156 statement -> loop_statement Â·
r#157 statement -> for_statement Â·
r#158 statement -> while_statement Â·
r#159 statement -> compound_statement Â·
r#160 variable_statement -> variable_decl Â·
r#161 break_statement -> 'break' Â·
r#162 continue_statement -> 'continue' Â·
r#163 variable_updating_statement -> assignment_statement Â·
r#164 variable_updating_statement -> increment_statement Â·
r#165 variable_updating_statement -> decrement_statement Â·
r#166 if_statement/0.0 -> if_statement/0.0/0 Â·
r#167 switch_statement/0.0 -> switch_statement/0.0/0 Â·
r#168 loop_statement/0.0 -> loop_statement/0.0/0 Â·
r#169 for_statement/0.0 -> for_statement/0.0/0 Â·
r#170 while_statement/0.0 -> while_statement/0.0/0 Â·
r#171 template_arg_expression -> relational_expression Â·
r#172 template_arg_expression -> bitwise_expression Â·
r#173 expression_comma_list/0.1 -> expression_comma_list/0.1/0 Â·
r#174 argument_expression_list -> '(' argument_expression_list/0.1 ')' Â·
r#175 component_or_swizzle_specifier -> '.' swizzle_name component_or_swizzle_specifier/2.2 Â·
r#176 component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier Â·
r#177 component_or_swizzle_specifier -> '.' member_ident component_or_swizzle_specifier/1.2 Â·
r#178 component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier Â·
r#179 component_or_swizzle_specifier -> '[' expression ']' component_or_swizzle_specifier/0.3 Â·
r#180 component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier Â·
r#181 expression_comma_list/0.1/0/0.0 -> ',' expression Â·
r#182 expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 Â·
r#183 expression_comma_list -> expression expression_comma_list/0.1 expression_comma_list/0.2 Â·
r#184 expression_comma_list/0.2 -> ',' Â·
r#185 template_arg_comma_list/0.1 -> template_arg_comma_list/0.1/0 Â·
r#186 template_list -> _template_args_start template_arg_comma_list _template_args_end Â·
r#187 _template_args_end -> /\u200B_template_args_end/ Â·
r#188 lhs_expression -> '&' lhs_expression Â·
r#189 lhs_expression -> '*' lhs_expression Â·
r#190 lhs_expression -> core_lhs_expression lhs_expression/0.1 Â·
r#191 lhs_expression/0.1 -> component_or_swizzle_specifier Â·
r#192 if_statement/0.0/0 -> attribute if_statement/0.0/0 Â·
r#193 switch_statement/0.0/0 -> attribute switch_statement/0.0/0 Â·
r#194 loop_statement/0.0/0 -> attribute loop_statement/0.0/0 Â·
r#195 for_statement/0.0/0 -> attribute for_statement/0.0/0 Â·
r#196 while_statement/0.0/0 -> attribute while_statement/0.0/0 Â·
r#197 increment_statement -> lhs_expression '++' Â·
r#198 decrement_statement -> lhs_expression '--' Â·
r#199 assignment_statement/0.1 -> '=' Â·
r#200 assignment_statement/0.1 -> compound_assignment_operator Â·
r#201 compound_assignment_operator -> '+=' Â·
r#202 compound_assignment_operator -> '-=' Â·
r#203 compound_assignment_operator -> '*=' Â·
r#204 compound_assignment_operator -> '/=' Â·
r#205 compound_assignment_operator -> '%=' Â·
r#206 compound_assignment_operator -> '&=' Â·
r#207 compound_assignment_operator -> '|=' Â·
r#208 compound_assignment_operator -> '^=' Â·
r#209 compound_assignment_operator -> _shift_right_assign Â·
r#210 compound_assignment_operator -> _shift_left_assign Â·
r#211 _shift_right_assign -> /\u200B_shift_right_assign/ Â·
r#212 _shift_left_assign -> /\u200B_shift_left_assign/ Â·
r#213 core_lhs_expression -> ident _disambiguate_template Â·
r#214 func_call_statement -> template_elaborated_ident argument_expression_list Â·
r#215 return_statement -> 'return' return_statement/0.1 Â·
r#216 return_statement/0.1 -> expression Â·
r#217 statement -> const_assert_statement ';' Â·
r#218 statement -> variable_updating_statement ';' Â·
r#219 statement -> 'discard' ';' Â·
r#220 statement -> continue_statement ';' Â·
r#221 statement -> break_statement ';' Â·
r#222 statement -> variable_statement ';' Â·
r#223 statement -> func_call_statement ';' Â·
r#224 statement -> return_statement ';' Â·
r#225 compound_statement/0.2/0 -> statement compound_statement/0.2/0 Â·
r#226 compound_statement -> compound_statement/0.0 '{' compound_statement/0.2 '}' Â·
r#227 param/0.0/0 -> attribute param/0.0/0 Â·
r#228 param_list/0.1 -> param_list/0.1/0 Â·
r#229 struct_body_decl/0.2/0/0.0 -> ',' struct_member Â·
r#230 struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 Â·
r#231 struct_body_decl/0.3 -> ',' Â·
r#232 type_specifier -> ident _disambiguate_template template_elaborated_ident/0.2 Â·
r#233 diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name diagnostic_control/0.4 ')' Â·
r#234 struct_member -> struct_member/0.0 member_ident ':' type_specifier Â·
r#235 struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' Â·
r#236 function_header -> 'fn' ident '(' function_header/0.3 ')' function_header/0.5 Â·
r#237 param_list/0.1/0/0.0 -> ',' param Â·
r#238 param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 Â·
r#239 param_list -> param param_list/0.1 param_list/0.2 Â·
r#240 param_list/0.2 -> ',' Â·
r#241 if_statement/0.2 -> if_statement/0.2/0 Â·
r#242 loop_statement/0.2 -> loop_statement/0.2/0 Â·
r#243 variable_statement -> variable_decl '=' expression Â·
r#244 assignment_statement -> lhs_expression assignment_statement/0.1 expression Â·
r#245 assignment_statement -> '_' '=' expression Â·
r#246 core_lhs_expression -> '(' lhs_expression ')' Â·
r#247 template_arg_comma_list/0.1/0/0.0 -> ',' template_arg_expression Â·
r#248 template_arg_comma_list/0.1/0 -> template_arg_comma_list/0.1/0/0.0 template_arg_comma_list/0.1/0 Â·
r#249 template_arg_comma_list -> template_arg_expression template_arg_comma_list/0.1 template_arg_comma_list/0.2 Â·
r#250 template_arg_comma_list/0.2 -> ',' Â·
r#251 template_arg_expression -> short_circuit_or_expression '||' relational_expression Â·
r#252 template_arg_expression -> short_circuit_and_expression '&&' relational_expression Â·
r#253 variable_statement -> 'const' optionally_typed_ident '=' expression Â·
r#254 variable_statement -> 'let' optionally_typed_ident '=' expression Â·
r#255 while_statement -> while_statement/0.0 'while' expression compound_statement Â·
r#256 for_header/0.0 -> for_init Â·
r#257 for_init -> variable_statement Â·
r#258 for_init -> variable_updating_statement Â·
r#259 for_init -> func_call_statement Â·
r#260 loop_statement/0.2/0 -> attribute loop_statement/0.2/0 Â·
r#261 switch_statement -> switch_statement/0.0 'switch' expression switch_body Â·
r#262 switch_body/0.0 -> switch_body/0.0/0 Â·
r#263 if_statement/0.2/0 -> else_if_clause if_statement/0.2/0 Â·
r#264 if_statement -> if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 Â·
r#265 if_statement/0.3 -> else_clause Â·
r#266 if_clause -> 'if' expression compound_statement Â·
r#267 param -> param/0.0 ident ':' type_specifier Â·
r#268 function_header/0.5/0.1 -> function_header/0.5/0.1/0 Â·
r#269 function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 Â·
r#270 function_header/0.5 -> '->' function_header/0.5/0.1 template_elaborated_ident Â·
r#271 else_clause -> 'else' compound_statement Â·
r#272 switch_body/0.0/0 -> attribute switch_body/0.0/0 Â·
r#273 loop_statement/0.4 -> loop_statement/0.4/0 Â·
r#274 for_statement -> for_statement/0.0 'for' '(' for_header ')' compound_statement Â·
r#275 for_header/0.2 -> expression Â·
r#276 loop_statement/0.4/0 -> statement loop_statement/0.4/0 Â·
r#277 loop_statement/0.5 -> continuing_statement Â·
r#278 switch_body/0.2 -> switch_body/0.2/0 Â·
r#279 switch_clause -> case_clause Â·
r#280 switch_clause -> default_alone_clause Â·
r#281 else_if_clause -> 'else' 'if' expression compound_statement Â·
r#282 default_alone_clause/0.1 -> ':' Â·
r#283 case_selector -> 'default' Â·
r#284 case_selector -> expression Â·
r#285 switch_body/0.2/0 -> switch_clause switch_body/0.2/0 Â·
r#286 switch_body -> switch_body/0.0 '{' switch_body/0.2 '}' Â·
r#287 continuing_statement -> 'continuing' continuing_compound_statement Â·
r#288 continuing_compound_statement/0.0 -> continuing_compound_statement/0.0/0 Â·
r#289 loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' Â·
r#290 for_header -> for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 Â·
r#291 for_header/0.4 -> for_update Â·
r#292 for_update -> variable_updating_statement Â·
r#293 for_update -> func_call_statement Â·
r#294 continuing_compound_statement/0.0/0 -> attribute continuing_compound_statement/0.0/0 Â·
r#295 case_selectors/0.1 -> case_selectors/0.1/0 Â·
r#296 case_clause/0.2 -> ':' Â·
r#297 default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement Â·
r#298 case_clause -> 'case' case_selectors case_clause/0.2 compound_statement Â·
r#299 case_selectors/0.1/0/0.0 -> ',' case_selector Â·
r#300 case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 Â·
r#301 case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 Â·
r#302 case_selectors/0.2 -> ',' Â·
r#303 continuing_compound_statement/0.2 -> continuing_compound_statement/0.2/0 Â·
r#304 continuing_compound_statement/0.2/0 -> statement continuing_compound_statement/0.2/0 Â·
r#305 continuing_compound_statement/0.3 -> break_if_statement Â·
r#306 continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' Â·
r#307 break_if_statement -> 'break' 'if' expression ';' Â·

=Action:
[#0 'diagnostic']: s#8
[#0 'enable']: s#9
[#0 'requires']: s#10
[#1 EndOfText]: acc
[#2 ';']: s#22
[#2 '@']: s#40
[#2 'alias']: s#32
[#2 'const']: s#30
[#2 'const_assert']: s#35
[#2 'struct']: s#33
[#3 ';']: r#0
[#3 '@']: r#0
[#3 'alias']: r#0
[#3 'const']: r#0
[#3 'const_assert']: r#0
[#3 'fn']: r#0
[#3 'override']: r#0
[#3 'struct']: r#0
[#3 'var']: r#0
[#3 EndOfText]: r#0
[#4 'diagnostic']: s#8
[#4 'enable']: s#9
[#4 'requires']: s#10
[#5 ';']: r#1
[#5 '@']: r#1
[#5 'alias']: r#1
[#5 'const']: r#1
[#5 'const_assert']: r#1
[#5 'diagnostic']: r#1
[#5 'enable']: r#1
[#5 'fn']: r#1
[#5 'override']: r#1
[#5 'requires']: r#1
[#5 'struct']: r#1
[#5 'var']: r#1
[#5 EndOfText]: r#1
[#6 ';']: r#2
[#6 '@']: r#2
[#6 'alias']: r#2
[#6 'const']: r#2
[#6 'const_assert']: r#2
[#6 'diagnostic']: r#2
[#6 'enable']: r#2
[#6 'fn']: r#2
[#6 'override']: r#2
[#6 'requires']: r#2
[#6 'struct']: r#2
[#6 'var']: r#2
[#6 EndOfText]: r#2
[#7 ';']: r#3
[#7 '@']: r#3
[#7 'alias']: r#3
[#7 'const']: r#3
[#7 'const_assert']: r#3
[#7 'diagnostic']: r#3
[#7 'enable']: r#3
[#7 'fn']: r#3
[#7 'override']: r#3
[#7 'requires']: r#3
[#7 'struct']: r#3
[#7 'var']: r#3
[#7 EndOfText]: r#3
[#8 '(']: s#17
[#9 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#15
[#10 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#13
[#11 ';']: s#118
[#12 ',']: s#117
[#13 ',']: r#4
[#13 ';']: r#4
[#14 ';']: s#113
[#15 ';']: r#5
[#16 ';']: s#112
[#17 'error']: s#108
[#17 'info']: s#110
[#17 'off']: s#111
[#17 'warning']: s#109
[#18 ';']: r#6
[#18 '@']: r#6
[#18 'alias']: r#6
[#18 'const']: r#6
[#18 'const_assert']: r#6
[#18 'fn']: r#6
[#18 'override']: r#6
[#18 'struct']: r#6
[#18 'var']: r#6
[#18 EndOfText]: r#6
[#19 EndOfText]: r#7
[#20 EndOfText]: r#8
[#21 ';']: s#22
[#21 '@']: s#40
[#21 'alias']: s#32
[#21 'const']: s#30
[#21 'const_assert']: s#35
[#21 'struct']: s#33
[#22 ';']: r#9
[#22 '@']: r#9
[#22 'alias']: r#9
[#22 'const']: r#9
[#22 'const_assert']: r#9
[#22 'fn']: r#9
[#22 'override']: r#9
[#22 'struct']: r#9
[#22 'var']: r#9
[#22 EndOfText]: r#9
[#23 ';']: s#105
[#24 ';']: s#104
[#25 ';']: s#103
[#26 ';']: r#10
[#26 '@']: r#10
[#26 'alias']: r#10
[#26 'const']: r#10
[#26 'const_assert']: r#10
[#26 'fn']: r#10
[#26 'override']: r#10
[#26 'struct']: r#10
[#26 'var']: r#10
[#26 EndOfText]: r#10
[#27 ';']: r#11
[#27 '@']: r#11
[#27 'alias']: r#11
[#27 'const']: r#11
[#27 'const_assert']: r#11
[#27 'fn']: r#11
[#27 'override']: r#11
[#27 'struct']: r#11
[#27 'var']: r#11
[#27 EndOfText]: r#11
[#28 ';']: s#102
[#29 'var']: s#101
[#30 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#31 'override']: s#97
[#32 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#33 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#34 'fn']: s#94
[#35 '!']: s#61
[#35 '&']: s#64
[#35 '(']: s#74
[#35 '*']: s#63
[#35 '-']: s#60
[#35 'false']: s#81
[#35 'true']: s#80
[#35 '~']: s#62
[#35 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#35 /0[fh]/]: s#85
[#35 /0[iu]?/]: s#82
[#35 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#35 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#35 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#35 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#35 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#35 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#35 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#35 /[1-9][0-9]*[fh]/]: s#86
[#35 /[1-9][0-9]*[iu]?/]: s#83
[#36 'var']: r#12
[#37 'override']: r#13
[#38 'fn']: r#14
[#39 '@']: s#40
[#40 'diagnostic']: s#42
[#40 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#41 '(']: s#144
[#42 '(']: s#17
[#43 '(']: r#15
[#43 '@']: r#15
[#43 'fn']: r#15
[#43 'for']: r#15
[#43 'if']: r#15
[#43 'loop']: r#15
[#43 'override']: r#15
[#43 'switch']: r#15
[#43 'var']: r#15
[#43 'while']: r#15
[#43 '{']: r#15
[#43 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#15
[#43 /\u200B_disambiguate_template/]: r#15
[#44 'var']: r#16
[#45 'override']: r#17
[#46 'fn']: r#18
[#47 ';']: r#19
[#48 '&&']: r#22
[#48 ')']: r#20
[#48 ',']: r#20
[#48 ':']: r#20
[#48 ';']: r#20
[#48 '@']: r#20
[#48 ']']: r#20
[#48 '{']: r#20
[#48 '||']: r#21
[#49 '||']: s#179
[#50 '&&']: s#178
[#51 ')']: r#23
[#51 ',']: r#23
[#51 ':']: r#23
[#51 ';']: r#23
[#51 '@']: r#23
[#51 ']']: r#23
[#51 '{']: r#23
[#52 '!=']: s#173
[#52 '&&']: r#24
[#52 ')']: r#24
[#52 ',']: r#24
[#52 ':']: r#24
[#52 ';']: r#24
[#52 '==']: s#172
[#52 '@']: r#24
[#52 ']']: r#24
[#52 '{']: r#24
[#52 '||']: r#24
[#52 /\u200B_greater_than/]: s#175
[#52 /\u200B_greater_than_equal/]: s#177
[#52 /\u200B_less_than/]: s#174
[#52 /\u200B_less_than_equal/]: s#176
[#52 /\u200B_template_args_end/]: r#24
[#53 '&']: s#167
[#54 '|']: s#166
[#55 '^']: s#165
[#56 '!=']: r#25
[#56 '&&']: r#25
[#56 ')']: r#25
[#56 '+']: s#163
[#56 ',']: r#25
[#56 '-']: s#164
[#56 ':']: r#25
[#56 ';']: r#25
[#56 '==']: r#25
[#56 '@']: r#25
[#56 ']']: r#25
[#56 '{']: r#25
[#56 '||']: r#25
[#56 /\u200B_greater_than/]: r#25
[#56 /\u200B_greater_than_equal/]: r#25
[#56 /\u200B_less_than/]: r#25
[#56 /\u200B_less_than_equal/]: r#25
[#56 /\u200B_template_args_end/]: r#25
[#57 '!=']: r#29
[#57 '%']: r#29
[#57 '&&']: r#29
[#57 '&']: r#26
[#57 ')']: r#29
[#57 '*']: r#29
[#57 '+']: r#29
[#57 ',']: r#29
[#57 '-']: r#29
[#57 '/']: r#29
[#57 ':']: r#29
[#57 ';']: r#29
[#57 '==']: r#29
[#57 '@']: r#29
[#57 ']']: r#29
[#57 '^']: r#28
[#57 '{']: r#29
[#57 '|']: r#27
[#57 '||']: r#29
[#57 /\u200B_greater_than/]: r#29
[#57 /\u200B_greater_than_equal/]: r#29
[#57 /\u200B_less_than/]: r#29
[#57 /\u200B_less_than_equal/]: r#29
[#57 /\u200B_shift_left/]: s#160
[#57 /\u200B_shift_right/]: s#161
[#57 /\u200B_template_args_end/]: r#29
[#58 '!=']: r#30
[#58 '%']: s#157
[#58 '&&']: r#30
[#58 ')']: r#30
[#58 '*']: s#155
[#58 '+']: r#30
[#58 ',']: r#30
[#58 '-']: r#30
[#58 '/']: s#156
[#58 ':']: r#30
[#58 ';']: r#30
[#58 '==']: r#30
[#58 '@']: r#30
[#58 ']']: r#30
[#58 '{']: r#30
[#58 '||']: r#30
[#58 /\u200B_greater_than/]: r#30
[#58 /\u200B_greater_than_equal/]: r#30
[#58 /\u200B_less_than/]: r#30
[#58 /\u200B_less_than_equal/]: r#30
[#58 /\u200B_template_args_end/]: r#30
[#59 '!=']: r#31
[#59 '%']: r#31
[#59 '&&']: r#31
[#59 '&']: r#31
[#59 ')']: r#31
[#59 '*']: r#31
[#59 '+']: r#31
[#59 ',']: r#31
[#59 '-']: r#31
[#59 '/']: r#31
[#59 ':']: r#31
[#59 ';']: r#31
[#59 '==']: r#31
[#59 '@']: r#31
[#59 ']']: r#31
[#59 '^']: r#31
[#59 '{']: r#31
[#59 '|']: r#31
[#59 '||']: r#31
[#59 /\u200B_greater_than/]: r#31
[#59 /\u200B_greater_than_equal/]: r#31
[#59 /\u200B_less_than/]: r#31
[#59 /\u200B_less_than_equal/]: r#31
[#59 /\u200B_shift_left/]: r#31
[#59 /\u200B_shift_right/]: r#31
[#59 /\u200B_template_args_end/]: r#31
[#60 '!']: s#61
[#60 '&']: s#64
[#60 '(']: s#74
[#60 '*']: s#63
[#60 '-']: s#60
[#60 'false']: s#81
[#60 'true']: s#80
[#60 '~']: s#62
[#60 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#60 /0[fh]/]: s#85
[#60 /0[iu]?/]: s#82
[#60 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#60 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#60 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#60 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#60 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#60 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#60 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#60 /[1-9][0-9]*[fh]/]: s#86
[#60 /[1-9][0-9]*[iu]?/]: s#83
[#61 '!']: s#61
[#61 '&']: s#64
[#61 '(']: s#74
[#61 '*']: s#63
[#61 '-']: s#60
[#61 'false']: s#81
[#61 'true']: s#80
[#61 '~']: s#62
[#61 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#61 /0[fh]/]: s#85
[#61 /0[iu]?/]: s#82
[#61 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#61 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#61 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#61 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#61 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#61 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#61 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#61 /[1-9][0-9]*[fh]/]: s#86
[#61 /[1-9][0-9]*[iu]?/]: s#83
[#62 '!']: s#61
[#62 '&']: s#64
[#62 '(']: s#74
[#62 '*']: s#63
[#62 '-']: s#60
[#62 'false']: s#81
[#62 'true']: s#80
[#62 '~']: s#62
[#62 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#62 /0[fh]/]: s#85
[#62 /0[iu]?/]: s#82
[#62 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#62 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#62 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#62 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#62 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#62 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#62 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#62 /[1-9][0-9]*[fh]/]: s#86
[#62 /[1-9][0-9]*[iu]?/]: s#83
[#63 '!']: s#61
[#63 '&']: s#64
[#63 '(']: s#74
[#63 '*']: s#63
[#63 '-']: s#60
[#63 'false']: s#81
[#63 'true']: s#80
[#63 '~']: s#62
[#63 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#63 /0[fh]/]: s#85
[#63 /0[iu]?/]: s#82
[#63 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#63 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#63 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#63 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#63 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#63 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#63 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#63 /[1-9][0-9]*[fh]/]: s#86
[#63 /[1-9][0-9]*[iu]?/]: s#83
[#64 '!']: s#61
[#64 '&']: s#64
[#64 '(']: s#74
[#64 '*']: s#63
[#64 '-']: s#60
[#64 'false']: s#81
[#64 'true']: s#80
[#64 '~']: s#62
[#64 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#64 /0[fh]/]: s#85
[#64 /0[iu]?/]: s#82
[#64 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#64 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#64 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#64 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#64 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#64 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#64 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#64 /[1-9][0-9]*[fh]/]: s#86
[#64 /[1-9][0-9]*[iu]?/]: s#83
[#65 '.']: s#148
[#65 '[']: s#147
[#66 '!=']: r#32
[#66 '%']: r#32
[#66 '&&']: r#32
[#66 '&']: r#32
[#66 '(']: s#144
[#66 ')']: r#32
[#66 '*']: r#32
[#66 '+']: r#32
[#66 ',']: r#32
[#66 '-']: r#32
[#66 '.']: r#32
[#66 '/']: r#32
[#66 ':']: r#32
[#66 ';']: r#32
[#66 '==']: r#32
[#66 '@']: r#32
[#66 '[']: r#32
[#66 ']']: r#32
[#66 '^']: r#32
[#66 '{']: r#32
[#66 '|']: r#32
[#66 '||']: r#32
[#66 /\u200B_greater_than/]: r#32
[#66 /\u200B_greater_than_equal/]: r#32
[#66 /\u200B_less_than/]: r#32
[#66 /\u200B_less_than_equal/]: r#32
[#66 /\u200B_shift_left/]: r#32
[#66 /\u200B_shift_right/]: r#32
[#66 /\u200B_template_args_end/]: r#32
[#67 '!=']: r#33
[#67 '%']: r#33
[#67 '&&']: r#33
[#67 '&']: r#33
[#67 ')']: r#33
[#67 '*']: r#33
[#67 '+']: r#33
[#67 ',']: r#33
[#67 '-']: r#33
[#67 '.']: r#33
[#67 '/']: r#33
[#67 ':']: r#33
[#67 ';']: r#33
[#67 '==']: r#33
[#67 '@']: r#33
[#67 '[']: r#33
[#67 ']']: r#33
[#67 '^']: r#33
[#67 '{']: r#33
[#67 '|']: r#33
[#67 '||']: r#33
[#67 /\u200B_greater_than/]: r#33
[#67 /\u200B_greater_than_equal/]: r#33
[#67 /\u200B_less_than/]: r#33
[#67 /\u200B_less_than_equal/]: r#33
[#67 /\u200B_shift_left/]: r#33
[#67 /\u200B_shift_right/]: r#33
[#67 /\u200B_template_args_end/]: r#33
[#68 '!=']: r#34
[#68 '%']: r#34
[#68 '&&']: r#34
[#68 '&']: r#34
[#68 ')']: r#34
[#68 '*']: r#34
[#68 '+']: r#34
[#68 ',']: r#34
[#68 '-']: r#34
[#68 '.']: r#34
[#68 '/']: r#34
[#68 ':']: r#34
[#68 ';']: r#34
[#68 '==']: r#34
[#68 '@']: r#34
[#68 '[']: r#34
[#68 ']']: r#34
[#68 '^']: r#34
[#68 '{']: r#34
[#68 '|']: r#34
[#68 '||']: r#34
[#68 /\u200B_greater_than/]: r#34
[#68 /\u200B_greater_than_equal/]: r#34
[#68 /\u200B_less_than/]: r#34
[#68 /\u200B_less_than_equal/]: r#34
[#68 /\u200B_shift_left/]: r#34
[#68 /\u200B_shift_right/]: r#34
[#68 /\u200B_template_args_end/]: r#34
[#69 '!=']: r#35
[#69 '%']: r#35
[#69 '&&']: r#35
[#69 '&']: r#35
[#69 ')']: r#35
[#69 '*']: r#35
[#69 '+']: r#35
[#69 ',']: r#35
[#69 '-']: r#35
[#69 '.']: r#35
[#69 '/']: r#35
[#69 ':']: r#35
[#69 ';']: r#35
[#69 '==']: r#35
[#69 '@']: r#35
[#69 '[']: r#35
[#69 ']']: r#35
[#69 '^']: r#35
[#69 '{']: r#35
[#69 '|']: r#35
[#69 '||']: r#35
[#69 /\u200B_greater_than/]: r#35
[#69 /\u200B_greater_than_equal/]: r#35
[#69 /\u200B_less_than/]: r#35
[#69 /\u200B_less_than_equal/]: r#35
[#69 /\u200B_shift_left/]: r#35
[#69 /\u200B_shift_right/]: r#35
[#69 /\u200B_template_args_end/]: r#35
[#70 /\u200B_disambiguate_template/]: s#125
[#71 '!=']: r#36
[#71 '%']: r#36
[#71 '&&']: r#36
[#71 '&']: r#36
[#71 ')']: r#36
[#71 '*']: r#36
[#71 '+']: r#36
[#71 ',']: r#36
[#71 '-']: r#36
[#71 '.']: r#36
[#71 '/']: r#36
[#71 ':']: r#36
[#71 ';']: r#36
[#71 '==']: r#36
[#71 '@']: r#36
[#71 '[']: r#36
[#71 ']']: r#36
[#71 '^']: r#36
[#71 '{']: r#36
[#71 '|']: r#36
[#71 '||']: r#36
[#71 /\u200B_greater_than/]: r#36
[#71 /\u200B_greater_than_equal/]: r#36
[#71 /\u200B_less_than/]: r#36
[#71 /\u200B_less_than_equal/]: r#36
[#71 /\u200B_shift_left/]: r#36
[#71 /\u200B_shift_right/]: r#36
[#71 /\u200B_template_args_end/]: r#36
[#72 '!=']: r#37
[#72 '%']: r#37
[#72 '&&']: r#37
[#72 '&']: r#37
[#72 ')']: r#37
[#72 '*']: r#37
[#72 '+']: r#37
[#72 ',']: r#37
[#72 '-']: r#37
[#72 '.']: r#37
[#72 '/']: r#37
[#72 ':']: r#37
[#72 ';']: r#37
[#72 '==']: r#37
[#72 '@']: r#37
[#72 '[']: r#37
[#72 ']']: r#37
[#72 '^']: r#37
[#72 '{']: r#37
[#72 '|']: r#37
[#72 '||']: r#37
[#72 /\u200B_greater_than/]: r#37
[#72 /\u200B_greater_than_equal/]: r#37
[#72 /\u200B_less_than/]: r#37
[#72 /\u200B_less_than_equal/]: r#37
[#72 /\u200B_shift_left/]: r#37
[#72 /\u200B_shift_right/]: r#37
[#72 /\u200B_template_args_end/]: r#37
[#73 '!=']: r#38
[#73 '%']: r#38
[#73 '&&']: r#38
[#73 '&']: r#38
[#73 ')']: r#38
[#73 '*']: r#38
[#73 '+']: r#38
[#73 ',']: r#38
[#73 '-']: r#38
[#73 '.']: r#38
[#73 '/']: r#38
[#73 ':']: r#38
[#73 ';']: r#38
[#73 '==']: r#38
[#73 '@']: r#38
[#73 '[']: r#38
[#73 ']']: r#38
[#73 '^']: r#38
[#73 '{']: r#38
[#73 '|']: r#38
[#73 '||']: r#38
[#73 /\u200B_greater_than/]: r#38
[#73 /\u200B_greater_than_equal/]: r#38
[#73 /\u200B_less_than/]: r#38
[#73 /\u200B_less_than_equal/]: r#38
[#73 /\u200B_shift_left/]: r#38
[#73 /\u200B_shift_right/]: r#38
[#73 /\u200B_template_args_end/]: r#38
[#74 '!']: s#61
[#74 '&']: s#64
[#74 '(']: s#74
[#74 '*']: s#63
[#74 '-']: s#60
[#74 'false']: s#81
[#74 'true']: s#80
[#74 '~']: s#62
[#74 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#74 /0[fh]/]: s#85
[#74 /0[iu]?/]: s#82
[#74 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#74 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#74 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#74 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#74 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#74 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#74 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#74 /[1-9][0-9]*[fh]/]: s#86
[#74 /[1-9][0-9]*[iu]?/]: s#83
[#75 /\u200B_disambiguate_template/]: s#125
[#76 '!=']: r#39
[#76 '%']: r#39
[#76 '&&']: r#39
[#76 '&']: r#39
[#76 ')']: r#39
[#76 '*']: r#39
[#76 '+']: r#39
[#76 ',']: r#39
[#76 '-']: r#39
[#76 '.']: r#39
[#76 '/']: r#39
[#76 ':']: r#39
[#76 ';']: r#39
[#76 '==']: r#39
[#76 '@']: r#39
[#76 '[']: r#39
[#76 ']']: r#39
[#76 '^']: r#39
[#76 '{']: r#39
[#76 '|']: r#39
[#76 '||']: r#39
[#76 /\u200B_greater_than/]: r#39
[#76 /\u200B_greater_than_equal/]: r#39
[#76 /\u200B_less_than/]: r#39
[#76 /\u200B_less_than_equal/]: r#39
[#76 /\u200B_shift_left/]: r#39
[#76 /\u200B_shift_right/]: r#39
[#76 /\u200B_template_args_end/]: r#39
[#77 '!=']: r#40
[#77 '%']: r#40
[#77 '&&']: r#40
[#77 '&']: r#40
[#77 ')']: r#40
[#77 '*']: r#40
[#77 '+']: r#40
[#77 ',']: r#40
[#77 '-']: r#40
[#77 '.']: r#40
[#77 '/']: r#40
[#77 ':']: r#40
[#77 ';']: r#40
[#77 '==']: r#40
[#77 '@']: r#40
[#77 '[']: r#40
[#77 ']']: r#40
[#77 '^']: r#40
[#77 '{']: r#40
[#77 '|']: r#40
[#77 '||']: r#40
[#77 /\u200B_greater_than/]: r#40
[#77 /\u200B_greater_than_equal/]: r#40
[#77 /\u200B_less_than/]: r#40
[#77 /\u200B_less_than_equal/]: r#40
[#77 /\u200B_shift_left/]: r#40
[#77 /\u200B_shift_right/]: r#40
[#77 /\u200B_template_args_end/]: r#40
[#78 '!=']: r#41
[#78 '%']: r#41
[#78 '&&']: r#41
[#78 '&']: r#41
[#78 ')']: r#41
[#78 '*']: r#41
[#78 '+']: r#41
[#78 ',']: r#41
[#78 '-']: r#41
[#78 '.']: r#41
[#78 '/']: r#41
[#78 ':']: r#41
[#78 ';']: r#41
[#78 '==']: r#41
[#78 '@']: r#41
[#78 '[']: r#41
[#78 ']']: r#41
[#78 '^']: r#41
[#78 '{']: r#41
[#78 '|']: r#41
[#78 '||']: r#41
[#78 /\u200B_greater_than/]: r#41
[#78 /\u200B_greater_than_equal/]: r#41
[#78 /\u200B_less_than/]: r#41
[#78 /\u200B_less_than_equal/]: r#41
[#78 /\u200B_shift_left/]: r#41
[#78 /\u200B_shift_right/]: r#41
[#78 /\u200B_template_args_end/]: r#41
[#79 '!=']: r#42
[#79 '%']: r#42
[#79 '&&']: r#42
[#79 '&']: r#42
[#79 ')']: r#42
[#79 '*']: r#42
[#79 '+']: r#42
[#79 ',']: r#42
[#79 '-']: r#42
[#79 '.']: r#42
[#79 '/']: r#42
[#79 ':']: r#42
[#79 ';']: r#42
[#79 '==']: r#42
[#79 '@']: r#42
[#79 '[']: r#42
[#79 ']']: r#42
[#79 '^']: r#42
[#79 '{']: r#42
[#79 '|']: r#42
[#79 '||']: r#42
[#79 /\u200B_greater_than/]: r#42
[#79 /\u200B_greater_than_equal/]: r#42
[#79 /\u200B_less_than/]: r#42
[#79 /\u200B_less_than_equal/]: r#42
[#79 /\u200B_shift_left/]: r#42
[#79 /\u200B_shift_right/]: r#42
[#79 /\u200B_template_args_end/]: r#42
[#80 '!=']: r#43
[#80 '%']: r#43
[#80 '&&']: r#43
[#80 '&']: r#43
[#80 ')']: r#43
[#80 '*']: r#43
[#80 '+']: r#43
[#80 ',']: r#43
[#80 '-']: r#43
[#80 '.']: r#43
[#80 '/']: r#43
[#80 ':']: r#43
[#80 ';']: r#43
[#80 '==']: r#43
[#80 '@']: r#43
[#80 '[']: r#43
[#80 ']']: r#43
[#80 '^']: r#43
[#80 '{']: r#43
[#80 '|']: r#43
[#80 '||']: r#43
[#80 /\u200B_greater_than/]: r#43
[#80 /\u200B_greater_than_equal/]: r#43
[#80 /\u200B_less_than/]: r#43
[#80 /\u200B_less_than_equal/]: r#43
[#80 /\u200B_shift_left/]: r#43
[#80 /\u200B_shift_right/]: r#43
[#80 /\u200B_template_args_end/]: r#43
[#81 '!=']: r#44
[#81 '%']: r#44
[#81 '&&']: r#44
[#81 '&']: r#44
[#81 ')']: r#44
[#81 '*']: r#44
[#81 '+']: r#44
[#81 ',']: r#44
[#81 '-']: r#44
[#81 '.']: r#44
[#81 '/']: r#44
[#81 ':']: r#44
[#81 ';']: r#44
[#81 '==']: r#44
[#81 '@']: r#44
[#81 '[']: r#44
[#81 ']']: r#44
[#81 '^']: r#44
[#81 '{']: r#44
[#81 '|']: r#44
[#81 '||']: r#44
[#81 /\u200B_greater_than/]: r#44
[#81 /\u200B_greater_than_equal/]: r#44
[#81 /\u200B_less_than/]: r#44
[#81 /\u200B_less_than_equal/]: r#44
[#81 /\u200B_shift_left/]: r#44
[#81 /\u200B_shift_right/]: r#44
[#81 /\u200B_template_args_end/]: r#44
[#82 '!=']: r#45
[#82 '%']: r#45
[#82 '&&']: r#45
[#82 '&']: r#45
[#82 ')']: r#45
[#82 '*']: r#45
[#82 '+']: r#45
[#82 ',']: r#45
[#82 '-']: r#45
[#82 '.']: r#45
[#82 '/']: r#45
[#82 ':']: r#45
[#82 ';']: r#45
[#82 '==']: r#45
[#82 '@']: r#45
[#82 '[']: r#45
[#82 ']']: r#45
[#82 '^']: r#45
[#82 '{']: r#45
[#82 '|']: r#45
[#82 '||']: r#45
[#82 /\u200B_greater_than/]: r#45
[#82 /\u200B_greater_than_equal/]: r#45
[#82 /\u200B_less_than/]: r#45
[#82 /\u200B_less_than_equal/]: r#45
[#82 /\u200B_shift_left/]: r#45
[#82 /\u200B_shift_right/]: r#45
[#82 /\u200B_template_args_end/]: r#45
[#83 '!=']: r#46
[#83 '%']: r#46
[#83 '&&']: r#46
[#83 '&']: r#46
[#83 ')']: r#46
[#83 '*']: r#46
[#83 '+']: r#46
[#83 ',']: r#46
[#83 '-']: r#46
[#83 '.']: r#46
[#83 '/']: r#46
[#83 ':']: r#46
[#83 ';']: r#46
[#83 '==']: r#46
[#83 '@']: r#46
[#83 '[']: r#46
[#83 ']']: r#46
[#83 '^']: r#46
[#83 '{']: r#46
[#83 '|']: r#46
[#83 '||']: r#46
[#83 /\u200B_greater_than/]: r#46
[#83 /\u200B_greater_than_equal/]: r#46
[#83 /\u200B_less_than/]: r#46
[#83 /\u200B_less_than_equal/]: r#46
[#83 /\u200B_shift_left/]: r#46
[#83 /\u200B_shift_right/]: r#46
[#83 /\u200B_template_args_end/]: r#46
[#84 '!=']: r#47
[#84 '%']: r#47
[#84 '&&']: r#47
[#84 '&']: r#47
[#84 ')']: r#47
[#84 '*']: r#47
[#84 '+']: r#47
[#84 ',']: r#47
[#84 '-']: r#47
[#84 '.']: r#47
[#84 '/']: r#47
[#84 ':']: r#47
[#84 ';']: r#47
[#84 '==']: r#47
[#84 '@']: r#47
[#84 '[']: r#47
[#84 ']']: r#47
[#84 '^']: r#47
[#84 '{']: r#47
[#84 '|']: r#47
[#84 '||']: r#47
[#84 /\u200B_greater_than/]: r#47
[#84 /\u200B_greater_than_equal/]: r#47
[#84 /\u200B_less_than/]: r#47
[#84 /\u200B_less_than_equal/]: r#47
[#84 /\u200B_shift_left/]: r#47
[#84 /\u200B_shift_right/]: r#47
[#84 /\u200B_template_args_end/]: r#47
[#85 '!=']: r#48
[#85 '%']: r#48
[#85 '&&']: r#48
[#85 '&']: r#48
[#85 ')']: r#48
[#85 '*']: r#48
[#85 '+']: r#48
[#85 ',']: r#48
[#85 '-']: r#48
[#85 '.']: r#48
[#85 '/']: r#48
[#85 ':']: r#48
[#85 ';']: r#48
[#85 '==']: r#48
[#85 '@']: r#48
[#85 '[']: r#48
[#85 ']']: r#48
[#85 '^']: r#48
[#85 '{']: r#48
[#85 '|']: r#48
[#85 '||']: r#48
[#85 /\u200B_greater_than/]: r#48
[#85 /\u200B_greater_than_equal/]: r#48
[#85 /\u200B_less_than/]: r#48
[#85 /\u200B_less_than_equal/]: r#48
[#85 /\u200B_shift_left/]: r#48
[#85 /\u200B_shift_right/]: r#48
[#85 /\u200B_template_args_end/]: r#48
[#86 '!=']: r#49
[#86 '%']: r#49
[#86 '&&']: r#49
[#86 '&']: r#49
[#86 ')']: r#49
[#86 '*']: r#49
[#86 '+']: r#49
[#86 ',']: r#49
[#86 '-']: r#49
[#86 '.']: r#49
[#86 '/']: r#49
[#86 ':']: r#49
[#86 ';']: r#49
[#86 '==']: r#49
[#86 '@']: r#49
[#86 '[']: r#49
[#86 ']']: r#49
[#86 '^']: r#49
[#86 '{']: r#49
[#86 '|']: r#49
[#86 '||']: r#49
[#86 /\u200B_greater_than/]: r#49
[#86 /\u200B_greater_than_equal/]: r#49
[#86 /\u200B_less_than/]: r#49
[#86 /\u200B_less_than_equal/]: r#49
[#86 /\u200B_shift_left/]: r#49
[#86 /\u200B_shift_right/]: r#49
[#86 /\u200B_template_args_end/]: r#49
[#87 '!=']: r#50
[#87 '%']: r#50
[#87 '&&']: r#50
[#87 '&']: r#50
[#87 ')']: r#50
[#87 '*']: r#50
[#87 '+']: r#50
[#87 ',']: r#50
[#87 '-']: r#50
[#87 '.']: r#50
[#87 '/']: r#50
[#87 ':']: r#50
[#87 ';']: r#50
[#87 '==']: r#50
[#87 '@']: r#50
[#87 '[']: r#50
[#87 ']']: r#50
[#87 '^']: r#50
[#87 '{']: r#50
[#87 '|']: r#50
[#87 '||']: r#50
[#87 /\u200B_greater_than/]: r#50
[#87 /\u200B_greater_than_equal/]: r#50
[#87 /\u200B_less_than/]: r#50
[#87 /\u200B_less_than_equal/]: r#50
[#87 /\u200B_shift_left/]: r#50
[#87 /\u200B_shift_right/]: r#50
[#87 /\u200B_template_args_end/]: r#50
[#88 '!=']: r#51
[#88 '%']: r#51
[#88 '&&']: r#51
[#88 '&']: r#51
[#88 ')']: r#51
[#88 '*']: r#51
[#88 '+']: r#51
[#88 ',']: r#51
[#88 '-']: r#51
[#88 '.']: r#51
[#88 '/']: r#51
[#88 ':']: r#51
[#88 ';']: r#51
[#88 '==']: r#51
[#88 '@']: r#51
[#88 '[']: r#51
[#88 ']']: r#51
[#88 '^']: r#51
[#88 '{']: r#51
[#88 '|']: r#51
[#88 '||']: r#51
[#88 /\u200B_greater_than/]: r#51
[#88 /\u200B_greater_than_equal/]: r#51
[#88 /\u200B_less_than/]: r#51
[#88 /\u200B_less_than_equal/]: r#51
[#88 /\u200B_shift_left/]: r#51
[#88 /\u200B_shift_right/]: r#51
[#88 /\u200B_template_args_end/]: r#51
[#89 '!=']: r#52
[#89 '%']: r#52
[#89 '&&']: r#52
[#89 '&']: r#52
[#89 ')']: r#52
[#89 '*']: r#52
[#89 '+']: r#52
[#89 ',']: r#52
[#89 '-']: r#52
[#89 '.']: r#52
[#89 '/']: r#52
[#89 ':']: r#52
[#89 ';']: r#52
[#89 '==']: r#52
[#89 '@']: r#52
[#89 '[']: r#52
[#89 ']']: r#52
[#89 '^']: r#52
[#89 '{']: r#52
[#89 '|']: r#52
[#89 '||']: r#52
[#89 /\u200B_greater_than/]: r#52
[#89 /\u200B_greater_than_equal/]: r#52
[#89 /\u200B_less_than/]: r#52
[#89 /\u200B_less_than_equal/]: r#52
[#89 /\u200B_shift_left/]: r#52
[#89 /\u200B_shift_right/]: r#52
[#89 /\u200B_template_args_end/]: r#52
[#90 '!=']: r#53
[#90 '%']: r#53
[#90 '&&']: r#53
[#90 '&']: r#53
[#90 ')']: r#53
[#90 '*']: r#53
[#90 '+']: r#53
[#90 ',']: r#53
[#90 '-']: r#53
[#90 '.']: r#53
[#90 '/']: r#53
[#90 ':']: r#53
[#90 ';']: r#53
[#90 '==']: r#53
[#90 '@']: r#53
[#90 '[']: r#53
[#90 ']']: r#53
[#90 '^']: r#53
[#90 '{']: r#53
[#90 '|']: r#53
[#90 '||']: r#53
[#90 /\u200B_greater_than/]: r#53
[#90 /\u200B_greater_than_equal/]: r#53
[#90 /\u200B_less_than/]: r#53
[#90 /\u200B_less_than_equal/]: r#53
[#90 /\u200B_shift_left/]: r#53
[#90 /\u200B_shift_right/]: r#53
[#90 /\u200B_template_args_end/]: r#53
[#91 '!=']: r#54
[#91 '%']: r#54
[#91 '&&']: r#54
[#91 '&']: r#54
[#91 ')']: r#54
[#91 '*']: r#54
[#91 '+']: r#54
[#91 ',']: r#54
[#91 '-']: r#54
[#91 '.']: r#54
[#91 '/']: r#54
[#91 ':']: r#54
[#91 ';']: r#54
[#91 '==']: r#54
[#91 '@']: r#54
[#91 '[']: r#54
[#91 ']']: r#54
[#91 '^']: r#54
[#91 '{']: r#54
[#91 '|']: r#54
[#91 '||']: r#54
[#91 /\u200B_greater_than/]: r#54
[#91 /\u200B_greater_than_equal/]: r#54
[#91 /\u200B_less_than/]: r#54
[#91 /\u200B_less_than_equal/]: r#54
[#91 /\u200B_shift_left/]: r#54
[#91 /\u200B_shift_right/]: r#54
[#91 /\u200B_template_args_end/]: r#54
[#92 '!=']: r#55
[#92 '%']: r#55
[#92 '&&']: r#55
[#92 '&']: r#55
[#92 ')']: r#55
[#92 '*']: r#55
[#92 '+']: r#55
[#92 ',']: r#55
[#92 '-']: r#55
[#92 '.']: r#55
[#92 '/']: r#55
[#92 ':']: r#55
[#92 ';']: r#55
[#92 '==']: r#55
[#92 '@']: r#55
[#92 '[']: r#55
[#92 ']']: r#55
[#92 '^']: r#55
[#92 '{']: r#55
[#92 '|']: r#55
[#92 '||']: r#55
[#92 /\u200B_greater_than/]: r#55
[#92 /\u200B_greater_than_equal/]: r#55
[#92 /\u200B_less_than/]: r#55
[#92 /\u200B_less_than_equal/]: r#55
[#92 /\u200B_shift_left/]: r#55
[#92 /\u200B_shift_right/]: r#55
[#92 /\u200B_template_args_end/]: r#55
[#93 '@']: s#40
[#94 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#95 '{']: s#134
[#96 '=']: s#132
[#97 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#98 '=']: s#130
[#99 ':']: s#129
[#100 '=']: s#127
[#101 /\u200B_disambiguate_template/]: s#125
[#102 ';']: r#56
[#102 '@']: r#56
[#102 'alias']: r#56
[#102 'const']: r#56
[#102 'const_assert']: r#56
[#102 'fn']: r#56
[#102 'override']: r#56
[#102 'struct']: r#56
[#102 'var']: r#56
[#102 EndOfText]: r#56
[#103 ';']: r#57
[#103 '@']: r#57
[#103 'alias']: r#57
[#103 'const']: r#57
[#103 'const_assert']: r#57
[#103 'fn']: r#57
[#103 'override']: r#57
[#103 'struct']: r#57
[#103 'var']: r#57
[#103 EndOfText]: r#57
[#104 ';']: r#58
[#104 '@']: r#58
[#104 'alias']: r#58
[#104 'const']: r#58
[#104 'const_assert']: r#58
[#104 'fn']: r#58
[#104 'override']: r#58
[#104 'struct']: r#58
[#104 'var']: r#58
[#104 EndOfText]: r#58
[#105 ';']: r#59
[#105 '@']: r#59
[#105 'alias']: r#59
[#105 'const']: r#59
[#105 'const_assert']: r#59
[#105 'fn']: r#59
[#105 'override']: r#59
[#105 'struct']: r#59
[#105 'var']: r#59
[#105 EndOfText]: r#59
[#106 EndOfText]: r#60
[#107 ',']: s#123
[#108 ',']: r#61
[#109 ',']: r#62
[#110 ',']: r#63
[#111 ',']: r#64
[#112 ';']: r#65
[#112 '@']: r#65
[#112 'alias']: r#65
[#112 'const']: r#65
[#112 'const_assert']: r#65
[#112 'diagnostic']: r#65
[#112 'enable']: r#65
[#112 'fn']: r#65
[#112 'override']: r#65
[#112 'requires']: r#65
[#112 'struct']: r#65
[#112 'var']: r#65
[#112 EndOfText]: r#65
[#113 ';']: r#66
[#113 '@']: r#66
[#113 'alias']: r#66
[#113 'const']: r#66
[#113 'const_assert']: r#66
[#113 'diagnostic']: r#66
[#113 'enable']: r#66
[#113 'fn']: r#66
[#113 'override']: r#66
[#113 'requires']: r#66
[#113 'struct']: r#66
[#113 'var']: r#66
[#113 EndOfText]: r#66
[#114 ',']: s#122
[#115 ',']: r#67
[#115 ';']: r#67
[#116 ',']: s#117
[#117 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#13
[#118 ';']: r#68
[#118 '@']: r#68
[#118 'alias']: r#68
[#118 'const']: r#68
[#118 'const_assert']: r#68
[#118 'diagnostic']: r#68
[#118 'enable']: r#68
[#118 'fn']: r#68
[#118 'override']: r#68
[#118 'requires']: r#68
[#118 'struct']: r#68
[#118 'var']: r#68
[#118 EndOfText]: r#68
[#119 ',']: r#69
[#119 ';']: r#69
[#120 ',']: r#70
[#120 ';']: r#70
[#121 ';']: r#71
[#122 ';']: r#72
[#123 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#237
[#124 /\u200B_template_args_start/]: s#218
[#125 '!=']: r#73
[#125 '%']: r#73
[#125 '%=']: r#73
[#125 '&&']: r#73
[#125 '&']: r#73
[#125 '&=']: r#73
[#125 '(']: r#73
[#125 ')']: r#73
[#125 '*']: r#73
[#125 '*=']: r#73
[#125 '+']: r#73
[#125 '++']: r#73
[#125 '+=']: r#73
[#125 ',']: r#73
[#125 '-']: r#73
[#125 '--']: r#73
[#125 '-=']: r#73
[#125 '.']: r#73
[#125 '/']: r#73
[#125 '/=']: r#73
[#125 ':']: r#73
[#125 ';']: r#73
[#125 '=']: r#73
[#125 '==']: r#73
[#125 '@']: r#73
[#125 '[']: r#73
[#125 ']']: r#73
[#125 '^']: r#73
[#125 '^=']: r#73
[#125 '{']: r#73
[#125 '|']: r#73
[#125 '|=']: r#73
[#125 '||']: r#73
[#125 '}']: r#73
[#125 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#73
[#125 /\u200B_disambiguate_template/]: r#73
[#125 /\u200B_greater_than/]: r#73
[#125 /\u200B_greater_than_equal/]: r#73
[#125 /\u200B_less_than/]: r#73
[#125 /\u200B_less_than_equal/]: r#73
[#125 /\u200B_shift_left/]: r#73
[#125 /\u200B_shift_left_assign/]: r#73
[#125 /\u200B_shift_right/]: r#73
[#125 /\u200B_shift_right_assign/]: r#73
[#125 /\u200B_template_args_end/]: r#73
[#125 /\u200B_template_args_start/]: r#73
[#126 ';']: r#74
[#127 '!']: s#61
[#127 '&']: s#64
[#127 '(']: s#74
[#127 '*']: s#63
[#127 '-']: s#60
[#127 'false']: s#81
[#127 'true']: s#80
[#127 '~']: s#62
[#127 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#127 /0[fh]/]: s#85
[#127 /0[iu]?/]: s#82
[#127 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#127 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#127 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#127 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#127 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#127 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#127 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#127 /[1-9][0-9]*[fh]/]: s#86
[#127 /[1-9][0-9]*[iu]?/]: s#83
[#128 ';']: r#75
[#128 '=']: r#75
[#129 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#130 '!']: s#61
[#130 '&']: s#64
[#130 '(']: s#74
[#130 '*']: s#63
[#130 '-']: s#60
[#130 'false']: s#81
[#130 'true']: s#80
[#130 '~']: s#62
[#130 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#130 /0[fh]/]: s#85
[#130 /0[iu]?/]: s#82
[#130 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#130 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#130 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#130 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#130 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#130 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#130 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#130 /[1-9][0-9]*[fh]/]: s#86
[#130 /[1-9][0-9]*[iu]?/]: s#83
[#131 '=']: s#230
[#132 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#133 ';']: r#76
[#133 '@']: r#76
[#133 'alias']: r#76
[#133 'const']: r#76
[#133 'const_assert']: r#76
[#133 'fn']: r#76
[#133 'override']: r#76
[#133 'struct']: r#76
[#133 'var']: r#76
[#133 EndOfText]: r#76
[#134 '@']: s#40
[#135 '(']: s#222
[#136 ';']: r#77
[#136 '@']: r#77
[#136 'alias']: r#77
[#136 'const']: r#77
[#136 'const_assert']: r#77
[#136 'fn']: r#77
[#136 'override']: r#77
[#136 'struct']: r#77
[#136 'var']: r#77
[#136 EndOfText]: r#77
[#137 '{']: s#221
[#138 '{']: r#78
[#139 '@']: s#40
[#140 '(']: r#79
[#140 ':']: r#79
[#140 ';']: r#79
[#140 '=']: r#79
[#140 '{']: r#79
[#140 /\u200B_disambiguate_template/]: r#79
[#141 ')']: s#219
[#142 /\u200B_template_args_start/]: s#218
[#143 '!=']: r#80
[#143 '%']: r#80
[#143 '&&']: r#80
[#143 '&']: r#80
[#143 ')']: r#80
[#143 '*']: r#80
[#143 '+']: r#80
[#143 ',']: r#80
[#143 '-']: r#80
[#143 '.']: r#80
[#143 '/']: r#80
[#143 ':']: r#80
[#143 ';']: r#80
[#143 '==']: r#80
[#143 '@']: r#80
[#143 '[']: r#80
[#143 ']']: r#80
[#143 '^']: r#80
[#143 '{']: r#80
[#143 '|']: r#80
[#143 '||']: r#80
[#143 /\u200B_greater_than/]: r#80
[#143 /\u200B_greater_than_equal/]: r#80
[#143 /\u200B_less_than/]: r#80
[#143 /\u200B_less_than_equal/]: r#80
[#143 /\u200B_shift_left/]: r#80
[#143 /\u200B_shift_right/]: r#80
[#143 /\u200B_template_args_end/]: r#80
[#144 '!']: s#61
[#144 '&']: s#64
[#144 '(']: s#74
[#144 '*']: s#63
[#144 '-']: s#60
[#144 'false']: s#81
[#144 'true']: s#80
[#144 '~']: s#62
[#144 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#144 /0[fh]/]: s#85
[#144 /0[iu]?/]: s#82
[#144 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#144 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#144 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#144 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#144 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#144 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#144 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#144 /[1-9][0-9]*[fh]/]: s#86
[#144 /[1-9][0-9]*[iu]?/]: s#83
[#145 '!=']: r#81
[#145 '%']: r#81
[#145 '&&']: r#81
[#145 '&']: r#81
[#145 ')']: r#81
[#145 '*']: r#81
[#145 '+']: r#81
[#145 ',']: r#81
[#145 '-']: r#81
[#145 '/']: r#81
[#145 ':']: r#81
[#145 ';']: r#81
[#145 '==']: r#81
[#145 '@']: r#81
[#145 ']']: r#81
[#145 '^']: r#81
[#145 '{']: r#81
[#145 '|']: r#81
[#145 '||']: r#81
[#145 /\u200B_greater_than/]: r#81
[#145 /\u200B_greater_than_equal/]: r#81
[#145 /\u200B_less_than/]: r#81
[#145 /\u200B_less_than_equal/]: r#81
[#145 /\u200B_shift_left/]: r#81
[#145 /\u200B_shift_right/]: r#81
[#145 /\u200B_template_args_end/]: r#81
[#146 '!=']: r#82
[#146 '%']: r#82
[#146 '&&']: r#82
[#146 '&']: r#82
[#146 ')']: r#82
[#146 '*']: r#82
[#146 '+']: r#82
[#146 ',']: r#82
[#146 '-']: r#82
[#146 '/']: r#82
[#146 ':']: r#82
[#146 ';']: r#82
[#146 '==']: r#82
[#146 '@']: r#82
[#146 ']']: r#82
[#146 '^']: r#82
[#146 '{']: r#82
[#146 '|']: r#82
[#146 '||']: r#82
[#146 /\u200B_greater_than/]: r#82
[#146 /\u200B_greater_than_equal/]: r#82
[#146 /\u200B_less_than/]: r#82
[#146 /\u200B_less_than_equal/]: r#82
[#146 /\u200B_shift_left/]: r#82
[#146 /\u200B_shift_right/]: r#82
[#146 /\u200B_template_args_end/]: r#82
[#147 '!']: s#61
[#147 '&']: s#64
[#147 '(']: s#74
[#147 '*']: s#63
[#147 '-']: s#60
[#147 'false']: s#81
[#147 'true']: s#80
[#147 '~']: s#62
[#147 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#147 /0[fh]/]: s#85
[#147 /0[iu]?/]: s#82
[#147 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#147 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#147 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#147 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#147 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#147 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#147 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#147 /[1-9][0-9]*[fh]/]: s#86
[#147 /[1-9][0-9]*[iu]?/]: s#83
[#148 '/[rgba]/']: s#203
[#148 '/[rgba][rgba]/']: s#204
[#148 '/[rgba][rgba][rgba]/']: s#205
[#148 '/[rgba][rgba][rgba][rgba]/']: s#206
[#148 '/[xyzw]/']: s#207
[#148 '/[xyzw][xyzw]/']: s#208
[#148 '/[xyzw][xyzw][xyzw]/']: s#209
[#148 '/[xyzw][xyzw][xyzw][xyzw]/']: s#210
[#148 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#202
[#149 '!=']: r#83
[#149 '%']: r#83
[#149 '&&']: r#83
[#149 '&']: r#83
[#149 ')']: r#83
[#149 '*']: r#83
[#149 '+']: r#83
[#149 ',']: r#83
[#149 '-']: r#83
[#149 '/']: r#83
[#149 ':']: r#83
[#149 ';']: r#83
[#149 '==']: r#83
[#149 '@']: r#83
[#149 ']']: r#83
[#149 '^']: r#83
[#149 '{']: r#83
[#149 '|']: r#83
[#149 '||']: r#83
[#149 /\u200B_greater_than/]: r#83
[#149 /\u200B_greater_than_equal/]: r#83
[#149 /\u200B_less_than/]: r#83
[#149 /\u200B_less_than_equal/]: r#83
[#149 /\u200B_shift_left/]: r#83
[#149 /\u200B_shift_right/]: r#83
[#149 /\u200B_template_args_end/]: r#83
[#150 '!=']: r#84
[#150 '%']: r#84
[#150 '&&']: r#84
[#150 '&']: r#84
[#150 ')']: r#84
[#150 '*']: r#84
[#150 '+']: r#84
[#150 ',']: r#84
[#150 '-']: r#84
[#150 '/']: r#84
[#150 ':']: r#84
[#150 ';']: r#84
[#150 '==']: r#84
[#150 '@']: r#84
[#150 ']']: r#84
[#150 '^']: r#84
[#150 '{']: r#84
[#150 '|']: r#84
[#150 '||']: r#84
[#150 /\u200B_greater_than/]: r#84
[#150 /\u200B_greater_than_equal/]: r#84
[#150 /\u200B_less_than/]: r#84
[#150 /\u200B_less_than_equal/]: r#84
[#150 /\u200B_shift_left/]: r#84
[#150 /\u200B_shift_right/]: r#84
[#150 /\u200B_template_args_end/]: r#84
[#151 '!=']: r#85
[#151 '%']: r#85
[#151 '&&']: r#85
[#151 '&']: r#85
[#151 ')']: r#85
[#151 '*']: r#85
[#151 '+']: r#85
[#151 ',']: r#85
[#151 '-']: r#85
[#151 '/']: r#85
[#151 ':']: r#85
[#151 ';']: r#85
[#151 '==']: r#85
[#151 '@']: r#85
[#151 ']']: r#85
[#151 '^']: r#85
[#151 '{']: r#85
[#151 '|']: r#85
[#151 '||']: r#85
[#151 /\u200B_greater_than/]: r#85
[#151 /\u200B_greater_than_equal/]: r#85
[#151 /\u200B_less_than/]: r#85
[#151 /\u200B_less_than_equal/]: r#85
[#151 /\u200B_shift_left/]: r#85
[#151 /\u200B_shift_right/]: r#85
[#151 /\u200B_template_args_end/]: r#85
[#152 '!=']: r#86
[#152 '%']: r#86
[#152 '&&']: r#86
[#152 '&']: r#86
[#152 ')']: r#86
[#152 '*']: r#86
[#152 '+']: r#86
[#152 ',']: r#86
[#152 '-']: r#86
[#152 '/']: r#86
[#152 ':']: r#86
[#152 ';']: r#86
[#152 '==']: r#86
[#152 '@']: r#86
[#152 ']']: r#86
[#152 '^']: r#86
[#152 '{']: r#86
[#152 '|']: r#86
[#152 '||']: r#86
[#152 /\u200B_greater_than/]: r#86
[#152 /\u200B_greater_than_equal/]: r#86
[#152 /\u200B_less_than/]: r#86
[#152 /\u200B_less_than_equal/]: r#86
[#152 /\u200B_shift_left/]: r#86
[#152 /\u200B_shift_right/]: r#86
[#152 /\u200B_template_args_end/]: r#86
[#153 '!=']: r#87
[#153 '%']: r#87
[#153 '&&']: r#87
[#153 '&']: r#87
[#153 ')']: r#87
[#153 '*']: r#87
[#153 '+']: r#87
[#153 ',']: r#87
[#153 '-']: r#87
[#153 '/']: r#87
[#153 ':']: r#87
[#153 ';']: r#87
[#153 '==']: r#87
[#153 '@']: r#87
[#153 ']']: r#87
[#153 '^']: r#87
[#153 '{']: r#87
[#153 '|']: r#87
[#153 '||']: r#87
[#153 /\u200B_greater_than/]: r#87
[#153 /\u200B_greater_than_equal/]: r#87
[#153 /\u200B_less_than/]: r#87
[#153 /\u200B_less_than_equal/]: r#87
[#153 /\u200B_shift_left/]: r#87
[#153 /\u200B_shift_right/]: r#87
[#153 /\u200B_template_args_end/]: r#87
[#154 '!']: s#61
[#154 '&']: s#64
[#154 '(']: s#74
[#154 '*']: s#63
[#154 '-']: s#60
[#154 'false']: s#81
[#154 'true']: s#80
[#154 '~']: s#62
[#154 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#154 /0[fh]/]: s#85
[#154 /0[iu]?/]: s#82
[#154 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#154 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#154 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#154 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#154 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#154 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#154 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#154 /[1-9][0-9]*[fh]/]: s#86
[#154 /[1-9][0-9]*[iu]?/]: s#83
[#155 '!']: r#88
[#155 '&']: r#88
[#155 '(']: r#88
[#155 '*']: r#88
[#155 '-']: r#88
[#155 'false']: r#88
[#155 'true']: r#88
[#155 '~']: r#88
[#155 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#88
[#155 /0[fh]/]: r#88
[#155 /0[iu]?/]: r#88
[#155 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#88
[#155 /0[xX][0-9a-fA-F]+[iu]?/]: r#88
[#155 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#88
[#155 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#88
[#155 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#88
[#155 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#88
[#155 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#88
[#155 /[1-9][0-9]*[fh]/]: r#88
[#155 /[1-9][0-9]*[iu]?/]: r#88
[#156 '!']: r#89
[#156 '&']: r#89
[#156 '(']: r#89
[#156 '*']: r#89
[#156 '-']: r#89
[#156 'false']: r#89
[#156 'true']: r#89
[#156 '~']: r#89
[#156 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#89
[#156 /0[fh]/]: r#89
[#156 /0[iu]?/]: r#89
[#156 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#89
[#156 /0[xX][0-9a-fA-F]+[iu]?/]: r#89
[#156 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#89
[#156 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#89
[#156 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#89
[#156 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#89
[#156 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#89
[#156 /[1-9][0-9]*[fh]/]: r#89
[#156 /[1-9][0-9]*[iu]?/]: r#89
[#157 '!']: r#90
[#157 '&']: r#90
[#157 '(']: r#90
[#157 '*']: r#90
[#157 '-']: r#90
[#157 'false']: r#90
[#157 'true']: r#90
[#157 '~']: r#90
[#157 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#90
[#157 /0[fh]/]: r#90
[#157 /0[iu]?/]: r#90
[#157 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#90
[#157 /0[xX][0-9a-fA-F]+[iu]?/]: r#90
[#157 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#90
[#157 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#90
[#157 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#90
[#157 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#90
[#157 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#90
[#157 /[1-9][0-9]*[fh]/]: r#90
[#157 /[1-9][0-9]*[iu]?/]: r#90
[#158 '!']: s#61
[#158 '&']: s#64
[#158 '(']: s#74
[#158 '*']: s#63
[#158 '-']: s#60
[#158 'false']: s#81
[#158 'true']: s#80
[#158 '~']: s#62
[#158 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#158 /0[fh]/]: s#85
[#158 /0[iu]?/]: s#82
[#158 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#158 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#158 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#158 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#158 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#158 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#158 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#158 /[1-9][0-9]*[fh]/]: s#86
[#158 /[1-9][0-9]*[iu]?/]: s#83
[#159 '!']: s#61
[#159 '&']: s#64
[#159 '(']: s#74
[#159 '*']: s#63
[#159 '-']: s#60
[#159 'false']: s#81
[#159 'true']: s#80
[#159 '~']: s#62
[#159 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#159 /0[fh]/]: s#85
[#159 /0[iu]?/]: s#82
[#159 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#159 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#159 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#159 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#159 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#159 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#159 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#159 /[1-9][0-9]*[fh]/]: s#86
[#159 /[1-9][0-9]*[iu]?/]: s#83
[#160 '!']: r#91
[#160 '&']: r#91
[#160 '(']: r#91
[#160 '*']: r#91
[#160 '-']: r#91
[#160 'false']: r#91
[#160 'true']: r#91
[#160 '~']: r#91
[#160 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#91
[#160 /0[fh]/]: r#91
[#160 /0[iu]?/]: r#91
[#160 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#91
[#160 /0[xX][0-9a-fA-F]+[iu]?/]: r#91
[#160 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#91
[#160 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#91
[#160 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#91
[#160 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#91
[#160 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#91
[#160 /[1-9][0-9]*[fh]/]: r#91
[#160 /[1-9][0-9]*[iu]?/]: r#91
[#161 '!']: r#92
[#161 '&']: r#92
[#161 '(']: r#92
[#161 '*']: r#92
[#161 '-']: r#92
[#161 'false']: r#92
[#161 'true']: r#92
[#161 '~']: r#92
[#161 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#92
[#161 /0[fh]/]: r#92
[#161 /0[iu]?/]: r#92
[#161 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#92
[#161 /0[xX][0-9a-fA-F]+[iu]?/]: r#92
[#161 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#92
[#161 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#92
[#161 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#92
[#161 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#92
[#161 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#92
[#161 /[1-9][0-9]*[fh]/]: r#92
[#161 /[1-9][0-9]*[iu]?/]: r#92
[#162 '!']: s#61
[#162 '&']: s#64
[#162 '(']: s#74
[#162 '*']: s#63
[#162 '-']: s#60
[#162 'false']: s#81
[#162 'true']: s#80
[#162 '~']: s#62
[#162 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#162 /0[fh]/]: s#85
[#162 /0[iu]?/]: s#82
[#162 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#162 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#162 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#162 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#162 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#162 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#162 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#162 /[1-9][0-9]*[fh]/]: s#86
[#162 /[1-9][0-9]*[iu]?/]: s#83
[#163 '!']: r#93
[#163 '&']: r#93
[#163 '(']: r#93
[#163 '*']: r#93
[#163 '-']: r#93
[#163 'false']: r#93
[#163 'true']: r#93
[#163 '~']: r#93
[#163 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#93
[#163 /0[fh]/]: r#93
[#163 /0[iu]?/]: r#93
[#163 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#93
[#163 /0[xX][0-9a-fA-F]+[iu]?/]: r#93
[#163 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#93
[#163 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#93
[#163 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#93
[#163 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#93
[#163 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#93
[#163 /[1-9][0-9]*[fh]/]: r#93
[#163 /[1-9][0-9]*[iu]?/]: r#93
[#164 '!']: r#94
[#164 '&']: r#94
[#164 '(']: r#94
[#164 '*']: r#94
[#164 '-']: r#94
[#164 'false']: r#94
[#164 'true']: r#94
[#164 '~']: r#94
[#164 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#94
[#164 /0[fh]/]: r#94
[#164 /0[iu]?/]: r#94
[#164 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#94
[#164 /0[xX][0-9a-fA-F]+[iu]?/]: r#94
[#164 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#94
[#164 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#94
[#164 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#94
[#164 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#94
[#164 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#94
[#164 /[1-9][0-9]*[fh]/]: r#94
[#164 /[1-9][0-9]*[iu]?/]: r#94
[#165 '!']: s#61
[#165 '&']: s#64
[#165 '(']: s#74
[#165 '*']: s#63
[#165 '-']: s#60
[#165 'false']: s#81
[#165 'true']: s#80
[#165 '~']: s#62
[#165 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#165 /0[fh]/]: s#85
[#165 /0[iu]?/]: s#82
[#165 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#165 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#165 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#165 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#165 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#165 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#165 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#165 /[1-9][0-9]*[fh]/]: s#86
[#165 /[1-9][0-9]*[iu]?/]: s#83
[#166 '!']: s#61
[#166 '&']: s#64
[#166 '(']: s#74
[#166 '*']: s#63
[#166 '-']: s#60
[#166 'false']: s#81
[#166 'true']: s#80
[#166 '~']: s#62
[#166 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#166 /0[fh]/]: s#85
[#166 /0[iu]?/]: s#82
[#166 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#166 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#166 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#166 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#166 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#166 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#166 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#166 /[1-9][0-9]*[fh]/]: s#86
[#166 /[1-9][0-9]*[iu]?/]: s#83
[#167 '!']: s#61
[#167 '&']: s#64
[#167 '(']: s#74
[#167 '*']: s#63
[#167 '-']: s#60
[#167 'false']: s#81
[#167 'true']: s#80
[#167 '~']: s#62
[#167 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#167 /0[fh]/]: s#85
[#167 /0[iu]?/]: s#82
[#167 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#167 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#167 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#167 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#167 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#167 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#167 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#167 /[1-9][0-9]*[fh]/]: s#86
[#167 /[1-9][0-9]*[iu]?/]: s#83
[#168 '!']: s#61
[#168 '&']: s#64
[#168 '(']: s#74
[#168 '*']: s#63
[#168 '-']: s#60
[#168 'false']: s#81
[#168 'true']: s#80
[#168 '~']: s#62
[#168 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#168 /0[fh]/]: s#85
[#168 /0[iu]?/]: s#82
[#168 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#168 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#168 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#168 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#168 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#168 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#168 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#168 /[1-9][0-9]*[fh]/]: s#86
[#168 /[1-9][0-9]*[iu]?/]: s#83
[#169 '!']: s#61
[#169 '&']: s#64
[#169 '(']: s#74
[#169 '*']: s#63
[#169 '-']: s#60
[#169 'false']: s#81
[#169 'true']: s#80
[#169 '~']: s#62
[#169 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#169 /0[fh]/]: s#85
[#169 /0[iu]?/]: s#82
[#169 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#169 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#169 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#169 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#169 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#169 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#169 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#169 /[1-9][0-9]*[fh]/]: s#86
[#169 /[1-9][0-9]*[iu]?/]: s#83
[#170 '!']: s#61
[#170 '&']: s#64
[#170 '(']: s#74
[#170 '*']: s#63
[#170 '-']: s#60
[#170 'false']: s#81
[#170 'true']: s#80
[#170 '~']: s#62
[#170 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#170 /0[fh]/]: s#85
[#170 /0[iu]?/]: s#82
[#170 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#170 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#170 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#170 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#170 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#170 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#170 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#170 /[1-9][0-9]*[fh]/]: s#86
[#170 /[1-9][0-9]*[iu]?/]: s#83
[#171 '!']: s#61
[#171 '&']: s#64
[#171 '(']: s#74
[#171 '*']: s#63
[#171 '-']: s#60
[#171 'false']: s#81
[#171 'true']: s#80
[#171 '~']: s#62
[#171 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#171 /0[fh]/]: s#85
[#171 /0[iu]?/]: s#82
[#171 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#171 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#171 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#171 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#171 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#171 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#171 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#171 /[1-9][0-9]*[fh]/]: s#86
[#171 /[1-9][0-9]*[iu]?/]: s#83
[#172 '!']: s#61
[#172 '&']: s#64
[#172 '(']: s#74
[#172 '*']: s#63
[#172 '-']: s#60
[#172 'false']: s#81
[#172 'true']: s#80
[#172 '~']: s#62
[#172 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#172 /0[fh]/]: s#85
[#172 /0[iu]?/]: s#82
[#172 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#172 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#172 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#172 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#172 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#172 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#172 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#172 /[1-9][0-9]*[fh]/]: s#86
[#172 /[1-9][0-9]*[iu]?/]: s#83
[#173 '!']: s#61
[#173 '&']: s#64
[#173 '(']: s#74
[#173 '*']: s#63
[#173 '-']: s#60
[#173 'false']: s#81
[#173 'true']: s#80
[#173 '~']: s#62
[#173 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#173 /0[fh]/]: s#85
[#173 /0[iu]?/]: s#82
[#173 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#173 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#173 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#173 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#173 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#173 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#173 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#173 /[1-9][0-9]*[fh]/]: s#86
[#173 /[1-9][0-9]*[iu]?/]: s#83
[#174 '!']: r#95
[#174 '&']: r#95
[#174 '(']: r#95
[#174 '*']: r#95
[#174 '-']: r#95
[#174 'false']: r#95
[#174 'true']: r#95
[#174 '~']: r#95
[#174 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#95
[#174 /0[fh]/]: r#95
[#174 /0[iu]?/]: r#95
[#174 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#95
[#174 /0[xX][0-9a-fA-F]+[iu]?/]: r#95
[#174 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#95
[#174 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#95
[#174 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#95
[#174 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#95
[#174 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#95
[#174 /[1-9][0-9]*[fh]/]: r#95
[#174 /[1-9][0-9]*[iu]?/]: r#95
[#175 '!']: r#96
[#175 '&']: r#96
[#175 '(']: r#96
[#175 '*']: r#96
[#175 '-']: r#96
[#175 'false']: r#96
[#175 'true']: r#96
[#175 '~']: r#96
[#175 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#96
[#175 /0[fh]/]: r#96
[#175 /0[iu]?/]: r#96
[#175 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#96
[#175 /0[xX][0-9a-fA-F]+[iu]?/]: r#96
[#175 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#96
[#175 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#96
[#175 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#96
[#175 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#96
[#175 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#96
[#175 /[1-9][0-9]*[fh]/]: r#96
[#175 /[1-9][0-9]*[iu]?/]: r#96
[#176 '!']: r#97
[#176 '&']: r#97
[#176 '(']: r#97
[#176 '*']: r#97
[#176 '-']: r#97
[#176 'false']: r#97
[#176 'true']: r#97
[#176 '~']: r#97
[#176 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#97
[#176 /0[fh]/]: r#97
[#176 /0[iu]?/]: r#97
[#176 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#97
[#176 /0[xX][0-9a-fA-F]+[iu]?/]: r#97
[#176 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#97
[#176 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#97
[#176 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#97
[#176 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#97
[#176 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#97
[#176 /[1-9][0-9]*[fh]/]: r#97
[#176 /[1-9][0-9]*[iu]?/]: r#97
[#177 '!']: r#98
[#177 '&']: r#98
[#177 '(']: r#98
[#177 '*']: r#98
[#177 '-']: r#98
[#177 'false']: r#98
[#177 'true']: r#98
[#177 '~']: r#98
[#177 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#98
[#177 /0[fh]/]: r#98
[#177 /0[iu]?/]: r#98
[#177 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#98
[#177 /0[xX][0-9a-fA-F]+[iu]?/]: r#98
[#177 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#98
[#177 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#98
[#177 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#98
[#177 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#98
[#177 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#98
[#177 /[1-9][0-9]*[fh]/]: r#98
[#177 /[1-9][0-9]*[iu]?/]: r#98
[#178 '!']: s#61
[#178 '&']: s#64
[#178 '(']: s#74
[#178 '*']: s#63
[#178 '-']: s#60
[#178 'false']: s#81
[#178 'true']: s#80
[#178 '~']: s#62
[#178 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#178 /0[fh]/]: s#85
[#178 /0[iu]?/]: s#82
[#178 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#178 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#178 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#178 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#178 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#178 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#178 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#178 /[1-9][0-9]*[fh]/]: s#86
[#178 /[1-9][0-9]*[iu]?/]: s#83
[#179 '!']: s#61
[#179 '&']: s#64
[#179 '(']: s#74
[#179 '*']: s#63
[#179 '-']: s#60
[#179 'false']: s#81
[#179 'true']: s#80
[#179 '~']: s#62
[#179 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#179 /0[fh]/]: s#85
[#179 /0[iu]?/]: s#82
[#179 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#179 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#179 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#179 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#179 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#179 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#179 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#179 /[1-9][0-9]*[fh]/]: s#86
[#179 /[1-9][0-9]*[iu]?/]: s#83
[#180 '@']: r#99
[#180 'fn']: r#99
[#180 'for']: r#99
[#180 'if']: r#99
[#180 'loop']: r#99
[#180 'override']: r#99
[#180 'switch']: r#99
[#180 'var']: r#99
[#180 'while']: r#99
[#180 '{']: r#99
[#180 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#99
[#181 '@']: r#100
[#181 'fn']: r#100
[#181 'for']: r#100
[#181 'if']: r#100
[#181 'loop']: r#100
[#181 'override']: r#100
[#181 'switch']: r#100
[#181 'var']: r#100
[#181 'while']: r#100
[#181 '{']: r#100
[#181 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#100
[#182 '@']: r#101
[#182 'fn']: r#101
[#182 'for']: r#101
[#182 'if']: r#101
[#182 'loop']: r#101
[#182 'override']: r#101
[#182 'switch']: r#101
[#182 'var']: r#101
[#182 'while']: r#101
[#182 '{']: r#101
[#182 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#101
[#183 ')']: r#102
[#183 ',']: r#102
[#183 ':']: r#102
[#183 ';']: r#102
[#183 '@']: r#102
[#183 ']']: r#102
[#183 '{']: r#102
[#183 '||']: r#103
[#184 '!=']: r#29
[#184 '%']: r#29
[#184 '&&']: r#29
[#184 ')']: r#29
[#184 '*']: r#29
[#184 '+']: r#29
[#184 ',']: r#29
[#184 '-']: r#29
[#184 '/']: r#29
[#184 ':']: r#29
[#184 ';']: r#29
[#184 '==']: r#29
[#184 '@']: r#29
[#184 ']']: r#29
[#184 '{']: r#29
[#184 '||']: r#29
[#184 /\u200B_greater_than/]: r#29
[#184 /\u200B_greater_than_equal/]: r#29
[#184 /\u200B_less_than/]: r#29
[#184 /\u200B_less_than_equal/]: r#29
[#184 /\u200B_shift_left/]: s#160
[#184 /\u200B_shift_right/]: s#161
[#184 /\u200B_template_args_end/]: r#29
[#185 '&&']: r#105
[#185 ')']: r#104
[#185 ',']: r#104
[#185 ':']: r#104
[#185 ';']: r#104
[#185 '@']: r#104
[#185 ']']: r#104
[#185 '{']: r#104
[#186 '&&']: r#106
[#186 ')']: r#106
[#186 ',']: r#106
[#186 ':']: r#106
[#186 ';']: r#106
[#186 '@']: r#106
[#186 ']']: r#106
[#186 '{']: r#106
[#186 '||']: r#106
[#186 /\u200B_template_args_end/]: r#106
[#187 '&&']: r#107
[#187 ')']: r#107
[#187 ',']: r#107
[#187 ':']: r#107
[#187 ';']: r#107
[#187 '@']: r#107
[#187 ']']: r#107
[#187 '{']: r#107
[#187 '||']: r#107
[#187 /\u200B_template_args_end/]: r#107
[#188 '&&']: r#108
[#188 ')']: r#108
[#188 ',']: r#108
[#188 ':']: r#108
[#188 ';']: r#108
[#188 '@']: r#108
[#188 ']']: r#108
[#188 '{']: r#108
[#188 '||']: r#108
[#188 /\u200B_template_args_end/]: r#108
[#189 '&&']: r#109
[#189 ')']: r#109
[#189 ',']: r#109
[#189 ':']: r#109
[#189 ';']: r#109
[#189 '@']: r#109
[#189 ']']: r#109
[#189 '{']: r#109
[#189 '||']: r#109
[#189 /\u200B_template_args_end/]: r#109
[#190 '&&']: r#110
[#190 ')']: r#110
[#190 ',']: r#110
[#190 ':']: r#110
[#190 ';']: r#110
[#190 '@']: r#110
[#190 ']']: r#110
[#190 '{']: r#110
[#190 '||']: r#110
[#190 /\u200B_template_args_end/]: r#110
[#191 '&&']: r#111
[#191 ')']: r#111
[#191 ',']: r#111
[#191 ':']: r#111
[#191 ';']: r#111
[#191 '@']: r#111
[#191 ']']: r#111
[#191 '{']: r#111
[#191 '||']: r#111
[#191 /\u200B_template_args_end/]: r#111
[#192 '&']: r#113
[#192 ')']: r#112
[#192 ',']: r#112
[#192 ':']: r#112
[#192 ';']: r#112
[#192 '@']: r#112
[#192 ']']: r#112
[#192 '{']: r#112
[#192 /\u200B_template_args_end/]: r#112
[#193 ')']: r#114
[#193 ',']: r#114
[#193 ':']: r#114
[#193 ';']: r#114
[#193 '@']: r#114
[#193 ']']: r#114
[#193 '{']: r#114
[#193 '|']: r#115
[#193 /\u200B_template_args_end/]: r#114
[#194 ')']: r#116
[#194 ',']: r#116
[#194 ':']: r#116
[#194 ';']: r#116
[#194 '@']: r#116
[#194 ']']: r#116
[#194 '^']: r#117
[#194 '{']: r#116
[#194 /\u200B_template_args_end/]: r#116
[#195 '!=']: r#118
[#195 '%']: s#157
[#195 '&&']: r#118
[#195 ')']: r#118
[#195 '*']: s#155
[#195 '+']: r#118
[#195 ',']: r#118
[#195 '-']: r#118
[#195 '/']: s#156
[#195 ':']: r#118
[#195 ';']: r#118
[#195 '==']: r#118
[#195 '@']: r#118
[#195 ']']: r#118
[#195 '{']: r#118
[#195 '||']: r#118
[#195 /\u200B_greater_than/]: r#118
[#195 /\u200B_greater_than_equal/]: r#118
[#195 /\u200B_less_than/]: r#118
[#195 /\u200B_less_than_equal/]: r#118
[#195 /\u200B_template_args_end/]: r#118
[#196 '!=']: r#29
[#196 '%']: r#29
[#196 '&&']: r#29
[#196 ')']: r#29
[#196 '*']: r#29
[#196 '+']: r#29
[#196 ',']: r#29
[#196 '-']: r#29
[#196 '/']: r#29
[#196 ':']: r#29
[#196 ';']: r#29
[#196 '==']: r#29
[#196 '@']: r#29
[#196 ']']: r#29
[#196 '{']: r#29
[#196 '||']: r#29
[#196 /\u200B_greater_than/]: r#29
[#196 /\u200B_greater_than_equal/]: r#29
[#196 /\u200B_less_than/]: r#29
[#196 /\u200B_less_than_equal/]: r#29
[#196 /\u200B_template_args_end/]: r#29
[#197 '!=']: r#119
[#197 '&&']: r#119
[#197 ')']: r#119
[#197 ',']: r#119
[#197 ':']: r#119
[#197 ';']: r#119
[#197 '==']: r#119
[#197 '@']: r#119
[#197 ']']: r#119
[#197 '{']: r#119
[#197 '||']: r#119
[#197 /\u200B_greater_than/]: r#119
[#197 /\u200B_greater_than_equal/]: r#119
[#197 /\u200B_less_than/]: r#119
[#197 /\u200B_less_than_equal/]: r#119
[#197 /\u200B_template_args_end/]: r#119
[#198 '!=']: r#120
[#198 '&&']: r#120
[#198 ')']: r#120
[#198 ',']: r#120
[#198 ':']: r#120
[#198 ';']: r#120
[#198 '==']: r#120
[#198 '@']: r#120
[#198 ']']: r#120
[#198 '{']: r#120
[#198 '||']: r#120
[#198 /\u200B_greater_than/]: r#120
[#198 /\u200B_greater_than_equal/]: r#120
[#198 /\u200B_less_than/]: r#120
[#198 /\u200B_less_than_equal/]: r#120
[#198 /\u200B_template_args_end/]: r#120
[#199 '!=']: r#121
[#199 '%']: r#121
[#199 '&&']: r#121
[#199 ')']: r#121
[#199 '*']: r#121
[#199 '+']: r#121
[#199 ',']: r#121
[#199 '-']: r#121
[#199 '/']: r#121
[#199 ':']: r#121
[#199 ';']: r#121
[#199 '==']: r#121
[#199 '@']: r#121
[#199 ']']: r#121
[#199 '{']: r#121
[#199 '||']: r#121
[#199 /\u200B_greater_than/]: r#121
[#199 /\u200B_greater_than_equal/]: r#121
[#199 /\u200B_less_than/]: r#121
[#199 /\u200B_less_than_equal/]: r#121
[#199 /\u200B_template_args_end/]: r#121
[#200 '.']: s#148
[#200 '[']: s#147
[#201 '.']: s#148
[#201 '[']: s#147
[#202 '!=']: r#122
[#202 '%']: r#122
[#202 '%=']: r#122
[#202 '&&']: r#122
[#202 '&']: r#122
[#202 '&=']: r#122
[#202 ')']: r#122
[#202 '*']: r#122
[#202 '*=']: r#122
[#202 '+']: r#122
[#202 '++']: r#122
[#202 '+=']: r#122
[#202 ',']: r#122
[#202 '-']: r#122
[#202 '--']: r#122
[#202 '-=']: r#122
[#202 '.']: r#122
[#202 '/']: r#122
[#202 '/=']: r#122
[#202 ':']: r#122
[#202 ';']: r#122
[#202 '=']: r#122
[#202 '==']: r#122
[#202 '@']: r#122
[#202 '[']: r#122
[#202 ']']: r#122
[#202 '^']: r#122
[#202 '^=']: r#122
[#202 '{']: r#122
[#202 '|']: r#122
[#202 '|=']: r#122
[#202 '||']: r#122
[#202 /\u200B_greater_than/]: r#122
[#202 /\u200B_greater_than_equal/]: r#122
[#202 /\u200B_less_than/]: r#122
[#202 /\u200B_less_than_equal/]: r#122
[#202 /\u200B_shift_left/]: r#122
[#202 /\u200B_shift_left_assign/]: r#122
[#202 /\u200B_shift_right/]: r#122
[#202 /\u200B_shift_right_assign/]: r#122
[#202 /\u200B_template_args_end/]: r#122
[#203 '!=']: r#123
[#203 '%']: r#123
[#203 '%=']: r#123
[#203 '&&']: r#123
[#203 '&']: r#123
[#203 '&=']: r#123
[#203 ')']: r#123
[#203 '*']: r#123
[#203 '*=']: r#123
[#203 '+']: r#123
[#203 '++']: r#123
[#203 '+=']: r#123
[#203 ',']: r#123
[#203 '-']: r#123
[#203 '--']: r#123
[#203 '-=']: r#123
[#203 '.']: r#123
[#203 '/']: r#123
[#203 '/=']: r#123
[#203 ':']: r#123
[#203 ';']: r#123
[#203 '=']: r#123
[#203 '==']: r#123
[#203 '@']: r#123
[#203 '[']: r#123
[#203 ']']: r#123
[#203 '^']: r#123
[#203 '^=']: r#123
[#203 '{']: r#123
[#203 '|']: r#123
[#203 '|=']: r#123
[#203 '||']: r#123
[#203 /\u200B_greater_than/]: r#123
[#203 /\u200B_greater_than_equal/]: r#123
[#203 /\u200B_less_than/]: r#123
[#203 /\u200B_less_than_equal/]: r#123
[#203 /\u200B_shift_left/]: r#123
[#203 /\u200B_shift_left_assign/]: r#123
[#203 /\u200B_shift_right/]: r#123
[#203 /\u200B_shift_right_assign/]: r#123
[#203 /\u200B_template_args_end/]: r#123
[#204 '!=']: r#124
[#204 '%']: r#124
[#204 '%=']: r#124
[#204 '&&']: r#124
[#204 '&']: r#124
[#204 '&=']: r#124
[#204 ')']: r#124
[#204 '*']: r#124
[#204 '*=']: r#124
[#204 '+']: r#124
[#204 '++']: r#124
[#204 '+=']: r#124
[#204 ',']: r#124
[#204 '-']: r#124
[#204 '--']: r#124
[#204 '-=']: r#124
[#204 '.']: r#124
[#204 '/']: r#124
[#204 '/=']: r#124
[#204 ':']: r#124
[#204 ';']: r#124
[#204 '=']: r#124
[#204 '==']: r#124
[#204 '@']: r#124
[#204 '[']: r#124
[#204 ']']: r#124
[#204 '^']: r#124
[#204 '^=']: r#124
[#204 '{']: r#124
[#204 '|']: r#124
[#204 '|=']: r#124
[#204 '||']: r#124
[#204 /\u200B_greater_than/]: r#124
[#204 /\u200B_greater_than_equal/]: r#124
[#204 /\u200B_less_than/]: r#124
[#204 /\u200B_less_than_equal/]: r#124
[#204 /\u200B_shift_left/]: r#124
[#204 /\u200B_shift_left_assign/]: r#124
[#204 /\u200B_shift_right/]: r#124
[#204 /\u200B_shift_right_assign/]: r#124
[#204 /\u200B_template_args_end/]: r#124
[#205 '!=']: r#125
[#205 '%']: r#125
[#205 '%=']: r#125
[#205 '&&']: r#125
[#205 '&']: r#125
[#205 '&=']: r#125
[#205 ')']: r#125
[#205 '*']: r#125
[#205 '*=']: r#125
[#205 '+']: r#125
[#205 '++']: r#125
[#205 '+=']: r#125
[#205 ',']: r#125
[#205 '-']: r#125
[#205 '--']: r#125
[#205 '-=']: r#125
[#205 '.']: r#125
[#205 '/']: r#125
[#205 '/=']: r#125
[#205 ':']: r#125
[#205 ';']: r#125
[#205 '=']: r#125
[#205 '==']: r#125
[#205 '@']: r#125
[#205 '[']: r#125
[#205 ']']: r#125
[#205 '^']: r#125
[#205 '^=']: r#125
[#205 '{']: r#125
[#205 '|']: r#125
[#205 '|=']: r#125
[#205 '||']: r#125
[#205 /\u200B_greater_than/]: r#125
[#205 /\u200B_greater_than_equal/]: r#125
[#205 /\u200B_less_than/]: r#125
[#205 /\u200B_less_than_equal/]: r#125
[#205 /\u200B_shift_left/]: r#125
[#205 /\u200B_shift_left_assign/]: r#125
[#205 /\u200B_shift_right/]: r#125
[#205 /\u200B_shift_right_assign/]: r#125
[#205 /\u200B_template_args_end/]: r#125
[#206 '!=']: r#126
[#206 '%']: r#126
[#206 '%=']: r#126
[#206 '&&']: r#126
[#206 '&']: r#126
[#206 '&=']: r#126
[#206 ')']: r#126
[#206 '*']: r#126
[#206 '*=']: r#126
[#206 '+']: r#126
[#206 '++']: r#126
[#206 '+=']: r#126
[#206 ',']: r#126
[#206 '-']: r#126
[#206 '--']: r#126
[#206 '-=']: r#126
[#206 '.']: r#126
[#206 '/']: r#126
[#206 '/=']: r#126
[#206 ':']: r#126
[#206 ';']: r#126
[#206 '=']: r#126
[#206 '==']: r#126
[#206 '@']: r#126
[#206 '[']: r#126
[#206 ']']: r#126
[#206 '^']: r#126
[#206 '^=']: r#126
[#206 '{']: r#126
[#206 '|']: r#126
[#206 '|=']: r#126
[#206 '||']: r#126
[#206 /\u200B_greater_than/]: r#126
[#206 /\u200B_greater_than_equal/]: r#126
[#206 /\u200B_less_than/]: r#126
[#206 /\u200B_less_than_equal/]: r#126
[#206 /\u200B_shift_left/]: r#126
[#206 /\u200B_shift_left_assign/]: r#126
[#206 /\u200B_shift_right/]: r#126
[#206 /\u200B_shift_right_assign/]: r#126
[#206 /\u200B_template_args_end/]: r#126
[#207 '!=']: r#127
[#207 '%']: r#127
[#207 '%=']: r#127
[#207 '&&']: r#127
[#207 '&']: r#127
[#207 '&=']: r#127
[#207 ')']: r#127
[#207 '*']: r#127
[#207 '*=']: r#127
[#207 '+']: r#127
[#207 '++']: r#127
[#207 '+=']: r#127
[#207 ',']: r#127
[#207 '-']: r#127
[#207 '--']: r#127
[#207 '-=']: r#127
[#207 '.']: r#127
[#207 '/']: r#127
[#207 '/=']: r#127
[#207 ':']: r#127
[#207 ';']: r#127
[#207 '=']: r#127
[#207 '==']: r#127
[#207 '@']: r#127
[#207 '[']: r#127
[#207 ']']: r#127
[#207 '^']: r#127
[#207 '^=']: r#127
[#207 '{']: r#127
[#207 '|']: r#127
[#207 '|=']: r#127
[#207 '||']: r#127
[#207 /\u200B_greater_than/]: r#127
[#207 /\u200B_greater_than_equal/]: r#127
[#207 /\u200B_less_than/]: r#127
[#207 /\u200B_less_than_equal/]: r#127
[#207 /\u200B_shift_left/]: r#127
[#207 /\u200B_shift_left_assign/]: r#127
[#207 /\u200B_shift_right/]: r#127
[#207 /\u200B_shift_right_assign/]: r#127
[#207 /\u200B_template_args_end/]: r#127
[#208 '!=']: r#128
[#208 '%']: r#128
[#208 '%=']: r#128
[#208 '&&']: r#128
[#208 '&']: r#128
[#208 '&=']: r#128
[#208 ')']: r#128
[#208 '*']: r#128
[#208 '*=']: r#128
[#208 '+']: r#128
[#208 '++']: r#128
[#208 '+=']: r#128
[#208 ',']: r#128
[#208 '-']: r#128
[#208 '--']: r#128
[#208 '-=']: r#128
[#208 '.']: r#128
[#208 '/']: r#128
[#208 '/=']: r#128
[#208 ':']: r#128
[#208 ';']: r#128
[#208 '=']: r#128
[#208 '==']: r#128
[#208 '@']: r#128
[#208 '[']: r#128
[#208 ']']: r#128
[#208 '^']: r#128
[#208 '^=']: r#128
[#208 '{']: r#128
[#208 '|']: r#128
[#208 '|=']: r#128
[#208 '||']: r#128
[#208 /\u200B_greater_than/]: r#128
[#208 /\u200B_greater_than_equal/]: r#128
[#208 /\u200B_less_than/]: r#128
[#208 /\u200B_less_than_equal/]: r#128
[#208 /\u200B_shift_left/]: r#128
[#208 /\u200B_shift_left_assign/]: r#128
[#208 /\u200B_shift_right/]: r#128
[#208 /\u200B_shift_right_assign/]: r#128
[#208 /\u200B_template_args_end/]: r#128
[#209 '!=']: r#129
[#209 '%']: r#129
[#209 '%=']: r#129
[#209 '&&']: r#129
[#209 '&']: r#129
[#209 '&=']: r#129
[#209 ')']: r#129
[#209 '*']: r#129
[#209 '*=']: r#129
[#209 '+']: r#129
[#209 '++']: r#129
[#209 '+=']: r#129
[#209 ',']: r#129
[#209 '-']: r#129
[#209 '--']: r#129
[#209 '-=']: r#129
[#209 '.']: r#129
[#209 '/']: r#129
[#209 '/=']: r#129
[#209 ':']: r#129
[#209 ';']: r#129
[#209 '=']: r#129
[#209 '==']: r#129
[#209 '@']: r#129
[#209 '[']: r#129
[#209 ']']: r#129
[#209 '^']: r#129
[#209 '^=']: r#129
[#209 '{']: r#129
[#209 '|']: r#129
[#209 '|=']: r#129
[#209 '||']: r#129
[#209 /\u200B_greater_than/]: r#129
[#209 /\u200B_greater_than_equal/]: r#129
[#209 /\u200B_less_than/]: r#129
[#209 /\u200B_less_than_equal/]: r#129
[#209 /\u200B_shift_left/]: r#129
[#209 /\u200B_shift_left_assign/]: r#129
[#209 /\u200B_shift_right/]: r#129
[#209 /\u200B_shift_right_assign/]: r#129
[#209 /\u200B_template_args_end/]: r#129
[#210 '!=']: r#130
[#210 '%']: r#130
[#210 '%=']: r#130
[#210 '&&']: r#130
[#210 '&']: r#130
[#210 '&=']: r#130
[#210 ')']: r#130
[#210 '*']: r#130
[#210 '*=']: r#130
[#210 '+']: r#130
[#210 '++']: r#130
[#210 '+=']: r#130
[#210 ',']: r#130
[#210 '-']: r#130
[#210 '--']: r#130
[#210 '-=']: r#130
[#210 '.']: r#130
[#210 '/']: r#130
[#210 '/=']: r#130
[#210 ':']: r#130
[#210 ';']: r#130
[#210 '=']: r#130
[#210 '==']: r#130
[#210 '@']: r#130
[#210 '[']: r#130
[#210 ']']: r#130
[#210 '^']: r#130
[#210 '^=']: r#130
[#210 '{']: r#130
[#210 '|']: r#130
[#210 '|=']: r#130
[#210 '||']: r#130
[#210 /\u200B_greater_than/]: r#130
[#210 /\u200B_greater_than_equal/]: r#130
[#210 /\u200B_less_than/]: r#130
[#210 /\u200B_less_than_equal/]: r#130
[#210 /\u200B_shift_left/]: r#130
[#210 /\u200B_shift_left_assign/]: r#130
[#210 /\u200B_shift_right/]: r#130
[#210 /\u200B_shift_right_assign/]: r#130
[#210 /\u200B_template_args_end/]: r#130
[#211 ']']: s#312
[#212 ')']: s#311
[#213 ')']: r#131
[#214 ',']: s#310
[#215 '!=']: r#132
[#215 '%']: r#132
[#215 '&&']: r#132
[#215 '&']: r#132
[#215 '(']: r#132
[#215 ')']: r#132
[#215 '*']: r#132
[#215 '+']: r#132
[#215 ',']: r#132
[#215 '-']: r#132
[#215 '.']: r#132
[#215 '/']: r#132
[#215 ':']: r#132
[#215 ';']: r#132
[#215 '==']: r#132
[#215 '@']: r#132
[#215 '[']: r#132
[#215 ']']: r#132
[#215 '^']: r#132
[#215 '{']: r#132
[#215 '|']: r#132
[#215 '||']: r#132
[#215 /\u200B_greater_than/]: r#132
[#215 /\u200B_greater_than_equal/]: r#132
[#215 /\u200B_less_than/]: r#132
[#215 /\u200B_less_than_equal/]: r#132
[#215 /\u200B_shift_left/]: r#132
[#215 /\u200B_shift_right/]: r#132
[#215 /\u200B_template_args_end/]: r#132
[#216 '!=']: r#133
[#216 '%']: r#133
[#216 '&&']: r#133
[#216 '&']: r#133
[#216 '(']: r#133
[#216 ')']: r#133
[#216 '*']: r#133
[#216 '+']: r#133
[#216 ',']: r#133
[#216 '-']: r#133
[#216 '.']: r#133
[#216 '/']: r#133
[#216 ':']: r#133
[#216 ';']: r#133
[#216 '=']: r#133
[#216 '==']: r#133
[#216 '@']: r#133
[#216 '[']: r#133
[#216 ']']: r#133
[#216 '^']: r#133
[#216 '{']: r#133
[#216 '|']: r#133
[#216 '||']: r#133
[#216 '}']: r#133
[#216 /\u200B_greater_than/]: r#133
[#216 /\u200B_greater_than_equal/]: r#133
[#216 /\u200B_less_than/]: r#133
[#216 /\u200B_less_than_equal/]: r#133
[#216 /\u200B_shift_left/]: r#133
[#216 /\u200B_shift_right/]: r#133
[#216 /\u200B_template_args_end/]: r#133
[#217 '!']: s#61
[#217 '&']: s#64
[#217 '(']: s#74
[#217 '*']: s#63
[#217 '-']: s#60
[#217 'false']: s#81
[#217 'true']: s#80
[#217 '~']: s#62
[#217 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#217 /0[fh]/]: s#85
[#217 /0[iu]?/]: s#82
[#217 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#217 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#217 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#217 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#217 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#217 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#217 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#217 /[1-9][0-9]*[fh]/]: s#86
[#217 /[1-9][0-9]*[iu]?/]: s#83
[#218 '!']: r#134
[#218 '&']: r#134
[#218 '(']: r#134
[#218 '*']: r#134
[#218 '-']: r#134
[#218 'false']: r#134
[#218 'true']: r#134
[#218 '~']: r#134
[#218 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#134
[#218 /0[fh]/]: r#134
[#218 /0[iu]?/]: r#134
[#218 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#134
[#218 /0[xX][0-9a-fA-F]+[iu]?/]: r#134
[#218 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#134
[#218 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#134
[#218 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#134
[#218 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#134
[#218 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#134
[#218 /[1-9][0-9]*[fh]/]: r#134
[#218 /[1-9][0-9]*[iu]?/]: r#134
[#219 '!=']: r#135
[#219 '%']: r#135
[#219 '&&']: r#135
[#219 '&']: r#135
[#219 ')']: r#135
[#219 '*']: r#135
[#219 '+']: r#135
[#219 ',']: r#135
[#219 '-']: r#135
[#219 '.']: r#135
[#219 '/']: r#135
[#219 ':']: r#135
[#219 ';']: r#135
[#219 '==']: r#135
[#219 '@']: r#135
[#219 '[']: r#135
[#219 ']']: r#135
[#219 '^']: r#135
[#219 '{']: r#135
[#219 '|']: r#135
[#219 '||']: r#135
[#219 /\u200B_greater_than/]: r#135
[#219 /\u200B_greater_than_equal/]: r#135
[#219 /\u200B_less_than/]: r#135
[#219 /\u200B_less_than_equal/]: r#135
[#219 /\u200B_shift_left/]: r#135
[#219 /\u200B_shift_right/]: r#135
[#219 /\u200B_template_args_end/]: r#135
[#220 '{']: r#136
[#221 '&']: s#299
[#221 '(']: s#300
[#221 '*']: s#298
[#221 ';']: s#258
[#221 '@']: s#40
[#221 '_']: s#295
[#221 'break']: s#283
[#221 'const']: s#282
[#221 'const_assert']: s#35
[#221 'continue']: s#284
[#221 'discard']: s#269
[#221 'let']: s#281
[#221 'return']: s#273
[#221 'var']: s#101
[#221 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#222 '@']: s#40
[#223 ',']: s#248
[#224 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#202
[#225 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#137
[#226 '@']: s#40
[#227 ';']: r#138
[#228 /\u200B_disambiguate_template/]: s#125
[#229 ';']: r#139
[#230 '!']: s#61
[#230 '&']: s#64
[#230 '(']: s#74
[#230 '*']: s#63
[#230 '-']: s#60
[#230 'false']: s#81
[#230 'true']: s#80
[#230 '~']: s#62
[#230 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#230 /0[fh]/]: s#85
[#230 /0[iu]?/]: s#82
[#230 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#230 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#230 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#230 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#230 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#230 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#230 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#230 /[1-9][0-9]*[fh]/]: s#86
[#230 /[1-9][0-9]*[iu]?/]: s#83
[#231 ';']: r#140
[#232 ';']: r#141
[#232 '=']: r#141
[#233 ';']: r#142
[#234 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#235 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#143
[#236 ',']: s#239
[#237 ')']: r#144
[#237 ',']: r#144
[#238 ')']: s#396
[#239 ')']: r#145
[#240 ';']: r#146
[#240 '=']: r#146
[#241 ';']: r#147
[#242 /\u200B_template_args_start/]: s#218
[#243 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#148
[#244 ':']: s#394
[#245 ',']: s#393
[#246 ',']: r#149
[#246 '}']: r#149
[#247 ',']: s#248
[#248 '@']: s#40
[#249 ')']: s#389
[#250 ')']: r#150
[#251 ',']: s#388
[#252 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#253 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#151
[#254 '@']: s#40
[#255 '}']: s#382
[#256 '}']: r#152
[#257 '&']: s#299
[#257 '(']: s#300
[#257 '*']: s#298
[#257 ';']: s#258
[#257 '@']: s#40
[#257 '_']: s#295
[#257 'break']: s#283
[#257 'const']: s#282
[#257 'const_assert']: s#35
[#257 'continue']: s#284
[#257 'discard']: s#269
[#257 'let']: s#281
[#257 'return']: s#273
[#257 'var']: s#101
[#257 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#258 '&']: r#153
[#258 '(']: r#153
[#258 '*']: r#153
[#258 ';']: r#153
[#258 '@']: r#153
[#258 '_']: r#153
[#258 'break']: r#153
[#258 'const']: r#153
[#258 'const_assert']: r#153
[#258 'continue']: r#153
[#258 'continuing']: r#153
[#258 'discard']: r#153
[#258 'for']: r#153
[#258 'if']: r#153
[#258 'let']: r#153
[#258 'loop']: r#153
[#258 'return']: r#153
[#258 'switch']: r#153
[#258 'var']: r#153
[#258 'while']: r#153
[#258 '{']: r#153
[#258 '}']: r#153
[#258 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#153
[#259 ';']: s#380
[#260 '&']: r#154
[#260 '(']: r#154
[#260 '*']: r#154
[#260 ';']: r#154
[#260 '@']: r#154
[#260 '_']: r#154
[#260 'break']: r#154
[#260 'const']: r#154
[#260 'const_assert']: r#154
[#260 'continue']: r#154
[#260 'continuing']: r#154
[#260 'discard']: r#154
[#260 'for']: r#154
[#260 'if']: r#154
[#260 'let']: r#154
[#260 'loop']: r#154
[#260 'return']: r#154
[#260 'switch']: r#154
[#260 'var']: r#154
[#260 'while']: r#154
[#260 '{']: r#154
[#260 '}']: r#154
[#260 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#154
[#261 '&']: r#155
[#261 '(']: r#155
[#261 '*']: r#155
[#261 ';']: r#155
[#261 '@']: r#155
[#261 '_']: r#155
[#261 'break']: r#155
[#261 'const']: r#155
[#261 'const_assert']: r#155
[#261 'continue']: r#155
[#261 'continuing']: r#155
[#261 'discard']: r#155
[#261 'for']: r#155
[#261 'if']: r#155
[#261 'let']: r#155
[#261 'loop']: r#155
[#261 'return']: r#155
[#261 'switch']: r#155
[#261 'var']: r#155
[#261 'while']: r#155
[#261 '{']: r#155
[#261 '}']: r#155
[#261 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#155
[#262 '&']: r#156
[#262 '(']: r#156
[#262 '*']: r#156
[#262 ';']: r#156
[#262 '@']: r#156
[#262 '_']: r#156
[#262 'break']: r#156
[#262 'const']: r#156
[#262 'const_assert']: r#156
[#262 'continue']: r#156
[#262 'continuing']: r#156
[#262 'discard']: r#156
[#262 'for']: r#156
[#262 'if']: r#156
[#262 'let']: r#156
[#262 'loop']: r#156
[#262 'return']: r#156
[#262 'switch']: r#156
[#262 'var']: r#156
[#262 'while']: r#156
[#262 '{']: r#156
[#262 '}']: r#156
[#262 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#156
[#263 '&']: r#157
[#263 '(']: r#157
[#263 '*']: r#157
[#263 ';']: r#157
[#263 '@']: r#157
[#263 '_']: r#157
[#263 'break']: r#157
[#263 'const']: r#157
[#263 'const_assert']: r#157
[#263 'continue']: r#157
[#263 'continuing']: r#157
[#263 'discard']: r#157
[#263 'for']: r#157
[#263 'if']: r#157
[#263 'let']: r#157
[#263 'loop']: r#157
[#263 'return']: r#157
[#263 'switch']: r#157
[#263 'var']: r#157
[#263 'while']: r#157
[#263 '{']: r#157
[#263 '}']: r#157
[#263 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#157
[#264 '&']: r#158
[#264 '(']: r#158
[#264 '*']: r#158
[#264 ';']: r#158
[#264 '@']: r#158
[#264 '_']: r#158
[#264 'break']: r#158
[#264 'const']: r#158
[#264 'const_assert']: r#158
[#264 'continue']: r#158
[#264 'continuing']: r#158
[#264 'discard']: r#158
[#264 'for']: r#158
[#264 'if']: r#158
[#264 'let']: r#158
[#264 'loop']: r#158
[#264 'return']: r#158
[#264 'switch']: r#158
[#264 'var']: r#158
[#264 'while']: r#158
[#264 '{']: r#158
[#264 '}']: r#158
[#264 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#158
[#265 ';']: s#379
[#266 ';']: s#378
[#267 ';']: s#377
[#268 ';']: s#376
[#269 ';']: s#375
[#270 ';']: s#374
[#271 '&']: r#159
[#271 '(']: r#159
[#271 '*']: r#159
[#271 ';']: r#159
[#271 '@']: r#159
[#271 '_']: r#159
[#271 'break']: r#159
[#271 'const']: r#159
[#271 'const_assert']: r#159
[#271 'continue']: r#159
[#271 'continuing']: r#159
[#271 'discard']: r#159
[#271 'for']: r#159
[#271 'if']: r#159
[#271 'let']: r#159
[#271 'loop']: r#159
[#271 'return']: r#159
[#271 'switch']: r#159
[#271 'var']: r#159
[#271 'while']: r#159
[#271 '{']: r#159
[#271 '}']: r#159
[#271 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#159
[#272 ';']: s#373
[#273 '!']: s#61
[#273 '&']: s#64
[#273 '(']: s#74
[#273 '*']: s#63
[#273 '-']: s#60
[#273 'false']: s#81
[#273 'true']: s#80
[#273 '~']: s#62
[#273 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#273 /0[fh]/]: s#85
[#273 /0[iu]?/]: s#82
[#273 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#273 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#273 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#273 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#273 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#273 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#273 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#273 /[1-9][0-9]*[fh]/]: s#86
[#273 /[1-9][0-9]*[iu]?/]: s#83
[#274 'if']: s#370
[#275 'switch']: s#368
[#276 'loop']: s#367
[#277 'for']: s#366
[#278 'while']: s#365
[#279 '(']: s#144
[#280 ';']: r#160
[#280 '=']: s#363
[#281 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#282 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#283 ';']: r#161
[#284 ';']: r#162
[#285 ')']: r#163
[#285 ';']: r#163
[#286 ')']: r#164
[#286 ';']: r#164
[#287 ')']: r#165
[#287 ';']: r#165
[#288 'if']: r#166
[#289 'switch']: r#167
[#290 'loop']: r#168
[#291 'for']: r#169
[#292 'while']: r#170
[#293 /\u200B_disambiguate_template/]: s#125
[#294 '%=']: s#352
[#294 '&=']: s#353
[#294 '*=']: s#350
[#294 '++']: s#344
[#294 '+=']: s#348
[#294 '--']: s#345
[#294 '-=']: s#349
[#294 '/=']: s#351
[#294 '=']: s#346
[#294 '^=']: s#355
[#294 '|=']: s#354
[#294 /\u200B_shift_left_assign/]: s#359
[#294 /\u200B_shift_right_assign/]: s#358
[#295 '=']: s#342
[#296 '@']: s#40
[#297 '.']: s#148
[#297 '[']: s#147
[#298 '&']: s#299
[#298 '(']: s#300
[#298 '*']: s#298
[#298 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#299 '&']: s#299
[#299 '(']: s#300
[#299 '*']: s#298
[#299 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#300 '&']: s#299
[#300 '(']: s#300
[#300 '*']: s#298
[#300 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#301 /\u200B_template_args_end/]: s#330
[#302 ',']: s#328
[#303 '&&']: r#22
[#303 ',']: r#171
[#303 '||']: r#21
[#303 /\u200B_template_args_end/]: r#171
[#304 '||']: s#324
[#305 '&&']: s#323
[#306 ',']: r#172
[#306 /\u200B_template_args_end/]: r#172
[#307 ',']: s#322
[#308 ')']: r#173
[#308 ',']: r#173
[#309 ',']: s#310
[#310 '!']: s#61
[#310 '&']: s#64
[#310 '(']: s#74
[#310 '*']: s#63
[#310 '-']: s#60
[#310 'false']: s#81
[#310 'true']: s#80
[#310 '~']: s#62
[#310 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#310 /0[fh]/]: s#85
[#310 /0[iu]?/]: s#82
[#310 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#310 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#310 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#310 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#310 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#310 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#310 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#310 /[1-9][0-9]*[fh]/]: s#86
[#310 /[1-9][0-9]*[iu]?/]: s#83
[#311 '!=']: r#174
[#311 '%']: r#174
[#311 '&&']: r#174
[#311 '&']: r#174
[#311 ')']: r#174
[#311 '*']: r#174
[#311 '+']: r#174
[#311 ',']: r#174
[#311 '-']: r#174
[#311 '.']: r#174
[#311 '/']: r#174
[#311 ':']: r#174
[#311 ';']: r#174
[#311 '==']: r#174
[#311 '@']: r#174
[#311 '[']: r#174
[#311 ']']: r#174
[#311 '^']: r#174
[#311 'fn']: r#174
[#311 'for']: r#174
[#311 'if']: r#174
[#311 'loop']: r#174
[#311 'override']: r#174
[#311 'switch']: r#174
[#311 'var']: r#174
[#311 'while']: r#174
[#311 '{']: r#174
[#311 '|']: r#174
[#311 '||']: r#174
[#311 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#174
[#311 /\u200B_greater_than/]: r#174
[#311 /\u200B_greater_than_equal/]: r#174
[#311 /\u200B_less_than/]: r#174
[#311 /\u200B_less_than_equal/]: r#174
[#311 /\u200B_shift_left/]: r#174
[#311 /\u200B_shift_right/]: r#174
[#311 /\u200B_template_args_end/]: r#174
[#312 '.']: s#148
[#312 '[']: s#147
[#313 '!=']: r#175
[#313 '%']: r#175
[#313 '%=']: r#175
[#313 '&&']: r#175
[#313 '&']: r#175
[#313 '&=']: r#175
[#313 ')']: r#175
[#313 '*']: r#175
[#313 '*=']: r#175
[#313 '+']: r#175
[#313 '++']: r#175
[#313 '+=']: r#175
[#313 ',']: r#175
[#313 '-']: r#175
[#313 '--']: r#175
[#313 '-=']: r#175
[#313 '/']: r#175
[#313 '/=']: r#175
[#313 ':']: r#175
[#313 ';']: r#175
[#313 '=']: r#175
[#313 '==']: r#175
[#313 '@']: r#175
[#313 ']']: r#175
[#313 '^']: r#175
[#313 '^=']: r#175
[#313 '{']: r#175
[#313 '|']: r#175
[#313 '|=']: r#175
[#313 '||']: r#175
[#313 /\u200B_greater_than/]: r#175
[#313 /\u200B_greater_than_equal/]: r#175
[#313 /\u200B_less_than/]: r#175
[#313 /\u200B_less_than_equal/]: r#175
[#313 /\u200B_shift_left/]: r#175
[#313 /\u200B_shift_left_assign/]: r#175
[#313 /\u200B_shift_right/]: r#175
[#313 /\u200B_shift_right_assign/]: r#175
[#313 /\u200B_template_args_end/]: r#175
[#314 '!=']: r#176
[#314 '%']: r#176
[#314 '%=']: r#176
[#314 '&&']: r#176
[#314 '&']: r#176
[#314 '&=']: r#176
[#314 ')']: r#176
[#314 '*']: r#176
[#314 '*=']: r#176
[#314 '+']: r#176
[#314 '++']: r#176
[#314 '+=']: r#176
[#314 ',']: r#176
[#314 '-']: r#176
[#314 '--']: r#176
[#314 '-=']: r#176
[#314 '/']: r#176
[#314 '/=']: r#176
[#314 ':']: r#176
[#314 ';']: r#176
[#314 '=']: r#176
[#314 '==']: r#176
[#314 '@']: r#176
[#314 ']']: r#176
[#314 '^']: r#176
[#314 '^=']: r#176
[#314 '{']: r#176
[#314 '|']: r#176
[#314 '|=']: r#176
[#314 '||']: r#176
[#314 /\u200B_greater_than/]: r#176
[#314 /\u200B_greater_than_equal/]: r#176
[#314 /\u200B_less_than/]: r#176
[#314 /\u200B_less_than_equal/]: r#176
[#314 /\u200B_shift_left/]: r#176
[#314 /\u200B_shift_left_assign/]: r#176
[#314 /\u200B_shift_right/]: r#176
[#314 /\u200B_shift_right_assign/]: r#176
[#314 /\u200B_template_args_end/]: r#176
[#315 '!=']: r#177
[#315 '%']: r#177
[#315 '%=']: r#177
[#315 '&&']: r#177
[#315 '&']: r#177
[#315 '&=']: r#177
[#315 ')']: r#177
[#315 '*']: r#177
[#315 '*=']: r#177
[#315 '+']: r#177
[#315 '++']: r#177
[#315 '+=']: r#177
[#315 ',']: r#177
[#315 '-']: r#177
[#315 '--']: r#177
[#315 '-=']: r#177
[#315 '/']: r#177
[#315 '/=']: r#177
[#315 ':']: r#177
[#315 ';']: r#177
[#315 '=']: r#177
[#315 '==']: r#177
[#315 '@']: r#177
[#315 ']']: r#177
[#315 '^']: r#177
[#315 '^=']: r#177
[#315 '{']: r#177
[#315 '|']: r#177
[#315 '|=']: r#177
[#315 '||']: r#177
[#315 /\u200B_greater_than/]: r#177
[#315 /\u200B_greater_than_equal/]: r#177
[#315 /\u200B_less_than/]: r#177
[#315 /\u200B_less_than_equal/]: r#177
[#315 /\u200B_shift_left/]: r#177
[#315 /\u200B_shift_left_assign/]: r#177
[#315 /\u200B_shift_right/]: r#177
[#315 /\u200B_shift_right_assign/]: r#177
[#315 /\u200B_template_args_end/]: r#177
[#316 '!=']: r#178
[#316 '%']: r#178
[#316 '%=']: r#178
[#316 '&&']: r#178
[#316 '&']: r#178
[#316 '&=']: r#178
[#316 ')']: r#178
[#316 '*']: r#178
[#316 '*=']: r#178
[#316 '+']: r#178
[#316 '++']: r#178
[#316 '+=']: r#178
[#316 ',']: r#178
[#316 '-']: r#178
[#316 '--']: r#178
[#316 '-=']: r#178
[#316 '/']: r#178
[#316 '/=']: r#178
[#316 ':']: r#178
[#316 ';']: r#178
[#316 '=']: r#178
[#316 '==']: r#178
[#316 '@']: r#178
[#316 ']']: r#178
[#316 '^']: r#178
[#316 '^=']: r#178
[#316 '{']: r#178
[#316 '|']: r#178
[#316 '|=']: r#178
[#316 '||']: r#178
[#316 /\u200B_greater_than/]: r#178
[#316 /\u200B_greater_than_equal/]: r#178
[#316 /\u200B_less_than/]: r#178
[#316 /\u200B_less_than_equal/]: r#178
[#316 /\u200B_shift_left/]: r#178
[#316 /\u200B_shift_left_assign/]: r#178
[#316 /\u200B_shift_right/]: r#178
[#316 /\u200B_shift_right_assign/]: r#178
[#316 /\u200B_template_args_end/]: r#178
[#317 '!=']: r#179
[#317 '%']: r#179
[#317 '%=']: r#179
[#317 '&&']: r#179
[#317 '&']: r#179
[#317 '&=']: r#179
[#317 ')']: r#179
[#317 '*']: r#179
[#317 '*=']: r#179
[#317 '+']: r#179
[#317 '++']: r#179
[#317 '+=']: r#179
[#317 ',']: r#179
[#317 '-']: r#179
[#317 '--']: r#179
[#317 '-=']: r#179
[#317 '/']: r#179
[#317 '/=']: r#179
[#317 ':']: r#179
[#317 ';']: r#179
[#317 '=']: r#179
[#317 '==']: r#179
[#317 '@']: r#179
[#317 ']']: r#179
[#317 '^']: r#179
[#317 '^=']: r#179
[#317 '{']: r#179
[#317 '|']: r#179
[#317 '|=']: r#179
[#317 '||']: r#179
[#317 /\u200B_greater_than/]: r#179
[#317 /\u200B_greater_than_equal/]: r#179
[#317 /\u200B_less_than/]: r#179
[#317 /\u200B_less_than_equal/]: r#179
[#317 /\u200B_shift_left/]: r#179
[#317 /\u200B_shift_left_assign/]: r#179
[#317 /\u200B_shift_right/]: r#179
[#317 /\u200B_shift_right_assign/]: r#179
[#317 /\u200B_template_args_end/]: r#179
[#318 '!=']: r#180
[#318 '%']: r#180
[#318 '%=']: r#180
[#318 '&&']: r#180
[#318 '&']: r#180
[#318 '&=']: r#180
[#318 ')']: r#180
[#318 '*']: r#180
[#318 '*=']: r#180
[#318 '+']: r#180
[#318 '++']: r#180
[#318 '+=']: r#180
[#318 ',']: r#180
[#318 '-']: r#180
[#318 '--']: r#180
[#318 '-=']: r#180
[#318 '/']: r#180
[#318 '/=']: r#180
[#318 ':']: r#180
[#318 ';']: r#180
[#318 '=']: r#180
[#318 '==']: r#180
[#318 '@']: r#180
[#318 ']']: r#180
[#318 '^']: r#180
[#318 '^=']: r#180
[#318 '{']: r#180
[#318 '|']: r#180
[#318 '|=']: r#180
[#318 '||']: r#180
[#318 /\u200B_greater_than/]: r#180
[#318 /\u200B_greater_than_equal/]: r#180
[#318 /\u200B_less_than/]: r#180
[#318 /\u200B_less_than_equal/]: r#180
[#318 /\u200B_shift_left/]: r#180
[#318 /\u200B_shift_left_assign/]: r#180
[#318 /\u200B_shift_right/]: r#180
[#318 /\u200B_shift_right_assign/]: r#180
[#318 /\u200B_template_args_end/]: r#180
[#319 ')']: r#181
[#319 ',']: r#181
[#320 ')']: r#182
[#320 ',']: r#182
[#321 ')']: r#183
[#322 ')']: r#184
[#323 '!']: s#61
[#323 '&']: s#64
[#323 '(']: s#74
[#323 '*']: s#63
[#323 '-']: s#60
[#323 'false']: s#81
[#323 'true']: s#80
[#323 '~']: s#62
[#323 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#323 /0[fh]/]: s#85
[#323 /0[iu]?/]: s#82
[#323 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#323 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#323 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#323 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#323 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#323 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#323 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#323 /[1-9][0-9]*[fh]/]: s#86
[#323 /[1-9][0-9]*[iu]?/]: s#83
[#324 '!']: s#61
[#324 '&']: s#64
[#324 '(']: s#74
[#324 '*']: s#63
[#324 '-']: s#60
[#324 'false']: s#81
[#324 'true']: s#80
[#324 '~']: s#62
[#324 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#324 /0[fh]/]: s#85
[#324 /0[iu]?/]: s#82
[#324 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#324 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#324 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#324 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#324 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#324 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#324 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#324 /[1-9][0-9]*[fh]/]: s#86
[#324 /[1-9][0-9]*[iu]?/]: s#83
[#325 ',']: s#427
[#326 ',']: r#185
[#326 /\u200B_template_args_end/]: r#185
[#327 ',']: s#328
[#328 '!']: s#61
[#328 '&']: s#64
[#328 '(']: s#74
[#328 '*']: s#63
[#328 '-']: s#60
[#328 'false']: s#81
[#328 'true']: s#80
[#328 '~']: s#62
[#328 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#328 /0[fh]/]: s#85
[#328 /0[iu]?/]: s#82
[#328 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#328 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#328 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#328 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#328 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#328 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#328 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#328 /[1-9][0-9]*[fh]/]: s#86
[#328 /[1-9][0-9]*[iu]?/]: s#83
[#329 '!=']: r#186
[#329 '%']: r#186
[#329 '&&']: r#186
[#329 '&']: r#186
[#329 '(']: r#186
[#329 ')']: r#186
[#329 '*']: r#186
[#329 '+']: r#186
[#329 ',']: r#186
[#329 '-']: r#186
[#329 '.']: r#186
[#329 '/']: r#186
[#329 ':']: r#186
[#329 ';']: r#186
[#329 '=']: r#186
[#329 '==']: r#186
[#329 '@']: r#186
[#329 '[']: r#186
[#329 ']']: r#186
[#329 '^']: r#186
[#329 '{']: r#186
[#329 '|']: r#186
[#329 '||']: r#186
[#329 '}']: r#186
[#329 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#186
[#329 /\u200B_greater_than/]: r#186
[#329 /\u200B_greater_than_equal/]: r#186
[#329 /\u200B_less_than/]: r#186
[#329 /\u200B_less_than_equal/]: r#186
[#329 /\u200B_shift_left/]: r#186
[#329 /\u200B_shift_right/]: r#186
[#329 /\u200B_template_args_end/]: r#186
[#330 '!=']: r#187
[#330 '%']: r#187
[#330 '&&']: r#187
[#330 '&']: r#187
[#330 '(']: r#187
[#330 ')']: r#187
[#330 '*']: r#187
[#330 '+']: r#187
[#330 ',']: r#187
[#330 '-']: r#187
[#330 '.']: r#187
[#330 '/']: r#187
[#330 ':']: r#187
[#330 ';']: r#187
[#330 '=']: r#187
[#330 '==']: r#187
[#330 '@']: r#187
[#330 '[']: r#187
[#330 ']']: r#187
[#330 '^']: r#187
[#330 '{']: r#187
[#330 '|']: r#187
[#330 '||']: r#187
[#330 '}']: r#187
[#330 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#187
[#330 /\u200B_greater_than/]: r#187
[#330 /\u200B_greater_than_equal/]: r#187
[#330 /\u200B_less_than/]: r#187
[#330 /\u200B_less_than_equal/]: r#187
[#330 /\u200B_shift_left/]: r#187
[#330 /\u200B_shift_right/]: r#187
[#330 /\u200B_template_args_end/]: r#187
[#331 ')']: s#423
[#332 /\u200B_disambiguate_template/]: s#125
[#333 '%=']: r#188
[#333 '&=']: r#188
[#333 ')']: r#188
[#333 '*=']: r#188
[#333 '++']: r#188
[#333 '+=']: r#188
[#333 '--']: r#188
[#333 '-=']: r#188
[#333 '/=']: r#188
[#333 '=']: r#188
[#333 '^=']: r#188
[#333 '|=']: r#188
[#333 /\u200B_shift_left_assign/]: r#188
[#333 /\u200B_shift_right_assign/]: r#188
[#334 '%=']: r#189
[#334 '&=']: r#189
[#334 ')']: r#189
[#334 '*=']: r#189
[#334 '++']: r#189
[#334 '+=']: r#189
[#334 '--']: r#189
[#334 '-=']: r#189
[#334 '/=']: r#189
[#334 '=']: r#189
[#334 '^=']: r#189
[#334 '|=']: r#189
[#334 /\u200B_shift_left_assign/]: r#189
[#334 /\u200B_shift_right_assign/]: r#189
[#335 '%=']: r#190
[#335 '&=']: r#190
[#335 ')']: r#190
[#335 '*=']: r#190
[#335 '++']: r#190
[#335 '+=']: r#190
[#335 '--']: r#190
[#335 '-=']: r#190
[#335 '/=']: r#190
[#335 '=']: r#190
[#335 '^=']: r#190
[#335 '|=']: r#190
[#335 /\u200B_shift_left_assign/]: r#190
[#335 /\u200B_shift_right_assign/]: r#190
[#336 '%=']: r#191
[#336 '&=']: r#191
[#336 ')']: r#191
[#336 '*=']: r#191
[#336 '++']: r#191
[#336 '+=']: r#191
[#336 '--']: r#191
[#336 '-=']: r#191
[#336 '/=']: r#191
[#336 '=']: r#191
[#336 '^=']: r#191
[#336 '|=']: r#191
[#336 /\u200B_shift_left_assign/]: r#191
[#336 /\u200B_shift_right_assign/]: r#191
[#337 'if']: r#192
[#338 'switch']: r#193
[#339 'loop']: r#194
[#340 'for']: r#195
[#341 'while']: r#196
[#342 '!']: s#61
[#342 '&']: s#64
[#342 '(']: s#74
[#342 '*']: s#63
[#342 '-']: s#60
[#342 'false']: s#81
[#342 'true']: s#80
[#342 '~']: s#62
[#342 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#342 /0[fh]/]: s#85
[#342 /0[iu]?/]: s#82
[#342 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#342 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#342 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#342 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#342 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#342 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#342 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#342 /[1-9][0-9]*[fh]/]: s#86
[#342 /[1-9][0-9]*[iu]?/]: s#83
[#343 '!']: s#61
[#343 '&']: s#64
[#343 '(']: s#74
[#343 '*']: s#63
[#343 '-']: s#60
[#343 'false']: s#81
[#343 'true']: s#80
[#343 '~']: s#62
[#343 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#343 /0[fh]/]: s#85
[#343 /0[iu]?/]: s#82
[#343 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#343 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#343 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#343 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#343 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#343 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#343 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#343 /[1-9][0-9]*[fh]/]: s#86
[#343 /[1-9][0-9]*[iu]?/]: s#83
[#344 ')']: r#197
[#344 ';']: r#197
[#345 ')']: r#198
[#345 ';']: r#198
[#346 '!']: r#199
[#346 '&']: r#199
[#346 '(']: r#199
[#346 '*']: r#199
[#346 '-']: r#199
[#346 'false']: r#199
[#346 'true']: r#199
[#346 '~']: r#199
[#346 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#199
[#346 /0[fh]/]: r#199
[#346 /0[iu]?/]: r#199
[#346 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#199
[#346 /0[xX][0-9a-fA-F]+[iu]?/]: r#199
[#346 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#199
[#346 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#199
[#346 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#199
[#346 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#199
[#346 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#199
[#346 /[1-9][0-9]*[fh]/]: r#199
[#346 /[1-9][0-9]*[iu]?/]: r#199
[#347 '!']: r#200
[#347 '&']: r#200
[#347 '(']: r#200
[#347 '*']: r#200
[#347 '-']: r#200
[#347 'false']: r#200
[#347 'true']: r#200
[#347 '~']: r#200
[#347 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#200
[#347 /0[fh]/]: r#200
[#347 /0[iu]?/]: r#200
[#347 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#200
[#347 /0[xX][0-9a-fA-F]+[iu]?/]: r#200
[#347 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#200
[#347 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#200
[#347 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#200
[#347 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#200
[#347 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#200
[#347 /[1-9][0-9]*[fh]/]: r#200
[#347 /[1-9][0-9]*[iu]?/]: r#200
[#348 '!']: r#201
[#348 '&']: r#201
[#348 '(']: r#201
[#348 '*']: r#201
[#348 '-']: r#201
[#348 'false']: r#201
[#348 'true']: r#201
[#348 '~']: r#201
[#348 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#201
[#348 /0[fh]/]: r#201
[#348 /0[iu]?/]: r#201
[#348 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#201
[#348 /0[xX][0-9a-fA-F]+[iu]?/]: r#201
[#348 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#201
[#348 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#201
[#348 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#201
[#348 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#201
[#348 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#201
[#348 /[1-9][0-9]*[fh]/]: r#201
[#348 /[1-9][0-9]*[iu]?/]: r#201
[#349 '!']: r#202
[#349 '&']: r#202
[#349 '(']: r#202
[#349 '*']: r#202
[#349 '-']: r#202
[#349 'false']: r#202
[#349 'true']: r#202
[#349 '~']: r#202
[#349 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#202
[#349 /0[fh]/]: r#202
[#349 /0[iu]?/]: r#202
[#349 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#202
[#349 /0[xX][0-9a-fA-F]+[iu]?/]: r#202
[#349 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#202
[#349 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#202
[#349 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#202
[#349 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#202
[#349 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#202
[#349 /[1-9][0-9]*[fh]/]: r#202
[#349 /[1-9][0-9]*[iu]?/]: r#202
[#350 '!']: r#203
[#350 '&']: r#203
[#350 '(']: r#203
[#350 '*']: r#203
[#350 '-']: r#203
[#350 'false']: r#203
[#350 'true']: r#203
[#350 '~']: r#203
[#350 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#203
[#350 /0[fh]/]: r#203
[#350 /0[iu]?/]: r#203
[#350 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#203
[#350 /0[xX][0-9a-fA-F]+[iu]?/]: r#203
[#350 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#203
[#350 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#203
[#350 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#203
[#350 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#203
[#350 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#203
[#350 /[1-9][0-9]*[fh]/]: r#203
[#350 /[1-9][0-9]*[iu]?/]: r#203
[#351 '!']: r#204
[#351 '&']: r#204
[#351 '(']: r#204
[#351 '*']: r#204
[#351 '-']: r#204
[#351 'false']: r#204
[#351 'true']: r#204
[#351 '~']: r#204
[#351 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#204
[#351 /0[fh]/]: r#204
[#351 /0[iu]?/]: r#204
[#351 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#204
[#351 /0[xX][0-9a-fA-F]+[iu]?/]: r#204
[#351 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#204
[#351 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#204
[#351 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#204
[#351 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#204
[#351 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#204
[#351 /[1-9][0-9]*[fh]/]: r#204
[#351 /[1-9][0-9]*[iu]?/]: r#204
[#352 '!']: r#205
[#352 '&']: r#205
[#352 '(']: r#205
[#352 '*']: r#205
[#352 '-']: r#205
[#352 'false']: r#205
[#352 'true']: r#205
[#352 '~']: r#205
[#352 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#205
[#352 /0[fh]/]: r#205
[#352 /0[iu]?/]: r#205
[#352 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#205
[#352 /0[xX][0-9a-fA-F]+[iu]?/]: r#205
[#352 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#205
[#352 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#205
[#352 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#205
[#352 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#205
[#352 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#205
[#352 /[1-9][0-9]*[fh]/]: r#205
[#352 /[1-9][0-9]*[iu]?/]: r#205
[#353 '!']: r#206
[#353 '&']: r#206
[#353 '(']: r#206
[#353 '*']: r#206
[#353 '-']: r#206
[#353 'false']: r#206
[#353 'true']: r#206
[#353 '~']: r#206
[#353 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#206
[#353 /0[fh]/]: r#206
[#353 /0[iu]?/]: r#206
[#353 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#206
[#353 /0[xX][0-9a-fA-F]+[iu]?/]: r#206
[#353 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#206
[#353 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#206
[#353 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#206
[#353 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#206
[#353 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#206
[#353 /[1-9][0-9]*[fh]/]: r#206
[#353 /[1-9][0-9]*[iu]?/]: r#206
[#354 '!']: r#207
[#354 '&']: r#207
[#354 '(']: r#207
[#354 '*']: r#207
[#354 '-']: r#207
[#354 'false']: r#207
[#354 'true']: r#207
[#354 '~']: r#207
[#354 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#207
[#354 /0[fh]/]: r#207
[#354 /0[iu]?/]: r#207
[#354 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#207
[#354 /0[xX][0-9a-fA-F]+[iu]?/]: r#207
[#354 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#207
[#354 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#207
[#354 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#207
[#354 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#207
[#354 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#207
[#354 /[1-9][0-9]*[fh]/]: r#207
[#354 /[1-9][0-9]*[iu]?/]: r#207
[#355 '!']: r#208
[#355 '&']: r#208
[#355 '(']: r#208
[#355 '*']: r#208
[#355 '-']: r#208
[#355 'false']: r#208
[#355 'true']: r#208
[#355 '~']: r#208
[#355 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#208
[#355 /0[fh]/]: r#208
[#355 /0[iu]?/]: r#208
[#355 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#208
[#355 /0[xX][0-9a-fA-F]+[iu]?/]: r#208
[#355 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#208
[#355 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#208
[#355 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#208
[#355 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#208
[#355 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#208
[#355 /[1-9][0-9]*[fh]/]: r#208
[#355 /[1-9][0-9]*[iu]?/]: r#208
[#356 '!']: r#209
[#356 '&']: r#209
[#356 '(']: r#209
[#356 '*']: r#209
[#356 '-']: r#209
[#356 'false']: r#209
[#356 'true']: r#209
[#356 '~']: r#209
[#356 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#209
[#356 /0[fh]/]: r#209
[#356 /0[iu]?/]: r#209
[#356 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#209
[#356 /0[xX][0-9a-fA-F]+[iu]?/]: r#209
[#356 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#209
[#356 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#209
[#356 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#209
[#356 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#209
[#356 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#209
[#356 /[1-9][0-9]*[fh]/]: r#209
[#356 /[1-9][0-9]*[iu]?/]: r#209
[#357 '!']: r#210
[#357 '&']: r#210
[#357 '(']: r#210
[#357 '*']: r#210
[#357 '-']: r#210
[#357 'false']: r#210
[#357 'true']: r#210
[#357 '~']: r#210
[#357 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#210
[#357 /0[fh]/]: r#210
[#357 /0[iu]?/]: r#210
[#357 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#210
[#357 /0[xX][0-9a-fA-F]+[iu]?/]: r#210
[#357 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#210
[#357 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#210
[#357 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#210
[#357 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#210
[#357 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#210
[#357 /[1-9][0-9]*[fh]/]: r#210
[#357 /[1-9][0-9]*[iu]?/]: r#210
[#358 '!']: r#211
[#358 '&']: r#211
[#358 '(']: r#211
[#358 '*']: r#211
[#358 '-']: r#211
[#358 'false']: r#211
[#358 'true']: r#211
[#358 '~']: r#211
[#358 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#211
[#358 /0[fh]/]: r#211
[#358 /0[iu]?/]: r#211
[#358 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#211
[#358 /0[xX][0-9a-fA-F]+[iu]?/]: r#211
[#358 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#211
[#358 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#211
[#358 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#211
[#358 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#211
[#358 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#211
[#358 /[1-9][0-9]*[fh]/]: r#211
[#358 /[1-9][0-9]*[iu]?/]: r#211
[#359 '!']: r#212
[#359 '&']: r#212
[#359 '(']: r#212
[#359 '*']: r#212
[#359 '-']: r#212
[#359 'false']: r#212
[#359 'true']: r#212
[#359 '~']: r#212
[#359 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#212
[#359 /0[fh]/]: r#212
[#359 /0[iu]?/]: r#212
[#359 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#212
[#359 /0[xX][0-9a-fA-F]+[iu]?/]: r#212
[#359 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#212
[#359 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#212
[#359 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#212
[#359 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#212
[#359 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#212
[#359 /[1-9][0-9]*[fh]/]: r#212
[#359 /[1-9][0-9]*[iu]?/]: r#212
[#360 '%=']: r#213
[#360 '&=']: r#213
[#360 '*=']: r#213
[#360 '++']: r#213
[#360 '+=']: r#213
[#360 '--']: r#213
[#360 '-=']: r#213
[#360 '.']: r#213
[#360 '/=']: r#213
[#360 '=']: r#213
[#360 '[']: r#213
[#360 '^=']: r#213
[#360 '|=']: r#213
[#360 /\u200B_shift_left_assign/]: r#213
[#360 /\u200B_shift_right_assign/]: r#213
[#360 /\u200B_template_args_start/]: s#218
[#361 '=']: s#419
[#362 '=']: s#418
[#363 '!']: s#61
[#363 '&']: s#64
[#363 '(']: s#74
[#363 '*']: s#63
[#363 '-']: s#60
[#363 'false']: s#81
[#363 'true']: s#80
[#363 '~']: s#62
[#363 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#363 /0[fh]/]: s#85
[#363 /0[iu]?/]: s#82
[#363 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#363 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#363 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#363 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#363 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#363 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#363 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#363 /[1-9][0-9]*[fh]/]: s#86
[#363 /[1-9][0-9]*[iu]?/]: s#83
[#364 ')']: r#214
[#364 ';']: r#214
[#365 '!']: s#61
[#365 '&']: s#64
[#365 '(']: s#74
[#365 '*']: s#63
[#365 '-']: s#60
[#365 'false']: s#81
[#365 'true']: s#80
[#365 '~']: s#62
[#365 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#365 /0[fh]/]: s#85
[#365 /0[iu]?/]: s#82
[#365 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#365 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#365 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#365 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#365 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#365 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#365 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#365 /[1-9][0-9]*[fh]/]: s#86
[#365 /[1-9][0-9]*[iu]?/]: s#83
[#366 '(']: s#415
[#367 '@']: s#40
[#368 '!']: s#61
[#368 '&']: s#64
[#368 '(']: s#74
[#368 '*']: s#63
[#368 '-']: s#60
[#368 'false']: s#81
[#368 'true']: s#80
[#368 '~']: s#62
[#368 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#368 /0[fh]/]: s#85
[#368 /0[iu]?/]: s#82
[#368 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#368 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#368 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#368 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#368 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#368 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#368 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#368 /[1-9][0-9]*[fh]/]: s#86
[#368 /[1-9][0-9]*[iu]?/]: s#83
[#369 'else']: s#410
[#370 '!']: s#61
[#370 '&']: s#64
[#370 '(']: s#74
[#370 '*']: s#63
[#370 '-']: s#60
[#370 'false']: s#81
[#370 'true']: s#80
[#370 '~']: s#62
[#370 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#370 /0[fh]/]: s#85
[#370 /0[iu]?/]: s#82
[#370 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#370 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#370 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#370 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#370 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#370 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#370 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#370 /[1-9][0-9]*[fh]/]: s#86
[#370 /[1-9][0-9]*[iu]?/]: s#83
[#371 ';']: r#215
[#372 ';']: r#216
[#373 '&']: r#217
[#373 '(']: r#217
[#373 '*']: r#217
[#373 ';']: r#217
[#373 '@']: r#217
[#373 '_']: r#217
[#373 'break']: r#217
[#373 'const']: r#217
[#373 'const_assert']: r#217
[#373 'continue']: r#217
[#373 'continuing']: r#217
[#373 'discard']: r#217
[#373 'for']: r#217
[#373 'if']: r#217
[#373 'let']: r#217
[#373 'loop']: r#217
[#373 'return']: r#217
[#373 'switch']: r#217
[#373 'var']: r#217
[#373 'while']: r#217
[#373 '{']: r#217
[#373 '}']: r#217
[#373 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#217
[#374 '&']: r#218
[#374 '(']: r#218
[#374 '*']: r#218
[#374 ';']: r#218
[#374 '@']: r#218
[#374 '_']: r#218
[#374 'break']: r#218
[#374 'const']: r#218
[#374 'const_assert']: r#218
[#374 'continue']: r#218
[#374 'continuing']: r#218
[#374 'discard']: r#218
[#374 'for']: r#218
[#374 'if']: r#218
[#374 'let']: r#218
[#374 'loop']: r#218
[#374 'return']: r#218
[#374 'switch']: r#218
[#374 'var']: r#218
[#374 'while']: r#218
[#374 '{']: r#218
[#374 '}']: r#218
[#374 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#218
[#375 '&']: r#219
[#375 '(']: r#219
[#375 '*']: r#219
[#375 ';']: r#219
[#375 '@']: r#219
[#375 '_']: r#219
[#375 'break']: r#219
[#375 'const']: r#219
[#375 'const_assert']: r#219
[#375 'continue']: r#219
[#375 'continuing']: r#219
[#375 'discard']: r#219
[#375 'for']: r#219
[#375 'if']: r#219
[#375 'let']: r#219
[#375 'loop']: r#219
[#375 'return']: r#219
[#375 'switch']: r#219
[#375 'var']: r#219
[#375 'while']: r#219
[#375 '{']: r#219
[#375 '}']: r#219
[#375 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#219
[#376 '&']: r#220
[#376 '(']: r#220
[#376 '*']: r#220
[#376 ';']: r#220
[#376 '@']: r#220
[#376 '_']: r#220
[#376 'break']: r#220
[#376 'const']: r#220
[#376 'const_assert']: r#220
[#376 'continue']: r#220
[#376 'continuing']: r#220
[#376 'discard']: r#220
[#376 'for']: r#220
[#376 'if']: r#220
[#376 'let']: r#220
[#376 'loop']: r#220
[#376 'return']: r#220
[#376 'switch']: r#220
[#376 'var']: r#220
[#376 'while']: r#220
[#376 '{']: r#220
[#376 '}']: r#220
[#376 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#220
[#377 '&']: r#221
[#377 '(']: r#221
[#377 '*']: r#221
[#377 ';']: r#221
[#377 '@']: r#221
[#377 '_']: r#221
[#377 'break']: r#221
[#377 'const']: r#221
[#377 'const_assert']: r#221
[#377 'continue']: r#221
[#377 'continuing']: r#221
[#377 'discard']: r#221
[#377 'for']: r#221
[#377 'if']: r#221
[#377 'let']: r#221
[#377 'loop']: r#221
[#377 'return']: r#221
[#377 'switch']: r#221
[#377 'var']: r#221
[#377 'while']: r#221
[#377 '{']: r#221
[#377 '}']: r#221
[#377 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#221
[#378 '&']: r#222
[#378 '(']: r#222
[#378 '*']: r#222
[#378 ';']: r#222
[#378 '@']: r#222
[#378 '_']: r#222
[#378 'break']: r#222
[#378 'const']: r#222
[#378 'const_assert']: r#222
[#378 'continue']: r#222
[#378 'continuing']: r#222
[#378 'discard']: r#222
[#378 'for']: r#222
[#378 'if']: r#222
[#378 'let']: r#222
[#378 'loop']: r#222
[#378 'return']: r#222
[#378 'switch']: r#222
[#378 'var']: r#222
[#378 'while']: r#222
[#378 '{']: r#222
[#378 '}']: r#222
[#378 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#222
[#379 '&']: r#223
[#379 '(']: r#223
[#379 '*']: r#223
[#379 ';']: r#223
[#379 '@']: r#223
[#379 '_']: r#223
[#379 'break']: r#223
[#379 'const']: r#223
[#379 'const_assert']: r#223
[#379 'continue']: r#223
[#379 'continuing']: r#223
[#379 'discard']: r#223
[#379 'for']: r#223
[#379 'if']: r#223
[#379 'let']: r#223
[#379 'loop']: r#223
[#379 'return']: r#223
[#379 'switch']: r#223
[#379 'var']: r#223
[#379 'while']: r#223
[#379 '{']: r#223
[#379 '}']: r#223
[#379 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#223
[#380 '&']: r#224
[#380 '(']: r#224
[#380 '*']: r#224
[#380 ';']: r#224
[#380 '@']: r#224
[#380 '_']: r#224
[#380 'break']: r#224
[#380 'const']: r#224
[#380 'const_assert']: r#224
[#380 'continue']: r#224
[#380 'continuing']: r#224
[#380 'discard']: r#224
[#380 'for']: r#224
[#380 'if']: r#224
[#380 'let']: r#224
[#380 'loop']: r#224
[#380 'return']: r#224
[#380 'switch']: r#224
[#380 'var']: r#224
[#380 'while']: r#224
[#380 '{']: r#224
[#380 '}']: r#224
[#380 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#224
[#381 '}']: r#225
[#382 '&']: r#226
[#382 '(']: r#226
[#382 '*']: r#226
[#382 ';']: r#226
[#382 '@']: r#226
[#382 '_']: r#226
[#382 'alias']: r#226
[#382 'break']: r#226
[#382 'case']: r#226
[#382 'const']: r#226
[#382 'const_assert']: r#226
[#382 'continue']: r#226
[#382 'continuing']: r#226
[#382 'default']: r#226
[#382 'discard']: r#226
[#382 'else']: r#226
[#382 'fn']: r#226
[#382 'for']: r#226
[#382 'if']: r#226
[#382 'let']: r#226
[#382 'loop']: r#226
[#382 'override']: r#226
[#382 'return']: r#226
[#382 'struct']: r#226
[#382 'switch']: r#226
[#382 'var']: r#226
[#382 'while']: r#226
[#382 '{']: r#226
[#382 '}']: r#226
[#382 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#226
[#382 EndOfText]: r#226
[#383 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#227
[#384 ':']: s#405
[#385 ',']: s#404
[#386 ')']: r#228
[#386 ',']: r#228
[#387 ',']: s#388
[#388 '@']: s#40
[#389 '->']: s#400
[#390 ',']: r#229
[#390 '}']: r#229
[#391 ',']: r#230
[#391 '}']: r#230
[#392 '}']: s#398
[#393 '}']: r#231
[#394 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#395 ')']: r#232
[#395 ',']: r#232
[#395 ';']: r#232
[#395 '=']: r#232
[#395 '}']: r#232
[#396 ';']: r#233
[#396 '@']: r#233
[#396 'fn']: r#233
[#396 'for']: r#233
[#396 'if']: r#233
[#396 'loop']: r#233
[#396 'override']: r#233
[#396 'switch']: r#233
[#396 'var']: r#233
[#396 'while']: r#233
[#396 '{']: r#233
[#396 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#233
[#397 ',']: r#234
[#397 '}']: r#234
[#398 ';']: r#235
[#398 '@']: r#235
[#398 'alias']: r#235
[#398 'const']: r#235
[#398 'const_assert']: r#235
[#398 'fn']: r#235
[#398 'override']: r#235
[#398 'struct']: r#235
[#398 'var']: r#235
[#398 EndOfText]: r#235
[#399 '@']: r#236
[#399 '{']: r#236
[#400 '@']: s#40
[#401 ')']: r#237
[#401 ',']: r#237
[#402 ')']: r#238
[#402 ',']: r#238
[#403 ')']: r#239
[#404 ')']: r#240
[#405 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#406 '@']: s#40
[#407 'else']: s#449
[#408 '&']: r#241
[#408 '(']: r#241
[#408 '*']: r#241
[#408 ';']: r#241
[#408 '@']: r#241
[#408 '_']: r#241
[#408 'break']: r#241
[#408 'const']: r#241
[#408 'const_assert']: r#241
[#408 'continue']: r#241
[#408 'continuing']: r#241
[#408 'discard']: r#241
[#408 'else']: r#241
[#408 'for']: r#241
[#408 'if']: r#241
[#408 'let']: r#241
[#408 'loop']: r#241
[#408 'return']: r#241
[#408 'switch']: r#241
[#408 'var']: r#241
[#408 'while']: r#241
[#408 '{']: r#241
[#408 '}']: r#241
[#408 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#241
[#409 'else']: s#410
[#410 'if']: s#445
[#411 '@']: s#40
[#412 '{']: s#440
[#413 '{']: r#242
[#414 '@']: s#40
[#415 '&']: s#299
[#415 '(']: s#300
[#415 '*']: s#298
[#415 '_']: s#295
[#415 'const']: s#282
[#415 'let']: s#281
[#415 'var']: s#101
[#415 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#416 '@']: s#40
[#417 ';']: r#243
[#418 '!']: s#61
[#418 '&']: s#64
[#418 '(']: s#74
[#418 '*']: s#63
[#418 '-']: s#60
[#418 'false']: s#81
[#418 'true']: s#80
[#418 '~']: s#62
[#418 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#418 /0[fh]/]: s#85
[#418 /0[iu]?/]: s#82
[#418 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#418 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#418 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#418 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#418 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#418 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#418 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#418 /[1-9][0-9]*[fh]/]: s#86
[#418 /[1-9][0-9]*[iu]?/]: s#83
[#419 '!']: s#61
[#419 '&']: s#64
[#419 '(']: s#74
[#419 '*']: s#63
[#419 '-']: s#60
[#419 'false']: s#81
[#419 'true']: s#80
[#419 '~']: s#62
[#419 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#419 /0[fh]/]: s#85
[#419 /0[iu]?/]: s#82
[#419 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#419 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#419 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#419 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#419 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#419 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#419 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#419 /[1-9][0-9]*[fh]/]: s#86
[#419 /[1-9][0-9]*[iu]?/]: s#83
[#420 ')']: r#244
[#420 ';']: r#244
[#421 ')']: r#245
[#421 ';']: r#245
[#422 '%=']: r#213
[#422 '&=']: r#213
[#422 ')']: r#213
[#422 '*=']: r#213
[#422 '++']: r#213
[#422 '+=']: r#213
[#422 '--']: r#213
[#422 '-=']: r#213
[#422 '.']: r#213
[#422 '/=']: r#213
[#422 '=']: r#213
[#422 '[']: r#213
[#422 '^=']: r#213
[#422 '|=']: r#213
[#422 /\u200B_shift_left_assign/]: r#213
[#422 /\u200B_shift_right_assign/]: r#213
[#423 '%=']: r#246
[#423 '&=']: r#246
[#423 ')']: r#246
[#423 '*=']: r#246
[#423 '++']: r#246
[#423 '+=']: r#246
[#423 '--']: r#246
[#423 '-=']: r#246
[#423 '.']: r#246
[#423 '/=']: r#246
[#423 '=']: r#246
[#423 '[']: r#246
[#423 '^=']: r#246
[#423 '|=']: r#246
[#423 /\u200B_shift_left_assign/]: r#246
[#423 /\u200B_shift_right_assign/]: r#246
[#424 ',']: r#247
[#424 /\u200B_template_args_end/]: r#247
[#425 ',']: r#248
[#425 /\u200B_template_args_end/]: r#248
[#426 /\u200B_template_args_end/]: r#249
[#427 /\u200B_template_args_end/]: r#250
[#428 ',']: r#251
[#428 '||']: r#103
[#428 /\u200B_template_args_end/]: r#251
[#429 '&&']: r#105
[#429 ',']: r#252
[#429 /\u200B_template_args_end/]: r#252
[#430 ';']: r#253
[#431 ';']: r#254
[#432 '&']: r#255
[#432 '(']: r#255
[#432 '*']: r#255
[#432 ';']: r#255
[#432 '@']: r#255
[#432 '_']: r#255
[#432 'break']: r#255
[#432 'const']: r#255
[#432 'const_assert']: r#255
[#432 'continue']: r#255
[#432 'continuing']: r#255
[#432 'discard']: r#255
[#432 'for']: r#255
[#432 'if']: r#255
[#432 'let']: r#255
[#432 'loop']: r#255
[#432 'return']: r#255
[#432 'switch']: r#255
[#432 'var']: r#255
[#432 'while']: r#255
[#432 '{']: r#255
[#432 '}']: r#255
[#432 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#255
[#433 ')']: s#465
[#434 ';']: s#464
[#435 ';']: r#256
[#436 ';']: r#257
[#437 ';']: r#258
[#438 ';']: r#259
[#439 '{']: r#260
[#440 '&']: s#299
[#440 '(']: s#300
[#440 '*']: s#298
[#440 ';']: s#258
[#440 '@']: s#40
[#440 '_']: s#295
[#440 'break']: s#283
[#440 'const']: s#282
[#440 'const_assert']: s#35
[#440 'continue']: s#284
[#440 'discard']: s#269
[#440 'let']: s#281
[#440 'return']: s#273
[#440 'var']: s#101
[#440 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#441 '&']: r#261
[#441 '(']: r#261
[#441 '*']: r#261
[#441 ';']: r#261
[#441 '@']: r#261
[#441 '_']: r#261
[#441 'break']: r#261
[#441 'const']: r#261
[#441 'const_assert']: r#261
[#441 'continue']: r#261
[#441 'continuing']: r#261
[#441 'discard']: r#261
[#441 'for']: r#261
[#441 'if']: r#261
[#441 'let']: r#261
[#441 'loop']: r#261
[#441 'return']: r#261
[#441 'switch']: r#261
[#441 'var']: r#261
[#441 'while']: r#261
[#441 '{']: r#261
[#441 '}']: r#261
[#441 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#261
[#442 '{']: s#460
[#443 '{']: r#262
[#444 '@']: s#40
[#445 '!']: s#61
[#445 '&']: s#64
[#445 '(']: s#74
[#445 '*']: s#63
[#445 '-']: s#60
[#445 'false']: s#81
[#445 'true']: s#80
[#445 '~']: s#62
[#445 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#445 /0[fh]/]: s#85
[#445 /0[iu]?/]: s#82
[#445 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#445 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#445 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#445 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#445 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#445 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#445 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#445 /[1-9][0-9]*[fh]/]: s#86
[#445 /[1-9][0-9]*[iu]?/]: s#83
[#446 '&']: r#263
[#446 '(']: r#263
[#446 '*']: r#263
[#446 ';']: r#263
[#446 '@']: r#263
[#446 '_']: r#263
[#446 'break']: r#263
[#446 'const']: r#263
[#446 'const_assert']: r#263
[#446 'continue']: r#263
[#446 'continuing']: r#263
[#446 'discard']: r#263
[#446 'else']: r#263
[#446 'for']: r#263
[#446 'if']: r#263
[#446 'let']: r#263
[#446 'loop']: r#263
[#446 'return']: r#263
[#446 'switch']: r#263
[#446 'var']: r#263
[#446 'while']: r#263
[#446 '{']: r#263
[#446 '}']: r#263
[#446 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#263
[#447 '&']: r#264
[#447 '(']: r#264
[#447 '*']: r#264
[#447 ';']: r#264
[#447 '@']: r#264
[#447 '_']: r#264
[#447 'break']: r#264
[#447 'const']: r#264
[#447 'const_assert']: r#264
[#447 'continue']: r#264
[#447 'continuing']: r#264
[#447 'discard']: r#264
[#447 'for']: r#264
[#447 'if']: r#264
[#447 'let']: r#264
[#447 'loop']: r#264
[#447 'return']: r#264
[#447 'switch']: r#264
[#447 'var']: r#264
[#447 'while']: r#264
[#447 '{']: r#264
[#447 '}']: r#264
[#447 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#264
[#448 '&']: r#265
[#448 '(']: r#265
[#448 '*']: r#265
[#448 ';']: r#265
[#448 '@']: r#265
[#448 '_']: r#265
[#448 'break']: r#265
[#448 'const']: r#265
[#448 'const_assert']: r#265
[#448 'continue']: r#265
[#448 'continuing']: r#265
[#448 'discard']: r#265
[#448 'for']: r#265
[#448 'if']: r#265
[#448 'let']: r#265
[#448 'loop']: r#265
[#448 'return']: r#265
[#448 'switch']: r#265
[#448 'var']: r#265
[#448 'while']: r#265
[#448 '{']: r#265
[#448 '}']: r#265
[#448 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#265
[#449 '@']: s#40
[#450 '&']: r#266
[#450 '(']: r#266
[#450 '*']: r#266
[#450 ';']: r#266
[#450 '@']: r#266
[#450 '_']: r#266
[#450 'break']: r#266
[#450 'const']: r#266
[#450 'const_assert']: r#266
[#450 'continue']: r#266
[#450 'continuing']: r#266
[#450 'discard']: r#266
[#450 'else']: r#266
[#450 'for']: r#266
[#450 'if']: r#266
[#450 'let']: r#266
[#450 'loop']: r#266
[#450 'return']: r#266
[#450 'switch']: r#266
[#450 'var']: r#266
[#450 'while']: r#266
[#450 '{']: r#266
[#450 '}']: r#266
[#450 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#266
[#451 ')']: r#267
[#451 ',']: r#267
[#452 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#453 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#268
[#454 '@']: s#40
[#455 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#269
[#456 '@']: r#270
[#456 '{']: r#270
[#457 '&']: r#271
[#457 '(']: r#271
[#457 '*']: r#271
[#457 ';']: r#271
[#457 '@']: r#271
[#457 '_']: r#271
[#457 'break']: r#271
[#457 'const']: r#271
[#457 'const_assert']: r#271
[#457 'continue']: r#271
[#457 'continuing']: r#271
[#457 'discard']: r#271
[#457 'for']: r#271
[#457 'if']: r#271
[#457 'let']: r#271
[#457 'loop']: r#271
[#457 'return']: r#271
[#457 'switch']: r#271
[#457 'var']: r#271
[#457 'while']: r#271
[#457 '{']: r#271
[#457 '}']: r#271
[#457 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#271
[#458 '@']: s#40
[#459 '{']: r#272
[#460 'case']: s#478
[#460 'default']: s#479
[#461 'continuing']: s#472
[#462 'continuing']: r#273
[#462 '}']: r#273
[#463 '&']: s#299
[#463 '(']: s#300
[#463 '*']: s#298
[#463 ';']: s#258
[#463 '@']: s#40
[#463 '_']: s#295
[#463 'break']: s#283
[#463 'const']: s#282
[#463 'const_assert']: s#35
[#463 'continue']: s#284
[#463 'discard']: s#269
[#463 'let']: s#281
[#463 'return']: s#273
[#463 'var']: s#101
[#463 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#464 '!']: s#61
[#464 '&']: s#64
[#464 '(']: s#74
[#464 '*']: s#63
[#464 '-']: s#60
[#464 'false']: s#81
[#464 'true']: s#80
[#464 '~']: s#62
[#464 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#464 /0[fh]/]: s#85
[#464 /0[iu]?/]: s#82
[#464 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#464 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#464 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#464 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#464 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#464 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#464 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#464 /[1-9][0-9]*[fh]/]: s#86
[#464 /[1-9][0-9]*[iu]?/]: s#83
[#465 '@']: s#40
[#466 '&']: r#274
[#466 '(']: r#274
[#466 '*']: r#274
[#466 ';']: r#274
[#466 '@']: r#274
[#466 '_']: r#274
[#466 'break']: r#274
[#466 'const']: r#274
[#466 'const_assert']: r#274
[#466 'continue']: r#274
[#466 'continuing']: r#274
[#466 'discard']: r#274
[#466 'for']: r#274
[#466 'if']: r#274
[#466 'let']: r#274
[#466 'loop']: r#274
[#466 'return']: r#274
[#466 'switch']: r#274
[#466 'var']: r#274
[#466 'while']: r#274
[#466 '{']: r#274
[#466 '}']: r#274
[#466 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#274
[#467 ';']: s#494
[#468 ';']: r#275
[#469 'continuing']: r#276
[#469 '}']: r#276
[#470 '}']: s#493
[#471 '}']: r#277
[#472 '@']: s#40
[#473 '}']: s#488
[#474 '}']: r#278
[#475 'case']: s#478
[#475 'default']: s#479
[#476 'case']: r#279
[#476 'default']: r#279
[#476 '}']: r#279
[#477 'case']: r#280
[#477 'default']: r#280
[#477 '}']: r#280
[#478 '!']: s#61
[#478 '&']: s#64
[#478 '(']: s#74
[#478 '*']: s#63
[#478 '-']: s#60
[#478 'default']: s#485
[#478 'false']: s#81
[#478 'true']: s#80
[#478 '~']: s#62
[#478 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#478 /0[fh]/]: s#85
[#478 /0[iu]?/]: s#82
[#478 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#478 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#478 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#478 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#478 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#478 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#478 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#478 /[1-9][0-9]*[fh]/]: s#86
[#478 /[1-9][0-9]*[iu]?/]: s#83
[#479 ':']: s#482
[#480 '&']: r#281
[#480 '(']: r#281
[#480 '*']: r#281
[#480 ';']: r#281
[#480 '@']: r#281
[#480 '_']: r#281
[#480 'break']: r#281
[#480 'const']: r#281
[#480 'const_assert']: r#281
[#480 'continue']: r#281
[#480 'continuing']: r#281
[#480 'discard']: r#281
[#480 'else']: r#281
[#480 'for']: r#281
[#480 'if']: r#281
[#480 'let']: r#281
[#480 'loop']: r#281
[#480 'return']: r#281
[#480 'switch']: r#281
[#480 'var']: r#281
[#480 'while']: r#281
[#480 '{']: r#281
[#480 '}']: r#281
[#480 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#281
[#481 '@']: s#40
[#482 '@']: r#282
[#482 '{']: r#282
[#483 ':']: s#506
[#484 ',']: s#504
[#485 ',']: r#283
[#485 ':']: r#283
[#485 '@']: r#283
[#485 '{']: r#283
[#486 ',']: r#284
[#486 ':']: r#284
[#486 '@']: r#284
[#486 '{']: r#284
[#487 '}']: r#285
[#488 '&']: r#286
[#488 '(']: r#286
[#488 '*']: r#286
[#488 ';']: r#286
[#488 '@']: r#286
[#488 '_']: r#286
[#488 'break']: r#286
[#488 'const']: r#286
[#488 'const_assert']: r#286
[#488 'continue']: r#286
[#488 'continuing']: r#286
[#488 'discard']: r#286
[#488 'for']: r#286
[#488 'if']: r#286
[#488 'let']: r#286
[#488 'loop']: r#286
[#488 'return']: r#286
[#488 'switch']: r#286
[#488 'var']: r#286
[#488 'while']: r#286
[#488 '{']: r#286
[#488 '}']: r#286
[#488 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#286
[#489 '}']: r#287
[#490 '{']: s#500
[#491 '{']: r#288
[#492 '@']: s#40
[#493 '&']: r#289
[#493 '(']: r#289
[#493 '*']: r#289
[#493 ';']: r#289
[#493 '@']: r#289
[#493 '_']: r#289
[#493 'break']: r#289
[#493 'const']: r#289
[#493 'const_assert']: r#289
[#493 'continue']: r#289
[#493 'continuing']: r#289
[#493 'discard']: r#289
[#493 'for']: r#289
[#493 'if']: r#289
[#493 'let']: r#289
[#493 'loop']: r#289
[#493 'return']: r#289
[#493 'switch']: r#289
[#493 'var']: r#289
[#493 'while']: r#289
[#493 '{']: r#289
[#493 '}']: r#289
[#493 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#289
[#494 '&']: s#299
[#494 '(']: s#300
[#494 '*']: s#298
[#494 '_']: s#295
[#494 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#495 ')']: r#290
[#496 ')']: r#291
[#497 ')']: r#292
[#498 ')']: r#293
[#499 '{']: r#294
[#500 '&']: s#299
[#500 '(']: s#300
[#500 '*']: s#298
[#500 ';']: s#258
[#500 '@']: s#40
[#500 '_']: s#295
[#500 'break']: s#283
[#500 'const']: s#282
[#500 'const_assert']: s#35
[#500 'continue']: s#284
[#500 'discard']: s#269
[#500 'let']: s#281
[#500 'return']: s#273
[#500 'var']: s#101
[#500 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#501 ',']: s#512
[#502 ',']: r#295
[#502 ':']: r#295
[#502 '@']: r#295
[#502 '{']: r#295
[#503 ',']: s#504
[#504 '!']: s#61
[#504 '&']: s#64
[#504 '(']: s#74
[#504 '*']: s#63
[#504 '-']: s#60
[#504 'default']: s#485
[#504 'false']: s#81
[#504 'true']: s#80
[#504 '~']: s#62
[#504 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#504 /0[fh]/]: s#85
[#504 /0[iu]?/]: s#82
[#504 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#504 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#504 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#504 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#504 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#504 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#504 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#504 /[1-9][0-9]*[fh]/]: s#86
[#504 /[1-9][0-9]*[iu]?/]: s#83
[#505 '@']: s#40
[#506 '@']: r#296
[#506 '{']: r#296
[#507 'case']: r#297
[#507 'default']: r#297
[#507 '}']: r#297
[#508 'case']: r#298
[#508 'default']: r#298
[#508 '}']: r#298
[#509 ',']: r#299
[#509 ':']: r#299
[#509 '@']: r#299
[#509 '{']: r#299
[#510 ',']: r#300
[#510 ':']: r#300
[#510 '@']: r#300
[#510 '{']: r#300
[#511 ':']: r#301
[#511 '@']: r#301
[#511 '{']: r#301
[#512 ':']: r#302
[#512 '@']: r#302
[#512 '{']: r#302
[#513 'break']: s#519
[#514 'break']: r#303
[#514 '}']: r#303
[#515 '&']: s#299
[#515 '(']: s#300
[#515 '*']: s#298
[#515 ';']: s#258
[#515 '@']: s#40
[#515 '_']: s#295
[#515 'break']: s#283
[#515 'const']: s#282
[#515 'const_assert']: s#35
[#515 'continue']: s#284
[#515 'discard']: s#269
[#515 'let']: s#281
[#515 'return']: s#273
[#515 'var']: s#101
[#515 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#516 'break']: r#304
[#516 '}']: r#304
[#517 '}']: s#521
[#518 '}']: r#305
[#519 'if']: s#520
[#520 '!']: s#61
[#520 '&']: s#64
[#520 '(']: s#74
[#520 '*']: s#63
[#520 '-']: s#60
[#520 'false']: s#81
[#520 'true']: s#80
[#520 '~']: s#62
[#520 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#43
[#520 /0[fh]/]: s#85
[#520 /0[iu]?/]: s#82
[#520 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#90
[#520 /0[xX][0-9a-fA-F]+[iu]?/]: s#84
[#520 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#92
[#520 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#520 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#87
[#520 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#89
[#520 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#520 /[1-9][0-9]*[fh]/]: s#86
[#520 /[1-9][0-9]*[iu]?/]: s#83
[#521 '}']: r#306
[#522 ';']: s#523
[#523 '}']: r#307

=Goto:
[#0 diagnostic_directive]: #5
[#0 enable_directive]: #6
[#0 global_directive]: #4
[#0 requires_directive]: #7
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attribute]: #39
[#2 const_assert_statement]: #28
[#2 function_decl]: #27
[#2 function_decl/0.0]: #34
[#2 function_decl/0.0/0]: #38
[#2 global_constant_decl]: #24
[#2 global_constant_decl/1.0]: #31
[#2 global_constant_decl/1.0/0]: #37
[#2 global_decl]: #21
[#2 global_variable_decl]: #23
[#2 global_variable_decl/0.0]: #29
[#2 global_variable_decl/0.0/0]: #36
[#2 struct_decl]: #26
[#2 translation_unit/0.1]: #19
[#2 translation_unit/0.1/0]: #20
[#2 type_alias_decl]: #25
[#4 diagnostic_directive]: #5
[#4 enable_directive]: #6
[#4 global_directive]: #4
[#4 requires_directive]: #7
[#4 translation_unit/0.0/0]: #18
[#8 diagnostic_control]: #16
[#9 enable_extension_name]: #14
[#10 software_extension_list]: #11
[#10 software_extension_name]: #12
[#12 software_extension_list/0.1]: #114
[#12 software_extension_list/0.1/0]: #115
[#12 software_extension_list/0.1/0/0.0]: #116
[#17 severity_control_name]: #107
[#21 attribute]: #39
[#21 const_assert_statement]: #28
[#21 function_decl]: #27
[#21 function_decl/0.0]: #34
[#21 function_decl/0.0/0]: #38
[#21 global_constant_decl]: #24
[#21 global_constant_decl/1.0]: #31
[#21 global_constant_decl/1.0/0]: #37
[#21 global_decl]: #21
[#21 global_variable_decl]: #23
[#21 global_variable_decl/0.0]: #29
[#21 global_variable_decl/0.0/0]: #36
[#21 struct_decl]: #26
[#21 translation_unit/0.1/0]: #106
[#21 type_alias_decl]: #25
[#29 variable_decl]: #100
[#30 ident]: #99
[#30 ident_pattern_token]: #75
[#30 optionally_typed_ident]: #98
[#32 ident]: #96
[#32 ident_pattern_token]: #75
[#33 ident]: #95
[#33 ident_pattern_token]: #75
[#34 function_header]: #93
[#35 additive_expression]: #56
[#35 binary_and_expression]: #53
[#35 binary_or_expression]: #54
[#35 binary_xor_expression]: #55
[#35 bitwise_expression]: #51
[#35 bool_literal]: #73
[#35 call_expression]: #67
[#35 decimal_float_literal]: #78
[#35 decimal_int_literal]: #76
[#35 expression]: #47
[#35 float_literal]: #72
[#35 hex_float_literal]: #79
[#35 hex_int_literal]: #77
[#35 ident]: #70
[#35 ident_pattern_token]: #75
[#35 int_literal]: #71
[#35 literal]: #68
[#35 multiplicative_expression]: #58
[#35 paren_expression]: #69
[#35 primary_expression]: #65
[#35 relational_expression]: #48
[#35 shift_expression]: #52
[#35 short_circuit_and_expression]: #50
[#35 short_circuit_or_expression]: #49
[#35 singular_expression]: #59
[#35 template_elaborated_ident]: #66
[#35 unary_expression]: #57
[#39 attribute]: #39
[#39 function_decl/0.0/0]: #46
[#39 global_constant_decl/1.0/0]: #45
[#39 global_variable_decl/0.0/0]: #44
[#40 ident_pattern_token]: #41
[#41 argument_expression_list]: #182
[#41 attribute/0.2]: #181
[#42 diagnostic_control]: #180
[#52 _greater_than]: #169
[#52 _greater_than_equal]: #171
[#52 _less_than]: #168
[#52 _less_than_equal]: #170
[#56 additive_operator]: #162
[#57 _shift_left]: #158
[#57 _shift_right]: #159
[#58 multiplicative_operator]: #154
[#60 bool_literal]: #73
[#60 call_expression]: #67
[#60 decimal_float_literal]: #78
[#60 decimal_int_literal]: #76
[#60 float_literal]: #72
[#60 hex_float_literal]: #79
[#60 hex_int_literal]: #77
[#60 ident]: #70
[#60 ident_pattern_token]: #75
[#60 int_literal]: #71
[#60 literal]: #68
[#60 paren_expression]: #69
[#60 primary_expression]: #65
[#60 singular_expression]: #59
[#60 template_elaborated_ident]: #66
[#60 unary_expression]: #153
[#61 bool_literal]: #73
[#61 call_expression]: #67
[#61 decimal_float_literal]: #78
[#61 decimal_int_literal]: #76
[#61 float_literal]: #72
[#61 hex_float_literal]: #79
[#61 hex_int_literal]: #77
[#61 ident]: #70
[#61 ident_pattern_token]: #75
[#61 int_literal]: #71
[#61 literal]: #68
[#61 paren_expression]: #69
[#61 primary_expression]: #65
[#61 singular_expression]: #59
[#61 template_elaborated_ident]: #66
[#61 unary_expression]: #152
[#62 bool_literal]: #73
[#62 call_expression]: #67
[#62 decimal_float_literal]: #78
[#62 decimal_int_literal]: #76
[#62 float_literal]: #72
[#62 hex_float_literal]: #79
[#62 hex_int_literal]: #77
[#62 ident]: #70
[#62 ident_pattern_token]: #75
[#62 int_literal]: #71
[#62 literal]: #68
[#62 paren_expression]: #69
[#62 primary_expression]: #65
[#62 singular_expression]: #59
[#62 template_elaborated_ident]: #66
[#62 unary_expression]: #151
[#63 bool_literal]: #73
[#63 call_expression]: #67
[#63 decimal_float_literal]: #78
[#63 decimal_int_literal]: #76
[#63 float_literal]: #72
[#63 hex_float_literal]: #79
[#63 hex_int_literal]: #77
[#63 ident]: #70
[#63 ident_pattern_token]: #75
[#63 int_literal]: #71
[#63 literal]: #68
[#63 paren_expression]: #69
[#63 primary_expression]: #65
[#63 singular_expression]: #59
[#63 template_elaborated_ident]: #66
[#63 unary_expression]: #150
[#64 bool_literal]: #73
[#64 call_expression]: #67
[#64 decimal_float_literal]: #78
[#64 decimal_int_literal]: #76
[#64 float_literal]: #72
[#64 hex_float_literal]: #79
[#64 hex_int_literal]: #77
[#64 ident]: #70
[#64 ident_pattern_token]: #75
[#64 int_literal]: #71
[#64 literal]: #68
[#64 paren_expression]: #69
[#64 primary_expression]: #65
[#64 singular_expression]: #59
[#64 template_elaborated_ident]: #66
[#64 unary_expression]: #149
[#65 component_or_swizzle_specifier]: #146
[#65 singular_expression/0.1]: #145
[#66 argument_expression_list]: #143
[#70 _disambiguate_template]: #142
[#74 additive_expression]: #56
[#74 binary_and_expression]: #53
[#74 binary_or_expression]: #54
[#74 binary_xor_expression]: #55
[#74 bitwise_expression]: #51
[#74 bool_literal]: #73
[#74 call_expression]: #67
[#74 decimal_float_literal]: #78
[#74 decimal_int_literal]: #76
[#74 expression]: #141
[#74 float_literal]: #72
[#74 hex_float_literal]: #79
[#74 hex_int_literal]: #77
[#74 ident]: #70
[#74 ident_pattern_token]: #75
[#74 int_literal]: #71
[#74 literal]: #68
[#74 multiplicative_expression]: #58
[#74 paren_expression]: #69
[#74 primary_expression]: #65
[#74 relational_expression]: #48
[#74 shift_expression]: #52
[#74 short_circuit_and_expression]: #50
[#74 short_circuit_or_expression]: #49
[#74 singular_expression]: #59
[#74 template_elaborated_ident]: #66
[#74 unary_expression]: #57
[#75 _disambiguate_template]: #140
[#93 attribute]: #139
[#93 compound_statement]: #136
[#93 compound_statement/0.0]: #137
[#93 compound_statement/0.0/0]: #138
[#94 ident]: #135
[#94 ident_pattern_token]: #75
[#95 struct_body_decl]: #133
[#97 ident]: #99
[#97 ident_pattern_token]: #75
[#97 optionally_typed_ident]: #131
[#99 optionally_typed_ident/0.1]: #128
[#100 global_variable_decl/0.2]: #126
[#101 _disambiguate_template]: #124
[#114 software_extension_list/0.2]: #121
[#116 software_extension_list/0.1/0]: #120
[#116 software_extension_list/0.1/0/0.0]: #116
[#117 software_extension_name]: #119
[#123 diagnostic_rule_name]: #236
[#124 _template_args_start]: #217
[#124 template_list]: #235
[#124 variable_decl/0.2]: #234
[#127 additive_expression]: #56
[#127 binary_and_expression]: #53
[#127 binary_or_expression]: #54
[#127 binary_xor_expression]: #55
[#127 bitwise_expression]: #51
[#127 bool_literal]: #73
[#127 call_expression]: #67
[#127 decimal_float_literal]: #78
[#127 decimal_int_literal]: #76
[#127 expression]: #233
[#127 float_literal]: #72
[#127 hex_float_literal]: #79
[#127 hex_int_literal]: #77
[#127 ident]: #70
[#127 ident_pattern_token]: #75
[#127 int_literal]: #71
[#127 literal]: #68
[#127 multiplicative_expression]: #58
[#127 paren_expression]: #69
[#127 primary_expression]: #65
[#127 relational_expression]: #48
[#127 shift_expression]: #52
[#127 short_circuit_and_expression]: #50
[#127 short_circuit_or_expression]: #49
[#127 singular_expression]: #59
[#127 template_elaborated_ident]: #66
[#127 unary_expression]: #57
[#129 ident]: #228
[#129 ident_pattern_token]: #75
[#129 type_specifier]: #232
[#130 additive_expression]: #56
[#130 binary_and_expression]: #53
[#130 binary_or_expression]: #54
[#130 binary_xor_expression]: #55
[#130 bitwise_expression]: #51
[#130 bool_literal]: #73
[#130 call_expression]: #67
[#130 decimal_float_literal]: #78
[#130 decimal_int_literal]: #76
[#130 expression]: #231
[#130 float_literal]: #72
[#130 hex_float_literal]: #79
[#130 hex_int_literal]: #77
[#130 ident]: #70
[#130 ident_pattern_token]: #75
[#130 int_literal]: #71
[#130 literal]: #68
[#130 multiplicative_expression]: #58
[#130 paren_expression]: #69
[#130 primary_expression]: #65
[#130 relational_expression]: #48
[#130 shift_expression]: #52
[#130 short_circuit_and_expression]: #50
[#130 short_circuit_or_expression]: #49
[#130 singular_expression]: #59
[#130 template_elaborated_ident]: #66
[#130 unary_expression]: #57
[#131 global_constant_decl/1.3]: #229
[#132 ident]: #228
[#132 ident_pattern_token]: #75
[#132 type_specifier]: #227
[#134 attribute]: #226
[#134 struct_member]: #223
[#134 struct_member/0.0]: #224
[#134 struct_member/0.0/0]: #225
[#139 attribute]: #139
[#139 compound_statement/0.0/0]: #220
[#142 _template_args_start]: #217
[#142 template_elaborated_ident/0.2]: #215
[#142 template_list]: #216
[#144 additive_expression]: #56
[#144 argument_expression_list/0.1]: #212
[#144 binary_and_expression]: #53
[#144 binary_or_expression]: #54
[#144 binary_xor_expression]: #55
[#144 bitwise_expression]: #51
[#144 bool_literal]: #73
[#144 call_expression]: #67
[#144 decimal_float_literal]: #78
[#144 decimal_int_literal]: #76
[#144 expression]: #214
[#144 expression_comma_list]: #213
[#144 float_literal]: #72
[#144 hex_float_literal]: #79
[#144 hex_int_literal]: #77
[#144 ident]: #70
[#144 ident_pattern_token]: #75
[#144 int_literal]: #71
[#144 literal]: #68
[#144 multiplicative_expression]: #58
[#144 paren_expression]: #69
[#144 primary_expression]: #65
[#144 relational_expression]: #48
[#144 shift_expression]: #52
[#144 short_circuit_and_expression]: #50
[#144 short_circuit_or_expression]: #49
[#144 singular_expression]: #59
[#144 template_elaborated_ident]: #66
[#144 unary_expression]: #57
[#147 additive_expression]: #56
[#147 binary_and_expression]: #53
[#147 binary_or_expression]: #54
[#147 binary_xor_expression]: #55
[#147 bitwise_expression]: #51
[#147 bool_literal]: #73
[#147 call_expression]: #67
[#147 decimal_float_literal]: #78
[#147 decimal_int_literal]: #76
[#147 expression]: #211
[#147 float_literal]: #72
[#147 hex_float_literal]: #79
[#147 hex_int_literal]: #77
[#147 ident]: #70
[#147 ident_pattern_token]: #75
[#147 int_literal]: #71
[#147 literal]: #68
[#147 multiplicative_expression]: #58
[#147 paren_expression]: #69
[#147 primary_expression]: #65
[#147 relational_expression]: #48
[#147 shift_expression]: #52
[#147 short_circuit_and_expression]: #50
[#147 short_circuit_or_expression]: #49
[#147 singular_expression]: #59
[#147 template_elaborated_ident]: #66
[#147 unary_expression]: #57
[#148 member_ident]: #200
[#148 swizzle_name]: #201
[#154 bool_literal]: #73
[#154 call_expression]: #67
[#154 decimal_float_literal]: #78
[#154 decimal_int_literal]: #76
[#154 float_literal]: #72
[#154 hex_float_literal]: #79
[#154 hex_int_literal]: #77
[#154 ident]: #70
[#154 ident_pattern_token]: #75
[#154 int_literal]: #71
[#154 literal]: #68
[#154 paren_expression]: #69
[#154 primary_expression]: #65
[#154 singular_expression]: #59
[#154 template_elaborated_ident]: #66
[#154 unary_expression]: #199
[#158 bool_literal]: #73
[#158 call_expression]: #67
[#158 decimal_float_literal]: #78
[#158 decimal_int_literal]: #76
[#158 float_literal]: #72
[#158 hex_float_literal]: #79
[#158 hex_int_literal]: #77
[#158 ident]: #70
[#158 ident_pattern_token]: #75
[#158 int_literal]: #71
[#158 literal]: #68
[#158 paren_expression]: #69
[#158 primary_expression]: #65
[#158 singular_expression]: #59
[#158 template_elaborated_ident]: #66
[#158 unary_expression]: #198
[#159 bool_literal]: #73
[#159 call_expression]: #67
[#159 decimal_float_literal]: #78
[#159 decimal_int_literal]: #76
[#159 float_literal]: #72
[#159 hex_float_literal]: #79
[#159 hex_int_literal]: #77
[#159 ident]: #70
[#159 ident_pattern_token]: #75
[#159 int_literal]: #71
[#159 literal]: #68
[#159 paren_expression]: #69
[#159 primary_expression]: #65
[#159 singular_expression]: #59
[#159 template_elaborated_ident]: #66
[#159 unary_expression]: #197
[#162 bool_literal]: #73
[#162 call_expression]: #67
[#162 decimal_float_literal]: #78
[#162 decimal_int_literal]: #76
[#162 float_literal]: #72
[#162 hex_float_literal]: #79
[#162 hex_int_literal]: #77
[#162 ident]: #70
[#162 ident_pattern_token]: #75
[#162 int_literal]: #71
[#162 literal]: #68
[#162 multiplicative_expression]: #195
[#162 paren_expression]: #69
[#162 primary_expression]: #65
[#162 singular_expression]: #59
[#162 template_elaborated_ident]: #66
[#162 unary_expression]: #196
[#165 bool_literal]: #73
[#165 call_expression]: #67
[#165 decimal_float_literal]: #78
[#165 decimal_int_literal]: #76
[#165 float_literal]: #72
[#165 hex_float_literal]: #79
[#165 hex_int_literal]: #77
[#165 ident]: #70
[#165 ident_pattern_token]: #75
[#165 int_literal]: #71
[#165 literal]: #68
[#165 paren_expression]: #69
[#165 primary_expression]: #65
[#165 singular_expression]: #59
[#165 template_elaborated_ident]: #66
[#165 unary_expression]: #194
[#166 bool_literal]: #73
[#166 call_expression]: #67
[#166 decimal_float_literal]: #78
[#166 decimal_int_literal]: #76
[#166 float_literal]: #72
[#166 hex_float_literal]: #79
[#166 hex_int_literal]: #77
[#166 ident]: #70
[#166 ident_pattern_token]: #75
[#166 int_literal]: #71
[#166 literal]: #68
[#166 paren_expression]: #69
[#166 primary_expression]: #65
[#166 singular_expression]: #59
[#166 template_elaborated_ident]: #66
[#166 unary_expression]: #193
[#167 bool_literal]: #73
[#167 call_expression]: #67
[#167 decimal_float_literal]: #78
[#167 decimal_int_literal]: #76
[#167 float_literal]: #72
[#167 hex_float_literal]: #79
[#167 hex_int_literal]: #77
[#167 ident]: #70
[#167 ident_pattern_token]: #75
[#167 int_literal]: #71
[#167 literal]: #68
[#167 paren_expression]: #69
[#167 primary_expression]: #65
[#167 singular_expression]: #59
[#167 template_elaborated_ident]: #66
[#167 unary_expression]: #192
[#168 additive_expression]: #56
[#168 bool_literal]: #73
[#168 call_expression]: #67
[#168 decimal_float_literal]: #78
[#168 decimal_int_literal]: #76
[#168 float_literal]: #72
[#168 hex_float_literal]: #79
[#168 hex_int_literal]: #77
[#168 ident]: #70
[#168 ident_pattern_token]: #75
[#168 int_literal]: #71
[#168 literal]: #68
[#168 multiplicative_expression]: #58
[#168 paren_expression]: #69
[#168 primary_expression]: #65
[#168 shift_expression]: #191
[#168 singular_expression]: #59
[#168 template_elaborated_ident]: #66
[#168 unary_expression]: #184
[#169 additive_expression]: #56
[#169 bool_literal]: #73
[#169 call_expression]: #67
[#169 decimal_float_literal]: #78
[#169 decimal_int_literal]: #76
[#169 float_literal]: #72
[#169 hex_float_literal]: #79
[#169 hex_int_literal]: #77
[#169 ident]: #70
[#169 ident_pattern_token]: #75
[#169 int_literal]: #71
[#169 literal]: #68
[#169 multiplicative_expression]: #58
[#169 paren_expression]: #69
[#169 primary_expression]: #65
[#169 shift_expression]: #190
[#169 singular_expression]: #59
[#169 template_elaborated_ident]: #66
[#169 unary_expression]: #184
[#170 additive_expression]: #56
[#170 bool_literal]: #73
[#170 call_expression]: #67
[#170 decimal_float_literal]: #78
[#170 decimal_int_literal]: #76
[#170 float_literal]: #72
[#170 hex_float_literal]: #79
[#170 hex_int_literal]: #77
[#170 ident]: #70
[#170 ident_pattern_token]: #75
[#170 int_literal]: #71
[#170 literal]: #68
[#170 multiplicative_expression]: #58
[#170 paren_expression]: #69
[#170 primary_expression]: #65
[#170 shift_expression]: #189
[#170 singular_expression]: #59
[#170 template_elaborated_ident]: #66
[#170 unary_expression]: #184
[#171 additive_expression]: #56
[#171 bool_literal]: #73
[#171 call_expression]: #67
[#171 decimal_float_literal]: #78
[#171 decimal_int_literal]: #76
[#171 float_literal]: #72
[#171 hex_float_literal]: #79
[#171 hex_int_literal]: #77
[#171 ident]: #70
[#171 ident_pattern_token]: #75
[#171 int_literal]: #71
[#171 literal]: #68
[#171 multiplicative_expression]: #58
[#171 paren_expression]: #69
[#171 primary_expression]: #65
[#171 shift_expression]: #188
[#171 singular_expression]: #59
[#171 template_elaborated_ident]: #66
[#171 unary_expression]: #184
[#172 additive_expression]: #56
[#172 bool_literal]: #73
[#172 call_expression]: #67
[#172 decimal_float_literal]: #78
[#172 decimal_int_literal]: #76
[#172 float_literal]: #72
[#172 hex_float_literal]: #79
[#172 hex_int_literal]: #77
[#172 ident]: #70
[#172 ident_pattern_token]: #75
[#172 int_literal]: #71
[#172 literal]: #68
[#172 multiplicative_expression]: #58
[#172 paren_expression]: #69
[#172 primary_expression]: #65
[#172 shift_expression]: #187
[#172 singular_expression]: #59
[#172 template_elaborated_ident]: #66
[#172 unary_expression]: #184
[#173 additive_expression]: #56
[#173 bool_literal]: #73
[#173 call_expression]: #67
[#173 decimal_float_literal]: #78
[#173 decimal_int_literal]: #76
[#173 float_literal]: #72
[#173 hex_float_literal]: #79
[#173 hex_int_literal]: #77
[#173 ident]: #70
[#173 ident_pattern_token]: #75
[#173 int_literal]: #71
[#173 literal]: #68
[#173 multiplicative_expression]: #58
[#173 paren_expression]: #69
[#173 primary_expression]: #65
[#173 shift_expression]: #186
[#173 singular_expression]: #59
[#173 template_elaborated_ident]: #66
[#173 unary_expression]: #184
[#178 additive_expression]: #56
[#178 bool_literal]: #73
[#178 call_expression]: #67
[#178 decimal_float_literal]: #78
[#178 decimal_int_literal]: #76
[#178 float_literal]: #72
[#178 hex_float_literal]: #79
[#178 hex_int_literal]: #77
[#178 ident]: #70
[#178 ident_pattern_token]: #75
[#178 int_literal]: #71
[#178 literal]: #68
[#178 multiplicative_expression]: #58
[#178 paren_expression]: #69
[#178 primary_expression]: #65
[#178 relational_expression]: #185
[#178 shift_expression]: #52
[#178 singular_expression]: #59
[#178 template_elaborated_ident]: #66
[#178 unary_expression]: #184
[#179 additive_expression]: #56
[#179 bool_literal]: #73
[#179 call_expression]: #67
[#179 decimal_float_literal]: #78
[#179 decimal_int_literal]: #76
[#179 float_literal]: #72
[#179 hex_float_literal]: #79
[#179 hex_int_literal]: #77
[#179 ident]: #70
[#179 ident_pattern_token]: #75
[#179 int_literal]: #71
[#179 literal]: #68
[#179 multiplicative_expression]: #58
[#179 paren_expression]: #69
[#179 primary_expression]: #65
[#179 relational_expression]: #183
[#179 shift_expression]: #52
[#179 singular_expression]: #59
[#179 template_elaborated_ident]: #66
[#179 unary_expression]: #184
[#184 _shift_left]: #158
[#184 _shift_right]: #159
[#195 multiplicative_operator]: #154
[#200 component_or_swizzle_specifier]: #316
[#200 component_or_swizzle_specifier/1.2]: #315
[#201 component_or_swizzle_specifier]: #314
[#201 component_or_swizzle_specifier/2.2]: #313
[#214 expression_comma_list/0.1]: #307
[#214 expression_comma_list/0.1/0]: #308
[#214 expression_comma_list/0.1/0/0.0]: #309
[#217 additive_expression]: #56
[#217 binary_and_expression]: #53
[#217 binary_or_expression]: #54
[#217 binary_xor_expression]: #55
[#217 bitwise_expression]: #306
[#217 bool_literal]: #73
[#217 call_expression]: #67
[#217 decimal_float_literal]: #78
[#217 decimal_int_literal]: #76
[#217 float_literal]: #72
[#217 hex_float_literal]: #79
[#217 hex_int_literal]: #77
[#217 ident]: #70
[#217 ident_pattern_token]: #75
[#217 int_literal]: #71
[#217 literal]: #68
[#217 multiplicative_expression]: #58
[#217 paren_expression]: #69
[#217 primary_expression]: #65
[#217 relational_expression]: #303
[#217 shift_expression]: #52
[#217 short_circuit_and_expression]: #305
[#217 short_circuit_or_expression]: #304
[#217 singular_expression]: #59
[#217 template_arg_comma_list]: #301
[#217 template_arg_expression]: #302
[#217 template_elaborated_ident]: #66
[#217 unary_expression]: #57
[#221 assignment_statement]: #285
[#221 attribute]: #296
[#221 break_statement]: #267
[#221 compound_statement]: #271
[#221 compound_statement/0.0]: #137
[#221 compound_statement/0.0/0]: #138
[#221 compound_statement/0.2]: #255
[#221 compound_statement/0.2/0]: #256
[#221 const_assert_statement]: #272
[#221 continue_statement]: #268
[#221 core_lhs_expression]: #297
[#221 decrement_statement]: #287
[#221 for_statement]: #263
[#221 for_statement/0.0]: #277
[#221 for_statement/0.0/0]: #291
[#221 func_call_statement]: #265
[#221 ident]: #293
[#221 ident_pattern_token]: #75
[#221 if_statement]: #260
[#221 if_statement/0.0]: #274
[#221 if_statement/0.0/0]: #288
[#221 increment_statement]: #286
[#221 lhs_expression]: #294
[#221 loop_statement]: #262
[#221 loop_statement/0.0]: #276
[#221 loop_statement/0.0/0]: #290
[#221 return_statement]: #259
[#221 statement]: #257
[#221 switch_statement]: #261
[#221 switch_statement/0.0]: #275
[#221 switch_statement/0.0/0]: #289
[#221 template_elaborated_ident]: #279
[#221 variable_decl]: #280
[#221 variable_statement]: #266
[#221 variable_updating_statement]: #270
[#221 while_statement]: #264
[#221 while_statement/0.0]: #278
[#221 while_statement/0.0/0]: #292
[#222 attribute]: #254
[#222 function_header/0.3]: #249
[#222 param]: #251
[#222 param/0.0]: #252
[#222 param/0.0/0]: #253
[#222 param_list]: #250
[#223 struct_body_decl/0.2]: #245
[#223 struct_body_decl/0.2/0]: #246
[#223 struct_body_decl/0.2/0/0.0]: #247
[#224 member_ident]: #244
[#226 attribute]: #226
[#226 struct_member/0.0/0]: #243
[#228 _disambiguate_template]: #242
[#230 additive_expression]: #56
[#230 binary_and_expression]: #53
[#230 binary_or_expression]: #54
[#230 binary_xor_expression]: #55
[#230 bitwise_expression]: #51
[#230 bool_literal]: #73
[#230 call_expression]: #67
[#230 decimal_float_literal]: #78
[#230 decimal_int_literal]: #76
[#230 expression]: #241
[#230 float_literal]: #72
[#230 hex_float_literal]: #79
[#230 hex_int_literal]: #77
[#230 ident]: #70
[#230 ident_pattern_token]: #75
[#230 int_literal]: #71
[#230 literal]: #68
[#230 multiplicative_expression]: #58
[#230 paren_expression]: #69
[#230 primary_expression]: #65
[#230 relational_expression]: #48
[#230 shift_expression]: #52
[#230 short_circuit_and_expression]: #50
[#230 short_circuit_or_expression]: #49
[#230 singular_expression]: #59
[#230 template_elaborated_ident]: #66
[#230 unary_expression]: #57
[#234 ident]: #99
[#234 ident_pattern_token]: #75
[#234 optionally_typed_ident]: #240
[#236 diagnostic_control/0.4]: #238
[#242 _template_args_start]: #217
[#242 template_elaborated_ident/0.2]: #395
[#242 template_list]: #216
[#245 struct_body_decl/0.3]: #392
[#247 struct_body_decl/0.2/0]: #391
[#247 struct_body_decl/0.2/0/0.0]: #247
[#248 attribute]: #226
[#248 struct_member]: #390
[#248 struct_member/0.0]: #224
[#248 struct_member/0.0/0]: #225
[#251 param_list/0.1]: #385
[#251 param_list/0.1/0]: #386
[#251 param_list/0.1/0/0.0]: #387
[#252 ident]: #384
[#252 ident_pattern_token]: #75
[#254 attribute]: #254
[#254 param/0.0/0]: #383
[#257 assignment_statement]: #285
[#257 attribute]: #296
[#257 break_statement]: #267
[#257 compound_statement]: #271
[#257 compound_statement/0.0]: #137
[#257 compound_statement/0.0/0]: #138
[#257 compound_statement/0.2/0]: #381
[#257 const_assert_statement]: #272
[#257 continue_statement]: #268
[#257 core_lhs_expression]: #297
[#257 decrement_statement]: #287
[#257 for_statement]: #263
[#257 for_statement/0.0]: #277
[#257 for_statement/0.0/0]: #291
[#257 func_call_statement]: #265
[#257 ident]: #293
[#257 ident_pattern_token]: #75
[#257 if_statement]: #260
[#257 if_statement/0.0]: #274
[#257 if_statement/0.0/0]: #288
[#257 increment_statement]: #286
[#257 lhs_expression]: #294
[#257 loop_statement]: #262
[#257 loop_statement/0.0]: #276
[#257 loop_statement/0.0/0]: #290
[#257 return_statement]: #259
[#257 statement]: #257
[#257 switch_statement]: #261
[#257 switch_statement/0.0]: #275
[#257 switch_statement/0.0/0]: #289
[#257 template_elaborated_ident]: #279
[#257 variable_decl]: #280
[#257 variable_statement]: #266
[#257 variable_updating_statement]: #270
[#257 while_statement]: #264
[#257 while_statement/0.0]: #278
[#257 while_statement/0.0/0]: #292
[#273 additive_expression]: #56
[#273 binary_and_expression]: #53
[#273 binary_or_expression]: #54
[#273 binary_xor_expression]: #55
[#273 bitwise_expression]: #51
[#273 bool_literal]: #73
[#273 call_expression]: #67
[#273 decimal_float_literal]: #78
[#273 decimal_int_literal]: #76
[#273 expression]: #372
[#273 float_literal]: #72
[#273 hex_float_literal]: #79
[#273 hex_int_literal]: #77
[#273 ident]: #70
[#273 ident_pattern_token]: #75
[#273 int_literal]: #71
[#273 literal]: #68
[#273 multiplicative_expression]: #58
[#273 paren_expression]: #69
[#273 primary_expression]: #65
[#273 relational_expression]: #48
[#273 return_statement/0.1]: #371
[#273 shift_expression]: #52
[#273 short_circuit_and_expression]: #50
[#273 short_circuit_or_expression]: #49
[#273 singular_expression]: #59
[#273 template_elaborated_ident]: #66
[#273 unary_expression]: #57
[#274 if_clause]: #369
[#279 argument_expression_list]: #364
[#281 ident]: #99
[#281 ident_pattern_token]: #75
[#281 optionally_typed_ident]: #362
[#282 ident]: #99
[#282 ident_pattern_token]: #75
[#282 optionally_typed_ident]: #361
[#293 _disambiguate_template]: #360
[#294 _shift_left_assign]: #357
[#294 _shift_right_assign]: #356
[#294 assignment_statement/0.1]: #343
[#294 compound_assignment_operator]: #347
[#296 attribute]: #296
[#296 compound_statement/0.0/0]: #220
[#296 for_statement/0.0/0]: #340
[#296 if_statement/0.0/0]: #337
[#296 loop_statement/0.0/0]: #339
[#296 switch_statement/0.0/0]: #338
[#296 while_statement/0.0/0]: #341
[#297 component_or_swizzle_specifier]: #336
[#297 lhs_expression/0.1]: #335
[#298 core_lhs_expression]: #297
[#298 ident]: #332
[#298 ident_pattern_token]: #75
[#298 lhs_expression]: #334
[#299 core_lhs_expression]: #297
[#299 ident]: #332
[#299 ident_pattern_token]: #75
[#299 lhs_expression]: #333
[#300 core_lhs_expression]: #297
[#300 ident]: #332
[#300 ident_pattern_token]: #75
[#300 lhs_expression]: #331
[#301 _template_args_end]: #329
[#302 template_arg_comma_list/0.1]: #325
[#302 template_arg_comma_list/0.1/0]: #326
[#302 template_arg_comma_list/0.1/0/0.0]: #327
[#307 expression_comma_list/0.2]: #321
[#309 expression_comma_list/0.1/0]: #320
[#309 expression_comma_list/0.1/0/0.0]: #309
[#310 additive_expression]: #56
[#310 binary_and_expression]: #53
[#310 binary_or_expression]: #54
[#310 binary_xor_expression]: #55
[#310 bitwise_expression]: #51
[#310 bool_literal]: #73
[#310 call_expression]: #67
[#310 decimal_float_literal]: #78
[#310 decimal_int_literal]: #76
[#310 expression]: #319
[#310 float_literal]: #72
[#310 hex_float_literal]: #79
[#310 hex_int_literal]: #77
[#310 ident]: #70
[#310 ident_pattern_token]: #75
[#310 int_literal]: #71
[#310 literal]: #68
[#310 multiplicative_expression]: #58
[#310 paren_expression]: #69
[#310 primary_expression]: #65
[#310 relational_expression]: #48
[#310 shift_expression]: #52
[#310 short_circuit_and_expression]: #50
[#310 short_circuit_or_expression]: #49
[#310 singular_expression]: #59
[#310 template_elaborated_ident]: #66
[#310 unary_expression]: #57
[#312 component_or_swizzle_specifier]: #318
[#312 component_or_swizzle_specifier/0.3]: #317
[#323 additive_expression]: #56
[#323 bool_literal]: #73
[#323 call_expression]: #67
[#323 decimal_float_literal]: #78
[#323 decimal_int_literal]: #76
[#323 float_literal]: #72
[#323 hex_float_literal]: #79
[#323 hex_int_literal]: #77
[#323 ident]: #70
[#323 ident_pattern_token]: #75
[#323 int_literal]: #71
[#323 literal]: #68
[#323 multiplicative_expression]: #58
[#323 paren_expression]: #69
[#323 primary_expression]: #65
[#323 relational_expression]: #429
[#323 shift_expression]: #52
[#323 singular_expression]: #59
[#323 template_elaborated_ident]: #66
[#323 unary_expression]: #184
[#324 additive_expression]: #56
[#324 bool_literal]: #73
[#324 call_expression]: #67
[#324 decimal_float_literal]: #78
[#324 decimal_int_literal]: #76
[#324 float_literal]: #72
[#324 hex_float_literal]: #79
[#324 hex_int_literal]: #77
[#324 ident]: #70
[#324 ident_pattern_token]: #75
[#324 int_literal]: #71
[#324 literal]: #68
[#324 multiplicative_expression]: #58
[#324 paren_expression]: #69
[#324 primary_expression]: #65
[#324 relational_expression]: #428
[#324 shift_expression]: #52
[#324 singular_expression]: #59
[#324 template_elaborated_ident]: #66
[#324 unary_expression]: #184
[#325 template_arg_comma_list/0.2]: #426
[#327 template_arg_comma_list/0.1/0]: #425
[#327 template_arg_comma_list/0.1/0/0.0]: #327
[#328 additive_expression]: #56
[#328 binary_and_expression]: #53
[#328 binary_or_expression]: #54
[#328 binary_xor_expression]: #55
[#328 bitwise_expression]: #306
[#328 bool_literal]: #73
[#328 call_expression]: #67
[#328 decimal_float_literal]: #78
[#328 decimal_int_literal]: #76
[#328 float_literal]: #72
[#328 hex_float_literal]: #79
[#328 hex_int_literal]: #77
[#328 ident]: #70
[#328 ident_pattern_token]: #75
[#328 int_literal]: #71
[#328 literal]: #68
[#328 multiplicative_expression]: #58
[#328 paren_expression]: #69
[#328 primary_expression]: #65
[#328 relational_expression]: #303
[#328 shift_expression]: #52
[#328 short_circuit_and_expression]: #305
[#328 short_circuit_or_expression]: #304
[#328 singular_expression]: #59
[#328 template_arg_expression]: #424
[#328 template_elaborated_ident]: #66
[#328 unary_expression]: #57
[#332 _disambiguate_template]: #422
[#342 additive_expression]: #56
[#342 binary_and_expression]: #53
[#342 binary_or_expression]: #54
[#342 binary_xor_expression]: #55
[#342 bitwise_expression]: #51
[#342 bool_literal]: #73
[#342 call_expression]: #67
[#342 decimal_float_literal]: #78
[#342 decimal_int_literal]: #76
[#342 expression]: #421
[#342 float_literal]: #72
[#342 hex_float_literal]: #79
[#342 hex_int_literal]: #77
[#342 ident]: #70
[#342 ident_pattern_token]: #75
[#342 int_literal]: #71
[#342 literal]: #68
[#342 multiplicative_expression]: #58
[#342 paren_expression]: #69
[#342 primary_expression]: #65
[#342 relational_expression]: #48
[#342 shift_expression]: #52
[#342 short_circuit_and_expression]: #50
[#342 short_circuit_or_expression]: #49
[#342 singular_expression]: #59
[#342 template_elaborated_ident]: #66
[#342 unary_expression]: #57
[#343 additive_expression]: #56
[#343 binary_and_expression]: #53
[#343 binary_or_expression]: #54
[#343 binary_xor_expression]: #55
[#343 bitwise_expression]: #51
[#343 bool_literal]: #73
[#343 call_expression]: #67
[#343 decimal_float_literal]: #78
[#343 decimal_int_literal]: #76
[#343 expression]: #420
[#343 float_literal]: #72
[#343 hex_float_literal]: #79
[#343 hex_int_literal]: #77
[#343 ident]: #70
[#343 ident_pattern_token]: #75
[#343 int_literal]: #71
[#343 literal]: #68
[#343 multiplicative_expression]: #58
[#343 paren_expression]: #69
[#343 primary_expression]: #65
[#343 relational_expression]: #48
[#343 shift_expression]: #52
[#343 short_circuit_and_expression]: #50
[#343 short_circuit_or_expression]: #49
[#343 singular_expression]: #59
[#343 template_elaborated_ident]: #66
[#343 unary_expression]: #57
[#360 _template_args_start]: #217
[#360 template_elaborated_ident/0.2]: #215
[#360 template_list]: #216
[#363 additive_expression]: #56
[#363 binary_and_expression]: #53
[#363 binary_or_expression]: #54
[#363 binary_xor_expression]: #55
[#363 bitwise_expression]: #51
[#363 bool_literal]: #73
[#363 call_expression]: #67
[#363 decimal_float_literal]: #78
[#363 decimal_int_literal]: #76
[#363 expression]: #417
[#363 float_literal]: #72
[#363 hex_float_literal]: #79
[#363 hex_int_literal]: #77
[#363 ident]: #70
[#363 ident_pattern_token]: #75
[#363 int_literal]: #71
[#363 literal]: #68
[#363 multiplicative_expression]: #58
[#363 paren_expression]: #69
[#363 primary_expression]: #65
[#363 relational_expression]: #48
[#363 shift_expression]: #52
[#363 short_circuit_and_expression]: #50
[#363 short_circuit_or_expression]: #49
[#363 singular_expression]: #59
[#363 template_elaborated_ident]: #66
[#363 unary_expression]: #57
[#365 additive_expression]: #56
[#365 binary_and_expression]: #53
[#365 binary_or_expression]: #54
[#365 binary_xor_expression]: #55
[#365 bitwise_expression]: #51
[#365 bool_literal]: #73
[#365 call_expression]: #67
[#365 decimal_float_literal]: #78
[#365 decimal_int_literal]: #76
[#365 expression]: #416
[#365 float_literal]: #72
[#365 hex_float_literal]: #79
[#365 hex_int_literal]: #77
[#365 ident]: #70
[#365 ident_pattern_token]: #75
[#365 int_literal]: #71
[#365 literal]: #68
[#365 multiplicative_expression]: #58
[#365 paren_expression]: #69
[#365 primary_expression]: #65
[#365 relational_expression]: #48
[#365 shift_expression]: #52
[#365 short_circuit_and_expression]: #50
[#365 short_circuit_or_expression]: #49
[#365 singular_expression]: #59
[#365 template_elaborated_ident]: #66
[#365 unary_expression]: #57
[#367 attribute]: #414
[#367 loop_statement/0.2]: #412
[#367 loop_statement/0.2/0]: #413
[#368 additive_expression]: #56
[#368 binary_and_expression]: #53
[#368 binary_or_expression]: #54
[#368 binary_xor_expression]: #55
[#368 bitwise_expression]: #51
[#368 bool_literal]: #73
[#368 call_expression]: #67
[#368 decimal_float_literal]: #78
[#368 decimal_int_literal]: #76
[#368 expression]: #411
[#368 float_literal]: #72
[#368 hex_float_literal]: #79
[#368 hex_int_literal]: #77
[#368 ident]: #70
[#368 ident_pattern_token]: #75
[#368 int_literal]: #71
[#368 literal]: #68
[#368 multiplicative_expression]: #58
[#368 paren_expression]: #69
[#368 primary_expression]: #65
[#368 relational_expression]: #48
[#368 shift_expression]: #52
[#368 short_circuit_and_expression]: #50
[#368 short_circuit_or_expression]: #49
[#368 singular_expression]: #59
[#368 template_elaborated_ident]: #66
[#368 unary_expression]: #57
[#369 else_if_clause]: #409
[#369 if_statement/0.2]: #407
[#369 if_statement/0.2/0]: #408
[#370 additive_expression]: #56
[#370 binary_and_expression]: #53
[#370 binary_or_expression]: #54
[#370 binary_xor_expression]: #55
[#370 bitwise_expression]: #51
[#370 bool_literal]: #73
[#370 call_expression]: #67
[#370 decimal_float_literal]: #78
[#370 decimal_int_literal]: #76
[#370 expression]: #406
[#370 float_literal]: #72
[#370 hex_float_literal]: #79
[#370 hex_int_literal]: #77
[#370 ident]: #70
[#370 ident_pattern_token]: #75
[#370 int_literal]: #71
[#370 literal]: #68
[#370 multiplicative_expression]: #58
[#370 paren_expression]: #69
[#370 primary_expression]: #65
[#370 relational_expression]: #48
[#370 shift_expression]: #52
[#370 short_circuit_and_expression]: #50
[#370 short_circuit_or_expression]: #49
[#370 singular_expression]: #59
[#370 template_elaborated_ident]: #66
[#370 unary_expression]: #57
[#385 param_list/0.2]: #403
[#387 param_list/0.1/0]: #402
[#387 param_list/0.1/0/0.0]: #387
[#388 attribute]: #254
[#388 param]: #401
[#388 param/0.0]: #252
[#388 param/0.0/0]: #253
[#389 function_header/0.5]: #399
[#394 ident]: #228
[#394 ident_pattern_token]: #75
[#394 type_specifier]: #397
[#400 attribute]: #454
[#400 function_header/0.5/0.1]: #452
[#400 function_header/0.5/0.1/0]: #453
[#405 ident]: #228
[#405 ident_pattern_token]: #75
[#405 type_specifier]: #451
[#406 attribute]: #139
[#406 compound_statement]: #450
[#406 compound_statement/0.0]: #137
[#406 compound_statement/0.0/0]: #138
[#407 else_clause]: #448
[#407 if_statement/0.3]: #447
[#409 else_if_clause]: #409
[#409 if_statement/0.2/0]: #446
[#411 attribute]: #444
[#411 switch_body]: #441
[#411 switch_body/0.0]: #442
[#411 switch_body/0.0/0]: #443
[#414 attribute]: #414
[#414 loop_statement/0.2/0]: #439
[#415 assignment_statement]: #285
[#415 core_lhs_expression]: #297
[#415 decrement_statement]: #287
[#415 for_header]: #433
[#415 for_header/0.0]: #434
[#415 for_init]: #435
[#415 func_call_statement]: #438
[#415 ident]: #293
[#415 ident_pattern_token]: #75
[#415 increment_statement]: #286
[#415 lhs_expression]: #294
[#415 template_elaborated_ident]: #279
[#415 variable_decl]: #280
[#415 variable_statement]: #436
[#415 variable_updating_statement]: #437
[#416 attribute]: #139
[#416 compound_statement]: #432
[#416 compound_statement/0.0]: #137
[#416 compound_statement/0.0/0]: #138
[#418 additive_expression]: #56
[#418 binary_and_expression]: #53
[#418 binary_or_expression]: #54
[#418 binary_xor_expression]: #55
[#418 bitwise_expression]: #51
[#418 bool_literal]: #73
[#418 call_expression]: #67
[#418 decimal_float_literal]: #78
[#418 decimal_int_literal]: #76
[#418 expression]: #431
[#418 float_literal]: #72
[#418 hex_float_literal]: #79
[#418 hex_int_literal]: #77
[#418 ident]: #70
[#418 ident_pattern_token]: #75
[#418 int_literal]: #71
[#418 literal]: #68
[#418 multiplicative_expression]: #58
[#418 paren_expression]: #69
[#418 primary_expression]: #65
[#418 relational_expression]: #48
[#418 shift_expression]: #52
[#418 short_circuit_and_expression]: #50
[#418 short_circuit_or_expression]: #49
[#418 singular_expression]: #59
[#418 template_elaborated_ident]: #66
[#418 unary_expression]: #57
[#419 additive_expression]: #56
[#419 binary_and_expression]: #53
[#419 binary_or_expression]: #54
[#419 binary_xor_expression]: #55
[#419 bitwise_expression]: #51
[#419 bool_literal]: #73
[#419 call_expression]: #67
[#419 decimal_float_literal]: #78
[#419 decimal_int_literal]: #76
[#419 expression]: #430
[#419 float_literal]: #72
[#419 hex_float_literal]: #79
[#419 hex_int_literal]: #77
[#419 ident]: #70
[#419 ident_pattern_token]: #75
[#419 int_literal]: #71
[#419 literal]: #68
[#419 multiplicative_expression]: #58
[#419 paren_expression]: #69
[#419 primary_expression]: #65
[#419 relational_expression]: #48
[#419 shift_expression]: #52
[#419 short_circuit_and_expression]: #50
[#419 short_circuit_or_expression]: #49
[#419 singular_expression]: #59
[#419 template_elaborated_ident]: #66
[#419 unary_expression]: #57
[#440 assignment_statement]: #285
[#440 attribute]: #296
[#440 break_statement]: #267
[#440 compound_statement]: #271
[#440 compound_statement/0.0]: #137
[#440 compound_statement/0.0/0]: #138
[#440 const_assert_statement]: #272
[#440 continue_statement]: #268
[#440 core_lhs_expression]: #297
[#440 decrement_statement]: #287
[#440 for_statement]: #263
[#440 for_statement/0.0]: #277
[#440 for_statement/0.0/0]: #291
[#440 func_call_statement]: #265
[#440 ident]: #293
[#440 ident_pattern_token]: #75
[#440 if_statement]: #260
[#440 if_statement/0.0]: #274
[#440 if_statement/0.0/0]: #288
[#440 increment_statement]: #286
[#440 lhs_expression]: #294
[#440 loop_statement]: #262
[#440 loop_statement/0.0]: #276
[#440 loop_statement/0.0/0]: #290
[#440 loop_statement/0.4]: #461
[#440 loop_statement/0.4/0]: #462
[#440 return_statement]: #259
[#440 statement]: #463
[#440 switch_statement]: #261
[#440 switch_statement/0.0]: #275
[#440 switch_statement/0.0/0]: #289
[#440 template_elaborated_ident]: #279
[#440 variable_decl]: #280
[#440 variable_statement]: #266
[#440 variable_updating_statement]: #270
[#440 while_statement]: #264
[#440 while_statement/0.0]: #278
[#440 while_statement/0.0/0]: #292
[#444 attribute]: #444
[#444 switch_body/0.0/0]: #459
[#445 additive_expression]: #56
[#445 binary_and_expression]: #53
[#445 binary_or_expression]: #54
[#445 binary_xor_expression]: #55
[#445 bitwise_expression]: #51
[#445 bool_literal]: #73
[#445 call_expression]: #67
[#445 decimal_float_literal]: #78
[#445 decimal_int_literal]: #76
[#445 expression]: #458
[#445 float_literal]: #72
[#445 hex_float_literal]: #79
[#445 hex_int_literal]: #77
[#445 ident]: #70
[#445 ident_pattern_token]: #75
[#445 int_literal]: #71
[#445 literal]: #68
[#445 multiplicative_expression]: #58
[#445 paren_expression]: #69
[#445 primary_expression]: #65
[#445 relational_expression]: #48
[#445 shift_expression]: #52
[#445 short_circuit_and_expression]: #50
[#445 short_circuit_or_expression]: #49
[#445 singular_expression]: #59
[#445 template_elaborated_ident]: #66
[#445 unary_expression]: #57
[#449 attribute]: #139
[#449 compound_statement]: #457
[#449 compound_statement/0.0]: #137
[#449 compound_statement/0.0/0]: #138
[#452 ident]: #70
[#452 ident_pattern_token]: #75
[#452 template_elaborated_ident]: #456
[#454 attribute]: #454
[#454 function_header/0.5/0.1/0]: #455
[#458 attribute]: #139
[#458 compound_statement]: #480
[#458 compound_statement/0.0]: #137
[#458 compound_statement/0.0/0]: #138
[#460 case_clause]: #476
[#460 default_alone_clause]: #477
[#460 switch_body/0.2]: #473
[#460 switch_body/0.2/0]: #474
[#460 switch_clause]: #475
[#461 continuing_statement]: #471
[#461 loop_statement/0.5]: #470
[#463 assignment_statement]: #285
[#463 attribute]: #296
[#463 break_statement]: #267
[#463 compound_statement]: #271
[#463 compound_statement/0.0]: #137
[#463 compound_statement/0.0/0]: #138
[#463 const_assert_statement]: #272
[#463 continue_statement]: #268
[#463 core_lhs_expression]: #297
[#463 decrement_statement]: #287
[#463 for_statement]: #263
[#463 for_statement/0.0]: #277
[#463 for_statement/0.0/0]: #291
[#463 func_call_statement]: #265
[#463 ident]: #293
[#463 ident_pattern_token]: #75
[#463 if_statement]: #260
[#463 if_statement/0.0]: #274
[#463 if_statement/0.0/0]: #288
[#463 increment_statement]: #286
[#463 lhs_expression]: #294
[#463 loop_statement]: #262
[#463 loop_statement/0.0]: #276
[#463 loop_statement/0.0/0]: #290
[#463 loop_statement/0.4/0]: #469
[#463 return_statement]: #259
[#463 statement]: #463
[#463 switch_statement]: #261
[#463 switch_statement/0.0]: #275
[#463 switch_statement/0.0/0]: #289
[#463 template_elaborated_ident]: #279
[#463 variable_decl]: #280
[#463 variable_statement]: #266
[#463 variable_updating_statement]: #270
[#463 while_statement]: #264
[#463 while_statement/0.0]: #278
[#463 while_statement/0.0/0]: #292
[#464 additive_expression]: #56
[#464 binary_and_expression]: #53
[#464 binary_or_expression]: #54
[#464 binary_xor_expression]: #55
[#464 bitwise_expression]: #51
[#464 bool_literal]: #73
[#464 call_expression]: #67
[#464 decimal_float_literal]: #78
[#464 decimal_int_literal]: #76
[#464 expression]: #468
[#464 float_literal]: #72
[#464 for_header/0.2]: #467
[#464 hex_float_literal]: #79
[#464 hex_int_literal]: #77
[#464 ident]: #70
[#464 ident_pattern_token]: #75
[#464 int_literal]: #71
[#464 literal]: #68
[#464 multiplicative_expression]: #58
[#464 paren_expression]: #69
[#464 primary_expression]: #65
[#464 relational_expression]: #48
[#464 shift_expression]: #52
[#464 short_circuit_and_expression]: #50
[#464 short_circuit_or_expression]: #49
[#464 singular_expression]: #59
[#464 template_elaborated_ident]: #66
[#464 unary_expression]: #57
[#465 attribute]: #139
[#465 compound_statement]: #466
[#465 compound_statement/0.0]: #137
[#465 compound_statement/0.0/0]: #138
[#472 attribute]: #492
[#472 continuing_compound_statement]: #489
[#472 continuing_compound_statement/0.0]: #490
[#472 continuing_compound_statement/0.0/0]: #491
[#475 case_clause]: #476
[#475 default_alone_clause]: #477
[#475 switch_body/0.2/0]: #487
[#475 switch_clause]: #475
[#478 additive_expression]: #56
[#478 binary_and_expression]: #53
[#478 binary_or_expression]: #54
[#478 binary_xor_expression]: #55
[#478 bitwise_expression]: #51
[#478 bool_literal]: #73
[#478 call_expression]: #67
[#478 case_selector]: #484
[#478 case_selectors]: #483
[#478 decimal_float_literal]: #78
[#478 decimal_int_literal]: #76
[#478 expression]: #486
[#478 float_literal]: #72
[#478 hex_float_literal]: #79
[#478 hex_int_literal]: #77
[#478 ident]: #70
[#478 ident_pattern_token]: #75
[#478 int_literal]: #71
[#478 literal]: #68
[#478 multiplicative_expression]: #58
[#478 paren_expression]: #69
[#478 primary_expression]: #65
[#478 relational_expression]: #48
[#478 shift_expression]: #52
[#478 short_circuit_and_expression]: #50
[#478 short_circuit_or_expression]: #49
[#478 singular_expression]: #59
[#478 template_elaborated_ident]: #66
[#478 unary_expression]: #57
[#479 default_alone_clause/0.1]: #481
[#481 attribute]: #139
[#481 compound_statement]: #507
[#481 compound_statement/0.0]: #137
[#481 compound_statement/0.0/0]: #138
[#483 case_clause/0.2]: #505
[#484 case_selectors/0.1]: #501
[#484 case_selectors/0.1/0]: #502
[#484 case_selectors/0.1/0/0.0]: #503
[#492 attribute]: #492
[#492 continuing_compound_statement/0.0/0]: #499
[#494 assignment_statement]: #285
[#494 core_lhs_expression]: #297
[#494 decrement_statement]: #287
[#494 for_header/0.4]: #495
[#494 for_update]: #496
[#494 func_call_statement]: #498
[#494 ident]: #293
[#494 ident_pattern_token]: #75
[#494 increment_statement]: #286
[#494 lhs_expression]: #294
[#494 template_elaborated_ident]: #279
[#494 variable_updating_statement]: #497
[#500 assignment_statement]: #285
[#500 attribute]: #296
[#500 break_statement]: #267
[#500 compound_statement]: #271
[#500 compound_statement/0.0]: #137
[#500 compound_statement/0.0/0]: #138
[#500 const_assert_statement]: #272
[#500 continue_statement]: #268
[#500 continuing_compound_statement/0.2]: #513
[#500 continuing_compound_statement/0.2/0]: #514
[#500 core_lhs_expression]: #297
[#500 decrement_statement]: #287
[#500 for_statement]: #263
[#500 for_statement/0.0]: #277
[#500 for_statement/0.0/0]: #291
[#500 func_call_statement]: #265
[#500 ident]: #293
[#500 ident_pattern_token]: #75
[#500 if_statement]: #260
[#500 if_statement/0.0]: #274
[#500 if_statement/0.0/0]: #288
[#500 increment_statement]: #286
[#500 lhs_expression]: #294
[#500 loop_statement]: #262
[#500 loop_statement/0.0]: #276
[#500 loop_statement/0.0/0]: #290
[#500 return_statement]: #259
[#500 statement]: #515
[#500 switch_statement]: #261
[#500 switch_statement/0.0]: #275
[#500 switch_statement/0.0/0]: #289
[#500 template_elaborated_ident]: #279
[#500 variable_decl]: #280
[#500 variable_statement]: #266
[#500 variable_updating_statement]: #270
[#500 while_statement]: #264
[#500 while_statement/0.0]: #278
[#500 while_statement/0.0/0]: #292
[#501 case_selectors/0.2]: #511
[#503 case_selectors/0.1/0]: #510
[#503 case_selectors/0.1/0/0.0]: #503
[#504 additive_expression]: #56
[#504 binary_and_expression]: #53
[#504 binary_or_expression]: #54
[#504 binary_xor_expression]: #55
[#504 bitwise_expression]: #51
[#504 bool_literal]: #73
[#504 call_expression]: #67
[#504 case_selector]: #509
[#504 decimal_float_literal]: #78
[#504 decimal_int_literal]: #76
[#504 expression]: #486
[#504 float_literal]: #72
[#504 hex_float_literal]: #79
[#504 hex_int_literal]: #77
[#504 ident]: #70
[#504 ident_pattern_token]: #75
[#504 int_literal]: #71
[#504 literal]: #68
[#504 multiplicative_expression]: #58
[#504 paren_expression]: #69
[#504 primary_expression]: #65
[#504 relational_expression]: #48
[#504 shift_expression]: #52
[#504 short_circuit_and_expression]: #50
[#504 short_circuit_or_expression]: #49
[#504 singular_expression]: #59
[#504 template_elaborated_ident]: #66
[#504 unary_expression]: #57
[#505 attribute]: #139
[#505 compound_statement]: #508
[#505 compound_statement/0.0]: #137
[#505 compound_statement/0.0/0]: #138
[#513 break_if_statement]: #518
[#513 continuing_compound_statement/0.3]: #517
[#515 assignment_statement]: #285
[#515 attribute]: #296
[#515 break_statement]: #267
[#515 compound_statement]: #271
[#515 compound_statement/0.0]: #137
[#515 compound_statement/0.0/0]: #138
[#515 const_assert_statement]: #272
[#515 continue_statement]: #268
[#515 continuing_compound_statement/0.2/0]: #516
[#515 core_lhs_expression]: #297
[#515 decrement_statement]: #287
[#515 for_statement]: #263
[#515 for_statement/0.0]: #277
[#515 for_statement/0.0/0]: #291
[#515 func_call_statement]: #265
[#515 ident]: #293
[#515 ident_pattern_token]: #75
[#515 if_statement]: #260
[#515 if_statement/0.0]: #274
[#515 if_statement/0.0/0]: #288
[#515 increment_statement]: #286
[#515 lhs_expression]: #294
[#515 loop_statement]: #262
[#515 loop_statement/0.0]: #276
[#515 loop_statement/0.0/0]: #290
[#515 return_statement]: #259
[#515 statement]: #515
[#515 switch_statement]: #261
[#515 switch_statement/0.0]: #275
[#515 switch_statement/0.0/0]: #289
[#515 template_elaborated_ident]: #279
[#515 variable_decl]: #280
[#515 variable_statement]: #266
[#515 variable_updating_statement]: #270
[#515 while_statement]: #264
[#515 while_statement/0.0]: #278
[#515 while_statement/0.0/0]: #292
[#520 additive_expression]: #56
[#520 binary_and_expression]: #53
[#520 binary_or_expression]: #54
[#520 binary_xor_expression]: #55
[#520 bitwise_expression]: #51
[#520 bool_literal]: #73
[#520 call_expression]: #67
[#520 decimal_float_literal]: #78
[#520 decimal_int_literal]: #76
[#520 expression]: #522
[#520 float_literal]: #72
[#520 hex_float_literal]: #79
[#520 hex_int_literal]: #77
[#520 ident]: #70
[#520 ident_pattern_token]: #75
[#520 int_literal]: #71
[#520 literal]: #68
[#520 multiplicative_expression]: #58
[#520 paren_expression]: #69
[#520 primary_expression]: #65
[#520 relational_expression]: #48
[#520 shift_expression]: #52
[#520 short_circuit_and_expression]: #50
[#520 short_circuit_or_expression]: #49
[#520 singular_expression]: #59
[#520 template_elaborated_ident]: #66
[#520 unary_expression]: #57
